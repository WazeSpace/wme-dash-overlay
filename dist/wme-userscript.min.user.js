!function(){"use strict";var hasRequiredReactJsxRuntime_production,jsxRuntime={exports:{}},reactJsxRuntime_production={};var hasRequiredReact_production,hasRequiredReact,hasRequiredJsxRuntime,react={exports:{}},react_production={};function requireReact_production(){if(hasRequiredReact_production)return react_production;hasRequiredReact_production=1;var REACT_ELEMENT_TYPE=Symbol.for("react.transitional.element"),REACT_PORTAL_TYPE=Symbol.for("react.portal"),REACT_FRAGMENT_TYPE=Symbol.for("react.fragment"),REACT_STRICT_MODE_TYPE=Symbol.for("react.strict_mode"),REACT_PROFILER_TYPE=Symbol.for("react.profiler"),REACT_CONSUMER_TYPE=Symbol.for("react.consumer"),REACT_CONTEXT_TYPE=Symbol.for("react.context"),REACT_FORWARD_REF_TYPE=Symbol.for("react.forward_ref"),REACT_SUSPENSE_TYPE=Symbol.for("react.suspense"),REACT_MEMO_TYPE=Symbol.for("react.memo"),REACT_LAZY_TYPE=Symbol.for("react.lazy"),MAYBE_ITERATOR_SYMBOL=Symbol.iterator;var ReactNoopUpdateQueue={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},assign=Object.assign,emptyObject={};function Component(props,context,updater){this.props=props,this.context=context,this.refs=emptyObject,this.updater=updater||ReactNoopUpdateQueue}function ComponentDummy(){}function PureComponent(props,context,updater){this.props=props,this.context=context,this.refs=emptyObject,this.updater=updater||ReactNoopUpdateQueue}Component.prototype.isReactComponent={},Component.prototype.setState=function(partialState,callback){if("object"!=typeof partialState&&"function"!=typeof partialState&&null!=partialState)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,partialState,callback,"setState")},Component.prototype.forceUpdate=function(callback){this.updater.enqueueForceUpdate(this,callback,"forceUpdate")},ComponentDummy.prototype=Component.prototype;var pureComponentPrototype=PureComponent.prototype=new ComponentDummy;pureComponentPrototype.constructor=PureComponent,assign(pureComponentPrototype,Component.prototype),pureComponentPrototype.isPureReactComponent=!0;var isArrayImpl=Array.isArray,ReactSharedInternals={H:null,A:null,T:null,S:null},hasOwnProperty=Object.prototype.hasOwnProperty;function ReactElement(type,key,self,source,owner,props){return self=props.ref,{$$typeof:REACT_ELEMENT_TYPE,type:type,key:key,ref:void 0!==self?self:null,props:props}}function isValidElement(object){return"object"==typeof object&&null!==object&&object.$$typeof===REACT_ELEMENT_TYPE}var userProvidedKeyEscapeRegex=/\/+/g;function getElementKey(element,index){return"object"==typeof element&&null!==element&&null!=element.key?(key=""+element.key,escaperLookup={"=":"=0",":":"=2"},"$"+key.replace(/[=:]/g,(function(match){return escaperLookup[match]}))):index.toString(36);var key,escaperLookup}function noop$1(){}function mapIntoArray(children,array,escapedPrefix,nameSoFar,callback){var type=typeof children;"undefined"!==type&&"boolean"!==type||(children=null);var oldElement,newKey,invokeCallback=!1;if(null===children)invokeCallback=!0;else switch(type){case"bigint":case"string":case"number":invokeCallback=!0;break;case"object":switch(children.$$typeof){case REACT_ELEMENT_TYPE:case REACT_PORTAL_TYPE:invokeCallback=!0;break;case REACT_LAZY_TYPE:return mapIntoArray((invokeCallback=children._init)(children._payload),array,escapedPrefix,nameSoFar,callback)}}if(invokeCallback)return callback=callback(children),invokeCallback=""===nameSoFar?"."+getElementKey(children,0):nameSoFar,isArrayImpl(callback)?(escapedPrefix="",null!=invokeCallback&&(escapedPrefix=invokeCallback.replace(userProvidedKeyEscapeRegex,"$&/")+"/"),mapIntoArray(callback,array,escapedPrefix,"",(function(c){return c}))):null!=callback&&(isValidElement(callback)&&(oldElement=callback,newKey=escapedPrefix+(null==callback.key||children&&children.key===callback.key?"":(""+callback.key).replace(userProvidedKeyEscapeRegex,"$&/")+"/")+invokeCallback,callback=ReactElement(oldElement.type,newKey,void 0,0,0,oldElement.props)),array.push(callback)),1;invokeCallback=0;var maybeIterable,nextNamePrefix=""===nameSoFar?".":nameSoFar+":";if(isArrayImpl(children))for(var i=0;i<children.length;i++)invokeCallback+=mapIntoArray(nameSoFar=children[i],array,escapedPrefix,type=nextNamePrefix+getElementKey(nameSoFar,i),callback);else if("function"==typeof(i=null===(maybeIterable=children)||"object"!=typeof maybeIterable?null:"function"==typeof(maybeIterable=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable["@@iterator"])?maybeIterable:null))for(children=i.call(children),i=0;!(nameSoFar=children.next()).done;)invokeCallback+=mapIntoArray(nameSoFar=nameSoFar.value,array,escapedPrefix,type=nextNamePrefix+getElementKey(nameSoFar,i++),callback);else if("object"===type){if("function"==typeof children.then)return mapIntoArray(function(thenable){switch(thenable.status){case"fulfilled":return thenable.value;case"rejected":throw thenable.reason;default:switch("string"==typeof thenable.status?thenable.then(noop$1,noop$1):(thenable.status="pending",thenable.then((function(fulfilledValue){"pending"===thenable.status&&(thenable.status="fulfilled",thenable.value=fulfilledValue)}),(function(error){"pending"===thenable.status&&(thenable.status="rejected",thenable.reason=error)}))),thenable.status){case"fulfilled":return thenable.value;case"rejected":throw thenable.reason}}throw thenable}(children),array,escapedPrefix,nameSoFar,callback);throw array=String(children),Error("Objects are not valid as a React child (found: "+("[object Object]"===array?"object with keys {"+Object.keys(children).join(", ")+"}":array)+"). If you meant to render a collection of children, use an array instead.")}return invokeCallback}function mapChildren(children,func,context){if(null==children)return children;var result=[],count=0;return mapIntoArray(children,result,"","",(function(child){return func.call(context,child,count++)})),result}function lazyInitializer(payload){if(-1===payload._status){var ctor=payload._result;(ctor=ctor()).then((function(moduleObject){0!==payload._status&&-1!==payload._status||(payload._status=1,payload._result=moduleObject)}),(function(error){0!==payload._status&&-1!==payload._status||(payload._status=2,payload._result=error)})),-1===payload._status&&(payload._status=0,payload._result=ctor)}if(1===payload._status)return payload._result.default;throw payload._result}var reportGlobalError="function"==typeof reportError?reportError:function(error){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var event=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof error&&null!==error&&"string"==typeof error.message?String(error.message):String(error),error:error});if(!window.dispatchEvent(event))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",error);console.error(error)};function noop(){}return react_production.Children={map:mapChildren,forEach:function(children,forEachFunc,forEachContext){mapChildren(children,(function(){forEachFunc.apply(this,arguments)}),forEachContext)},count:function(children){var n=0;return mapChildren(children,(function(){n++})),n},toArray:function(children){return mapChildren(children,(function(child){return child}))||[]},only:function(children){if(!isValidElement(children))throw Error("React.Children.only expected to receive a single React element child.");return children}},react_production.Component=Component,react_production.Fragment=REACT_FRAGMENT_TYPE,react_production.Profiler=REACT_PROFILER_TYPE,react_production.PureComponent=PureComponent,react_production.StrictMode=REACT_STRICT_MODE_TYPE,react_production.Suspense=REACT_SUSPENSE_TYPE,react_production.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=ReactSharedInternals,react_production.act=function(){throw Error("act(...) is not supported in production builds of React.")},react_production.cache=function(fn){return function(){return fn.apply(null,arguments)}},react_production.cloneElement=function(element,config,children){if(null==element)throw Error("The argument must be a React element, but you passed "+element+".");var props=assign({},element.props),key=element.key;if(null!=config)for(propName in void 0!==config.ref&&void 0,void 0!==config.key&&(key=""+config.key),config)!hasOwnProperty.call(config,propName)||"key"===propName||"__self"===propName||"__source"===propName||"ref"===propName&&void 0===config.ref||(props[propName]=config[propName]);var propName=arguments.length-2;if(1===propName)props.children=children;else if(1<propName){for(var childArray=Array(propName),i=0;i<propName;i++)childArray[i]=arguments[i+2];props.children=childArray}return ReactElement(element.type,key,void 0,0,0,props)},react_production.createContext=function(defaultValue){return(defaultValue={$$typeof:REACT_CONTEXT_TYPE,_currentValue:defaultValue,_currentValue2:defaultValue,_threadCount:0,Provider:null,Consumer:null}).Provider=defaultValue,defaultValue.Consumer={$$typeof:REACT_CONSUMER_TYPE,_context:defaultValue},defaultValue},react_production.createElement=function(type,config,children){var propName,props={},key=null;if(null!=config)for(propName in void 0!==config.key&&(key=""+config.key),config)hasOwnProperty.call(config,propName)&&"key"!==propName&&"__self"!==propName&&"__source"!==propName&&(props[propName]=config[propName]);var childrenLength=arguments.length-2;if(1===childrenLength)props.children=children;else if(1<childrenLength){for(var childArray=Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+2];props.children=childArray}if(type&&type.defaultProps)for(propName in childrenLength=type.defaultProps)void 0===props[propName]&&(props[propName]=childrenLength[propName]);return ReactElement(type,key,void 0,0,0,props)},react_production.createRef=function(){return{current:null}},react_production.forwardRef=function(render){return{$$typeof:REACT_FORWARD_REF_TYPE,render:render}},react_production.isValidElement=isValidElement,react_production.lazy=function(ctor){return{$$typeof:REACT_LAZY_TYPE,_payload:{_status:-1,_result:ctor},_init:lazyInitializer}},react_production.memo=function(type,compare){return{$$typeof:REACT_MEMO_TYPE,type:type,compare:void 0===compare?null:compare}},react_production.startTransition=function(scope){var prevTransition=ReactSharedInternals.T,currentTransition={};ReactSharedInternals.T=currentTransition;try{var returnValue=scope(),onStartTransitionFinish=ReactSharedInternals.S;null!==onStartTransitionFinish&&onStartTransitionFinish(currentTransition,returnValue),"object"==typeof returnValue&&null!==returnValue&&"function"==typeof returnValue.then&&returnValue.then(noop,reportGlobalError)}catch(error){reportGlobalError(error)}finally{ReactSharedInternals.T=prevTransition}},react_production.unstable_useCacheRefresh=function(){return ReactSharedInternals.H.useCacheRefresh()},react_production.use=function(usable){return ReactSharedInternals.H.use(usable)},react_production.useActionState=function(action,initialState,permalink){return ReactSharedInternals.H.useActionState(action,initialState,permalink)},react_production.useCallback=function(callback,deps){return ReactSharedInternals.H.useCallback(callback,deps)},react_production.useContext=function(Context){return ReactSharedInternals.H.useContext(Context)},react_production.useDebugValue=function(){},react_production.useDeferredValue=function(value,initialValue){return ReactSharedInternals.H.useDeferredValue(value,initialValue)},react_production.useEffect=function(create,deps){return ReactSharedInternals.H.useEffect(create,deps)},react_production.useId=function(){return ReactSharedInternals.H.useId()},react_production.useImperativeHandle=function(ref,create,deps){return ReactSharedInternals.H.useImperativeHandle(ref,create,deps)},react_production.useInsertionEffect=function(create,deps){return ReactSharedInternals.H.useInsertionEffect(create,deps)},react_production.useLayoutEffect=function(create,deps){return ReactSharedInternals.H.useLayoutEffect(create,deps)},react_production.useMemo=function(create,deps){return ReactSharedInternals.H.useMemo(create,deps)},react_production.useOptimistic=function(passthrough,reducer){return ReactSharedInternals.H.useOptimistic(passthrough,reducer)},react_production.useReducer=function(reducer,initialArg,init){return ReactSharedInternals.H.useReducer(reducer,initialArg,init)},react_production.useRef=function(initialValue){return ReactSharedInternals.H.useRef(initialValue)},react_production.useState=function(initialState){return ReactSharedInternals.H.useState(initialState)},react_production.useSyncExternalStore=function(subscribe,getSnapshot,getServerSnapshot){return ReactSharedInternals.H.useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot)},react_production.useTransition=function(){return ReactSharedInternals.H.useTransition()},react_production.version="19.0.0",react_production}function requireReact(){return hasRequiredReact||(hasRequiredReact=1,react.exports=requireReact_production()),react.exports}var hasRequiredScheduler_production,hasRequiredScheduler,jsxRuntimeExports=(hasRequiredJsxRuntime||(hasRequiredJsxRuntime=1,jsxRuntime.exports=function(){if(hasRequiredReactJsxRuntime_production)return reactJsxRuntime_production;hasRequiredReactJsxRuntime_production=1;var REACT_ELEMENT_TYPE=Symbol.for("react.transitional.element"),REACT_FRAGMENT_TYPE=Symbol.for("react.fragment");function jsxProd(type,config,maybeKey){var key=null;if(void 0!==maybeKey&&(key=""+maybeKey),void 0!==config.key&&(key=""+config.key),"key"in config)for(var propName in maybeKey={},config)"key"!==propName&&(maybeKey[propName]=config[propName]);else maybeKey=config;return config=maybeKey.ref,{$$typeof:REACT_ELEMENT_TYPE,type:type,key:key,ref:void 0!==config?config:null,props:maybeKey}}return reactJsxRuntime_production.Fragment=REACT_FRAGMENT_TYPE,reactJsxRuntime_production.jsx=jsxProd,reactJsxRuntime_production.jsxs=jsxProd,reactJsxRuntime_production}()),jsxRuntime.exports),client={exports:{}},reactDomClient_production={},scheduler={exports:{}},scheduler_production={};function requireScheduler(){return hasRequiredScheduler||(hasRequiredScheduler=1,scheduler.exports=(hasRequiredScheduler_production||(hasRequiredScheduler_production=1,function(exports){function push(heap,node){var index=heap.length;heap.push(node);a:for(;0<index;){var parentIndex=index-1>>>1,parent=heap[parentIndex];if(!(0<compare(parent,node)))break a;heap[parentIndex]=node,heap[index]=parent,index=parentIndex}}function peek(heap){return 0===heap.length?null:heap[0]}function pop(heap){if(0===heap.length)return null;var first=heap[0],last=heap.pop();if(last!==first){heap[0]=last;a:for(var index=0,length=heap.length,halfLength=length>>>1;index<halfLength;){var leftIndex=2*(index+1)-1,left=heap[leftIndex],rightIndex=leftIndex+1,right=heap[rightIndex];if(0>compare(left,last))rightIndex<length&&0>compare(right,left)?(heap[index]=right,heap[rightIndex]=last,index=rightIndex):(heap[index]=left,heap[leftIndex]=last,index=leftIndex);else{if(!(rightIndex<length&&0>compare(right,last)))break a;heap[index]=right,heap[rightIndex]=last,index=rightIndex}}}return first}function compare(a,b){var diff=a.sortIndex-b.sortIndex;return 0!==diff?diff:a.id-b.id}if(exports.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var localPerformance=performance;exports.unstable_now=function(){return localPerformance.now()}}else{var localDate=Date,initialTime=localDate.now();exports.unstable_now=function(){return localDate.now()-initialTime}}var taskQueue=[],timerQueue=[],taskIdCounter=1,currentTask=null,currentPriorityLevel=3,isPerformingWork=!1,isHostCallbackScheduled=!1,isHostTimeoutScheduled=!1,localSetTimeout="function"==typeof setTimeout?setTimeout:null,localClearTimeout="function"==typeof clearTimeout?clearTimeout:null,localSetImmediate="undefined"!=typeof setImmediate?setImmediate:null;function advanceTimers(currentTime){for(var timer=peek(timerQueue);null!==timer;){if(null===timer.callback)pop(timerQueue);else{if(!(timer.startTime<=currentTime))break;pop(timerQueue),timer.sortIndex=timer.expirationTime,push(taskQueue,timer)}timer=peek(timerQueue)}}function handleTimeout(currentTime){if(isHostTimeoutScheduled=!1,advanceTimers(currentTime),!isHostCallbackScheduled)if(null!==peek(taskQueue))isHostCallbackScheduled=!0,requestHostCallback();else{var firstTimer=peek(timerQueue);null!==firstTimer&&requestHostTimeout(handleTimeout,firstTimer.startTime-currentTime)}}var schedulePerformWorkUntilDeadline,isMessageLoopRunning=!1,taskTimeoutID=-1,frameInterval=5,startTime=-1;function shouldYieldToHost(){return!(exports.unstable_now()-startTime<frameInterval)}function performWorkUntilDeadline(){if(isMessageLoopRunning){var currentTime=exports.unstable_now();startTime=currentTime;var hasMoreWork=!0;try{a:{isHostCallbackScheduled=!1,isHostTimeoutScheduled&&(isHostTimeoutScheduled=!1,localClearTimeout(taskTimeoutID),taskTimeoutID=-1),isPerformingWork=!0;var previousPriorityLevel=currentPriorityLevel;try{b:{for(advanceTimers(currentTime),currentTask=peek(taskQueue);null!==currentTask&&!(currentTask.expirationTime>currentTime&&shouldYieldToHost());){var callback=currentTask.callback;if("function"==typeof callback){currentTask.callback=null,currentPriorityLevel=currentTask.priorityLevel;var continuationCallback=callback(currentTask.expirationTime<=currentTime);if(currentTime=exports.unstable_now(),"function"==typeof continuationCallback){currentTask.callback=continuationCallback,advanceTimers(currentTime),hasMoreWork=!0;break b}currentTask===peek(taskQueue)&&pop(taskQueue),advanceTimers(currentTime)}else pop(taskQueue);currentTask=peek(taskQueue)}if(null!==currentTask)hasMoreWork=!0;else{var firstTimer=peek(timerQueue);null!==firstTimer&&requestHostTimeout(handleTimeout,firstTimer.startTime-currentTime),hasMoreWork=!1}}break a}finally{currentTask=null,currentPriorityLevel=previousPriorityLevel,isPerformingWork=!1}hasMoreWork=void 0}}finally{hasMoreWork?schedulePerformWorkUntilDeadline():isMessageLoopRunning=!1}}}if("function"==typeof localSetImmediate)schedulePerformWorkUntilDeadline=function(){localSetImmediate(performWorkUntilDeadline)};else if("undefined"!=typeof MessageChannel){var channel=new MessageChannel,port=channel.port2;channel.port1.onmessage=performWorkUntilDeadline,schedulePerformWorkUntilDeadline=function(){port.postMessage(null)}}else schedulePerformWorkUntilDeadline=function(){localSetTimeout(performWorkUntilDeadline,0)};function requestHostCallback(){isMessageLoopRunning||(isMessageLoopRunning=!0,schedulePerformWorkUntilDeadline())}function requestHostTimeout(callback,ms){taskTimeoutID=localSetTimeout((function(){callback(exports.unstable_now())}),ms)}exports.unstable_IdlePriority=5,exports.unstable_ImmediatePriority=1,exports.unstable_LowPriority=4,exports.unstable_NormalPriority=3,exports.unstable_Profiling=null,exports.unstable_UserBlockingPriority=2,exports.unstable_cancelCallback=function(task){task.callback=null},exports.unstable_continueExecution=function(){isHostCallbackScheduled||isPerformingWork||(isHostCallbackScheduled=!0,requestHostCallback())},exports.unstable_forceFrameRate=function(fps){0>fps||125<fps?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):frameInterval=0<fps?Math.floor(1e3/fps):5},exports.unstable_getCurrentPriorityLevel=function(){return currentPriorityLevel},exports.unstable_getFirstCallbackNode=function(){return peek(taskQueue)},exports.unstable_next=function(eventHandler){switch(currentPriorityLevel){case 1:case 2:case 3:var priorityLevel=3;break;default:priorityLevel=currentPriorityLevel}var previousPriorityLevel=currentPriorityLevel;currentPriorityLevel=priorityLevel;try{return eventHandler()}finally{currentPriorityLevel=previousPriorityLevel}},exports.unstable_pauseExecution=function(){},exports.unstable_requestPaint=function(){},exports.unstable_runWithPriority=function(priorityLevel,eventHandler){switch(priorityLevel){case 1:case 2:case 3:case 4:case 5:break;default:priorityLevel=3}var previousPriorityLevel=currentPriorityLevel;currentPriorityLevel=priorityLevel;try{return eventHandler()}finally{currentPriorityLevel=previousPriorityLevel}},exports.unstable_scheduleCallback=function(priorityLevel,callback,options){var currentTime=exports.unstable_now();switch(options="object"==typeof options&&null!==options&&"number"==typeof(options=options.delay)&&0<options?currentTime+options:currentTime,priorityLevel){case 1:var timeout=-1;break;case 2:timeout=250;break;case 5:timeout=1073741823;break;case 4:timeout=1e4;break;default:timeout=5e3}return priorityLevel={id:taskIdCounter++,callback:callback,priorityLevel:priorityLevel,startTime:options,expirationTime:timeout=options+timeout,sortIndex:-1},options>currentTime?(priorityLevel.sortIndex=options,push(timerQueue,priorityLevel),null===peek(taskQueue)&&priorityLevel===peek(timerQueue)&&(isHostTimeoutScheduled?(localClearTimeout(taskTimeoutID),taskTimeoutID=-1):isHostTimeoutScheduled=!0,requestHostTimeout(handleTimeout,options-currentTime))):(priorityLevel.sortIndex=timeout,push(taskQueue,priorityLevel),isHostCallbackScheduled||isPerformingWork||(isHostCallbackScheduled=!0,requestHostCallback())),priorityLevel},exports.unstable_shouldYield=shouldYieldToHost,exports.unstable_wrapCallback=function(callback){var parentPriorityLevel=currentPriorityLevel;return function(){var previousPriorityLevel=currentPriorityLevel;currentPriorityLevel=parentPriorityLevel;try{return callback.apply(this,arguments)}finally{currentPriorityLevel=previousPriorityLevel}}}}(scheduler_production)),scheduler_production)),scheduler.exports}var hasRequiredReactDom_production,hasRequiredReactDom,hasRequiredReactDomClient_production,hasRequiredClient,reactDom={exports:{}},reactDom_production={};function requireReactDom_production(){if(hasRequiredReactDom_production)return reactDom_production;hasRequiredReactDom_production=1;var React=requireReact();function formatProdErrorMessage(code){var url="https://react.dev/errors/"+code;if(1<arguments.length){url+="?args[]="+encodeURIComponent(arguments[1]);for(var i=2;i<arguments.length;i++)url+="&args[]="+encodeURIComponent(arguments[i])}return"Minified React error #"+code+"; visit "+url+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function noop(){}var Internals={d:{f:noop,r:function(){throw Error(formatProdErrorMessage(522))},D:noop,C:noop,L:noop,m:noop,X:noop,S:noop,M:noop},p:0,findDOMNode:null},REACT_PORTAL_TYPE=Symbol.for("react.portal");var ReactSharedInternals=React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function getCrossOriginStringAs(as,input){return"font"===as?"":"string"==typeof input?"use-credentials"===input?input:"":void 0}return reactDom_production.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=Internals,reactDom_production.createPortal=function(children,container){var key=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!container||1!==container.nodeType&&9!==container.nodeType&&11!==container.nodeType)throw Error(formatProdErrorMessage(299));return function(children,containerInfo,implementation){var key=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:REACT_PORTAL_TYPE,key:null==key?null:""+key,children:children,containerInfo:containerInfo,implementation:implementation}}(children,container,null,key)},reactDom_production.flushSync=function(fn){var previousTransition=ReactSharedInternals.T,previousUpdatePriority=Internals.p;try{if(ReactSharedInternals.T=null,Internals.p=2,fn)return fn()}finally{ReactSharedInternals.T=previousTransition,Internals.p=previousUpdatePriority,Internals.d.f()}},reactDom_production.preconnect=function(href,options){"string"==typeof href&&(options?options="string"==typeof(options=options.crossOrigin)?"use-credentials"===options?options:"":void 0:options=null,Internals.d.C(href,options))},reactDom_production.prefetchDNS=function(href){"string"==typeof href&&Internals.d.D(href)},reactDom_production.preinit=function(href,options){if("string"==typeof href&&options&&"string"==typeof options.as){var as=options.as,crossOrigin=getCrossOriginStringAs(as,options.crossOrigin),integrity="string"==typeof options.integrity?options.integrity:void 0,fetchPriority="string"==typeof options.fetchPriority?options.fetchPriority:void 0;"style"===as?Internals.d.S(href,"string"==typeof options.precedence?options.precedence:void 0,{crossOrigin:crossOrigin,integrity:integrity,fetchPriority:fetchPriority}):"script"===as&&Internals.d.X(href,{crossOrigin:crossOrigin,integrity:integrity,fetchPriority:fetchPriority,nonce:"string"==typeof options.nonce?options.nonce:void 0})}},reactDom_production.preinitModule=function(href,options){if("string"==typeof href)if("object"==typeof options&&null!==options){if(null==options.as||"script"===options.as){var crossOrigin=getCrossOriginStringAs(options.as,options.crossOrigin);Internals.d.M(href,{crossOrigin:crossOrigin,integrity:"string"==typeof options.integrity?options.integrity:void 0,nonce:"string"==typeof options.nonce?options.nonce:void 0})}}else null==options&&Internals.d.M(href)},reactDom_production.preload=function(href,options){if("string"==typeof href&&"object"==typeof options&&null!==options&&"string"==typeof options.as){var as=options.as,crossOrigin=getCrossOriginStringAs(as,options.crossOrigin);Internals.d.L(href,as,{crossOrigin:crossOrigin,integrity:"string"==typeof options.integrity?options.integrity:void 0,nonce:"string"==typeof options.nonce?options.nonce:void 0,type:"string"==typeof options.type?options.type:void 0,fetchPriority:"string"==typeof options.fetchPriority?options.fetchPriority:void 0,referrerPolicy:"string"==typeof options.referrerPolicy?options.referrerPolicy:void 0,imageSrcSet:"string"==typeof options.imageSrcSet?options.imageSrcSet:void 0,imageSizes:"string"==typeof options.imageSizes?options.imageSizes:void 0,media:"string"==typeof options.media?options.media:void 0})}},reactDom_production.preloadModule=function(href,options){if("string"==typeof href)if(options){var crossOrigin=getCrossOriginStringAs(options.as,options.crossOrigin);Internals.d.m(href,{as:"string"==typeof options.as&&"script"!==options.as?options.as:void 0,crossOrigin:crossOrigin,integrity:"string"==typeof options.integrity?options.integrity:void 0})}else Internals.d.m(href)},reactDom_production.requestFormReset=function(form){Internals.d.r(form)},reactDom_production.unstable_batchedUpdates=function(fn,a){return fn(a)},reactDom_production.useFormState=function(action,initialState,permalink){return ReactSharedInternals.H.useFormState(action,initialState,permalink)},reactDom_production.useFormStatus=function(){return ReactSharedInternals.H.useHostTransitionStatus()},reactDom_production.version="19.0.0",reactDom_production}function requireReactDom(){if(hasRequiredReactDom)return reactDom.exports;return hasRequiredReactDom=1,function checkDCE(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)}catch(err){console.error(err)}}(),reactDom.exports=requireReactDom_production(),reactDom.exports}
/**
   * @license React
   * react-dom-client.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */function requireReactDomClient_production(){if(hasRequiredReactDomClient_production)return reactDomClient_production;hasRequiredReactDomClient_production=1;var Scheduler=requireScheduler(),React=requireReact(),ReactDOM=requireReactDom();function formatProdErrorMessage(code){var url="https://react.dev/errors/"+code;if(1<arguments.length){url+="?args[]="+encodeURIComponent(arguments[1]);for(var i=2;i<arguments.length;i++)url+="&args[]="+encodeURIComponent(arguments[i])}return"Minified React error #"+code+"; visit "+url+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function isValidContainer(node){return!(!node||1!==node.nodeType&&9!==node.nodeType&&11!==node.nodeType)}var REACT_LEGACY_ELEMENT_TYPE=Symbol.for("react.element"),REACT_ELEMENT_TYPE=Symbol.for("react.transitional.element"),REACT_PORTAL_TYPE=Symbol.for("react.portal"),REACT_FRAGMENT_TYPE=Symbol.for("react.fragment"),REACT_STRICT_MODE_TYPE=Symbol.for("react.strict_mode"),REACT_PROFILER_TYPE=Symbol.for("react.profiler"),REACT_PROVIDER_TYPE=Symbol.for("react.provider"),REACT_CONSUMER_TYPE=Symbol.for("react.consumer"),REACT_CONTEXT_TYPE=Symbol.for("react.context"),REACT_FORWARD_REF_TYPE=Symbol.for("react.forward_ref"),REACT_SUSPENSE_TYPE=Symbol.for("react.suspense"),REACT_SUSPENSE_LIST_TYPE=Symbol.for("react.suspense_list"),REACT_MEMO_TYPE=Symbol.for("react.memo"),REACT_LAZY_TYPE=Symbol.for("react.lazy"),REACT_OFFSCREEN_TYPE=Symbol.for("react.offscreen"),REACT_MEMO_CACHE_SENTINEL=Symbol.for("react.memo_cache_sentinel"),MAYBE_ITERATOR_SYMBOL=Symbol.iterator;function getIteratorFn(maybeIterable){return null===maybeIterable||"object"!=typeof maybeIterable?null:"function"==typeof(maybeIterable=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable["@@iterator"])?maybeIterable:null}var REACT_CLIENT_REFERENCE=Symbol.for("react.client.reference");function getComponentNameFromType(type){if(null==type)return null;if("function"==typeof type)return type.$$typeof===REACT_CLIENT_REFERENCE?null:type.displayName||type.name||null;if("string"==typeof type)return type;switch(type){case REACT_FRAGMENT_TYPE:return"Fragment";case REACT_PORTAL_TYPE:return"Portal";case REACT_PROFILER_TYPE:return"Profiler";case REACT_STRICT_MODE_TYPE:return"StrictMode";case REACT_SUSPENSE_TYPE:return"Suspense";case REACT_SUSPENSE_LIST_TYPE:return"SuspenseList"}if("object"==typeof type)switch(type.$$typeof){case REACT_CONTEXT_TYPE:return(type.displayName||"Context")+".Provider";case REACT_CONSUMER_TYPE:return(type._context.displayName||"Context")+".Consumer";case REACT_FORWARD_REF_TYPE:var innerType=type.render;return(type=type.displayName)||(type=""!==(type=innerType.displayName||innerType.name||"")?"ForwardRef("+type+")":"ForwardRef"),type;case REACT_MEMO_TYPE:return null!==(innerType=type.displayName||null)?innerType:getComponentNameFromType(type.type)||"Memo";case REACT_LAZY_TYPE:innerType=type._payload,type=type._init;try{return getComponentNameFromType(type(innerType))}catch(x){}}return null}var prefix,suffix,ReactSharedInternals=React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,assign=Object.assign;function describeBuiltInComponentFrame(name){if(void 0===prefix)try{throw Error()}catch(x){var match=x.stack.trim().match(/\n( *(at )?)/);prefix=match&&match[1]||"",suffix=-1<x.stack.indexOf("\n    at")?" (<anonymous>)":-1<x.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+prefix+name+suffix}var reentry=!1;function describeNativeComponentFrame(fn,construct){if(!fn||reentry)return"";reentry=!0;var previousPrepareStackTrace=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var RunInRootFrame={DetermineComponentFrameRoot:function(){try{if(construct){var Fake=function(){throw Error()};if(Object.defineProperty(Fake.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(Fake,[])}catch(x){var control=x}Reflect.construct(fn,[],Fake)}else{try{Fake.call()}catch(x$0){control=x$0}fn.call(Fake.prototype)}}else{try{throw Error()}catch(x$1){control=x$1}(Fake=fn())&&"function"==typeof Fake.catch&&Fake.catch((function(){}))}}catch(sample){if(sample&&control&&"string"==typeof sample.stack)return[sample.stack,control.stack]}return[null,null]}};RunInRootFrame.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var namePropDescriptor=Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot,"name");namePropDescriptor&&namePropDescriptor.configurable&&Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var _RunInRootFrame$Deter=RunInRootFrame.DetermineComponentFrameRoot(),sampleStack=_RunInRootFrame$Deter[0],controlStack=_RunInRootFrame$Deter[1];if(sampleStack&&controlStack){var sampleLines=sampleStack.split("\n"),controlLines=controlStack.split("\n");for(namePropDescriptor=RunInRootFrame=0;RunInRootFrame<sampleLines.length&&!sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");)RunInRootFrame++;for(;namePropDescriptor<controlLines.length&&!controlLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;if(RunInRootFrame===sampleLines.length||namePropDescriptor===controlLines.length)for(RunInRootFrame=sampleLines.length-1,namePropDescriptor=controlLines.length-1;1<=RunInRootFrame&&0<=namePropDescriptor&&sampleLines[RunInRootFrame]!==controlLines[namePropDescriptor];)namePropDescriptor--;for(;1<=RunInRootFrame&&0<=namePropDescriptor;RunInRootFrame--,namePropDescriptor--)if(sampleLines[RunInRootFrame]!==controlLines[namePropDescriptor]){if(1!==RunInRootFrame||1!==namePropDescriptor)do{if(RunInRootFrame--,0>--namePropDescriptor||sampleLines[RunInRootFrame]!==controlLines[namePropDescriptor]){var frame="\n"+sampleLines[RunInRootFrame].replace(" at new "," at ");return fn.displayName&&frame.includes("<anonymous>")&&(frame=frame.replace("<anonymous>",fn.displayName)),frame}}while(1<=RunInRootFrame&&0<=namePropDescriptor);break}}}finally{reentry=!1,Error.prepareStackTrace=previousPrepareStackTrace}return(previousPrepareStackTrace=fn?fn.displayName||fn.name:"")?describeBuiltInComponentFrame(previousPrepareStackTrace):""}function describeFiber(fiber){switch(fiber.tag){case 26:case 27:case 5:return describeBuiltInComponentFrame(fiber.type);case 16:return describeBuiltInComponentFrame("Lazy");case 13:return describeBuiltInComponentFrame("Suspense");case 19:return describeBuiltInComponentFrame("SuspenseList");case 0:case 15:return fiber=describeNativeComponentFrame(fiber.type,!1);case 11:return fiber=describeNativeComponentFrame(fiber.type.render,!1);case 1:return fiber=describeNativeComponentFrame(fiber.type,!0);default:return""}}function getStackByFiberInDevAndProd(workInProgress){try{var info="";do{info+=describeFiber(workInProgress),workInProgress=workInProgress.return}while(workInProgress);return info}catch(x){return"\nError generating stack: "+x.message+"\n"+x.stack}}function getNearestMountedFiber(fiber){var node=fiber,nearestMounted=fiber;if(fiber.alternate)for(;node.return;)node=node.return;else{fiber=node;do{!!(4098&(node=fiber).flags)&&(nearestMounted=node.return),fiber=node.return}while(fiber)}return 3===node.tag?nearestMounted:null}function getSuspenseInstanceFromFiber(fiber){if(13===fiber.tag){var suspenseState=fiber.memoizedState;if(null===suspenseState&&(null!==(fiber=fiber.alternate)&&(suspenseState=fiber.memoizedState)),null!==suspenseState)return suspenseState.dehydrated}return null}function assertIsMounted(fiber){if(getNearestMountedFiber(fiber)!==fiber)throw Error(formatProdErrorMessage(188))}function findCurrentHostFiberImpl(node){var tag=node.tag;if(5===tag||26===tag||27===tag||6===tag)return node;for(node=node.child;null!==node;){if(null!==(tag=findCurrentHostFiberImpl(node)))return tag;node=node.sibling}return null}var isArrayImpl=Array.isArray,ReactDOMSharedInternals=ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,sharedNotPendingObject={pending:!1,data:null,method:null,action:null},valueStack=[],index=-1;function createCursor(defaultValue){return{current:defaultValue}}function pop(cursor){0>index||(cursor.current=valueStack[index],valueStack[index]=null,index--)}function push(cursor,value){index++,valueStack[index]=cursor.current,cursor.current=value}var contextStackCursor=createCursor(null),contextFiberStackCursor=createCursor(null),rootInstanceStackCursor=createCursor(null),hostTransitionProviderCursor=createCursor(null);function pushHostContainer(fiber,nextRootInstance){switch(push(rootInstanceStackCursor,nextRootInstance),push(contextFiberStackCursor,fiber),push(contextStackCursor,null),fiber=nextRootInstance.nodeType){case 9:case 11:nextRootInstance=(nextRootInstance=nextRootInstance.documentElement)&&(nextRootInstance=nextRootInstance.namespaceURI)?getOwnHostContext(nextRootInstance):0;break;default:if(nextRootInstance=(fiber=8===fiber?nextRootInstance.parentNode:nextRootInstance).tagName,fiber=fiber.namespaceURI)nextRootInstance=getChildHostContextProd(fiber=getOwnHostContext(fiber),nextRootInstance);else switch(nextRootInstance){case"svg":nextRootInstance=1;break;case"math":nextRootInstance=2;break;default:nextRootInstance=0}}pop(contextStackCursor),push(contextStackCursor,nextRootInstance)}function popHostContainer(){pop(contextStackCursor),pop(contextFiberStackCursor),pop(rootInstanceStackCursor)}function pushHostContext(fiber){null!==fiber.memoizedState&&push(hostTransitionProviderCursor,fiber);var context=contextStackCursor.current,JSCompiler_inline_result=getChildHostContextProd(context,fiber.type);context!==JSCompiler_inline_result&&(push(contextFiberStackCursor,fiber),push(contextStackCursor,JSCompiler_inline_result))}function popHostContext(fiber){contextFiberStackCursor.current===fiber&&(pop(contextStackCursor),pop(contextFiberStackCursor)),hostTransitionProviderCursor.current===fiber&&(pop(hostTransitionProviderCursor),HostTransitionContext._currentValue=sharedNotPendingObject)}var hasOwnProperty=Object.prototype.hasOwnProperty,scheduleCallback$3=Scheduler.unstable_scheduleCallback,cancelCallback$1=Scheduler.unstable_cancelCallback,shouldYield=Scheduler.unstable_shouldYield,requestPaint=Scheduler.unstable_requestPaint,now=Scheduler.unstable_now,getCurrentPriorityLevel=Scheduler.unstable_getCurrentPriorityLevel,ImmediatePriority=Scheduler.unstable_ImmediatePriority,UserBlockingPriority=Scheduler.unstable_UserBlockingPriority,NormalPriority$1=Scheduler.unstable_NormalPriority,LowPriority=Scheduler.unstable_LowPriority,IdlePriority=Scheduler.unstable_IdlePriority,log$1=Scheduler.log,unstable_setDisableYieldValue=Scheduler.unstable_setDisableYieldValue,rendererID=null,injectedHook=null;function setIsStrictModeForDevtools(newIsStrictMode){if("function"==typeof log$1&&unstable_setDisableYieldValue(newIsStrictMode),injectedHook&&"function"==typeof injectedHook.setStrictMode)try{injectedHook.setStrictMode(rendererID,newIsStrictMode)}catch(err){}}var clz32=Math.clz32?Math.clz32:function(x){return 0===(x>>>=0)?32:31-(log(x)/LN2|0)|0},log=Math.log,LN2=Math.LN2;var nextTransitionLane=128,nextRetryLane=4194304;function getHighestPriorityLanes(lanes){var pendingSyncLanes=42&lanes;if(0!==pendingSyncLanes)return pendingSyncLanes;switch(lanes&-lanes){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&lanes;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&lanes;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return lanes}}function getNextLanes(root,wipLanes){var pendingLanes=root.pendingLanes;if(0===pendingLanes)return 0;var nextLanes=0,suspendedLanes=root.suspendedLanes,pingedLanes=root.pingedLanes,warmLanes=root.warmLanes;root=0!==root.finishedLanes;var nonIdlePendingLanes=134217727&pendingLanes;return 0!==nonIdlePendingLanes?0!==(pendingLanes=nonIdlePendingLanes&~suspendedLanes)?nextLanes=getHighestPriorityLanes(pendingLanes):0!==(pingedLanes&=nonIdlePendingLanes)?nextLanes=getHighestPriorityLanes(pingedLanes):root||0!==(warmLanes=nonIdlePendingLanes&~warmLanes)&&(nextLanes=getHighestPriorityLanes(warmLanes)):0!==(nonIdlePendingLanes=pendingLanes&~suspendedLanes)?nextLanes=getHighestPriorityLanes(nonIdlePendingLanes):0!==pingedLanes?nextLanes=getHighestPriorityLanes(pingedLanes):root||0!==(warmLanes=pendingLanes&~warmLanes)&&(nextLanes=getHighestPriorityLanes(warmLanes)),0===nextLanes?0:0!==wipLanes&&wipLanes!==nextLanes&&!(wipLanes&suspendedLanes)&&((suspendedLanes=nextLanes&-nextLanes)>=(warmLanes=wipLanes&-wipLanes)||32===suspendedLanes&&4194176&warmLanes)?wipLanes:nextLanes}function checkIfRootIsPrerendering(root,renderLanes){return!(root.pendingLanes&~(root.suspendedLanes&~root.pingedLanes)&renderLanes)}function computeExpirationTime(lane,currentTime){switch(lane){case 1:case 2:case 4:case 8:return currentTime+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return currentTime+5e3;default:return-1}}function claimNextTransitionLane(){var lane=nextTransitionLane;return!(4194176&(nextTransitionLane<<=1))&&(nextTransitionLane=128),lane}function claimNextRetryLane(){var lane=nextRetryLane;return!(62914560&(nextRetryLane<<=1))&&(nextRetryLane=4194304),lane}function createLaneMap(initial){for(var laneMap=[],i=0;31>i;i++)laneMap.push(initial);return laneMap}function markRootUpdated$1(root,updateLane){root.pendingLanes|=updateLane,268435456!==updateLane&&(root.suspendedLanes=0,root.pingedLanes=0,root.warmLanes=0)}function markSpawnedDeferredLane(root,spawnedLane,entangledLanes){root.pendingLanes|=spawnedLane,root.suspendedLanes&=~spawnedLane;var spawnedLaneIndex=31-clz32(spawnedLane);root.entangledLanes|=spawnedLane,root.entanglements[spawnedLaneIndex]=1073741824|root.entanglements[spawnedLaneIndex]|4194218&entangledLanes}function markRootEntangled(root,entangledLanes){var rootEntangledLanes=root.entangledLanes|=entangledLanes;for(root=root.entanglements;rootEntangledLanes;){var index$8=31-clz32(rootEntangledLanes),lane=1<<index$8;lane&entangledLanes|root[index$8]&entangledLanes&&(root[index$8]|=entangledLanes),rootEntangledLanes&=~lane}}function lanesToEventPriority(lanes){return 2<(lanes&=-lanes)?8<lanes?134217727&lanes?32:268435456:8:2}function resolveUpdatePriority(){var updatePriority=ReactDOMSharedInternals.p;return 0!==updatePriority?updatePriority:void 0===(updatePriority=window.event)?32:getEventPriority(updatePriority.type)}var randomKey=Math.random().toString(36).slice(2),internalInstanceKey="__reactFiber$"+randomKey,internalPropsKey="__reactProps$"+randomKey,internalContainerInstanceKey="__reactContainer$"+randomKey,internalEventHandlersKey="__reactEvents$"+randomKey,internalEventHandlerListenersKey="__reactListeners$"+randomKey,internalEventHandlesSetKey="__reactHandles$"+randomKey,internalRootNodeResourcesKey="__reactResources$"+randomKey,internalHoistableMarker="__reactMarker$"+randomKey;function detachDeletedInstance(node){delete node[internalInstanceKey],delete node[internalPropsKey],delete node[internalEventHandlersKey],delete node[internalEventHandlerListenersKey],delete node[internalEventHandlesSetKey]}function getClosestInstanceFromNode(targetNode){var targetInst=targetNode[internalInstanceKey];if(targetInst)return targetInst;for(var parentNode=targetNode.parentNode;parentNode;){if(targetInst=parentNode[internalContainerInstanceKey]||parentNode[internalInstanceKey]){if(parentNode=targetInst.alternate,null!==targetInst.child||null!==parentNode&&null!==parentNode.child)for(targetNode=getParentSuspenseInstance(targetNode);null!==targetNode;){if(parentNode=targetNode[internalInstanceKey])return parentNode;targetNode=getParentSuspenseInstance(targetNode)}return targetInst}parentNode=(targetNode=parentNode).parentNode}return null}function getInstanceFromNode(node){if(node=node[internalInstanceKey]||node[internalContainerInstanceKey]){var tag=node.tag;if(5===tag||6===tag||13===tag||26===tag||27===tag||3===tag)return node}return null}function getNodeFromInstance(inst){var tag=inst.tag;if(5===tag||26===tag||27===tag||6===tag)return inst.stateNode;throw Error(formatProdErrorMessage(33))}function getResourcesFromRoot(root){var resources=root[internalRootNodeResourcesKey];return resources||(resources=root[internalRootNodeResourcesKey]={hoistableStyles:new Map,hoistableScripts:new Map}),resources}function markNodeAsHoistable(node){node[internalHoistableMarker]=!0}var allNativeEvents=new Set,registrationNameDependencies={};function registerTwoPhaseEvent(registrationName,dependencies){registerDirectEvent(registrationName,dependencies),registerDirectEvent(registrationName+"Capture",dependencies)}function registerDirectEvent(registrationName,dependencies){for(registrationNameDependencies[registrationName]=dependencies,registrationName=0;registrationName<dependencies.length;registrationName++)allNativeEvents.add(dependencies[registrationName])}var canUseDOM=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),VALID_ATTRIBUTE_NAME_REGEX=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),illegalAttributeNameCache={},validatedAttributeNameCache={};function setValueForAttribute(node,name,value){if(attributeName=name,hasOwnProperty.call(validatedAttributeNameCache,attributeName)||!hasOwnProperty.call(illegalAttributeNameCache,attributeName)&&(VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)?validatedAttributeNameCache[attributeName]=!0:(illegalAttributeNameCache[attributeName]=!0,0)))if(null===value)node.removeAttribute(name);else{switch(typeof value){case"undefined":case"function":case"symbol":return void node.removeAttribute(name);case"boolean":var prefix$10=name.toLowerCase().slice(0,5);if("data-"!==prefix$10&&"aria-"!==prefix$10)return void node.removeAttribute(name)}node.setAttribute(name,""+value)}var attributeName}function setValueForKnownAttribute(node,name,value){if(null===value)node.removeAttribute(name);else{switch(typeof value){case"undefined":case"function":case"symbol":case"boolean":return void node.removeAttribute(name)}node.setAttribute(name,""+value)}}function setValueForNamespacedAttribute(node,namespace,name,value){if(null===value)node.removeAttribute(name);else{switch(typeof value){case"undefined":case"function":case"symbol":case"boolean":return void node.removeAttribute(name)}node.setAttributeNS(namespace,name,""+value)}}function getToStringValue(value){switch(typeof value){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return value;default:return""}}function isCheckable(elem){var type=elem.type;return(elem=elem.nodeName)&&"input"===elem.toLowerCase()&&("checkbox"===type||"radio"===type)}function track(node){node._valueTracker||(node._valueTracker=function(node){var valueField=isCheckable(node)?"checked":"value",descriptor=Object.getOwnPropertyDescriptor(node.constructor.prototype,valueField),currentValue=""+node[valueField];if(!node.hasOwnProperty(valueField)&&void 0!==descriptor&&"function"==typeof descriptor.get&&"function"==typeof descriptor.set){var get=descriptor.get,set=descriptor.set;return Object.defineProperty(node,valueField,{configurable:!0,get:function(){return get.call(this)},set:function(value){currentValue=""+value,set.call(this,value)}}),Object.defineProperty(node,valueField,{enumerable:descriptor.enumerable}),{getValue:function(){return currentValue},setValue:function(value){currentValue=""+value},stopTracking:function(){node._valueTracker=null,delete node[valueField]}}}}(node))}function updateValueIfChanged(node){if(!node)return!1;var tracker=node._valueTracker;if(!tracker)return!0;var lastValue=tracker.getValue(),value="";return node&&(value=isCheckable(node)?node.checked?"true":"false":node.value),(node=value)!==lastValue&&(tracker.setValue(node),!0)}function getActiveElement(doc){if(void 0===(doc=doc||("undefined"!=typeof document?document:void 0)))return null;try{return doc.activeElement||doc.body}catch(e){return doc.body}}var escapeSelectorAttributeValueInsideDoubleQuotesRegex=/[\n"\\]/g;function escapeSelectorAttributeValueInsideDoubleQuotes(value){return value.replace(escapeSelectorAttributeValueInsideDoubleQuotesRegex,(function(ch){return"\\"+ch.charCodeAt(0).toString(16)+" "}))}function updateInput(element,value,defaultValue,lastDefaultValue,checked,defaultChecked,type,name){element.name="",null!=type&&"function"!=typeof type&&"symbol"!=typeof type&&"boolean"!=typeof type?element.type=type:element.removeAttribute("type"),null!=value?"number"===type?(0===value&&""===element.value||element.value!=value)&&(element.value=""+getToStringValue(value)):element.value!==""+getToStringValue(value)&&(element.value=""+getToStringValue(value)):"submit"!==type&&"reset"!==type||element.removeAttribute("value"),null!=value?setDefaultValue(element,type,getToStringValue(value)):null!=defaultValue?setDefaultValue(element,type,getToStringValue(defaultValue)):null!=lastDefaultValue&&element.removeAttribute("value"),null==checked&&null!=defaultChecked&&(element.defaultChecked=!!defaultChecked),null!=checked&&(element.checked=checked&&"function"!=typeof checked&&"symbol"!=typeof checked),null!=name&&"function"!=typeof name&&"symbol"!=typeof name&&"boolean"!=typeof name?element.name=""+getToStringValue(name):element.removeAttribute("name")}function initInput(element,value,defaultValue,checked,defaultChecked,type,name,isHydrating){if(null!=type&&"function"!=typeof type&&"symbol"!=typeof type&&"boolean"!=typeof type&&(element.type=type),null!=value||null!=defaultValue){if(("submit"===type||"reset"===type)&&null==value)return;defaultValue=null!=defaultValue?""+getToStringValue(defaultValue):"",value=null!=value?""+getToStringValue(value):defaultValue,isHydrating||value===element.value||(element.value=value),element.defaultValue=value}checked="function"!=typeof(checked=null!=checked?checked:defaultChecked)&&"symbol"!=typeof checked&&!!checked,element.checked=isHydrating?element.checked:!!checked,element.defaultChecked=!!checked,null!=name&&"function"!=typeof name&&"symbol"!=typeof name&&"boolean"!=typeof name&&(element.name=name)}function setDefaultValue(node,type,value){"number"===type&&getActiveElement(node.ownerDocument)===node||node.defaultValue===""+value||(node.defaultValue=""+value)}function updateOptions(node,multiple,propValue,setDefaultSelected){if(node=node.options,multiple){multiple={};for(var i=0;i<propValue.length;i++)multiple["$"+propValue[i]]=!0;for(propValue=0;propValue<node.length;propValue++)i=multiple.hasOwnProperty("$"+node[propValue].value),node[propValue].selected!==i&&(node[propValue].selected=i),i&&setDefaultSelected&&(node[propValue].defaultSelected=!0)}else{for(propValue=""+getToStringValue(propValue),multiple=null,i=0;i<node.length;i++){if(node[i].value===propValue)return node[i].selected=!0,void(setDefaultSelected&&(node[i].defaultSelected=!0));null!==multiple||node[i].disabled||(multiple=node[i])}null!==multiple&&(multiple.selected=!0)}}function updateTextarea(element,value,defaultValue){null==value||((value=""+getToStringValue(value))!==element.value&&(element.value=value),null!=defaultValue)?element.defaultValue=null!=defaultValue?""+getToStringValue(defaultValue):"":element.defaultValue!==value&&(element.defaultValue=value)}function initTextarea(element,value,defaultValue,children){if(null==value){if(null!=children){if(null!=defaultValue)throw Error(formatProdErrorMessage(92));if(isArrayImpl(children)){if(1<children.length)throw Error(formatProdErrorMessage(93));children=children[0]}defaultValue=children}null==defaultValue&&(defaultValue=""),value=defaultValue}defaultValue=getToStringValue(value),element.defaultValue=defaultValue,(children=element.textContent)===defaultValue&&""!==children&&null!==children&&(element.value=children)}function setTextContent(node,text){if(text){var firstChild=node.firstChild;if(firstChild&&firstChild===node.lastChild&&3===firstChild.nodeType)return void(firstChild.nodeValue=text)}node.textContent=text}var unitlessNumbers=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function setValueForStyle(style,styleName,value){var isCustomProperty=0===styleName.indexOf("--");null==value||"boolean"==typeof value||""===value?isCustomProperty?style.setProperty(styleName,""):"float"===styleName?style.cssFloat="":style[styleName]="":isCustomProperty?style.setProperty(styleName,value):"number"!=typeof value||0===value||unitlessNumbers.has(styleName)?"float"===styleName?style.cssFloat=value:style[styleName]=(""+value).trim():style[styleName]=value+"px"}function setValueForStyles(node,styles,prevStyles){if(null!=styles&&"object"!=typeof styles)throw Error(formatProdErrorMessage(62));if(node=node.style,null!=prevStyles){for(var styleName in prevStyles)!prevStyles.hasOwnProperty(styleName)||null!=styles&&styles.hasOwnProperty(styleName)||(0===styleName.indexOf("--")?node.setProperty(styleName,""):"float"===styleName?node.cssFloat="":node[styleName]="");for(var styleName$16 in styles)styleName=styles[styleName$16],styles.hasOwnProperty(styleName$16)&&prevStyles[styleName$16]!==styleName&&setValueForStyle(node,styleName$16,styleName)}else for(var styleName$17 in styles)styles.hasOwnProperty(styleName$17)&&setValueForStyle(node,styleName$17,styles[styleName$17])}function isCustomElement(tagName){if(-1===tagName.indexOf("-"))return!1;switch(tagName){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var aliases=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),isJavaScriptProtocol=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function sanitizeURL(url){return isJavaScriptProtocol.test(""+url)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":url}var currentReplayingEvent=null;function getEventTarget(nativeEvent){return(nativeEvent=nativeEvent.target||nativeEvent.srcElement||window).correspondingUseElement&&(nativeEvent=nativeEvent.correspondingUseElement),3===nativeEvent.nodeType?nativeEvent.parentNode:nativeEvent}var restoreTarget=null,restoreQueue=null;function restoreStateOfTarget(target){var internalInstance=getInstanceFromNode(target);if(internalInstance&&(target=internalInstance.stateNode)){var props=target[internalPropsKey]||null;a:switch(target=internalInstance.stateNode,internalInstance.type){case"input":if(updateInput(target,props.value,props.defaultValue,props.defaultValue,props.checked,props.defaultChecked,props.type,props.name),internalInstance=props.name,"radio"===props.type&&null!=internalInstance){for(props=target;props.parentNode;)props=props.parentNode;for(props=props.querySelectorAll('input[name="'+escapeSelectorAttributeValueInsideDoubleQuotes(""+internalInstance)+'"][type="radio"]'),internalInstance=0;internalInstance<props.length;internalInstance++){var otherNode=props[internalInstance];if(otherNode!==target&&otherNode.form===target.form){var otherProps=otherNode[internalPropsKey]||null;if(!otherProps)throw Error(formatProdErrorMessage(90));updateInput(otherNode,otherProps.value,otherProps.defaultValue,otherProps.defaultValue,otherProps.checked,otherProps.defaultChecked,otherProps.type,otherProps.name)}}for(internalInstance=0;internalInstance<props.length;internalInstance++)(otherNode=props[internalInstance]).form===target.form&&updateValueIfChanged(otherNode)}break a;case"textarea":updateTextarea(target,props.value,props.defaultValue);break a;case"select":null!=(internalInstance=props.value)&&updateOptions(target,!!props.multiple,internalInstance,!1)}}}var isInsideEventHandler=!1;function batchedUpdates$1(fn,a,b){if(isInsideEventHandler)return fn(a,b);isInsideEventHandler=!0;try{return fn(a)}finally{if(isInsideEventHandler=!1,(null!==restoreTarget||null!==restoreQueue)&&(flushSyncWork$1(),restoreTarget&&(a=restoreTarget,fn=restoreQueue,restoreQueue=restoreTarget=null,restoreStateOfTarget(a),fn)))for(a=0;a<fn.length;a++)restoreStateOfTarget(fn[a])}}function getListener(inst,registrationName){var stateNode=inst.stateNode;if(null===stateNode)return null;var props=stateNode[internalPropsKey]||null;if(null===props)return null;stateNode=props[registrationName];a:switch(registrationName){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(props=!props.disabled)||(props=!("button"===(inst=inst.type)||"input"===inst||"select"===inst||"textarea"===inst)),inst=!props;break a;default:inst=!1}if(inst)return null;if(stateNode&&"function"!=typeof stateNode)throw Error(formatProdErrorMessage(231,registrationName,typeof stateNode));return stateNode}var passiveBrowserEventsSupported=!1;if(canUseDOM)try{var options={};Object.defineProperty(options,"passive",{get:function(){passiveBrowserEventsSupported=!0}}),window.addEventListener("test",options,options),window.removeEventListener("test",options,options)}catch(e){passiveBrowserEventsSupported=!1}var root=null,startText=null,fallbackText=null;function getData(){if(fallbackText)return fallbackText;var start,end,startValue=startText,startLength=startValue.length,endValue="value"in root?root.value:root.textContent,endLength=endValue.length;for(start=0;start<startLength&&startValue[start]===endValue[start];start++);var minEnd=startLength-start;for(end=1;end<=minEnd&&startValue[startLength-end]===endValue[endLength-end];end++);return fallbackText=endValue.slice(start,1<end?1-end:void 0)}function getEventCharCode(nativeEvent){var keyCode=nativeEvent.keyCode;return"charCode"in nativeEvent?0===(nativeEvent=nativeEvent.charCode)&&13===keyCode&&(nativeEvent=13):nativeEvent=keyCode,10===nativeEvent&&(nativeEvent=13),32<=nativeEvent||13===nativeEvent?nativeEvent:0}function functionThatReturnsTrue(){return!0}function functionThatReturnsFalse(){return!1}function createSyntheticEvent(Interface){function SyntheticBaseEvent(reactName,reactEventType,targetInst,nativeEvent,nativeEventTarget){for(var propName in this._reactName=reactName,this._targetInst=targetInst,this.type=reactEventType,this.nativeEvent=nativeEvent,this.target=nativeEventTarget,this.currentTarget=null,Interface)Interface.hasOwnProperty(propName)&&(reactName=Interface[propName],this[propName]=reactName?reactName(nativeEvent):nativeEvent[propName]);return this.isDefaultPrevented=(null!=nativeEvent.defaultPrevented?nativeEvent.defaultPrevented:!1===nativeEvent.returnValue)?functionThatReturnsTrue:functionThatReturnsFalse,this.isPropagationStopped=functionThatReturnsFalse,this}return assign(SyntheticBaseEvent.prototype,{preventDefault:function(){this.defaultPrevented=!0;var event=this.nativeEvent;event&&(event.preventDefault?event.preventDefault():"unknown"!=typeof event.returnValue&&(event.returnValue=!1),this.isDefaultPrevented=functionThatReturnsTrue)},stopPropagation:function(){var event=this.nativeEvent;event&&(event.stopPropagation?event.stopPropagation():"unknown"!=typeof event.cancelBubble&&(event.cancelBubble=!0),this.isPropagationStopped=functionThatReturnsTrue)},persist:function(){},isPersistent:functionThatReturnsTrue}),SyntheticBaseEvent}var lastMovementX,lastMovementY,lastMouseEvent,EventInterface={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(event){return event.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},SyntheticEvent=createSyntheticEvent(EventInterface),UIEventInterface=assign({},EventInterface,{view:0,detail:0}),SyntheticUIEvent=createSyntheticEvent(UIEventInterface),MouseEventInterface=assign({},UIEventInterface,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:getEventModifierState,button:0,buttons:0,relatedTarget:function(event){return void 0===event.relatedTarget?event.fromElement===event.srcElement?event.toElement:event.fromElement:event.relatedTarget},movementX:function(event){return"movementX"in event?event.movementX:(event!==lastMouseEvent&&(lastMouseEvent&&"mousemove"===event.type?(lastMovementX=event.screenX-lastMouseEvent.screenX,lastMovementY=event.screenY-lastMouseEvent.screenY):lastMovementY=lastMovementX=0,lastMouseEvent=event),lastMovementX)},movementY:function(event){return"movementY"in event?event.movementY:lastMovementY}}),SyntheticMouseEvent=createSyntheticEvent(MouseEventInterface),SyntheticDragEvent=createSyntheticEvent(assign({},MouseEventInterface,{dataTransfer:0})),SyntheticFocusEvent=createSyntheticEvent(assign({},UIEventInterface,{relatedTarget:0})),SyntheticAnimationEvent=createSyntheticEvent(assign({},EventInterface,{animationName:0,elapsedTime:0,pseudoElement:0})),SyntheticClipboardEvent=createSyntheticEvent(assign({},EventInterface,{clipboardData:function(event){return"clipboardData"in event?event.clipboardData:window.clipboardData}})),SyntheticCompositionEvent=createSyntheticEvent(assign({},EventInterface,{data:0})),normalizeKey={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},translateToKey={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},modifierKeyToProp={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function modifierStateGetter(keyArg){var nativeEvent=this.nativeEvent;return nativeEvent.getModifierState?nativeEvent.getModifierState(keyArg):!!(keyArg=modifierKeyToProp[keyArg])&&!!nativeEvent[keyArg]}function getEventModifierState(){return modifierStateGetter}var SyntheticKeyboardEvent=createSyntheticEvent(assign({},UIEventInterface,{key:function(nativeEvent){if(nativeEvent.key){var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if("Unidentified"!==key)return key}return"keypress"===nativeEvent.type?13===(nativeEvent=getEventCharCode(nativeEvent))?"Enter":String.fromCharCode(nativeEvent):"keydown"===nativeEvent.type||"keyup"===nativeEvent.type?translateToKey[nativeEvent.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:getEventModifierState,charCode:function(event){return"keypress"===event.type?getEventCharCode(event):0},keyCode:function(event){return"keydown"===event.type||"keyup"===event.type?event.keyCode:0},which:function(event){return"keypress"===event.type?getEventCharCode(event):"keydown"===event.type||"keyup"===event.type?event.keyCode:0}})),SyntheticPointerEvent=createSyntheticEvent(assign({},MouseEventInterface,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),SyntheticTouchEvent=createSyntheticEvent(assign({},UIEventInterface,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:getEventModifierState})),SyntheticTransitionEvent=createSyntheticEvent(assign({},EventInterface,{propertyName:0,elapsedTime:0,pseudoElement:0})),SyntheticWheelEvent=createSyntheticEvent(assign({},MouseEventInterface,{deltaX:function(event){return"deltaX"in event?event.deltaX:"wheelDeltaX"in event?-event.wheelDeltaX:0},deltaY:function(event){return"deltaY"in event?event.deltaY:"wheelDeltaY"in event?-event.wheelDeltaY:"wheelDelta"in event?-event.wheelDelta:0},deltaZ:0,deltaMode:0})),SyntheticToggleEvent=createSyntheticEvent(assign({},EventInterface,{newState:0,oldState:0})),END_KEYCODES=[9,13,27,32],canUseCompositionEvent=canUseDOM&&"CompositionEvent"in window,documentMode=null;canUseDOM&&"documentMode"in document&&(documentMode=document.documentMode);var canUseTextInputEvent=canUseDOM&&"TextEvent"in window&&!documentMode,useFallbackCompositionData=canUseDOM&&(!canUseCompositionEvent||documentMode&&8<documentMode&&11>=documentMode),SPACEBAR_CHAR=String.fromCharCode(32),hasSpaceKeypress=!1;function isFallbackCompositionEnd(domEventName,nativeEvent){switch(domEventName){case"keyup":return-1!==END_KEYCODES.indexOf(nativeEvent.keyCode);case"keydown":return 229!==nativeEvent.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function getDataFromCustomEvent(nativeEvent){return"object"==typeof(nativeEvent=nativeEvent.detail)&&"data"in nativeEvent?nativeEvent.data:null}var isComposing=!1;var supportedInputTypes={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function isTextInputElement(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();return"input"===nodeName?!!supportedInputTypes[elem.type]:"textarea"===nodeName}function createAndAccumulateChangeEvent(dispatchQueue,inst,nativeEvent,target){restoreTarget?restoreQueue?restoreQueue.push(target):restoreQueue=[target]:restoreTarget=target,0<(inst=accumulateTwoPhaseListeners(inst,"onChange")).length&&(nativeEvent=new SyntheticEvent("onChange","change",null,nativeEvent,target),dispatchQueue.push({event:nativeEvent,listeners:inst}))}var activeElement$1=null,activeElementInst$1=null;function runEventInBatch(dispatchQueue){processDispatchQueue(dispatchQueue,0)}function getInstIfValueChanged(targetInst){if(updateValueIfChanged(getNodeFromInstance(targetInst)))return targetInst}function getTargetInstForChangeEvent(domEventName,targetInst){if("change"===domEventName)return targetInst}var isInputEventSupported=!1;if(canUseDOM){var JSCompiler_inline_result$jscomp$283;if(canUseDOM){var isSupported$jscomp$inline_418="oninput"in document;if(!isSupported$jscomp$inline_418){var element$jscomp$inline_419=document.createElement("div");element$jscomp$inline_419.setAttribute("oninput","return;"),isSupported$jscomp$inline_418="function"==typeof element$jscomp$inline_419.oninput}JSCompiler_inline_result$jscomp$283=isSupported$jscomp$inline_418}else JSCompiler_inline_result$jscomp$283=!1;isInputEventSupported=JSCompiler_inline_result$jscomp$283&&(!document.documentMode||9<document.documentMode)}function stopWatchingForValueChange(){activeElement$1&&(activeElement$1.detachEvent("onpropertychange",handlePropertyChange),activeElementInst$1=activeElement$1=null)}function handlePropertyChange(nativeEvent){if("value"===nativeEvent.propertyName&&getInstIfValueChanged(activeElementInst$1)){var dispatchQueue=[];createAndAccumulateChangeEvent(dispatchQueue,activeElementInst$1,nativeEvent,getEventTarget(nativeEvent)),batchedUpdates$1(runEventInBatch,dispatchQueue)}}function handleEventsForInputEventPolyfill(domEventName,target,targetInst){"focusin"===domEventName?(stopWatchingForValueChange(),activeElementInst$1=targetInst,(activeElement$1=target).attachEvent("onpropertychange",handlePropertyChange)):"focusout"===domEventName&&stopWatchingForValueChange()}function getTargetInstForInputEventPolyfill(domEventName){if("selectionchange"===domEventName||"keyup"===domEventName||"keydown"===domEventName)return getInstIfValueChanged(activeElementInst$1)}function getTargetInstForClickEvent(domEventName,targetInst){if("click"===domEventName)return getInstIfValueChanged(targetInst)}function getTargetInstForInputOrChangeEvent(domEventName,targetInst){if("input"===domEventName||"change"===domEventName)return getInstIfValueChanged(targetInst)}var objectIs="function"==typeof Object.is?Object.is:function(x,y){return x===y&&(0!==x||1/x==1/y)||x!=x&&y!=y};function shallowEqual(objA,objB){if(objectIs(objA,objB))return!0;if("object"!=typeof objA||null===objA||"object"!=typeof objB||null===objB)return!1;var keysA=Object.keys(objA),keysB=Object.keys(objB);if(keysA.length!==keysB.length)return!1;for(keysB=0;keysB<keysA.length;keysB++){var currentKey=keysA[keysB];if(!hasOwnProperty.call(objB,currentKey)||!objectIs(objA[currentKey],objB[currentKey]))return!1}return!0}function getLeafNode(node){for(;node&&node.firstChild;)node=node.firstChild;return node}function getNodeForCharacterOffset(root,offset){var nodeEnd,node=getLeafNode(root);for(root=0;node;){if(3===node.nodeType){if(nodeEnd=root+node.textContent.length,root<=offset&&nodeEnd>=offset)return{node:node,offset:offset-root};root=nodeEnd}a:{for(;node;){if(node.nextSibling){node=node.nextSibling;break a}node=node.parentNode}node=void 0}node=getLeafNode(node)}}function containsNode(outerNode,innerNode){return!(!outerNode||!innerNode)&&(outerNode===innerNode||(!outerNode||3!==outerNode.nodeType)&&(innerNode&&3===innerNode.nodeType?containsNode(outerNode,innerNode.parentNode):"contains"in outerNode?outerNode.contains(innerNode):!!outerNode.compareDocumentPosition&&!!(16&outerNode.compareDocumentPosition(innerNode))))}function getActiveElementDeep(containerInfo){for(var element=getActiveElement((containerInfo=null!=containerInfo&&null!=containerInfo.ownerDocument&&null!=containerInfo.ownerDocument.defaultView?containerInfo.ownerDocument.defaultView:window).document);element instanceof containerInfo.HTMLIFrameElement;){try{var JSCompiler_inline_result="string"==typeof element.contentWindow.location.href}catch(err){JSCompiler_inline_result=!1}if(!JSCompiler_inline_result)break;element=getActiveElement((containerInfo=element.contentWindow).document)}return element}function hasSelectionCapabilities(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();return nodeName&&("input"===nodeName&&("text"===elem.type||"search"===elem.type||"tel"===elem.type||"url"===elem.type||"password"===elem.type)||"textarea"===nodeName||"true"===elem.contentEditable)}function restoreSelection(priorSelectionInformation,containerInfo){var curFocusedElem=getActiveElementDeep(containerInfo);containerInfo=priorSelectionInformation.focusedElem;var priorSelectionRange=priorSelectionInformation.selectionRange;if(curFocusedElem!==containerInfo&&containerInfo&&containerInfo.ownerDocument&&containsNode(containerInfo.ownerDocument.documentElement,containerInfo)){if(null!==priorSelectionRange&&hasSelectionCapabilities(containerInfo))if(priorSelectionInformation=priorSelectionRange.start,void 0===(curFocusedElem=priorSelectionRange.end)&&(curFocusedElem=priorSelectionInformation),"selectionStart"in containerInfo)containerInfo.selectionStart=priorSelectionInformation,containerInfo.selectionEnd=Math.min(curFocusedElem,containerInfo.value.length);else if((curFocusedElem=(priorSelectionInformation=containerInfo.ownerDocument||document)&&priorSelectionInformation.defaultView||window).getSelection){curFocusedElem=curFocusedElem.getSelection();var length=containerInfo.textContent.length,start=Math.min(priorSelectionRange.start,length);priorSelectionRange=void 0===priorSelectionRange.end?start:Math.min(priorSelectionRange.end,length),!curFocusedElem.extend&&start>priorSelectionRange&&(length=priorSelectionRange,priorSelectionRange=start,start=length),length=getNodeForCharacterOffset(containerInfo,start);var endMarker=getNodeForCharacterOffset(containerInfo,priorSelectionRange);length&&endMarker&&(1!==curFocusedElem.rangeCount||curFocusedElem.anchorNode!==length.node||curFocusedElem.anchorOffset!==length.offset||curFocusedElem.focusNode!==endMarker.node||curFocusedElem.focusOffset!==endMarker.offset)&&((priorSelectionInformation=priorSelectionInformation.createRange()).setStart(length.node,length.offset),curFocusedElem.removeAllRanges(),start>priorSelectionRange?(curFocusedElem.addRange(priorSelectionInformation),curFocusedElem.extend(endMarker.node,endMarker.offset)):(priorSelectionInformation.setEnd(endMarker.node,endMarker.offset),curFocusedElem.addRange(priorSelectionInformation)))}for(priorSelectionInformation=[],curFocusedElem=containerInfo;curFocusedElem=curFocusedElem.parentNode;)1===curFocusedElem.nodeType&&priorSelectionInformation.push({element:curFocusedElem,left:curFocusedElem.scrollLeft,top:curFocusedElem.scrollTop});for("function"==typeof containerInfo.focus&&containerInfo.focus(),containerInfo=0;containerInfo<priorSelectionInformation.length;containerInfo++)(curFocusedElem=priorSelectionInformation[containerInfo]).element.scrollLeft=curFocusedElem.left,curFocusedElem.element.scrollTop=curFocusedElem.top}}var skipSelectionChangeEvent=canUseDOM&&"documentMode"in document&&11>=document.documentMode,activeElement=null,activeElementInst=null,lastSelection=null,mouseDown=!1;function constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget){var doc=nativeEventTarget.window===nativeEventTarget?nativeEventTarget.document:9===nativeEventTarget.nodeType?nativeEventTarget:nativeEventTarget.ownerDocument;mouseDown||null==activeElement||activeElement!==getActiveElement(doc)||("selectionStart"in(doc=activeElement)&&hasSelectionCapabilities(doc)?doc={start:doc.selectionStart,end:doc.selectionEnd}:doc={anchorNode:(doc=(doc.ownerDocument&&doc.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:doc.anchorOffset,focusNode:doc.focusNode,focusOffset:doc.focusOffset},lastSelection&&shallowEqual(lastSelection,doc)||(lastSelection=doc,0<(doc=accumulateTwoPhaseListeners(activeElementInst,"onSelect")).length&&(nativeEvent=new SyntheticEvent("onSelect","select",null,nativeEvent,nativeEventTarget),dispatchQueue.push({event:nativeEvent,listeners:doc}),nativeEvent.target=activeElement)))}function makePrefixMap(styleProp,eventName){var prefixes={};return prefixes[styleProp.toLowerCase()]=eventName.toLowerCase(),prefixes["Webkit"+styleProp]="webkit"+eventName,prefixes["Moz"+styleProp]="moz"+eventName,prefixes}var vendorPrefixes={animationend:makePrefixMap("Animation","AnimationEnd"),animationiteration:makePrefixMap("Animation","AnimationIteration"),animationstart:makePrefixMap("Animation","AnimationStart"),transitionrun:makePrefixMap("Transition","TransitionRun"),transitionstart:makePrefixMap("Transition","TransitionStart"),transitioncancel:makePrefixMap("Transition","TransitionCancel"),transitionend:makePrefixMap("Transition","TransitionEnd")},prefixedEventNames={},style={};function getVendorPrefixedEventName(eventName){if(prefixedEventNames[eventName])return prefixedEventNames[eventName];if(!vendorPrefixes[eventName])return eventName;var styleProp,prefixMap=vendorPrefixes[eventName];for(styleProp in prefixMap)if(prefixMap.hasOwnProperty(styleProp)&&styleProp in style)return prefixedEventNames[eventName]=prefixMap[styleProp];return eventName}canUseDOM&&(style=document.createElement("div").style,"AnimationEvent"in window||(delete vendorPrefixes.animationend.animation,delete vendorPrefixes.animationiteration.animation,delete vendorPrefixes.animationstart.animation),"TransitionEvent"in window||delete vendorPrefixes.transitionend.transition);var ANIMATION_END=getVendorPrefixedEventName("animationend"),ANIMATION_ITERATION=getVendorPrefixedEventName("animationiteration"),ANIMATION_START=getVendorPrefixedEventName("animationstart"),TRANSITION_RUN=getVendorPrefixedEventName("transitionrun"),TRANSITION_START=getVendorPrefixedEventName("transitionstart"),TRANSITION_CANCEL=getVendorPrefixedEventName("transitioncancel"),TRANSITION_END=getVendorPrefixedEventName("transitionend"),topLevelEventsToReactNames=new Map,simpleEventPluginEvents="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function registerSimpleEvent(domEventName,reactName){topLevelEventsToReactNames.set(domEventName,reactName),registerTwoPhaseEvent(reactName,[domEventName])}var concurrentQueues=[],concurrentQueuesIndex=0,concurrentlyUpdatedLanes=0;function finishQueueingConcurrentUpdates(){for(var endIndex=concurrentQueuesIndex,i=concurrentlyUpdatedLanes=concurrentQueuesIndex=0;i<endIndex;){var fiber=concurrentQueues[i];concurrentQueues[i++]=null;var queue=concurrentQueues[i];concurrentQueues[i++]=null;var update=concurrentQueues[i];concurrentQueues[i++]=null;var lane=concurrentQueues[i];if(concurrentQueues[i++]=null,null!==queue&&null!==update){var pending=queue.pending;null===pending?update.next=update:(update.next=pending.next,pending.next=update),queue.pending=update}0!==lane&&markUpdateLaneFromFiberToRoot(fiber,update,lane)}}function enqueueUpdate$1(fiber,queue,update,lane){concurrentQueues[concurrentQueuesIndex++]=fiber,concurrentQueues[concurrentQueuesIndex++]=queue,concurrentQueues[concurrentQueuesIndex++]=update,concurrentQueues[concurrentQueuesIndex++]=lane,concurrentlyUpdatedLanes|=lane,fiber.lanes|=lane,null!==(fiber=fiber.alternate)&&(fiber.lanes|=lane)}function enqueueConcurrentHookUpdate(fiber,queue,update,lane){return enqueueUpdate$1(fiber,queue,update,lane),getRootForUpdatedFiber(fiber)}function enqueueConcurrentRenderForLane(fiber,lane){return enqueueUpdate$1(fiber,null,null,lane),getRootForUpdatedFiber(fiber)}function markUpdateLaneFromFiberToRoot(sourceFiber,update,lane){sourceFiber.lanes|=lane;var alternate=sourceFiber.alternate;null!==alternate&&(alternate.lanes|=lane);for(var isHidden=!1,parent=sourceFiber.return;null!==parent;)parent.childLanes|=lane,null!==(alternate=parent.alternate)&&(alternate.childLanes|=lane),22===parent.tag&&(null===(sourceFiber=parent.stateNode)||1&sourceFiber._visibility||(isHidden=!0)),sourceFiber=parent,parent=parent.return;isHidden&&null!==update&&3===sourceFiber.tag&&(parent=sourceFiber.stateNode,isHidden=31-clz32(lane),null===(sourceFiber=(parent=parent.hiddenUpdates)[isHidden])?parent[isHidden]=[update]:sourceFiber.push(update),update.lane=536870912|lane)}function getRootForUpdatedFiber(sourceFiber){if(50<nestedUpdateCount)throw nestedUpdateCount=0,rootWithNestedUpdates=null,Error(formatProdErrorMessage(185));for(var parent=sourceFiber.return;null!==parent;)parent=(sourceFiber=parent).return;return 3===sourceFiber.tag?sourceFiber.stateNode:null}var emptyContextObject={},CapturedStacks=new WeakMap;function createCapturedValueAtFiber(value,source){if("object"==typeof value&&null!==value){var existing=CapturedStacks.get(value);return void 0!==existing?existing:(source={value:value,source:source,stack:getStackByFiberInDevAndProd(source)},CapturedStacks.set(value,source),source)}return{value:value,source:source,stack:getStackByFiberInDevAndProd(source)}}var forkStack=[],forkStackIndex=0,treeForkProvider=null,treeForkCount=0,idStack=[],idStackIndex=0,treeContextProvider=null,treeContextId=1,treeContextOverflow="";function pushTreeFork(workInProgress,totalChildren){forkStack[forkStackIndex++]=treeForkCount,forkStack[forkStackIndex++]=treeForkProvider,treeForkProvider=workInProgress,treeForkCount=totalChildren}function pushTreeId(workInProgress,totalChildren,index){idStack[idStackIndex++]=treeContextId,idStack[idStackIndex++]=treeContextOverflow,idStack[idStackIndex++]=treeContextProvider,treeContextProvider=workInProgress;var baseIdWithLeadingBit=treeContextId;workInProgress=treeContextOverflow;var baseLength=32-clz32(baseIdWithLeadingBit)-1;baseIdWithLeadingBit&=~(1<<baseLength),index+=1;var length=32-clz32(totalChildren)+baseLength;if(30<length){var numberOfOverflowBits=baseLength-baseLength%5;length=(baseIdWithLeadingBit&(1<<numberOfOverflowBits)-1).toString(32),baseIdWithLeadingBit>>=numberOfOverflowBits,baseLength-=numberOfOverflowBits,treeContextId=1<<32-clz32(totalChildren)+baseLength|index<<baseLength|baseIdWithLeadingBit,treeContextOverflow=length+workInProgress}else treeContextId=1<<length|index<<baseLength|baseIdWithLeadingBit,treeContextOverflow=workInProgress}function pushMaterializedTreeId(workInProgress){null!==workInProgress.return&&(pushTreeFork(workInProgress,1),pushTreeId(workInProgress,1,0))}function popTreeContext(workInProgress){for(;workInProgress===treeForkProvider;)treeForkProvider=forkStack[--forkStackIndex],forkStack[forkStackIndex]=null,treeForkCount=forkStack[--forkStackIndex],forkStack[forkStackIndex]=null;for(;workInProgress===treeContextProvider;)treeContextProvider=idStack[--idStackIndex],idStack[idStackIndex]=null,treeContextOverflow=idStack[--idStackIndex],idStack[idStackIndex]=null,treeContextId=idStack[--idStackIndex],idStack[idStackIndex]=null}var hydrationParentFiber=null,nextHydratableInstance=null,isHydrating=!1,hydrationErrors=null,rootOrSingletonContext=!1,HydrationMismatchException=Error(formatProdErrorMessage(519));function throwOnHydrationMismatch(fiber){throw queueHydrationError(createCapturedValueAtFiber(Error(formatProdErrorMessage(418,"")),fiber)),HydrationMismatchException}function prepareToHydrateHostInstance(fiber){var instance=fiber.stateNode,type=fiber.type,props=fiber.memoizedProps;switch(instance[internalInstanceKey]=fiber,instance[internalPropsKey]=props,type){case"dialog":listenToNonDelegatedEvent("cancel",instance),listenToNonDelegatedEvent("close",instance);break;case"iframe":case"object":case"embed":listenToNonDelegatedEvent("load",instance);break;case"video":case"audio":for(type=0;type<mediaEventTypes.length;type++)listenToNonDelegatedEvent(mediaEventTypes[type],instance);break;case"source":listenToNonDelegatedEvent("error",instance);break;case"img":case"image":case"link":listenToNonDelegatedEvent("error",instance),listenToNonDelegatedEvent("load",instance);break;case"details":listenToNonDelegatedEvent("toggle",instance);break;case"input":listenToNonDelegatedEvent("invalid",instance),initInput(instance,props.value,props.defaultValue,props.checked,props.defaultChecked,props.type,props.name,!0),track(instance);break;case"select":listenToNonDelegatedEvent("invalid",instance);break;case"textarea":listenToNonDelegatedEvent("invalid",instance),initTextarea(instance,props.value,props.defaultValue,props.children),track(instance)}"string"!=typeof(type=props.children)&&"number"!=typeof type&&"bigint"!=typeof type||instance.textContent===""+type||!0===props.suppressHydrationWarning||checkForUnmatchedText(instance.textContent,type)?(null!=props.popover&&(listenToNonDelegatedEvent("beforetoggle",instance),listenToNonDelegatedEvent("toggle",instance)),null!=props.onScroll&&listenToNonDelegatedEvent("scroll",instance),null!=props.onScrollEnd&&listenToNonDelegatedEvent("scrollend",instance),null!=props.onClick&&(instance.onclick=noop$1),instance=!0):instance=!1,instance||throwOnHydrationMismatch(fiber)}function popToNextHostParent(fiber){for(hydrationParentFiber=fiber.return;hydrationParentFiber;)switch(hydrationParentFiber.tag){case 3:case 27:return void(rootOrSingletonContext=!0);case 5:case 13:return void(rootOrSingletonContext=!1);default:hydrationParentFiber=hydrationParentFiber.return}}function popHydrationState(fiber){if(fiber!==hydrationParentFiber)return!1;if(!isHydrating)return popToNextHostParent(fiber),isHydrating=!0,!1;var JSCompiler_temp,shouldClear=!1;if((JSCompiler_temp=3!==fiber.tag&&27!==fiber.tag)&&((JSCompiler_temp=5===fiber.tag)&&(JSCompiler_temp=!("form"!==(JSCompiler_temp=fiber.type)&&"button"!==JSCompiler_temp)||shouldSetTextContent(fiber.type,fiber.memoizedProps)),JSCompiler_temp=!JSCompiler_temp),JSCompiler_temp&&(shouldClear=!0),shouldClear&&nextHydratableInstance&&throwOnHydrationMismatch(fiber),popToNextHostParent(fiber),13===fiber.tag){if(!(fiber=null!==(fiber=fiber.memoizedState)?fiber.dehydrated:null))throw Error(formatProdErrorMessage(317));a:{for(fiber=fiber.nextSibling,shouldClear=0;fiber;){if(8===fiber.nodeType)if("/$"===(JSCompiler_temp=fiber.data)){if(0===shouldClear){nextHydratableInstance=getNextHydratable(fiber.nextSibling);break a}shouldClear--}else"$"!==JSCompiler_temp&&"$!"!==JSCompiler_temp&&"$?"!==JSCompiler_temp||shouldClear++;fiber=fiber.nextSibling}nextHydratableInstance=null}}else nextHydratableInstance=hydrationParentFiber?getNextHydratable(fiber.stateNode.nextSibling):null;return!0}function resetHydrationState(){nextHydratableInstance=hydrationParentFiber=null,isHydrating=!1}function queueHydrationError(error){null===hydrationErrors?hydrationErrors=[error]:hydrationErrors.push(error)}var SuspenseException=Error(formatProdErrorMessage(460)),SuspenseyCommitException=Error(formatProdErrorMessage(474)),noopSuspenseyCommitThenable={then:function(){}};function isThenableResolved(thenable){return"fulfilled"===(thenable=thenable.status)||"rejected"===thenable}function noop$3(){}function trackUsedThenable(thenableState,thenable,index){switch(void 0===(index=thenableState[index])?thenableState.push(thenable):index!==thenable&&(thenable.then(noop$3,noop$3),thenable=index),thenable.status){case"fulfilled":return thenable.value;case"rejected":if((thenableState=thenable.reason)===SuspenseException)throw Error(formatProdErrorMessage(483));throw thenableState;default:if("string"==typeof thenable.status)thenable.then(noop$3,noop$3);else{if(null!==(thenableState=workInProgressRoot)&&100<thenableState.shellSuspendCounter)throw Error(formatProdErrorMessage(482));(thenableState=thenable).status="pending",thenableState.then((function(fulfilledValue){if("pending"===thenable.status){var fulfilledThenable=thenable;fulfilledThenable.status="fulfilled",fulfilledThenable.value=fulfilledValue}}),(function(error){if("pending"===thenable.status){var rejectedThenable=thenable;rejectedThenable.status="rejected",rejectedThenable.reason=error}}))}switch(thenable.status){case"fulfilled":return thenable.value;case"rejected":if((thenableState=thenable.reason)===SuspenseException)throw Error(formatProdErrorMessage(483));throw thenableState}throw suspendedThenable=thenable,SuspenseException}}var suspendedThenable=null;function getSuspendedThenable(){if(null===suspendedThenable)throw Error(formatProdErrorMessage(459));var thenable=suspendedThenable;return suspendedThenable=null,thenable}var thenableState$1=null,thenableIndexCounter$1=0;function unwrapThenable(thenable){var index=thenableIndexCounter$1;return thenableIndexCounter$1+=1,null===thenableState$1&&(thenableState$1=[]),trackUsedThenable(thenableState$1,thenable,index)}function coerceRef(workInProgress,element){element=element.props.ref,workInProgress.ref=void 0!==element?element:null}function throwOnInvalidObjectType(returnFiber,newChild){if(newChild.$$typeof===REACT_LEGACY_ELEMENT_TYPE)throw Error(formatProdErrorMessage(525));throw returnFiber=Object.prototype.toString.call(newChild),Error(formatProdErrorMessage(31,"[object Object]"===returnFiber?"object with keys {"+Object.keys(newChild).join(", ")+"}":returnFiber))}function resolveLazy(lazyType){return(0,lazyType._init)(lazyType._payload)}function createChildReconciler(shouldTrackSideEffects){function deleteChild(returnFiber,childToDelete){if(shouldTrackSideEffects){var deletions=returnFiber.deletions;null===deletions?(returnFiber.deletions=[childToDelete],returnFiber.flags|=16):deletions.push(childToDelete)}}function deleteRemainingChildren(returnFiber,currentFirstChild){if(!shouldTrackSideEffects)return null;for(;null!==currentFirstChild;)deleteChild(returnFiber,currentFirstChild),currentFirstChild=currentFirstChild.sibling;return null}function mapRemainingChildren(currentFirstChild){for(var existingChildren=new Map;null!==currentFirstChild;)null!==currentFirstChild.key?existingChildren.set(currentFirstChild.key,currentFirstChild):existingChildren.set(currentFirstChild.index,currentFirstChild),currentFirstChild=currentFirstChild.sibling;return existingChildren}function useFiber(fiber,pendingProps){return(fiber=createWorkInProgress(fiber,pendingProps)).index=0,fiber.sibling=null,fiber}function placeChild(newFiber,lastPlacedIndex,newIndex){return newFiber.index=newIndex,shouldTrackSideEffects?null!==(newIndex=newFiber.alternate)?(newIndex=newIndex.index)<lastPlacedIndex?(newFiber.flags|=33554434,lastPlacedIndex):newIndex:(newFiber.flags|=33554434,lastPlacedIndex):(newFiber.flags|=1048576,lastPlacedIndex)}function placeSingleChild(newFiber){return shouldTrackSideEffects&&null===newFiber.alternate&&(newFiber.flags|=33554434),newFiber}function updateTextNode(returnFiber,current,textContent,lanes){return null===current||6!==current.tag?((current=createFiberFromText(textContent,returnFiber.mode,lanes)).return=returnFiber,current):((current=useFiber(current,textContent)).return=returnFiber,current)}function updateElement(returnFiber,current,element,lanes){var elementType=element.type;return elementType===REACT_FRAGMENT_TYPE?updateFragment(returnFiber,current,element.props.children,lanes,element.key):null!==current&&(current.elementType===elementType||"object"==typeof elementType&&null!==elementType&&elementType.$$typeof===REACT_LAZY_TYPE&&resolveLazy(elementType)===current.type)?(coerceRef(current=useFiber(current,element.props),element),current.return=returnFiber,current):(coerceRef(current=createFiberFromTypeAndProps(element.type,element.key,element.props,null,returnFiber.mode,lanes),element),current.return=returnFiber,current)}function updatePortal(returnFiber,current,portal,lanes){return null===current||4!==current.tag||current.stateNode.containerInfo!==portal.containerInfo||current.stateNode.implementation!==portal.implementation?((current=createFiberFromPortal(portal,returnFiber.mode,lanes)).return=returnFiber,current):((current=useFiber(current,portal.children||[])).return=returnFiber,current)}function updateFragment(returnFiber,current,fragment,lanes,key){return null===current||7!==current.tag?((current=createFiberFromFragment(fragment,returnFiber.mode,lanes,key)).return=returnFiber,current):((current=useFiber(current,fragment)).return=returnFiber,current)}function createChild(returnFiber,newChild,lanes){if("string"==typeof newChild&&""!==newChild||"number"==typeof newChild||"bigint"==typeof newChild)return(newChild=createFiberFromText(""+newChild,returnFiber.mode,lanes)).return=returnFiber,newChild;if("object"==typeof newChild&&null!==newChild){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return coerceRef(lanes=createFiberFromTypeAndProps(newChild.type,newChild.key,newChild.props,null,returnFiber.mode,lanes),newChild),lanes.return=returnFiber,lanes;case REACT_PORTAL_TYPE:return(newChild=createFiberFromPortal(newChild,returnFiber.mode,lanes)).return=returnFiber,newChild;case REACT_LAZY_TYPE:return createChild(returnFiber,newChild=(0,newChild._init)(newChild._payload),lanes)}if(isArrayImpl(newChild)||getIteratorFn(newChild))return(newChild=createFiberFromFragment(newChild,returnFiber.mode,lanes,null)).return=returnFiber,newChild;if("function"==typeof newChild.then)return createChild(returnFiber,unwrapThenable(newChild),lanes);if(newChild.$$typeof===REACT_CONTEXT_TYPE)return createChild(returnFiber,readContextDuringReconciliation(returnFiber,newChild),lanes);throwOnInvalidObjectType(returnFiber,newChild)}return null}function updateSlot(returnFiber,oldFiber,newChild,lanes){var key=null!==oldFiber?oldFiber.key:null;if("string"==typeof newChild&&""!==newChild||"number"==typeof newChild||"bigint"==typeof newChild)return null!==key?null:updateTextNode(returnFiber,oldFiber,""+newChild,lanes);if("object"==typeof newChild&&null!==newChild){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return newChild.key===key?updateElement(returnFiber,oldFiber,newChild,lanes):null;case REACT_PORTAL_TYPE:return newChild.key===key?updatePortal(returnFiber,oldFiber,newChild,lanes):null;case REACT_LAZY_TYPE:return updateSlot(returnFiber,oldFiber,newChild=(key=newChild._init)(newChild._payload),lanes)}if(isArrayImpl(newChild)||getIteratorFn(newChild))return null!==key?null:updateFragment(returnFiber,oldFiber,newChild,lanes,null);if("function"==typeof newChild.then)return updateSlot(returnFiber,oldFiber,unwrapThenable(newChild),lanes);if(newChild.$$typeof===REACT_CONTEXT_TYPE)return updateSlot(returnFiber,oldFiber,readContextDuringReconciliation(returnFiber,newChild),lanes);throwOnInvalidObjectType(returnFiber,newChild)}return null}function updateFromMap(existingChildren,returnFiber,newIdx,newChild,lanes){if("string"==typeof newChild&&""!==newChild||"number"==typeof newChild||"bigint"==typeof newChild)return updateTextNode(returnFiber,existingChildren=existingChildren.get(newIdx)||null,""+newChild,lanes);if("object"==typeof newChild&&null!==newChild){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return updateElement(returnFiber,existingChildren=existingChildren.get(null===newChild.key?newIdx:newChild.key)||null,newChild,lanes);case REACT_PORTAL_TYPE:return updatePortal(returnFiber,existingChildren=existingChildren.get(null===newChild.key?newIdx:newChild.key)||null,newChild,lanes);case REACT_LAZY_TYPE:return updateFromMap(existingChildren,returnFiber,newIdx,newChild=(0,newChild._init)(newChild._payload),lanes)}if(isArrayImpl(newChild)||getIteratorFn(newChild))return updateFragment(returnFiber,existingChildren=existingChildren.get(newIdx)||null,newChild,lanes,null);if("function"==typeof newChild.then)return updateFromMap(existingChildren,returnFiber,newIdx,unwrapThenable(newChild),lanes);if(newChild.$$typeof===REACT_CONTEXT_TYPE)return updateFromMap(existingChildren,returnFiber,newIdx,readContextDuringReconciliation(returnFiber,newChild),lanes);throwOnInvalidObjectType(returnFiber,newChild)}return null}function reconcileChildFibersImpl(returnFiber,currentFirstChild,newChild,lanes){if("object"==typeof newChild&&null!==newChild&&newChild.type===REACT_FRAGMENT_TYPE&&null===newChild.key&&(newChild=newChild.props.children),"object"==typeof newChild&&null!==newChild){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:a:{for(var key=newChild.key;null!==currentFirstChild;){if(currentFirstChild.key===key){if((key=newChild.type)===REACT_FRAGMENT_TYPE){if(7===currentFirstChild.tag){deleteRemainingChildren(returnFiber,currentFirstChild.sibling),(lanes=useFiber(currentFirstChild,newChild.props.children)).return=returnFiber,returnFiber=lanes;break a}}else if(currentFirstChild.elementType===key||"object"==typeof key&&null!==key&&key.$$typeof===REACT_LAZY_TYPE&&resolveLazy(key)===currentFirstChild.type){deleteRemainingChildren(returnFiber,currentFirstChild.sibling),coerceRef(lanes=useFiber(currentFirstChild,newChild.props),newChild),lanes.return=returnFiber,returnFiber=lanes;break a}deleteRemainingChildren(returnFiber,currentFirstChild);break}deleteChild(returnFiber,currentFirstChild),currentFirstChild=currentFirstChild.sibling}newChild.type===REACT_FRAGMENT_TYPE?((lanes=createFiberFromFragment(newChild.props.children,returnFiber.mode,lanes,newChild.key)).return=returnFiber,returnFiber=lanes):(coerceRef(lanes=createFiberFromTypeAndProps(newChild.type,newChild.key,newChild.props,null,returnFiber.mode,lanes),newChild),lanes.return=returnFiber,returnFiber=lanes)}return placeSingleChild(returnFiber);case REACT_PORTAL_TYPE:a:{for(key=newChild.key;null!==currentFirstChild;){if(currentFirstChild.key===key){if(4===currentFirstChild.tag&&currentFirstChild.stateNode.containerInfo===newChild.containerInfo&&currentFirstChild.stateNode.implementation===newChild.implementation){deleteRemainingChildren(returnFiber,currentFirstChild.sibling),(lanes=useFiber(currentFirstChild,newChild.children||[])).return=returnFiber,returnFiber=lanes;break a}deleteRemainingChildren(returnFiber,currentFirstChild);break}deleteChild(returnFiber,currentFirstChild),currentFirstChild=currentFirstChild.sibling}(lanes=createFiberFromPortal(newChild,returnFiber.mode,lanes)).return=returnFiber,returnFiber=lanes}return placeSingleChild(returnFiber);case REACT_LAZY_TYPE:return reconcileChildFibersImpl(returnFiber,currentFirstChild,newChild=(key=newChild._init)(newChild._payload),lanes)}if(isArrayImpl(newChild))return function(returnFiber,currentFirstChild,newChildren,lanes){for(var resultingFirstChild=null,previousNewFiber=null,oldFiber=currentFirstChild,newIdx=currentFirstChild=0,nextOldFiber=null;null!==oldFiber&&newIdx<newChildren.length;newIdx++){oldFiber.index>newIdx?(nextOldFiber=oldFiber,oldFiber=null):nextOldFiber=oldFiber.sibling;var newFiber=updateSlot(returnFiber,oldFiber,newChildren[newIdx],lanes);if(null===newFiber){null===oldFiber&&(oldFiber=nextOldFiber);break}shouldTrackSideEffects&&oldFiber&&null===newFiber.alternate&&deleteChild(returnFiber,oldFiber),currentFirstChild=placeChild(newFiber,currentFirstChild,newIdx),null===previousNewFiber?resultingFirstChild=newFiber:previousNewFiber.sibling=newFiber,previousNewFiber=newFiber,oldFiber=nextOldFiber}if(newIdx===newChildren.length)return deleteRemainingChildren(returnFiber,oldFiber),isHydrating&&pushTreeFork(returnFiber,newIdx),resultingFirstChild;if(null===oldFiber){for(;newIdx<newChildren.length;newIdx++)null!==(oldFiber=createChild(returnFiber,newChildren[newIdx],lanes))&&(currentFirstChild=placeChild(oldFiber,currentFirstChild,newIdx),null===previousNewFiber?resultingFirstChild=oldFiber:previousNewFiber.sibling=oldFiber,previousNewFiber=oldFiber);return isHydrating&&pushTreeFork(returnFiber,newIdx),resultingFirstChild}for(oldFiber=mapRemainingChildren(oldFiber);newIdx<newChildren.length;newIdx++)null!==(nextOldFiber=updateFromMap(oldFiber,returnFiber,newIdx,newChildren[newIdx],lanes))&&(shouldTrackSideEffects&&null!==nextOldFiber.alternate&&oldFiber.delete(null===nextOldFiber.key?newIdx:nextOldFiber.key),currentFirstChild=placeChild(nextOldFiber,currentFirstChild,newIdx),null===previousNewFiber?resultingFirstChild=nextOldFiber:previousNewFiber.sibling=nextOldFiber,previousNewFiber=nextOldFiber);return shouldTrackSideEffects&&oldFiber.forEach((function(child){return deleteChild(returnFiber,child)})),isHydrating&&pushTreeFork(returnFiber,newIdx),resultingFirstChild}(returnFiber,currentFirstChild,newChild,lanes);if(getIteratorFn(newChild)){if("function"!=typeof(key=getIteratorFn(newChild)))throw Error(formatProdErrorMessage(150));return function(returnFiber,currentFirstChild,newChildren,lanes){if(null==newChildren)throw Error(formatProdErrorMessage(151));for(var resultingFirstChild=null,previousNewFiber=null,oldFiber=currentFirstChild,newIdx=currentFirstChild=0,nextOldFiber=null,step=newChildren.next();null!==oldFiber&&!step.done;newIdx++,step=newChildren.next()){oldFiber.index>newIdx?(nextOldFiber=oldFiber,oldFiber=null):nextOldFiber=oldFiber.sibling;var newFiber=updateSlot(returnFiber,oldFiber,step.value,lanes);if(null===newFiber){null===oldFiber&&(oldFiber=nextOldFiber);break}shouldTrackSideEffects&&oldFiber&&null===newFiber.alternate&&deleteChild(returnFiber,oldFiber),currentFirstChild=placeChild(newFiber,currentFirstChild,newIdx),null===previousNewFiber?resultingFirstChild=newFiber:previousNewFiber.sibling=newFiber,previousNewFiber=newFiber,oldFiber=nextOldFiber}if(step.done)return deleteRemainingChildren(returnFiber,oldFiber),isHydrating&&pushTreeFork(returnFiber,newIdx),resultingFirstChild;if(null===oldFiber){for(;!step.done;newIdx++,step=newChildren.next())null!==(step=createChild(returnFiber,step.value,lanes))&&(currentFirstChild=placeChild(step,currentFirstChild,newIdx),null===previousNewFiber?resultingFirstChild=step:previousNewFiber.sibling=step,previousNewFiber=step);return isHydrating&&pushTreeFork(returnFiber,newIdx),resultingFirstChild}for(oldFiber=mapRemainingChildren(oldFiber);!step.done;newIdx++,step=newChildren.next())null!==(step=updateFromMap(oldFiber,returnFiber,newIdx,step.value,lanes))&&(shouldTrackSideEffects&&null!==step.alternate&&oldFiber.delete(null===step.key?newIdx:step.key),currentFirstChild=placeChild(step,currentFirstChild,newIdx),null===previousNewFiber?resultingFirstChild=step:previousNewFiber.sibling=step,previousNewFiber=step);return shouldTrackSideEffects&&oldFiber.forEach((function(child){return deleteChild(returnFiber,child)})),isHydrating&&pushTreeFork(returnFiber,newIdx),resultingFirstChild}(returnFiber,currentFirstChild,newChild=key.call(newChild),lanes)}if("function"==typeof newChild.then)return reconcileChildFibersImpl(returnFiber,currentFirstChild,unwrapThenable(newChild),lanes);if(newChild.$$typeof===REACT_CONTEXT_TYPE)return reconcileChildFibersImpl(returnFiber,currentFirstChild,readContextDuringReconciliation(returnFiber,newChild),lanes);throwOnInvalidObjectType(returnFiber,newChild)}return"string"==typeof newChild&&""!==newChild||"number"==typeof newChild||"bigint"==typeof newChild?(newChild=""+newChild,null!==currentFirstChild&&6===currentFirstChild.tag?(deleteRemainingChildren(returnFiber,currentFirstChild.sibling),(lanes=useFiber(currentFirstChild,newChild)).return=returnFiber,returnFiber=lanes):(deleteRemainingChildren(returnFiber,currentFirstChild),(lanes=createFiberFromText(newChild,returnFiber.mode,lanes)).return=returnFiber,returnFiber=lanes),placeSingleChild(returnFiber)):deleteRemainingChildren(returnFiber,currentFirstChild)}return function(returnFiber,currentFirstChild,newChild,lanes){try{thenableIndexCounter$1=0;var firstChildFiber=reconcileChildFibersImpl(returnFiber,currentFirstChild,newChild,lanes);return thenableState$1=null,firstChildFiber}catch(x){if(x===SuspenseException)throw x;var fiber=createFiberImplClass(29,x,null,returnFiber.mode);return fiber.lanes=lanes,fiber.return=returnFiber,fiber}}}var reconcileChildFibers=createChildReconciler(!0),mountChildFibers=createChildReconciler(!1),currentTreeHiddenStackCursor=createCursor(null),prevEntangledRenderLanesCursor=createCursor(0);function pushHiddenContext(fiber,context){push(prevEntangledRenderLanesCursor,fiber=entangledRenderLanes),push(currentTreeHiddenStackCursor,context),entangledRenderLanes=fiber|context.baseLanes}function reuseHiddenContextOnStack(){push(prevEntangledRenderLanesCursor,entangledRenderLanes),push(currentTreeHiddenStackCursor,currentTreeHiddenStackCursor.current)}function popHiddenContext(){entangledRenderLanes=prevEntangledRenderLanesCursor.current,pop(currentTreeHiddenStackCursor),pop(prevEntangledRenderLanesCursor)}var suspenseHandlerStackCursor=createCursor(null),shellBoundary=null;function pushPrimaryTreeSuspenseHandler(handler){var current=handler.alternate;push(suspenseStackCursor,1&suspenseStackCursor.current),push(suspenseHandlerStackCursor,handler),null===shellBoundary&&(null===current||null!==currentTreeHiddenStackCursor.current||null!==current.memoizedState)&&(shellBoundary=handler)}function pushOffscreenSuspenseHandler(fiber){if(22===fiber.tag){if(push(suspenseStackCursor,suspenseStackCursor.current),push(suspenseHandlerStackCursor,fiber),null===shellBoundary){var current=fiber.alternate;null!==current&&null!==current.memoizedState&&(shellBoundary=fiber)}}else reuseSuspenseHandlerOnStack()}function reuseSuspenseHandlerOnStack(){push(suspenseStackCursor,suspenseStackCursor.current),push(suspenseHandlerStackCursor,suspenseHandlerStackCursor.current)}function popSuspenseHandler(fiber){pop(suspenseHandlerStackCursor),shellBoundary===fiber&&(shellBoundary=null),pop(suspenseStackCursor)}var suspenseStackCursor=createCursor(0);function findFirstSuspended(row){for(var node=row;null!==node;){if(13===node.tag){var state=node.memoizedState;if(null!==state&&(null===(state=state.dehydrated)||"$?"===state.data||"$!"===state.data))return node}else if(19===node.tag&&void 0!==node.memoizedProps.revealOrder){if(128&node.flags)return node}else if(null!==node.child){node.child.return=node,node=node.child;continue}if(node===row)break;for(;null===node.sibling;){if(null===node.return||node.return===row)return null;node=node.return}node.sibling.return=node.return,node=node.sibling}return null}var AbortControllerLocal="undefined"!=typeof AbortController?AbortController:function(){var listeners=[],signal=this.signal={aborted:!1,addEventListener:function(type,listener){listeners.push(listener)}};this.abort=function(){signal.aborted=!0,listeners.forEach((function(listener){return listener()}))}},scheduleCallback$2=Scheduler.unstable_scheduleCallback,NormalPriority=Scheduler.unstable_NormalPriority,CacheContext={$$typeof:REACT_CONTEXT_TYPE,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function createCache(){return{controller:new AbortControllerLocal,data:new Map,refCount:0}}function releaseCache(cache){cache.refCount--,0===cache.refCount&&scheduleCallback$2(NormalPriority,(function(){cache.controller.abort()}))}var currentEntangledListeners=null,currentEntangledPendingCount=0,currentEntangledLane=0,currentEntangledActionThenable=null;function pingEngtangledActionScope(){if(0==--currentEntangledPendingCount&&null!==currentEntangledListeners){null!==currentEntangledActionThenable&&(currentEntangledActionThenable.status="fulfilled");var listeners=currentEntangledListeners;currentEntangledListeners=null,currentEntangledLane=0,currentEntangledActionThenable=null;for(var i=0;i<listeners.length;i++)(0,listeners[i])()}}var prevOnStartTransitionFinish=ReactSharedInternals.S;ReactSharedInternals.S=function(transition,returnValue){"object"==typeof returnValue&&null!==returnValue&&"function"==typeof returnValue.then&&function(transition,thenable){if(null===currentEntangledListeners){var entangledListeners=currentEntangledListeners=[];currentEntangledPendingCount=0,currentEntangledLane=requestTransitionLane(),currentEntangledActionThenable={status:"pending",value:void 0,then:function(resolve){entangledListeners.push(resolve)}}}currentEntangledPendingCount++,thenable.then(pingEngtangledActionScope,pingEngtangledActionScope)}(0,returnValue),null!==prevOnStartTransitionFinish&&prevOnStartTransitionFinish(transition,returnValue)};var resumedCache=createCursor(null);function peekCacheFromPool(){var cacheResumedFromPreviousRender=resumedCache.current;return null!==cacheResumedFromPreviousRender?cacheResumedFromPreviousRender:workInProgressRoot.pooledCache}function pushTransition(offscreenWorkInProgress,prevCachePool){push(resumedCache,null===prevCachePool?resumedCache.current:prevCachePool.pool)}function getSuspendedCache(){var cacheFromPool=peekCacheFromPool();return null===cacheFromPool?null:{parent:CacheContext._currentValue,pool:cacheFromPool}}var renderLanes=0,currentlyRenderingFiber$1=null,currentHook=null,workInProgressHook=null,didScheduleRenderPhaseUpdate=!1,didScheduleRenderPhaseUpdateDuringThisPass=!1,shouldDoubleInvokeUserFnsInHooksDEV=!1,localIdCounter=0,thenableIndexCounter=0,thenableState=null,globalClientIdCounter=0;function throwInvalidHookError(){throw Error(formatProdErrorMessage(321))}function areHookInputsEqual(nextDeps,prevDeps){if(null===prevDeps)return!1;for(var i=0;i<prevDeps.length&&i<nextDeps.length;i++)if(!objectIs(nextDeps[i],prevDeps[i]))return!1;return!0}function renderWithHooks(current,workInProgress,Component,props,secondArg,nextRenderLanes){return renderLanes=nextRenderLanes,currentlyRenderingFiber$1=workInProgress,workInProgress.memoizedState=null,workInProgress.updateQueue=null,workInProgress.lanes=0,ReactSharedInternals.H=null===current||null===current.memoizedState?HooksDispatcherOnMount:HooksDispatcherOnUpdate,shouldDoubleInvokeUserFnsInHooksDEV=!1,nextRenderLanes=Component(props,secondArg),shouldDoubleInvokeUserFnsInHooksDEV=!1,didScheduleRenderPhaseUpdateDuringThisPass&&(nextRenderLanes=renderWithHooksAgain(workInProgress,Component,props,secondArg)),finishRenderingHooks(current),nextRenderLanes}function finishRenderingHooks(current){ReactSharedInternals.H=ContextOnlyDispatcher;var didRenderTooFewHooks=null!==currentHook&&null!==currentHook.next;if(renderLanes=0,workInProgressHook=currentHook=currentlyRenderingFiber$1=null,didScheduleRenderPhaseUpdate=!1,thenableIndexCounter=0,thenableState=null,didRenderTooFewHooks)throw Error(formatProdErrorMessage(300));null===current||didReceiveUpdate||null!==(current=current.dependencies)&&checkIfContextChanged(current)&&(didReceiveUpdate=!0)}function renderWithHooksAgain(workInProgress,Component,props,secondArg){currentlyRenderingFiber$1=workInProgress;var numberOfReRenders=0;do{if(didScheduleRenderPhaseUpdateDuringThisPass&&(thenableState=null),thenableIndexCounter=0,didScheduleRenderPhaseUpdateDuringThisPass=!1,25<=numberOfReRenders)throw Error(formatProdErrorMessage(301));if(numberOfReRenders+=1,workInProgressHook=currentHook=null,null!=workInProgress.updateQueue){var children=workInProgress.updateQueue;children.lastEffect=null,children.events=null,children.stores=null,null!=children.memoCache&&(children.memoCache.index=0)}ReactSharedInternals.H=HooksDispatcherOnRerender,children=Component(props,secondArg)}while(didScheduleRenderPhaseUpdateDuringThisPass);return children}function TransitionAwareHostComponent(){var dispatcher=ReactSharedInternals.H,maybeThenable=dispatcher.useState()[0];return maybeThenable="function"==typeof maybeThenable.then?useThenable(maybeThenable):maybeThenable,dispatcher=dispatcher.useState()[0],(null!==currentHook?currentHook.memoizedState:null)!==dispatcher&&(currentlyRenderingFiber$1.flags|=1024),maybeThenable}function checkDidRenderIdHook(){var didRenderIdHook=0!==localIdCounter;return localIdCounter=0,didRenderIdHook}function bailoutHooks(current,workInProgress,lanes){workInProgress.updateQueue=current.updateQueue,workInProgress.flags&=-2053,current.lanes&=~lanes}function resetHooksOnUnwind(workInProgress){if(didScheduleRenderPhaseUpdate){for(workInProgress=workInProgress.memoizedState;null!==workInProgress;){var queue=workInProgress.queue;null!==queue&&(queue.pending=null),workInProgress=workInProgress.next}didScheduleRenderPhaseUpdate=!1}renderLanes=0,workInProgressHook=currentHook=currentlyRenderingFiber$1=null,didScheduleRenderPhaseUpdateDuringThisPass=!1,thenableIndexCounter=localIdCounter=0,thenableState=null}function mountWorkInProgressHook(){var hook={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===workInProgressHook?currentlyRenderingFiber$1.memoizedState=workInProgressHook=hook:workInProgressHook=workInProgressHook.next=hook,workInProgressHook}function updateWorkInProgressHook(){if(null===currentHook){var nextCurrentHook=currentlyRenderingFiber$1.alternate;nextCurrentHook=null!==nextCurrentHook?nextCurrentHook.memoizedState:null}else nextCurrentHook=currentHook.next;var nextWorkInProgressHook=null===workInProgressHook?currentlyRenderingFiber$1.memoizedState:workInProgressHook.next;if(null!==nextWorkInProgressHook)workInProgressHook=nextWorkInProgressHook,currentHook=nextCurrentHook;else{if(null===nextCurrentHook){if(null===currentlyRenderingFiber$1.alternate)throw Error(formatProdErrorMessage(467));throw Error(formatProdErrorMessage(310))}nextCurrentHook={memoizedState:(currentHook=nextCurrentHook).memoizedState,baseState:currentHook.baseState,baseQueue:currentHook.baseQueue,queue:currentHook.queue,next:null},null===workInProgressHook?currentlyRenderingFiber$1.memoizedState=workInProgressHook=nextCurrentHook:workInProgressHook=workInProgressHook.next=nextCurrentHook}return workInProgressHook}function useThenable(thenable){var index=thenableIndexCounter;return thenableIndexCounter+=1,null===thenableState&&(thenableState=[]),thenable=trackUsedThenable(thenableState,thenable,index),index=currentlyRenderingFiber$1,null===(null===workInProgressHook?index.memoizedState:workInProgressHook.next)&&(index=index.alternate,ReactSharedInternals.H=null===index||null===index.memoizedState?HooksDispatcherOnMount:HooksDispatcherOnUpdate),thenable}function use(usable){if(null!==usable&&"object"==typeof usable){if("function"==typeof usable.then)return useThenable(usable);if(usable.$$typeof===REACT_CONTEXT_TYPE)return readContext(usable)}throw Error(formatProdErrorMessage(438,String(usable)))}function useMemoCache(size){var memoCache=null,updateQueue=currentlyRenderingFiber$1.updateQueue;if(null!==updateQueue&&(memoCache=updateQueue.memoCache),null==memoCache){var current=currentlyRenderingFiber$1.alternate;null!==current&&(null!==(current=current.updateQueue)&&(null!=(current=current.memoCache)&&(memoCache={data:current.data.map((function(array){return array.slice()})),index:0})))}if(null==memoCache&&(memoCache={data:[],index:0}),null===updateQueue&&(updateQueue={lastEffect:null,events:null,stores:null,memoCache:null},currentlyRenderingFiber$1.updateQueue=updateQueue),updateQueue.memoCache=memoCache,void 0===(updateQueue=memoCache.data[memoCache.index]))for(updateQueue=memoCache.data[memoCache.index]=Array(size),current=0;current<size;current++)updateQueue[current]=REACT_MEMO_CACHE_SENTINEL;return memoCache.index++,updateQueue}function basicStateReducer(state,action){return"function"==typeof action?action(state):action}function updateReducer(reducer){return updateReducerImpl(updateWorkInProgressHook(),currentHook,reducer)}function updateReducerImpl(hook,current,reducer){var queue=hook.queue;if(null===queue)throw Error(formatProdErrorMessage(311));queue.lastRenderedReducer=reducer;var baseQueue=hook.baseQueue,pendingQueue=queue.pending;if(null!==pendingQueue){if(null!==baseQueue){var baseFirst=baseQueue.next;baseQueue.next=pendingQueue.next,pendingQueue.next=baseFirst}current.baseQueue=baseQueue=pendingQueue,queue.pending=null}if(pendingQueue=hook.baseState,null===baseQueue)hook.memoizedState=pendingQueue;else{var newBaseQueueFirst=baseFirst=null,newBaseQueueLast=null,update=current=baseQueue.next,didReadFromEntangledAsyncAction$54=!1;do{var updateLane=-536870913&update.lane;if(updateLane!==update.lane?(workInProgressRootRenderLanes&updateLane)===updateLane:(renderLanes&updateLane)===updateLane){var revertLane=update.revertLane;if(0===revertLane)null!==newBaseQueueLast&&(newBaseQueueLast=newBaseQueueLast.next={lane:0,revertLane:0,action:update.action,hasEagerState:update.hasEagerState,eagerState:update.eagerState,next:null}),updateLane===currentEntangledLane&&(didReadFromEntangledAsyncAction$54=!0);else{if((renderLanes&revertLane)===revertLane){update=update.next,revertLane===currentEntangledLane&&(didReadFromEntangledAsyncAction$54=!0);continue}updateLane={lane:0,revertLane:update.revertLane,action:update.action,hasEagerState:update.hasEagerState,eagerState:update.eagerState,next:null},null===newBaseQueueLast?(newBaseQueueFirst=newBaseQueueLast=updateLane,baseFirst=pendingQueue):newBaseQueueLast=newBaseQueueLast.next=updateLane,currentlyRenderingFiber$1.lanes|=revertLane,workInProgressRootSkippedLanes|=revertLane}updateLane=update.action,shouldDoubleInvokeUserFnsInHooksDEV&&reducer(pendingQueue,updateLane),pendingQueue=update.hasEagerState?update.eagerState:reducer(pendingQueue,updateLane)}else revertLane={lane:updateLane,revertLane:update.revertLane,action:update.action,hasEagerState:update.hasEagerState,eagerState:update.eagerState,next:null},null===newBaseQueueLast?(newBaseQueueFirst=newBaseQueueLast=revertLane,baseFirst=pendingQueue):newBaseQueueLast=newBaseQueueLast.next=revertLane,currentlyRenderingFiber$1.lanes|=updateLane,workInProgressRootSkippedLanes|=updateLane;update=update.next}while(null!==update&&update!==current);if(null===newBaseQueueLast?baseFirst=pendingQueue:newBaseQueueLast.next=newBaseQueueFirst,!objectIs(pendingQueue,hook.memoizedState)&&(didReceiveUpdate=!0,didReadFromEntangledAsyncAction$54&&null!==(reducer=currentEntangledActionThenable)))throw reducer;hook.memoizedState=pendingQueue,hook.baseState=baseFirst,hook.baseQueue=newBaseQueueLast,queue.lastRenderedState=pendingQueue}return null===baseQueue&&(queue.lanes=0),[hook.memoizedState,queue.dispatch]}function rerenderReducer(reducer){var hook=updateWorkInProgressHook(),queue=hook.queue;if(null===queue)throw Error(formatProdErrorMessage(311));queue.lastRenderedReducer=reducer;var dispatch=queue.dispatch,lastRenderPhaseUpdate=queue.pending,newState=hook.memoizedState;if(null!==lastRenderPhaseUpdate){queue.pending=null;var update=lastRenderPhaseUpdate=lastRenderPhaseUpdate.next;do{newState=reducer(newState,update.action),update=update.next}while(update!==lastRenderPhaseUpdate);objectIs(newState,hook.memoizedState)||(didReceiveUpdate=!0),hook.memoizedState=newState,null===hook.baseQueue&&(hook.baseState=newState),queue.lastRenderedState=newState}return[newState,dispatch]}function updateSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){var fiber=currentlyRenderingFiber$1,hook=updateWorkInProgressHook(),isHydrating$jscomp$0=isHydrating;if(isHydrating$jscomp$0){if(void 0===getServerSnapshot)throw Error(formatProdErrorMessage(407));getServerSnapshot=getServerSnapshot()}else getServerSnapshot=getSnapshot();var snapshotChanged=!objectIs((currentHook||hook).memoizedState,getServerSnapshot);if(snapshotChanged&&(hook.memoizedState=getServerSnapshot,didReceiveUpdate=!0),hook=hook.queue,updateEffect(subscribeToStore.bind(null,fiber,hook,subscribe),[subscribe]),hook.getSnapshot!==getSnapshot||snapshotChanged||null!==workInProgressHook&&1&workInProgressHook.memoizedState.tag){if(fiber.flags|=2048,pushEffect(9,updateStoreInstance.bind(null,fiber,hook,getServerSnapshot,getSnapshot),{destroy:void 0},null),null===workInProgressRoot)throw Error(formatProdErrorMessage(349));isHydrating$jscomp$0||60&renderLanes||pushStoreConsistencyCheck(fiber,getSnapshot,getServerSnapshot)}return getServerSnapshot}function pushStoreConsistencyCheck(fiber,getSnapshot,renderedSnapshot){fiber.flags|=16384,fiber={getSnapshot:getSnapshot,value:renderedSnapshot},null===(getSnapshot=currentlyRenderingFiber$1.updateQueue)?(getSnapshot={lastEffect:null,events:null,stores:null,memoCache:null},currentlyRenderingFiber$1.updateQueue=getSnapshot,getSnapshot.stores=[fiber]):null===(renderedSnapshot=getSnapshot.stores)?getSnapshot.stores=[fiber]:renderedSnapshot.push(fiber)}function updateStoreInstance(fiber,inst,nextSnapshot,getSnapshot){inst.value=nextSnapshot,inst.getSnapshot=getSnapshot,checkIfSnapshotChanged(inst)&&forceStoreRerender(fiber)}function subscribeToStore(fiber,inst,subscribe){return subscribe((function(){checkIfSnapshotChanged(inst)&&forceStoreRerender(fiber)}))}function checkIfSnapshotChanged(inst){var latestGetSnapshot=inst.getSnapshot;inst=inst.value;try{var nextValue=latestGetSnapshot();return!objectIs(inst,nextValue)}catch(error){return!0}}function forceStoreRerender(fiber){var root=enqueueConcurrentRenderForLane(fiber,2);null!==root&&scheduleUpdateOnFiber(root,fiber,2)}function mountStateImpl(initialState){var hook=mountWorkInProgressHook();if("function"==typeof initialState){var initialStateInitializer=initialState;if(initialState=initialStateInitializer(),shouldDoubleInvokeUserFnsInHooksDEV){setIsStrictModeForDevtools(!0);try{initialStateInitializer()}finally{setIsStrictModeForDevtools(!1)}}}return hook.memoizedState=hook.baseState=initialState,hook.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:basicStateReducer,lastRenderedState:initialState},hook}function updateOptimisticImpl(hook,current,passthrough,reducer){return hook.baseState=passthrough,updateReducerImpl(hook,currentHook,"function"==typeof reducer?reducer:basicStateReducer)}function dispatchActionState(fiber,actionQueue,setPendingState,setState,payload){if(isRenderPhaseUpdate(fiber))throw Error(formatProdErrorMessage(485));if(null!==(fiber=actionQueue.action)){var actionNode={payload:payload,action:fiber,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(listener){actionNode.listeners.push(listener)}};null!==ReactSharedInternals.T?setPendingState(!0):actionNode.isTransition=!1,setState(actionNode),null===(setPendingState=actionQueue.pending)?(actionNode.next=actionQueue.pending=actionNode,runActionStateAction(actionQueue,actionNode)):(actionNode.next=setPendingState.next,actionQueue.pending=setPendingState.next=actionNode)}}function runActionStateAction(actionQueue,node){var action=node.action,payload=node.payload,prevState=actionQueue.state;if(node.isTransition){var prevTransition=ReactSharedInternals.T,currentTransition={};ReactSharedInternals.T=currentTransition;try{var returnValue=action(prevState,payload),onStartTransitionFinish=ReactSharedInternals.S;null!==onStartTransitionFinish&&onStartTransitionFinish(currentTransition,returnValue),handleActionReturnValue(actionQueue,node,returnValue)}catch(error){onActionError(actionQueue,node,error)}finally{ReactSharedInternals.T=prevTransition}}else try{handleActionReturnValue(actionQueue,node,prevTransition=action(prevState,payload))}catch(error$60){onActionError(actionQueue,node,error$60)}}function handleActionReturnValue(actionQueue,node,returnValue){null!==returnValue&&"object"==typeof returnValue&&"function"==typeof returnValue.then?returnValue.then((function(nextState){onActionSuccess(actionQueue,node,nextState)}),(function(error){return onActionError(actionQueue,node,error)})):onActionSuccess(actionQueue,node,returnValue)}function onActionSuccess(actionQueue,actionNode,nextState){actionNode.status="fulfilled",actionNode.value=nextState,notifyActionListeners(actionNode),actionQueue.state=nextState,null!==(actionNode=actionQueue.pending)&&((nextState=actionNode.next)===actionNode?actionQueue.pending=null:(nextState=nextState.next,actionNode.next=nextState,runActionStateAction(actionQueue,nextState)))}function onActionError(actionQueue,actionNode,error){var last=actionQueue.pending;if(actionQueue.pending=null,null!==last){last=last.next;do{actionNode.status="rejected",actionNode.reason=error,notifyActionListeners(actionNode),actionNode=actionNode.next}while(actionNode!==last)}actionQueue.action=null}function notifyActionListeners(actionNode){actionNode=actionNode.listeners;for(var i=0;i<actionNode.length;i++)(0,actionNode[i])()}function actionStateReducer(oldState,newState){return newState}function mountActionState(action,initialStateProp){if(isHydrating){var ssrFormState=workInProgressRoot.formState;if(null!==ssrFormState){a:{var JSCompiler_inline_result=currentlyRenderingFiber$1;if(isHydrating){if(nextHydratableInstance){b:{for(var JSCompiler_inline_result$jscomp$0=nextHydratableInstance,inRootOrSingleton=rootOrSingletonContext;8!==JSCompiler_inline_result$jscomp$0.nodeType;){if(!inRootOrSingleton){JSCompiler_inline_result$jscomp$0=null;break b}if(null===(JSCompiler_inline_result$jscomp$0=getNextHydratable(JSCompiler_inline_result$jscomp$0.nextSibling))){JSCompiler_inline_result$jscomp$0=null;break b}}JSCompiler_inline_result$jscomp$0="F!"===(inRootOrSingleton=JSCompiler_inline_result$jscomp$0.data)||"F"===inRootOrSingleton?JSCompiler_inline_result$jscomp$0:null}if(JSCompiler_inline_result$jscomp$0){nextHydratableInstance=getNextHydratable(JSCompiler_inline_result$jscomp$0.nextSibling),JSCompiler_inline_result="F!"===JSCompiler_inline_result$jscomp$0.data;break a}}throwOnHydrationMismatch(JSCompiler_inline_result)}JSCompiler_inline_result=!1}JSCompiler_inline_result&&(initialStateProp=ssrFormState[0])}}return(ssrFormState=mountWorkInProgressHook()).memoizedState=ssrFormState.baseState=initialStateProp,JSCompiler_inline_result={pending:null,lanes:0,dispatch:null,lastRenderedReducer:actionStateReducer,lastRenderedState:initialStateProp},ssrFormState.queue=JSCompiler_inline_result,ssrFormState=dispatchSetState.bind(null,currentlyRenderingFiber$1,JSCompiler_inline_result),JSCompiler_inline_result.dispatch=ssrFormState,JSCompiler_inline_result=mountStateImpl(!1),inRootOrSingleton=dispatchOptimisticSetState.bind(null,currentlyRenderingFiber$1,!1,JSCompiler_inline_result.queue),JSCompiler_inline_result$jscomp$0={state:initialStateProp,dispatch:null,action:action,pending:null},(JSCompiler_inline_result=mountWorkInProgressHook()).queue=JSCompiler_inline_result$jscomp$0,ssrFormState=dispatchActionState.bind(null,currentlyRenderingFiber$1,JSCompiler_inline_result$jscomp$0,inRootOrSingleton,ssrFormState),JSCompiler_inline_result$jscomp$0.dispatch=ssrFormState,JSCompiler_inline_result.memoizedState=action,[initialStateProp,ssrFormState,!1]}function updateActionState(action){return updateActionStateImpl(updateWorkInProgressHook(),currentHook,action)}function updateActionStateImpl(stateHook,currentStateHook,action){currentStateHook=updateReducerImpl(stateHook,currentStateHook,actionStateReducer)[0],stateHook=updateReducer(basicStateReducer)[0],currentStateHook="object"==typeof currentStateHook&&null!==currentStateHook&&"function"==typeof currentStateHook.then?useThenable(currentStateHook):currentStateHook;var actionQueueHook=updateWorkInProgressHook(),actionQueue=actionQueueHook.queue,dispatch=actionQueue.dispatch;return action!==actionQueueHook.memoizedState&&(currentlyRenderingFiber$1.flags|=2048,pushEffect(9,actionStateActionEffect.bind(null,actionQueue,action),{destroy:void 0},null)),[currentStateHook,dispatch,stateHook]}function actionStateActionEffect(actionQueue,action){actionQueue.action=action}function rerenderActionState(action){var stateHook=updateWorkInProgressHook(),currentStateHook=currentHook;if(null!==currentStateHook)return updateActionStateImpl(stateHook,currentStateHook,action);updateWorkInProgressHook(),stateHook=stateHook.memoizedState;var dispatch=(currentStateHook=updateWorkInProgressHook()).queue.dispatch;return currentStateHook.memoizedState=action,[stateHook,dispatch,!1]}function pushEffect(tag,create,inst,deps){return tag={tag:tag,create:create,inst:inst,deps:deps,next:null},null===(create=currentlyRenderingFiber$1.updateQueue)&&(create={lastEffect:null,events:null,stores:null,memoCache:null},currentlyRenderingFiber$1.updateQueue=create),null===(inst=create.lastEffect)?create.lastEffect=tag.next=tag:(deps=inst.next,inst.next=tag,tag.next=deps,create.lastEffect=tag),tag}function updateRef(){return updateWorkInProgressHook().memoizedState}function mountEffectImpl(fiberFlags,hookFlags,create,deps){var hook=mountWorkInProgressHook();currentlyRenderingFiber$1.flags|=fiberFlags,hook.memoizedState=pushEffect(1|hookFlags,create,{destroy:void 0},void 0===deps?null:deps)}function updateEffectImpl(fiberFlags,hookFlags,create,deps){var hook=updateWorkInProgressHook();deps=void 0===deps?null:deps;var inst=hook.memoizedState.inst;null!==currentHook&&null!==deps&&areHookInputsEqual(deps,currentHook.memoizedState.deps)?hook.memoizedState=pushEffect(hookFlags,create,inst,deps):(currentlyRenderingFiber$1.flags|=fiberFlags,hook.memoizedState=pushEffect(1|hookFlags,create,inst,deps))}function mountEffect(create,deps){mountEffectImpl(8390656,8,create,deps)}function updateEffect(create,deps){updateEffectImpl(2048,8,create,deps)}function updateInsertionEffect(create,deps){return updateEffectImpl(4,2,create,deps)}function updateLayoutEffect(create,deps){return updateEffectImpl(4,4,create,deps)}function imperativeHandleEffect(create,ref){if("function"==typeof ref){create=create();var refCleanup=ref(create);return function(){"function"==typeof refCleanup?refCleanup():ref(null)}}if(null!=ref)return create=create(),ref.current=create,function(){ref.current=null}}function updateImperativeHandle(ref,create,deps){deps=null!=deps?deps.concat([ref]):null,updateEffectImpl(4,4,imperativeHandleEffect.bind(null,create,ref),deps)}function mountDebugValue(){}function updateCallback(callback,deps){var hook=updateWorkInProgressHook();deps=void 0===deps?null:deps;var prevState=hook.memoizedState;return null!==deps&&areHookInputsEqual(deps,prevState[1])?prevState[0]:(hook.memoizedState=[callback,deps],callback)}function updateMemo(nextCreate,deps){var hook=updateWorkInProgressHook();deps=void 0===deps?null:deps;var prevState=hook.memoizedState;if(null!==deps&&areHookInputsEqual(deps,prevState[1]))return prevState[0];if(prevState=nextCreate(),shouldDoubleInvokeUserFnsInHooksDEV){setIsStrictModeForDevtools(!0);try{nextCreate()}finally{setIsStrictModeForDevtools(!1)}}return hook.memoizedState=[prevState,deps],prevState}function mountDeferredValueImpl(hook,value,initialValue){return void 0===initialValue||1073741824&renderLanes?hook.memoizedState=value:(hook.memoizedState=initialValue,hook=requestDeferredLane(),currentlyRenderingFiber$1.lanes|=hook,workInProgressRootSkippedLanes|=hook,initialValue)}function updateDeferredValueImpl(hook,prevValue,value,initialValue){return objectIs(value,prevValue)?value:null!==currentTreeHiddenStackCursor.current?(hook=mountDeferredValueImpl(hook,value,initialValue),objectIs(hook,prevValue)||(didReceiveUpdate=!0),hook):42&renderLanes?(hook=requestDeferredLane(),currentlyRenderingFiber$1.lanes|=hook,workInProgressRootSkippedLanes|=hook,prevValue):(didReceiveUpdate=!0,hook.memoizedState=value)}function startTransition(fiber,queue,pendingState,finishedState,callback){var previousPriority=ReactDOMSharedInternals.p;ReactDOMSharedInternals.p=0!==previousPriority&&8>previousPriority?previousPriority:8;var result,listeners,thenableWithOverride,prevTransition=ReactSharedInternals.T,currentTransition={};ReactSharedInternals.T=currentTransition,dispatchOptimisticSetState(fiber,!1,queue,pendingState);try{var returnValue=callback(),onStartTransitionFinish=ReactSharedInternals.S;if(null!==onStartTransitionFinish&&onStartTransitionFinish(currentTransition,returnValue),null!==returnValue&&"object"==typeof returnValue&&"function"==typeof returnValue.then)dispatchSetStateInternal(fiber,queue,(result=finishedState,listeners=[],thenableWithOverride={status:"pending",value:null,reason:null,then:function(resolve){listeners.push(resolve)}},returnValue.then((function(){thenableWithOverride.status="fulfilled",thenableWithOverride.value=result;for(var i=0;i<listeners.length;i++)(0,listeners[i])(result)}),(function(error){for(thenableWithOverride.status="rejected",thenableWithOverride.reason=error,error=0;error<listeners.length;error++)(0,listeners[error])(void 0)})),thenableWithOverride),requestUpdateLane());else dispatchSetStateInternal(fiber,queue,finishedState,requestUpdateLane())}catch(error){dispatchSetStateInternal(fiber,queue,{then:function(){},status:"rejected",reason:error},requestUpdateLane())}finally{ReactDOMSharedInternals.p=previousPriority,ReactSharedInternals.T=prevTransition}}function noop$2(){}function startHostTransition(formFiber,pendingState,action,formData){if(5!==formFiber.tag)throw Error(formatProdErrorMessage(476));var queue=ensureFormComponentIsStateful(formFiber).queue;startTransition(formFiber,queue,pendingState,sharedNotPendingObject,null===action?noop$2:function(){return requestFormReset$1(formFiber),action(formData)})}function ensureFormComponentIsStateful(formFiber){var existingStateHook=formFiber.memoizedState;if(null!==existingStateHook)return existingStateHook;var initialResetState={};return(existingStateHook={memoizedState:sharedNotPendingObject,baseState:sharedNotPendingObject,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:basicStateReducer,lastRenderedState:sharedNotPendingObject},next:null}).next={memoizedState:initialResetState,baseState:initialResetState,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:basicStateReducer,lastRenderedState:initialResetState},next:null},formFiber.memoizedState=existingStateHook,null!==(formFiber=formFiber.alternate)&&(formFiber.memoizedState=existingStateHook),existingStateHook}function requestFormReset$1(formFiber){dispatchSetStateInternal(formFiber,ensureFormComponentIsStateful(formFiber).next.queue,{},requestUpdateLane())}function useHostTransitionStatus(){return readContext(HostTransitionContext)}function updateId(){return updateWorkInProgressHook().memoizedState}function updateRefresh(){return updateWorkInProgressHook().memoizedState}function refreshCache(fiber){for(var provider=fiber.return;null!==provider;){switch(provider.tag){case 24:case 3:var lane=requestUpdateLane(),root$63=enqueueUpdate(provider,fiber=createUpdate(lane),lane);return null!==root$63&&(scheduleUpdateOnFiber(root$63,provider,lane),entangleTransitions(root$63,provider,lane)),provider={cache:createCache()},void(fiber.payload=provider)}provider=provider.return}}function dispatchReducerAction(fiber,queue,action){var lane=requestUpdateLane();action={lane:lane,revertLane:0,action:action,hasEagerState:!1,eagerState:null,next:null},isRenderPhaseUpdate(fiber)?enqueueRenderPhaseUpdate(queue,action):null!==(action=enqueueConcurrentHookUpdate(fiber,queue,action,lane))&&(scheduleUpdateOnFiber(action,fiber,lane),entangleTransitionUpdate(action,queue,lane))}function dispatchSetState(fiber,queue,action){dispatchSetStateInternal(fiber,queue,action,requestUpdateLane())}function dispatchSetStateInternal(fiber,queue,action,lane){var update={lane:lane,revertLane:0,action:action,hasEagerState:!1,eagerState:null,next:null};if(isRenderPhaseUpdate(fiber))enqueueRenderPhaseUpdate(queue,update);else{var alternate=fiber.alternate;if(0===fiber.lanes&&(null===alternate||0===alternate.lanes)&&null!==(alternate=queue.lastRenderedReducer))try{var currentState=queue.lastRenderedState,eagerState=alternate(currentState,action);if(update.hasEagerState=!0,update.eagerState=eagerState,objectIs(eagerState,currentState))return enqueueUpdate$1(fiber,queue,update,0),null===workInProgressRoot&&finishQueueingConcurrentUpdates(),!1}catch(error){}if(null!==(action=enqueueConcurrentHookUpdate(fiber,queue,update,lane)))return scheduleUpdateOnFiber(action,fiber,lane),entangleTransitionUpdate(action,queue,lane),!0}return!1}function dispatchOptimisticSetState(fiber,throwIfDuringRender,queue,action){if(action={lane:2,revertLane:requestTransitionLane(),action:action,hasEagerState:!1,eagerState:null,next:null},isRenderPhaseUpdate(fiber)){if(throwIfDuringRender)throw Error(formatProdErrorMessage(479))}else null!==(throwIfDuringRender=enqueueConcurrentHookUpdate(fiber,queue,action,2))&&scheduleUpdateOnFiber(throwIfDuringRender,fiber,2)}function isRenderPhaseUpdate(fiber){var alternate=fiber.alternate;return fiber===currentlyRenderingFiber$1||null!==alternate&&alternate===currentlyRenderingFiber$1}function enqueueRenderPhaseUpdate(queue,update){didScheduleRenderPhaseUpdateDuringThisPass=didScheduleRenderPhaseUpdate=!0;var pending=queue.pending;null===pending?update.next=update:(update.next=pending.next,pending.next=update),queue.pending=update}function entangleTransitionUpdate(root,queue,lane){if(4194176&lane){var queueLanes=queue.lanes;lane|=queueLanes&=root.pendingLanes,queue.lanes=lane,markRootEntangled(root,lane)}}var ContextOnlyDispatcher={readContext:readContext,use:use,useCallback:throwInvalidHookError,useContext:throwInvalidHookError,useEffect:throwInvalidHookError,useImperativeHandle:throwInvalidHookError,useLayoutEffect:throwInvalidHookError,useInsertionEffect:throwInvalidHookError,useMemo:throwInvalidHookError,useReducer:throwInvalidHookError,useRef:throwInvalidHookError,useState:throwInvalidHookError,useDebugValue:throwInvalidHookError,useDeferredValue:throwInvalidHookError,useTransition:throwInvalidHookError,useSyncExternalStore:throwInvalidHookError,useId:throwInvalidHookError};ContextOnlyDispatcher.useCacheRefresh=throwInvalidHookError,ContextOnlyDispatcher.useMemoCache=throwInvalidHookError,ContextOnlyDispatcher.useHostTransitionStatus=throwInvalidHookError,ContextOnlyDispatcher.useFormState=throwInvalidHookError,ContextOnlyDispatcher.useActionState=throwInvalidHookError,ContextOnlyDispatcher.useOptimistic=throwInvalidHookError;var HooksDispatcherOnMount={readContext:readContext,use:use,useCallback:function(callback,deps){return mountWorkInProgressHook().memoizedState=[callback,void 0===deps?null:deps],callback},useContext:readContext,useEffect:mountEffect,useImperativeHandle:function(ref,create,deps){deps=null!=deps?deps.concat([ref]):null,mountEffectImpl(4194308,4,imperativeHandleEffect.bind(null,create,ref),deps)},useLayoutEffect:function(create,deps){return mountEffectImpl(4194308,4,create,deps)},useInsertionEffect:function(create,deps){mountEffectImpl(4,2,create,deps)},useMemo:function(nextCreate,deps){var hook=mountWorkInProgressHook();deps=void 0===deps?null:deps;var nextValue=nextCreate();if(shouldDoubleInvokeUserFnsInHooksDEV){setIsStrictModeForDevtools(!0);try{nextCreate()}finally{setIsStrictModeForDevtools(!1)}}return hook.memoizedState=[nextValue,deps],nextValue},useReducer:function(reducer,initialArg,init){var hook=mountWorkInProgressHook();if(void 0!==init){var initialState=init(initialArg);if(shouldDoubleInvokeUserFnsInHooksDEV){setIsStrictModeForDevtools(!0);try{init(initialArg)}finally{setIsStrictModeForDevtools(!1)}}}else initialState=initialArg;return hook.memoizedState=hook.baseState=initialState,reducer={pending:null,lanes:0,dispatch:null,lastRenderedReducer:reducer,lastRenderedState:initialState},hook.queue=reducer,reducer=reducer.dispatch=dispatchReducerAction.bind(null,currentlyRenderingFiber$1,reducer),[hook.memoizedState,reducer]},useRef:function(initialValue){return initialValue={current:initialValue},mountWorkInProgressHook().memoizedState=initialValue},useState:function(initialState){var queue=(initialState=mountStateImpl(initialState)).queue,dispatch=dispatchSetState.bind(null,currentlyRenderingFiber$1,queue);return queue.dispatch=dispatch,[initialState.memoizedState,dispatch]},useDebugValue:mountDebugValue,useDeferredValue:function(value,initialValue){return mountDeferredValueImpl(mountWorkInProgressHook(),value,initialValue)},useTransition:function(){var stateHook=mountStateImpl(!1);return stateHook=startTransition.bind(null,currentlyRenderingFiber$1,stateHook.queue,!0,!1),mountWorkInProgressHook().memoizedState=stateHook,[!1,stateHook]},useSyncExternalStore:function(subscribe,getSnapshot,getServerSnapshot){var fiber=currentlyRenderingFiber$1,hook=mountWorkInProgressHook();if(isHydrating){if(void 0===getServerSnapshot)throw Error(formatProdErrorMessage(407));getServerSnapshot=getServerSnapshot()}else{if(getServerSnapshot=getSnapshot(),null===workInProgressRoot)throw Error(formatProdErrorMessage(349));60&workInProgressRootRenderLanes||pushStoreConsistencyCheck(fiber,getSnapshot,getServerSnapshot)}hook.memoizedState=getServerSnapshot;var inst={value:getServerSnapshot,getSnapshot:getSnapshot};return hook.queue=inst,mountEffect(subscribeToStore.bind(null,fiber,inst,subscribe),[subscribe]),fiber.flags|=2048,pushEffect(9,updateStoreInstance.bind(null,fiber,inst,getServerSnapshot,getSnapshot),{destroy:void 0},null),getServerSnapshot},useId:function(){var hook=mountWorkInProgressHook(),identifierPrefix=workInProgressRoot.identifierPrefix;if(isHydrating){var JSCompiler_inline_result=treeContextOverflow;identifierPrefix=":"+identifierPrefix+"R"+(JSCompiler_inline_result=(treeContextId&~(1<<32-clz32(treeContextId)-1)).toString(32)+JSCompiler_inline_result),0<(JSCompiler_inline_result=localIdCounter++)&&(identifierPrefix+="H"+JSCompiler_inline_result.toString(32)),identifierPrefix+=":"}else identifierPrefix=":"+identifierPrefix+"r"+(JSCompiler_inline_result=globalClientIdCounter++).toString(32)+":";return hook.memoizedState=identifierPrefix},useCacheRefresh:function(){return mountWorkInProgressHook().memoizedState=refreshCache.bind(null,currentlyRenderingFiber$1)}};HooksDispatcherOnMount.useMemoCache=useMemoCache,HooksDispatcherOnMount.useHostTransitionStatus=useHostTransitionStatus,HooksDispatcherOnMount.useFormState=mountActionState,HooksDispatcherOnMount.useActionState=mountActionState,HooksDispatcherOnMount.useOptimistic=function(passthrough){var hook=mountWorkInProgressHook();hook.memoizedState=hook.baseState=passthrough;var queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return hook.queue=queue,hook=dispatchOptimisticSetState.bind(null,currentlyRenderingFiber$1,!0,queue),queue.dispatch=hook,[passthrough,hook]};var HooksDispatcherOnUpdate={readContext:readContext,use:use,useCallback:updateCallback,useContext:readContext,useEffect:updateEffect,useImperativeHandle:updateImperativeHandle,useInsertionEffect:updateInsertionEffect,useLayoutEffect:updateLayoutEffect,useMemo:updateMemo,useReducer:updateReducer,useRef:updateRef,useState:function(){return updateReducer(basicStateReducer)},useDebugValue:mountDebugValue,useDeferredValue:function(value,initialValue){return updateDeferredValueImpl(updateWorkInProgressHook(),currentHook.memoizedState,value,initialValue)},useTransition:function(){var booleanOrThenable=updateReducer(basicStateReducer)[0],start=updateWorkInProgressHook().memoizedState;return["boolean"==typeof booleanOrThenable?booleanOrThenable:useThenable(booleanOrThenable),start]},useSyncExternalStore:updateSyncExternalStore,useId:updateId};HooksDispatcherOnUpdate.useCacheRefresh=updateRefresh,HooksDispatcherOnUpdate.useMemoCache=useMemoCache,HooksDispatcherOnUpdate.useHostTransitionStatus=useHostTransitionStatus,HooksDispatcherOnUpdate.useFormState=updateActionState,HooksDispatcherOnUpdate.useActionState=updateActionState,HooksDispatcherOnUpdate.useOptimistic=function(passthrough,reducer){return updateOptimisticImpl(updateWorkInProgressHook(),0,passthrough,reducer)};var HooksDispatcherOnRerender={readContext:readContext,use:use,useCallback:updateCallback,useContext:readContext,useEffect:updateEffect,useImperativeHandle:updateImperativeHandle,useInsertionEffect:updateInsertionEffect,useLayoutEffect:updateLayoutEffect,useMemo:updateMemo,useReducer:rerenderReducer,useRef:updateRef,useState:function(){return rerenderReducer(basicStateReducer)},useDebugValue:mountDebugValue,useDeferredValue:function(value,initialValue){var hook=updateWorkInProgressHook();return null===currentHook?mountDeferredValueImpl(hook,value,initialValue):updateDeferredValueImpl(hook,currentHook.memoizedState,value,initialValue)},useTransition:function(){var booleanOrThenable=rerenderReducer(basicStateReducer)[0],start=updateWorkInProgressHook().memoizedState;return["boolean"==typeof booleanOrThenable?booleanOrThenable:useThenable(booleanOrThenable),start]},useSyncExternalStore:updateSyncExternalStore,useId:updateId};function applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,nextProps){getDerivedStateFromProps=null==(getDerivedStateFromProps=getDerivedStateFromProps(nextProps,ctor=workInProgress.memoizedState))?ctor:assign({},ctor,getDerivedStateFromProps),workInProgress.memoizedState=getDerivedStateFromProps,0===workInProgress.lanes&&(workInProgress.updateQueue.baseState=getDerivedStateFromProps)}HooksDispatcherOnRerender.useCacheRefresh=updateRefresh,HooksDispatcherOnRerender.useMemoCache=useMemoCache,HooksDispatcherOnRerender.useHostTransitionStatus=useHostTransitionStatus,HooksDispatcherOnRerender.useFormState=rerenderActionState,HooksDispatcherOnRerender.useActionState=rerenderActionState,HooksDispatcherOnRerender.useOptimistic=function(passthrough,reducer){var hook=updateWorkInProgressHook();return null!==currentHook?updateOptimisticImpl(hook,0,passthrough,reducer):(hook.baseState=passthrough,[passthrough,hook.queue.dispatch])};var classComponentUpdater={isMounted:function(component){return!!(component=component._reactInternals)&&getNearestMountedFiber(component)===component},enqueueSetState:function(inst,payload,callback){inst=inst._reactInternals;var lane=requestUpdateLane(),update=createUpdate(lane);update.payload=payload,null!=callback&&(update.callback=callback),null!==(payload=enqueueUpdate(inst,update,lane))&&(scheduleUpdateOnFiber(payload,inst,lane),entangleTransitions(payload,inst,lane))},enqueueReplaceState:function(inst,payload,callback){inst=inst._reactInternals;var lane=requestUpdateLane(),update=createUpdate(lane);update.tag=1,update.payload=payload,null!=callback&&(update.callback=callback),null!==(payload=enqueueUpdate(inst,update,lane))&&(scheduleUpdateOnFiber(payload,inst,lane),entangleTransitions(payload,inst,lane))},enqueueForceUpdate:function(inst,callback){inst=inst._reactInternals;var lane=requestUpdateLane(),update=createUpdate(lane);update.tag=2,null!=callback&&(update.callback=callback),null!==(callback=enqueueUpdate(inst,update,lane))&&(scheduleUpdateOnFiber(callback,inst,lane),entangleTransitions(callback,inst,lane))}};function checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext){return"function"==typeof(workInProgress=workInProgress.stateNode).shouldComponentUpdate?workInProgress.shouldComponentUpdate(newProps,newState,nextContext):!ctor.prototype||!ctor.prototype.isPureReactComponent||(!shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState))}function callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext){workInProgress=instance.state,"function"==typeof instance.componentWillReceiveProps&&instance.componentWillReceiveProps(newProps,nextContext),"function"==typeof instance.UNSAFE_componentWillReceiveProps&&instance.UNSAFE_componentWillReceiveProps(newProps,nextContext),instance.state!==workInProgress&&classComponentUpdater.enqueueReplaceState(instance,instance.state,null)}function resolveClassComponentProps(Component,baseProps){var newProps=baseProps;if("ref"in baseProps)for(var propName in newProps={},baseProps)"ref"!==propName&&(newProps[propName]=baseProps[propName]);if(Component=Component.defaultProps)for(var propName$67 in newProps===baseProps&&(newProps=assign({},newProps)),Component)void 0===newProps[propName$67]&&(newProps[propName$67]=Component[propName$67]);return newProps}var reportGlobalError="function"==typeof reportError?reportError:function(error){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var event=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof error&&null!==error&&"string"==typeof error.message?String(error.message):String(error),error:error});if(!window.dispatchEvent(event))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",error);console.error(error)};function defaultOnUncaughtError(error){reportGlobalError(error)}function defaultOnCaughtError(error){console.error(error)}function defaultOnRecoverableError(error){reportGlobalError(error)}function logUncaughtError(root,errorInfo){try{(0,root.onUncaughtError)(errorInfo.value,{componentStack:errorInfo.stack})}catch(e$68){setTimeout((function(){throw e$68}))}}function logCaughtError(root,boundary,errorInfo){try{(0,root.onCaughtError)(errorInfo.value,{componentStack:errorInfo.stack,errorBoundary:1===boundary.tag?boundary.stateNode:null})}catch(e$69){setTimeout((function(){throw e$69}))}}function createRootErrorUpdate(root,errorInfo,lane){return(lane=createUpdate(lane)).tag=3,lane.payload={element:null},lane.callback=function(){logUncaughtError(root,errorInfo)},lane}function createClassErrorUpdate(lane){return(lane=createUpdate(lane)).tag=3,lane}function initializeClassErrorUpdate(update,root,fiber,errorInfo){var getDerivedStateFromError=fiber.type.getDerivedStateFromError;if("function"==typeof getDerivedStateFromError){var error=errorInfo.value;update.payload=function(){return getDerivedStateFromError(error)},update.callback=function(){logCaughtError(root,fiber,errorInfo)}}var inst=fiber.stateNode;null!==inst&&"function"==typeof inst.componentDidCatch&&(update.callback=function(){logCaughtError(root,fiber,errorInfo),"function"!=typeof getDerivedStateFromError&&(null===legacyErrorBoundariesThatAlreadyFailed?legacyErrorBoundariesThatAlreadyFailed=new Set([this]):legacyErrorBoundariesThatAlreadyFailed.add(this));var stack=errorInfo.stack;this.componentDidCatch(errorInfo.value,{componentStack:null!==stack?stack:""})})}var SelectiveHydrationException=Error(formatProdErrorMessage(461)),didReceiveUpdate=!1;function reconcileChildren(current,workInProgress,nextChildren,renderLanes){workInProgress.child=null===current?mountChildFibers(workInProgress,null,nextChildren,renderLanes):reconcileChildFibers(workInProgress,current.child,nextChildren,renderLanes)}function updateForwardRef(current,workInProgress,Component,nextProps,renderLanes){Component=Component.render;var ref=workInProgress.ref;if("ref"in nextProps){var propsWithoutRef={};for(var key in nextProps)"ref"!==key&&(propsWithoutRef[key]=nextProps[key])}else propsWithoutRef=nextProps;return prepareToReadContext(workInProgress),nextProps=renderWithHooks(current,workInProgress,Component,propsWithoutRef,ref,renderLanes),key=checkDidRenderIdHook(),null===current||didReceiveUpdate?(isHydrating&&key&&pushMaterializedTreeId(workInProgress),workInProgress.flags|=1,reconcileChildren(current,workInProgress,nextProps,renderLanes),workInProgress.child):(bailoutHooks(current,workInProgress,renderLanes),bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes))}function updateMemoComponent(current,workInProgress,Component,nextProps,renderLanes){if(null===current){var type=Component.type;return"function"!=typeof type||shouldConstruct(type)||void 0!==type.defaultProps||null!==Component.compare?((current=createFiberFromTypeAndProps(Component.type,null,nextProps,workInProgress,workInProgress.mode,renderLanes)).ref=workInProgress.ref,current.return=workInProgress,workInProgress.child=current):(workInProgress.tag=15,workInProgress.type=type,updateSimpleMemoComponent(current,workInProgress,type,nextProps,renderLanes))}if(type=current.child,!checkScheduledUpdateOrContext(current,renderLanes)){var prevProps=type.memoizedProps;if((Component=null!==(Component=Component.compare)?Component:shallowEqual)(prevProps,nextProps)&&current.ref===workInProgress.ref)return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes)}return workInProgress.flags|=1,(current=createWorkInProgress(type,nextProps)).ref=workInProgress.ref,current.return=workInProgress,workInProgress.child=current}function updateSimpleMemoComponent(current,workInProgress,Component,nextProps,renderLanes){if(null!==current){var prevProps=current.memoizedProps;if(shallowEqual(prevProps,nextProps)&&current.ref===workInProgress.ref){if(didReceiveUpdate=!1,workInProgress.pendingProps=nextProps=prevProps,!checkScheduledUpdateOrContext(current,renderLanes))return workInProgress.lanes=current.lanes,bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);131072&current.flags&&(didReceiveUpdate=!0)}}return updateFunctionComponent(current,workInProgress,Component,nextProps,renderLanes)}function updateOffscreenComponent(current,workInProgress,renderLanes){var nextProps=workInProgress.pendingProps,nextChildren=nextProps.children,nextIsDetached=!!(2&workInProgress.stateNode._pendingVisibility),prevState=null!==current?current.memoizedState:null;if(markRef(current,workInProgress),"hidden"===nextProps.mode||nextIsDetached){if(128&workInProgress.flags){if(nextProps=null!==prevState?prevState.baseLanes|renderLanes:renderLanes,null!==current){for(nextChildren=workInProgress.child=current.child,nextIsDetached=0;null!==nextChildren;)nextIsDetached=nextIsDetached|nextChildren.lanes|nextChildren.childLanes,nextChildren=nextChildren.sibling;workInProgress.childLanes=nextIsDetached&~nextProps}else workInProgress.childLanes=0,workInProgress.child=null;return deferHiddenOffscreenComponent(current,workInProgress,nextProps,renderLanes)}if(!(536870912&renderLanes))return workInProgress.lanes=workInProgress.childLanes=536870912,deferHiddenOffscreenComponent(current,workInProgress,null!==prevState?prevState.baseLanes|renderLanes:renderLanes,renderLanes);workInProgress.memoizedState={baseLanes:0,cachePool:null},null!==current&&pushTransition(0,null!==prevState?prevState.cachePool:null),null!==prevState?pushHiddenContext(workInProgress,prevState):reuseHiddenContextOnStack(),pushOffscreenSuspenseHandler(workInProgress)}else null!==prevState?(pushTransition(0,prevState.cachePool),pushHiddenContext(workInProgress,prevState),reuseSuspenseHandlerOnStack(),workInProgress.memoizedState=null):(null!==current&&pushTransition(0,null),reuseHiddenContextOnStack(),reuseSuspenseHandlerOnStack());return reconcileChildren(current,workInProgress,nextChildren,renderLanes),workInProgress.child}function deferHiddenOffscreenComponent(current,workInProgress,nextBaseLanes,renderLanes){var JSCompiler_inline_result=peekCacheFromPool();return JSCompiler_inline_result=null===JSCompiler_inline_result?null:{parent:CacheContext._currentValue,pool:JSCompiler_inline_result},workInProgress.memoizedState={baseLanes:nextBaseLanes,cachePool:JSCompiler_inline_result},null!==current&&pushTransition(0,null),reuseHiddenContextOnStack(),pushOffscreenSuspenseHandler(workInProgress),null!==current&&propagateParentContextChanges(current,workInProgress,renderLanes,!0),null}function markRef(current,workInProgress){var ref=workInProgress.ref;if(null===ref)null!==current&&null!==current.ref&&(workInProgress.flags|=2097664);else{if("function"!=typeof ref&&"object"!=typeof ref)throw Error(formatProdErrorMessage(284));null!==current&&current.ref===ref||(workInProgress.flags|=2097664)}}function updateFunctionComponent(current,workInProgress,Component,nextProps,renderLanes){return prepareToReadContext(workInProgress),Component=renderWithHooks(current,workInProgress,Component,nextProps,void 0,renderLanes),nextProps=checkDidRenderIdHook(),null===current||didReceiveUpdate?(isHydrating&&nextProps&&pushMaterializedTreeId(workInProgress),workInProgress.flags|=1,reconcileChildren(current,workInProgress,Component,renderLanes),workInProgress.child):(bailoutHooks(current,workInProgress,renderLanes),bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes))}function replayFunctionComponent(current,workInProgress,nextProps,Component,secondArg,renderLanes){return prepareToReadContext(workInProgress),workInProgress.updateQueue=null,nextProps=renderWithHooksAgain(workInProgress,Component,nextProps,secondArg),finishRenderingHooks(current),Component=checkDidRenderIdHook(),null===current||didReceiveUpdate?(isHydrating&&Component&&pushMaterializedTreeId(workInProgress),workInProgress.flags|=1,reconcileChildren(current,workInProgress,nextProps,renderLanes),workInProgress.child):(bailoutHooks(current,workInProgress,renderLanes),bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes))}function updateClassComponent(current,workInProgress,Component,nextProps,renderLanes){if(prepareToReadContext(workInProgress),null===workInProgress.stateNode){var context=emptyContextObject,contextType=Component.contextType;"object"==typeof contextType&&null!==contextType&&(context=readContext(contextType)),context=new Component(nextProps,context),workInProgress.memoizedState=null!==context.state&&void 0!==context.state?context.state:null,context.updater=classComponentUpdater,workInProgress.stateNode=context,context._reactInternals=workInProgress,(context=workInProgress.stateNode).props=nextProps,context.state=workInProgress.memoizedState,context.refs={},initializeUpdateQueue(workInProgress),contextType=Component.contextType,context.context="object"==typeof contextType&&null!==contextType?readContext(contextType):emptyContextObject,context.state=workInProgress.memoizedState,"function"==typeof(contextType=Component.getDerivedStateFromProps)&&(applyDerivedStateFromProps(workInProgress,Component,contextType,nextProps),context.state=workInProgress.memoizedState),"function"==typeof Component.getDerivedStateFromProps||"function"==typeof context.getSnapshotBeforeUpdate||"function"!=typeof context.UNSAFE_componentWillMount&&"function"!=typeof context.componentWillMount||(contextType=context.state,"function"==typeof context.componentWillMount&&context.componentWillMount(),"function"==typeof context.UNSAFE_componentWillMount&&context.UNSAFE_componentWillMount(),contextType!==context.state&&classComponentUpdater.enqueueReplaceState(context,context.state,null),processUpdateQueue(workInProgress,nextProps,context,renderLanes),suspendIfUpdateReadFromEntangledAsyncAction(),context.state=workInProgress.memoizedState),"function"==typeof context.componentDidMount&&(workInProgress.flags|=4194308),nextProps=!0}else if(null===current){context=workInProgress.stateNode;var unresolvedOldProps=workInProgress.memoizedProps,oldProps=resolveClassComponentProps(Component,unresolvedOldProps);context.props=oldProps;var oldContext=context.context,contextType$jscomp$0=Component.contextType;contextType=emptyContextObject,"object"==typeof contextType$jscomp$0&&null!==contextType$jscomp$0&&(contextType=readContext(contextType$jscomp$0));var getDerivedStateFromProps=Component.getDerivedStateFromProps;contextType$jscomp$0="function"==typeof getDerivedStateFromProps||"function"==typeof context.getSnapshotBeforeUpdate,unresolvedOldProps=workInProgress.pendingProps!==unresolvedOldProps,contextType$jscomp$0||"function"!=typeof context.UNSAFE_componentWillReceiveProps&&"function"!=typeof context.componentWillReceiveProps||(unresolvedOldProps||oldContext!==contextType)&&callComponentWillReceiveProps(workInProgress,context,nextProps,contextType),hasForceUpdate=!1;var oldState=workInProgress.memoizedState;context.state=oldState,processUpdateQueue(workInProgress,nextProps,context,renderLanes),suspendIfUpdateReadFromEntangledAsyncAction(),oldContext=workInProgress.memoizedState,unresolvedOldProps||oldState!==oldContext||hasForceUpdate?("function"==typeof getDerivedStateFromProps&&(applyDerivedStateFromProps(workInProgress,Component,getDerivedStateFromProps,nextProps),oldContext=workInProgress.memoizedState),(oldProps=hasForceUpdate||checkShouldComponentUpdate(workInProgress,Component,oldProps,nextProps,oldState,oldContext,contextType))?(contextType$jscomp$0||"function"!=typeof context.UNSAFE_componentWillMount&&"function"!=typeof context.componentWillMount||("function"==typeof context.componentWillMount&&context.componentWillMount(),"function"==typeof context.UNSAFE_componentWillMount&&context.UNSAFE_componentWillMount()),"function"==typeof context.componentDidMount&&(workInProgress.flags|=4194308)):("function"==typeof context.componentDidMount&&(workInProgress.flags|=4194308),workInProgress.memoizedProps=nextProps,workInProgress.memoizedState=oldContext),context.props=nextProps,context.state=oldContext,context.context=contextType,nextProps=oldProps):("function"==typeof context.componentDidMount&&(workInProgress.flags|=4194308),nextProps=!1)}else{context=workInProgress.stateNode,cloneUpdateQueue(current,workInProgress),contextType$jscomp$0=resolveClassComponentProps(Component,contextType=workInProgress.memoizedProps),context.props=contextType$jscomp$0,getDerivedStateFromProps=workInProgress.pendingProps,oldState=context.context,oldContext=Component.contextType,oldProps=emptyContextObject,"object"==typeof oldContext&&null!==oldContext&&(oldProps=readContext(oldContext)),(oldContext="function"==typeof(unresolvedOldProps=Component.getDerivedStateFromProps)||"function"==typeof context.getSnapshotBeforeUpdate)||"function"!=typeof context.UNSAFE_componentWillReceiveProps&&"function"!=typeof context.componentWillReceiveProps||(contextType!==getDerivedStateFromProps||oldState!==oldProps)&&callComponentWillReceiveProps(workInProgress,context,nextProps,oldProps),hasForceUpdate=!1,oldState=workInProgress.memoizedState,context.state=oldState,processUpdateQueue(workInProgress,nextProps,context,renderLanes),suspendIfUpdateReadFromEntangledAsyncAction();var newState=workInProgress.memoizedState;contextType!==getDerivedStateFromProps||oldState!==newState||hasForceUpdate||null!==current&&null!==current.dependencies&&checkIfContextChanged(current.dependencies)?("function"==typeof unresolvedOldProps&&(applyDerivedStateFromProps(workInProgress,Component,unresolvedOldProps,nextProps),newState=workInProgress.memoizedState),(contextType$jscomp$0=hasForceUpdate||checkShouldComponentUpdate(workInProgress,Component,contextType$jscomp$0,nextProps,oldState,newState,oldProps)||null!==current&&null!==current.dependencies&&checkIfContextChanged(current.dependencies))?(oldContext||"function"!=typeof context.UNSAFE_componentWillUpdate&&"function"!=typeof context.componentWillUpdate||("function"==typeof context.componentWillUpdate&&context.componentWillUpdate(nextProps,newState,oldProps),"function"==typeof context.UNSAFE_componentWillUpdate&&context.UNSAFE_componentWillUpdate(nextProps,newState,oldProps)),"function"==typeof context.componentDidUpdate&&(workInProgress.flags|=4),"function"==typeof context.getSnapshotBeforeUpdate&&(workInProgress.flags|=1024)):("function"!=typeof context.componentDidUpdate||contextType===current.memoizedProps&&oldState===current.memoizedState||(workInProgress.flags|=4),"function"!=typeof context.getSnapshotBeforeUpdate||contextType===current.memoizedProps&&oldState===current.memoizedState||(workInProgress.flags|=1024),workInProgress.memoizedProps=nextProps,workInProgress.memoizedState=newState),context.props=nextProps,context.state=newState,context.context=oldProps,nextProps=contextType$jscomp$0):("function"!=typeof context.componentDidUpdate||contextType===current.memoizedProps&&oldState===current.memoizedState||(workInProgress.flags|=4),"function"!=typeof context.getSnapshotBeforeUpdate||contextType===current.memoizedProps&&oldState===current.memoizedState||(workInProgress.flags|=1024),nextProps=!1)}return context=nextProps,markRef(current,workInProgress),nextProps=!!(128&workInProgress.flags),context||nextProps?(context=workInProgress.stateNode,Component=nextProps&&"function"!=typeof Component.getDerivedStateFromError?null:context.render(),workInProgress.flags|=1,null!==current&&nextProps?(workInProgress.child=reconcileChildFibers(workInProgress,current.child,null,renderLanes),workInProgress.child=reconcileChildFibers(workInProgress,null,Component,renderLanes)):reconcileChildren(current,workInProgress,Component,renderLanes),workInProgress.memoizedState=context.state,current=workInProgress.child):current=bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes),current}function mountHostRootWithoutHydrating(current,workInProgress,nextChildren,renderLanes){return resetHydrationState(),workInProgress.flags|=256,reconcileChildren(current,workInProgress,nextChildren,renderLanes),workInProgress.child}var SUSPENDED_MARKER={dehydrated:null,treeContext:null,retryLane:0};function mountSuspenseOffscreenState(renderLanes){return{baseLanes:renderLanes,cachePool:getSuspendedCache()}}function getRemainingWorkInPrimaryTree(current,primaryTreeDidDefer,renderLanes){return current=null!==current?current.childLanes&~renderLanes:0,primaryTreeDidDefer&&(current|=workInProgressDeferredLane),current}function updateSuspenseComponent(current,workInProgress,renderLanes){var JSCompiler_temp,nextProps=workInProgress.pendingProps,showFallback=!1,didSuspend=!!(128&workInProgress.flags);if((JSCompiler_temp=didSuspend)||(JSCompiler_temp=(null===current||null!==current.memoizedState)&&!!(2&suspenseStackCursor.current)),JSCompiler_temp&&(showFallback=!0,workInProgress.flags&=-129),JSCompiler_temp=!!(32&workInProgress.flags),workInProgress.flags&=-33,null===current){if(isHydrating){if(showFallback?pushPrimaryTreeSuspenseHandler(workInProgress):reuseSuspenseHandlerOnStack(),isHydrating){var JSCompiler_temp$jscomp$0,nextInstance=nextHydratableInstance;if(JSCompiler_temp$jscomp$0=nextInstance){c:{for(JSCompiler_temp$jscomp$0=nextInstance,nextInstance=rootOrSingletonContext;8!==JSCompiler_temp$jscomp$0.nodeType;){if(!nextInstance){nextInstance=null;break c}if(null===(JSCompiler_temp$jscomp$0=getNextHydratable(JSCompiler_temp$jscomp$0.nextSibling))){nextInstance=null;break c}}nextInstance=JSCompiler_temp$jscomp$0}null!==nextInstance?(workInProgress.memoizedState={dehydrated:nextInstance,treeContext:null!==treeContextProvider?{id:treeContextId,overflow:treeContextOverflow}:null,retryLane:536870912},(JSCompiler_temp$jscomp$0=createFiberImplClass(18,null,null,0)).stateNode=nextInstance,JSCompiler_temp$jscomp$0.return=workInProgress,workInProgress.child=JSCompiler_temp$jscomp$0,hydrationParentFiber=workInProgress,nextHydratableInstance=null,JSCompiler_temp$jscomp$0=!0):JSCompiler_temp$jscomp$0=!1}JSCompiler_temp$jscomp$0||throwOnHydrationMismatch(workInProgress)}if(null!==(nextInstance=workInProgress.memoizedState)&&null!==(nextInstance=nextInstance.dehydrated))return"$!"===nextInstance.data?workInProgress.lanes=16:workInProgress.lanes=536870912,null;popSuspenseHandler(workInProgress)}return nextInstance=nextProps.children,nextProps=nextProps.fallback,showFallback?(reuseSuspenseHandlerOnStack(),nextInstance=mountWorkInProgressOffscreenFiber({mode:"hidden",children:nextInstance},showFallback=workInProgress.mode),nextProps=createFiberFromFragment(nextProps,showFallback,renderLanes,null),nextInstance.return=workInProgress,nextProps.return=workInProgress,nextInstance.sibling=nextProps,workInProgress.child=nextInstance,(showFallback=workInProgress.child).memoizedState=mountSuspenseOffscreenState(renderLanes),showFallback.childLanes=getRemainingWorkInPrimaryTree(current,JSCompiler_temp,renderLanes),workInProgress.memoizedState=SUSPENDED_MARKER,nextProps):(pushPrimaryTreeSuspenseHandler(workInProgress),mountSuspensePrimaryChildren(workInProgress,nextInstance))}if(null!==(JSCompiler_temp$jscomp$0=current.memoizedState)&&null!==(nextInstance=JSCompiler_temp$jscomp$0.dehydrated)){if(didSuspend)256&workInProgress.flags?(pushPrimaryTreeSuspenseHandler(workInProgress),workInProgress.flags&=-257,workInProgress=retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes)):null!==workInProgress.memoizedState?(reuseSuspenseHandlerOnStack(),workInProgress.child=current.child,workInProgress.flags|=128,workInProgress=null):(reuseSuspenseHandlerOnStack(),showFallback=nextProps.fallback,nextInstance=workInProgress.mode,nextProps=mountWorkInProgressOffscreenFiber({mode:"visible",children:nextProps.children},nextInstance),(showFallback=createFiberFromFragment(showFallback,nextInstance,renderLanes,null)).flags|=2,nextProps.return=workInProgress,showFallback.return=workInProgress,nextProps.sibling=showFallback,workInProgress.child=nextProps,reconcileChildFibers(workInProgress,current.child,null,renderLanes),(nextProps=workInProgress.child).memoizedState=mountSuspenseOffscreenState(renderLanes),nextProps.childLanes=getRemainingWorkInPrimaryTree(current,JSCompiler_temp,renderLanes),workInProgress.memoizedState=SUSPENDED_MARKER,workInProgress=showFallback);else if(pushPrimaryTreeSuspenseHandler(workInProgress),"$!"===nextInstance.data){if(JSCompiler_temp=nextInstance.nextSibling&&nextInstance.nextSibling.dataset)var digest=JSCompiler_temp.dgst;JSCompiler_temp=digest,(nextProps=Error(formatProdErrorMessage(419))).stack="",nextProps.digest=JSCompiler_temp,queueHydrationError({value:nextProps,source:null,stack:null}),workInProgress=retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes)}else if(didReceiveUpdate||propagateParentContextChanges(current,workInProgress,renderLanes,!1),JSCompiler_temp=!!(renderLanes&current.childLanes),didReceiveUpdate||JSCompiler_temp){if(null!==(JSCompiler_temp=workInProgressRoot)){if(42&(nextProps=renderLanes&-renderLanes))nextProps=1;else switch(nextProps){case 2:nextProps=1;break;case 8:nextProps=4;break;case 32:nextProps=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:nextProps=64;break;case 268435456:nextProps=134217728;break;default:nextProps=0}if(0!==(nextProps=nextProps&(JSCompiler_temp.suspendedLanes|renderLanes)?0:nextProps)&&nextProps!==JSCompiler_temp$jscomp$0.retryLane)throw JSCompiler_temp$jscomp$0.retryLane=nextProps,enqueueConcurrentRenderForLane(current,nextProps),scheduleUpdateOnFiber(JSCompiler_temp,current,nextProps),SelectiveHydrationException}"$?"===nextInstance.data||renderDidSuspendDelayIfPossible(),workInProgress=retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes)}else"$?"===nextInstance.data?(workInProgress.flags|=128,workInProgress.child=current.child,workInProgress=retryDehydratedSuspenseBoundary.bind(null,current),nextInstance._reactRetry=workInProgress,workInProgress=null):(current=JSCompiler_temp$jscomp$0.treeContext,nextHydratableInstance=getNextHydratable(nextInstance.nextSibling),hydrationParentFiber=workInProgress,isHydrating=!0,hydrationErrors=null,rootOrSingletonContext=!1,null!==current&&(idStack[idStackIndex++]=treeContextId,idStack[idStackIndex++]=treeContextOverflow,idStack[idStackIndex++]=treeContextProvider,treeContextId=current.id,treeContextOverflow=current.overflow,treeContextProvider=workInProgress),(workInProgress=mountSuspensePrimaryChildren(workInProgress,nextProps.children)).flags|=4096);return workInProgress}return showFallback?(reuseSuspenseHandlerOnStack(),showFallback=nextProps.fallback,nextInstance=workInProgress.mode,digest=(JSCompiler_temp$jscomp$0=current.child).sibling,(nextProps=createWorkInProgress(JSCompiler_temp$jscomp$0,{mode:"hidden",children:nextProps.children})).subtreeFlags=31457280&JSCompiler_temp$jscomp$0.subtreeFlags,null!==digest?showFallback=createWorkInProgress(digest,showFallback):(showFallback=createFiberFromFragment(showFallback,nextInstance,renderLanes,null)).flags|=2,showFallback.return=workInProgress,nextProps.return=workInProgress,nextProps.sibling=showFallback,workInProgress.child=nextProps,nextProps=showFallback,showFallback=workInProgress.child,null===(nextInstance=current.child.memoizedState)?nextInstance=mountSuspenseOffscreenState(renderLanes):(null!==(JSCompiler_temp$jscomp$0=nextInstance.cachePool)?(digest=CacheContext._currentValue,JSCompiler_temp$jscomp$0=JSCompiler_temp$jscomp$0.parent!==digest?{parent:digest,pool:digest}:JSCompiler_temp$jscomp$0):JSCompiler_temp$jscomp$0=getSuspendedCache(),nextInstance={baseLanes:nextInstance.baseLanes|renderLanes,cachePool:JSCompiler_temp$jscomp$0}),showFallback.memoizedState=nextInstance,showFallback.childLanes=getRemainingWorkInPrimaryTree(current,JSCompiler_temp,renderLanes),workInProgress.memoizedState=SUSPENDED_MARKER,nextProps):(pushPrimaryTreeSuspenseHandler(workInProgress),current=(renderLanes=current.child).sibling,(renderLanes=createWorkInProgress(renderLanes,{mode:"visible",children:nextProps.children})).return=workInProgress,renderLanes.sibling=null,null!==current&&(null===(JSCompiler_temp=workInProgress.deletions)?(workInProgress.deletions=[current],workInProgress.flags|=16):JSCompiler_temp.push(current)),workInProgress.child=renderLanes,workInProgress.memoizedState=null,renderLanes)}function mountSuspensePrimaryChildren(workInProgress,primaryChildren){return(primaryChildren=mountWorkInProgressOffscreenFiber({mode:"visible",children:primaryChildren},workInProgress.mode)).return=workInProgress,workInProgress.child=primaryChildren}function mountWorkInProgressOffscreenFiber(offscreenProps,mode){return createFiberFromOffscreen(offscreenProps,mode,0,null)}function retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes){return reconcileChildFibers(workInProgress,current.child,null,renderLanes),(current=mountSuspensePrimaryChildren(workInProgress,workInProgress.pendingProps.children)).flags|=2,workInProgress.memoizedState=null,current}function scheduleSuspenseWorkOnFiber(fiber,renderLanes,propagationRoot){fiber.lanes|=renderLanes;var alternate=fiber.alternate;null!==alternate&&(alternate.lanes|=renderLanes),scheduleContextWorkOnParentPath(fiber.return,renderLanes,propagationRoot)}function initSuspenseListRenderState(workInProgress,isBackwards,tail,lastContentRow,tailMode){var renderState=workInProgress.memoizedState;null===renderState?workInProgress.memoizedState={isBackwards:isBackwards,rendering:null,renderingStartTime:0,last:lastContentRow,tail:tail,tailMode:tailMode}:(renderState.isBackwards=isBackwards,renderState.rendering=null,renderState.renderingStartTime=0,renderState.last=lastContentRow,renderState.tail=tail,renderState.tailMode=tailMode)}function updateSuspenseListComponent(current,workInProgress,renderLanes){var nextProps=workInProgress.pendingProps,revealOrder=nextProps.revealOrder,tailMode=nextProps.tail;if(reconcileChildren(current,workInProgress,nextProps.children,renderLanes),2&(nextProps=suspenseStackCursor.current))nextProps=1&nextProps|2,workInProgress.flags|=128;else{if(null!==current&&128&current.flags)a:for(current=workInProgress.child;null!==current;){if(13===current.tag)null!==current.memoizedState&&scheduleSuspenseWorkOnFiber(current,renderLanes,workInProgress);else if(19===current.tag)scheduleSuspenseWorkOnFiber(current,renderLanes,workInProgress);else if(null!==current.child){current.child.return=current,current=current.child;continue}if(current===workInProgress)break a;for(;null===current.sibling;){if(null===current.return||current.return===workInProgress)break a;current=current.return}current.sibling.return=current.return,current=current.sibling}nextProps&=1}switch(push(suspenseStackCursor,nextProps),revealOrder){case"forwards":for(renderLanes=workInProgress.child,revealOrder=null;null!==renderLanes;)null!==(current=renderLanes.alternate)&&null===findFirstSuspended(current)&&(revealOrder=renderLanes),renderLanes=renderLanes.sibling;null===(renderLanes=revealOrder)?(revealOrder=workInProgress.child,workInProgress.child=null):(revealOrder=renderLanes.sibling,renderLanes.sibling=null),initSuspenseListRenderState(workInProgress,!1,revealOrder,renderLanes,tailMode);break;case"backwards":for(renderLanes=null,revealOrder=workInProgress.child,workInProgress.child=null;null!==revealOrder;){if(null!==(current=revealOrder.alternate)&&null===findFirstSuspended(current)){workInProgress.child=revealOrder;break}current=revealOrder.sibling,revealOrder.sibling=renderLanes,renderLanes=revealOrder,revealOrder=current}initSuspenseListRenderState(workInProgress,!0,renderLanes,null,tailMode);break;case"together":initSuspenseListRenderState(workInProgress,!1,null,null,void 0);break;default:workInProgress.memoizedState=null}return workInProgress.child}function bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes){if(null!==current&&(workInProgress.dependencies=current.dependencies),workInProgressRootSkippedLanes|=workInProgress.lanes,!(renderLanes&workInProgress.childLanes)){if(null===current)return null;if(propagateParentContextChanges(current,workInProgress,renderLanes,!1),!(renderLanes&workInProgress.childLanes))return null}if(null!==current&&workInProgress.child!==current.child)throw Error(formatProdErrorMessage(153));if(null!==workInProgress.child){for(renderLanes=createWorkInProgress(current=workInProgress.child,current.pendingProps),workInProgress.child=renderLanes,renderLanes.return=workInProgress;null!==current.sibling;)current=current.sibling,(renderLanes=renderLanes.sibling=createWorkInProgress(current,current.pendingProps)).return=workInProgress;renderLanes.sibling=null}return workInProgress.child}function checkScheduledUpdateOrContext(current,renderLanes){return!!(current.lanes&renderLanes)||!(null===(current=current.dependencies)||!checkIfContextChanged(current))}function beginWork(current,workInProgress,renderLanes){if(null!==current)if(current.memoizedProps!==workInProgress.pendingProps)didReceiveUpdate=!0;else{if(!(checkScheduledUpdateOrContext(current,renderLanes)||128&workInProgress.flags))return didReceiveUpdate=!1,function(current,workInProgress,renderLanes){switch(workInProgress.tag){case 3:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo),pushProvider(workInProgress,CacheContext,current.memoizedState.cache),resetHydrationState();break;case 27:case 5:pushHostContext(workInProgress);break;case 4:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);break;case 10:pushProvider(workInProgress,workInProgress.type,workInProgress.memoizedProps.value);break;case 13:var state=workInProgress.memoizedState;if(null!==state)return null!==state.dehydrated?(pushPrimaryTreeSuspenseHandler(workInProgress),workInProgress.flags|=128,null):renderLanes&workInProgress.child.childLanes?updateSuspenseComponent(current,workInProgress,renderLanes):(pushPrimaryTreeSuspenseHandler(workInProgress),null!==(current=bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes))?current.sibling:null);pushPrimaryTreeSuspenseHandler(workInProgress);break;case 19:var didSuspendBefore=!!(128&current.flags);if((state=!!(renderLanes&workInProgress.childLanes))||(propagateParentContextChanges(current,workInProgress,renderLanes,!1),state=!!(renderLanes&workInProgress.childLanes)),didSuspendBefore){if(state)return updateSuspenseListComponent(current,workInProgress,renderLanes);workInProgress.flags|=128}if(null!==(didSuspendBefore=workInProgress.memoizedState)&&(didSuspendBefore.rendering=null,didSuspendBefore.tail=null,didSuspendBefore.lastEffect=null),push(suspenseStackCursor,suspenseStackCursor.current),state)break;return null;case 22:case 23:return workInProgress.lanes=0,updateOffscreenComponent(current,workInProgress,renderLanes);case 24:pushProvider(workInProgress,CacheContext,current.memoizedState.cache)}return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes)}(current,workInProgress,renderLanes);didReceiveUpdate=!!(131072&current.flags)}else didReceiveUpdate=!1,isHydrating&&1048576&workInProgress.flags&&pushTreeId(workInProgress,treeForkCount,workInProgress.index);switch(workInProgress.lanes=0,workInProgress.tag){case 16:a:{current=workInProgress.pendingProps;var lazyComponent=workInProgress.elementType,init=lazyComponent._init;if(lazyComponent=init(lazyComponent._payload),workInProgress.type=lazyComponent,"function"!=typeof lazyComponent){if(null!=lazyComponent){if((init=lazyComponent.$$typeof)===REACT_FORWARD_REF_TYPE){workInProgress.tag=11,workInProgress=updateForwardRef(null,workInProgress,lazyComponent,current,renderLanes);break a}if(init===REACT_MEMO_TYPE){workInProgress.tag=14,workInProgress=updateMemoComponent(null,workInProgress,lazyComponent,current,renderLanes);break a}}throw workInProgress=getComponentNameFromType(lazyComponent)||lazyComponent,Error(formatProdErrorMessage(306,workInProgress,""))}shouldConstruct(lazyComponent)?(current=resolveClassComponentProps(lazyComponent,current),workInProgress.tag=1,workInProgress=updateClassComponent(null,workInProgress,lazyComponent,current,renderLanes)):(workInProgress.tag=0,workInProgress=updateFunctionComponent(null,workInProgress,lazyComponent,current,renderLanes))}return workInProgress;case 0:return updateFunctionComponent(current,workInProgress,workInProgress.type,workInProgress.pendingProps,renderLanes);case 1:return updateClassComponent(current,workInProgress,lazyComponent=workInProgress.type,init=resolveClassComponentProps(lazyComponent,workInProgress.pendingProps),renderLanes);case 3:a:{if(pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo),null===current)throw Error(formatProdErrorMessage(387));var nextProps=workInProgress.pendingProps;lazyComponent=(init=workInProgress.memoizedState).element,cloneUpdateQueue(current,workInProgress),processUpdateQueue(workInProgress,nextProps,null,renderLanes);var nextState=workInProgress.memoizedState;if(nextProps=nextState.cache,pushProvider(workInProgress,CacheContext,nextProps),nextProps!==init.cache&&propagateContextChanges(workInProgress,[CacheContext],renderLanes,!0),suspendIfUpdateReadFromEntangledAsyncAction(),nextProps=nextState.element,init.isDehydrated){if(init={element:nextProps,isDehydrated:!1,cache:nextState.cache},workInProgress.updateQueue.baseState=init,workInProgress.memoizedState=init,256&workInProgress.flags){workInProgress=mountHostRootWithoutHydrating(current,workInProgress,nextProps,renderLanes);break a}if(nextProps!==lazyComponent){queueHydrationError(lazyComponent=createCapturedValueAtFiber(Error(formatProdErrorMessage(424)),workInProgress)),workInProgress=mountHostRootWithoutHydrating(current,workInProgress,nextProps,renderLanes);break a}for(nextHydratableInstance=getNextHydratable(workInProgress.stateNode.containerInfo.firstChild),hydrationParentFiber=workInProgress,isHydrating=!0,hydrationErrors=null,rootOrSingletonContext=!0,renderLanes=mountChildFibers(workInProgress,null,nextProps,renderLanes),workInProgress.child=renderLanes;renderLanes;)renderLanes.flags=-3&renderLanes.flags|4096,renderLanes=renderLanes.sibling}else{if(resetHydrationState(),nextProps===lazyComponent){workInProgress=bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);break a}reconcileChildren(current,workInProgress,nextProps,renderLanes)}workInProgress=workInProgress.child}return workInProgress;case 26:return markRef(current,workInProgress),null===current?(renderLanes=getResource(workInProgress.type,null,workInProgress.pendingProps,null))?workInProgress.memoizedState=renderLanes:isHydrating||(renderLanes=workInProgress.type,current=workInProgress.pendingProps,(lazyComponent=getOwnerDocumentFromRootContainer(rootInstanceStackCursor.current).createElement(renderLanes))[internalInstanceKey]=workInProgress,lazyComponent[internalPropsKey]=current,setInitialProperties(lazyComponent,renderLanes,current),markNodeAsHoistable(lazyComponent),workInProgress.stateNode=lazyComponent):workInProgress.memoizedState=getResource(workInProgress.type,current.memoizedProps,workInProgress.pendingProps,current.memoizedState),null;case 27:return pushHostContext(workInProgress),null===current&&isHydrating&&(lazyComponent=workInProgress.stateNode=resolveSingletonInstance(workInProgress.type,workInProgress.pendingProps,rootInstanceStackCursor.current),hydrationParentFiber=workInProgress,rootOrSingletonContext=!0,nextHydratableInstance=getNextHydratable(lazyComponent.firstChild)),lazyComponent=workInProgress.pendingProps.children,null!==current||isHydrating?reconcileChildren(current,workInProgress,lazyComponent,renderLanes):workInProgress.child=reconcileChildFibers(workInProgress,null,lazyComponent,renderLanes),markRef(current,workInProgress),workInProgress.child;case 5:return null===current&&isHydrating&&((init=lazyComponent=nextHydratableInstance)&&(null!==(lazyComponent=function(instance,type,props,inRootOrSingleton){for(;1===instance.nodeType;){var anyProps=props;if(instance.nodeName.toLowerCase()!==type.toLowerCase()){if(!inRootOrSingleton&&("INPUT"!==instance.nodeName||"hidden"!==instance.type))break}else if(inRootOrSingleton){if(!instance[internalHoistableMarker])switch(type){case"meta":if(!instance.hasAttribute("itemprop"))break;return instance;case"link":if("stylesheet"===(name=instance.getAttribute("rel"))&&instance.hasAttribute("data-precedence"))break;if(name!==anyProps.rel||instance.getAttribute("href")!==(null==anyProps.href?null:anyProps.href)||instance.getAttribute("crossorigin")!==(null==anyProps.crossOrigin?null:anyProps.crossOrigin)||instance.getAttribute("title")!==(null==anyProps.title?null:anyProps.title))break;return instance;case"style":if(instance.hasAttribute("data-precedence"))break;return instance;case"script":if(((name=instance.getAttribute("src"))!==(null==anyProps.src?null:anyProps.src)||instance.getAttribute("type")!==(null==anyProps.type?null:anyProps.type)||instance.getAttribute("crossorigin")!==(null==anyProps.crossOrigin?null:anyProps.crossOrigin))&&name&&instance.hasAttribute("async")&&!instance.hasAttribute("itemprop"))break;return instance;default:return instance}}else{if("input"!==type||"hidden"!==instance.type)return instance;var name=null==anyProps.name?null:""+anyProps.name;if("hidden"===anyProps.type&&instance.getAttribute("name")===name)return instance}if(null===(instance=getNextHydratable(instance.nextSibling)))break}return null}(lazyComponent,workInProgress.type,workInProgress.pendingProps,rootOrSingletonContext))?(workInProgress.stateNode=lazyComponent,hydrationParentFiber=workInProgress,nextHydratableInstance=getNextHydratable(lazyComponent.firstChild),rootOrSingletonContext=!1,init=!0):init=!1),init||throwOnHydrationMismatch(workInProgress)),pushHostContext(workInProgress),init=workInProgress.type,nextProps=workInProgress.pendingProps,nextState=null!==current?current.memoizedProps:null,lazyComponent=nextProps.children,shouldSetTextContent(init,nextProps)?lazyComponent=null:null!==nextState&&shouldSetTextContent(init,nextState)&&(workInProgress.flags|=32),null!==workInProgress.memoizedState&&(init=renderWithHooks(current,workInProgress,TransitionAwareHostComponent,null,null,renderLanes),HostTransitionContext._currentValue=init),markRef(current,workInProgress),reconcileChildren(current,workInProgress,lazyComponent,renderLanes),workInProgress.child;case 6:return null===current&&isHydrating&&((current=renderLanes=nextHydratableInstance)&&(null!==(renderLanes=function(instance,text,inRootOrSingleton){if(""===text)return null;for(;3!==instance.nodeType;){if((1!==instance.nodeType||"INPUT"!==instance.nodeName||"hidden"!==instance.type)&&!inRootOrSingleton)return null;if(null===(instance=getNextHydratable(instance.nextSibling)))return null}return instance}(renderLanes,workInProgress.pendingProps,rootOrSingletonContext))?(workInProgress.stateNode=renderLanes,hydrationParentFiber=workInProgress,nextHydratableInstance=null,current=!0):current=!1),current||throwOnHydrationMismatch(workInProgress)),null;case 13:return updateSuspenseComponent(current,workInProgress,renderLanes);case 4:return pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo),lazyComponent=workInProgress.pendingProps,null===current?workInProgress.child=reconcileChildFibers(workInProgress,null,lazyComponent,renderLanes):reconcileChildren(current,workInProgress,lazyComponent,renderLanes),workInProgress.child;case 11:return updateForwardRef(current,workInProgress,workInProgress.type,workInProgress.pendingProps,renderLanes);case 7:return reconcileChildren(current,workInProgress,workInProgress.pendingProps,renderLanes),workInProgress.child;case 8:case 12:return reconcileChildren(current,workInProgress,workInProgress.pendingProps.children,renderLanes),workInProgress.child;case 10:return lazyComponent=workInProgress.pendingProps,pushProvider(workInProgress,workInProgress.type,lazyComponent.value),reconcileChildren(current,workInProgress,lazyComponent.children,renderLanes),workInProgress.child;case 9:return init=workInProgress.type._context,lazyComponent=workInProgress.pendingProps.children,prepareToReadContext(workInProgress),lazyComponent=lazyComponent(init=readContext(init)),workInProgress.flags|=1,reconcileChildren(current,workInProgress,lazyComponent,renderLanes),workInProgress.child;case 14:return updateMemoComponent(current,workInProgress,workInProgress.type,workInProgress.pendingProps,renderLanes);case 15:return updateSimpleMemoComponent(current,workInProgress,workInProgress.type,workInProgress.pendingProps,renderLanes);case 19:return updateSuspenseListComponent(current,workInProgress,renderLanes);case 22:return updateOffscreenComponent(current,workInProgress,renderLanes);case 24:return prepareToReadContext(workInProgress),lazyComponent=readContext(CacheContext),null===current?(null===(init=peekCacheFromPool())&&(init=workInProgressRoot,nextProps=createCache(),init.pooledCache=nextProps,nextProps.refCount++,null!==nextProps&&(init.pooledCacheLanes|=renderLanes),init=nextProps),workInProgress.memoizedState={parent:lazyComponent,cache:init},initializeUpdateQueue(workInProgress),pushProvider(workInProgress,CacheContext,init)):(!!(current.lanes&renderLanes)&&(cloneUpdateQueue(current,workInProgress),processUpdateQueue(workInProgress,null,null,renderLanes),suspendIfUpdateReadFromEntangledAsyncAction()),init=current.memoizedState,nextProps=workInProgress.memoizedState,init.parent!==lazyComponent?(init={parent:lazyComponent,cache:lazyComponent},workInProgress.memoizedState=init,0===workInProgress.lanes&&(workInProgress.memoizedState=workInProgress.updateQueue.baseState=init),pushProvider(workInProgress,CacheContext,lazyComponent)):(lazyComponent=nextProps.cache,pushProvider(workInProgress,CacheContext,lazyComponent),lazyComponent!==init.cache&&propagateContextChanges(workInProgress,[CacheContext],renderLanes,!0))),reconcileChildren(current,workInProgress,workInProgress.pendingProps.children,renderLanes),workInProgress.child;case 29:throw workInProgress.pendingProps}throw Error(formatProdErrorMessage(156,workInProgress.tag))}var valueCursor=createCursor(null),currentlyRenderingFiber=null,lastContextDependency=null;function pushProvider(providerFiber,context,nextValue){push(valueCursor,context._currentValue),context._currentValue=nextValue}function popProvider(context){context._currentValue=valueCursor.current,pop(valueCursor)}function scheduleContextWorkOnParentPath(parent,renderLanes,propagationRoot){for(;null!==parent;){var alternate=parent.alternate;if((parent.childLanes&renderLanes)!==renderLanes?(parent.childLanes|=renderLanes,null!==alternate&&(alternate.childLanes|=renderLanes)):null!==alternate&&(alternate.childLanes&renderLanes)!==renderLanes&&(alternate.childLanes|=renderLanes),parent===propagationRoot)break;parent=parent.return}}function propagateContextChanges(workInProgress,contexts,renderLanes,forcePropagateEntireTree){var fiber=workInProgress.child;for(null!==fiber&&(fiber.return=workInProgress);null!==fiber;){var list=fiber.dependencies;if(null!==list){var nextFiber=fiber.child;list=list.firstContext;a:for(;null!==list;){var dependency=list;list=fiber;for(var i=0;i<contexts.length;i++)if(dependency.context===contexts[i]){list.lanes|=renderLanes,null!==(dependency=list.alternate)&&(dependency.lanes|=renderLanes),scheduleContextWorkOnParentPath(list.return,renderLanes,workInProgress),forcePropagateEntireTree||(nextFiber=null);break a}list=dependency.next}}else if(18===fiber.tag){if(null===(nextFiber=fiber.return))throw Error(formatProdErrorMessage(341));nextFiber.lanes|=renderLanes,null!==(list=nextFiber.alternate)&&(list.lanes|=renderLanes),scheduleContextWorkOnParentPath(nextFiber,renderLanes,workInProgress),nextFiber=null}else nextFiber=fiber.child;if(null!==nextFiber)nextFiber.return=fiber;else for(nextFiber=fiber;null!==nextFiber;){if(nextFiber===workInProgress){nextFiber=null;break}if(null!==(fiber=nextFiber.sibling)){fiber.return=nextFiber.return,nextFiber=fiber;break}nextFiber=nextFiber.return}fiber=nextFiber}}function propagateParentContextChanges(current,workInProgress,renderLanes,forcePropagateEntireTree){current=null;for(var parent=workInProgress,isInsidePropagationBailout=!1;null!==parent;){if(!isInsidePropagationBailout)if(524288&parent.flags)isInsidePropagationBailout=!0;else if(262144&parent.flags)break;if(10===parent.tag){var currentParent=parent.alternate;if(null===currentParent)throw Error(formatProdErrorMessage(387));if(null!==(currentParent=currentParent.memoizedProps)){var context=parent.type;objectIs(parent.pendingProps.value,currentParent.value)||(null!==current?current.push(context):current=[context])}}else if(parent===hostTransitionProviderCursor.current){if(null===(currentParent=parent.alternate))throw Error(formatProdErrorMessage(387));currentParent.memoizedState.memoizedState!==parent.memoizedState.memoizedState&&(null!==current?current.push(HostTransitionContext):current=[HostTransitionContext])}parent=parent.return}null!==current&&propagateContextChanges(workInProgress,current,renderLanes,forcePropagateEntireTree),workInProgress.flags|=262144}function checkIfContextChanged(currentDependencies){for(currentDependencies=currentDependencies.firstContext;null!==currentDependencies;){if(!objectIs(currentDependencies.context._currentValue,currentDependencies.memoizedValue))return!0;currentDependencies=currentDependencies.next}return!1}function prepareToReadContext(workInProgress){currentlyRenderingFiber=workInProgress,lastContextDependency=null,null!==(workInProgress=workInProgress.dependencies)&&(workInProgress.firstContext=null)}function readContext(context){return readContextForConsumer(currentlyRenderingFiber,context)}function readContextDuringReconciliation(consumer,context){return null===currentlyRenderingFiber&&prepareToReadContext(consumer),readContextForConsumer(consumer,context)}function readContextForConsumer(consumer,context){var value=context._currentValue;if(context={context:context,memoizedValue:value,next:null},null===lastContextDependency){if(null===consumer)throw Error(formatProdErrorMessage(308));lastContextDependency=context,consumer.dependencies={lanes:0,firstContext:context},consumer.flags|=524288}else lastContextDependency=lastContextDependency.next=context;return value}var hasForceUpdate=!1;function initializeUpdateQueue(fiber){fiber.updateQueue={baseState:fiber.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function cloneUpdateQueue(current,workInProgress){current=current.updateQueue,workInProgress.updateQueue===current&&(workInProgress.updateQueue={baseState:current.baseState,firstBaseUpdate:current.firstBaseUpdate,lastBaseUpdate:current.lastBaseUpdate,shared:current.shared,callbacks:null})}function createUpdate(lane){return{lane:lane,tag:0,payload:null,callback:null,next:null}}function enqueueUpdate(fiber,update,lane){var updateQueue=fiber.updateQueue;if(null===updateQueue)return null;if(updateQueue=updateQueue.shared,2&executionContext){var pending=updateQueue.pending;return null===pending?update.next=update:(update.next=pending.next,pending.next=update),updateQueue.pending=update,update=getRootForUpdatedFiber(fiber),markUpdateLaneFromFiberToRoot(fiber,null,lane),update}return enqueueUpdate$1(fiber,updateQueue,update,lane),getRootForUpdatedFiber(fiber)}function entangleTransitions(root,fiber,lane){if(null!==(fiber=fiber.updateQueue)&&(fiber=fiber.shared,4194176&lane)){var queueLanes=fiber.lanes;lane|=queueLanes&=root.pendingLanes,fiber.lanes=lane,markRootEntangled(root,lane)}}function enqueueCapturedUpdate(workInProgress,capturedUpdate){var queue=workInProgress.updateQueue,current=workInProgress.alternate;if(null!==current&&queue===(current=current.updateQueue)){var newFirst=null,newLast=null;if(null!==(queue=queue.firstBaseUpdate)){do{var clone={lane:queue.lane,tag:queue.tag,payload:queue.payload,callback:null,next:null};null===newLast?newFirst=newLast=clone:newLast=newLast.next=clone,queue=queue.next}while(null!==queue);null===newLast?newFirst=newLast=capturedUpdate:newLast=newLast.next=capturedUpdate}else newFirst=newLast=capturedUpdate;return queue={baseState:current.baseState,firstBaseUpdate:newFirst,lastBaseUpdate:newLast,shared:current.shared,callbacks:current.callbacks},void(workInProgress.updateQueue=queue)}null===(workInProgress=queue.lastBaseUpdate)?queue.firstBaseUpdate=capturedUpdate:workInProgress.next=capturedUpdate,queue.lastBaseUpdate=capturedUpdate}var didReadFromEntangledAsyncAction=!1;function suspendIfUpdateReadFromEntangledAsyncAction(){if(didReadFromEntangledAsyncAction){if(null!==currentEntangledActionThenable)throw currentEntangledActionThenable}}function processUpdateQueue(workInProgress$jscomp$0,props,instance$jscomp$0,renderLanes){didReadFromEntangledAsyncAction=!1;var queue=workInProgress$jscomp$0.updateQueue;hasForceUpdate=!1;var firstBaseUpdate=queue.firstBaseUpdate,lastBaseUpdate=queue.lastBaseUpdate,pendingQueue=queue.shared.pending;if(null!==pendingQueue){queue.shared.pending=null;var lastPendingUpdate=pendingQueue,firstPendingUpdate=lastPendingUpdate.next;lastPendingUpdate.next=null,null===lastBaseUpdate?firstBaseUpdate=firstPendingUpdate:lastBaseUpdate.next=firstPendingUpdate,lastBaseUpdate=lastPendingUpdate;var current=workInProgress$jscomp$0.alternate;null!==current&&((pendingQueue=(current=current.updateQueue).lastBaseUpdate)!==lastBaseUpdate&&(null===pendingQueue?current.firstBaseUpdate=firstPendingUpdate:pendingQueue.next=firstPendingUpdate,current.lastBaseUpdate=lastPendingUpdate))}if(null!==firstBaseUpdate){var newState=queue.baseState;for(lastBaseUpdate=0,current=firstPendingUpdate=lastPendingUpdate=null,pendingQueue=firstBaseUpdate;;){var updateLane=-536870913&pendingQueue.lane,isHiddenUpdate=updateLane!==pendingQueue.lane;if(isHiddenUpdate?(workInProgressRootRenderLanes&updateLane)===updateLane:(renderLanes&updateLane)===updateLane){0!==updateLane&&updateLane===currentEntangledLane&&(didReadFromEntangledAsyncAction=!0),null!==current&&(current=current.next={lane:0,tag:pendingQueue.tag,payload:pendingQueue.payload,callback:null,next:null});a:{var workInProgress=workInProgress$jscomp$0,update=pendingQueue;updateLane=props;var instance=instance$jscomp$0;switch(update.tag){case 1:if("function"==typeof(workInProgress=update.payload)){newState=workInProgress.call(instance,newState,updateLane);break a}newState=workInProgress;break a;case 3:workInProgress.flags=-65537&workInProgress.flags|128;case 0:if(null==(updateLane="function"==typeof(workInProgress=update.payload)?workInProgress.call(instance,newState,updateLane):workInProgress))break a;newState=assign({},newState,updateLane);break a;case 2:hasForceUpdate=!0}}null!==(updateLane=pendingQueue.callback)&&(workInProgress$jscomp$0.flags|=64,isHiddenUpdate&&(workInProgress$jscomp$0.flags|=8192),null===(isHiddenUpdate=queue.callbacks)?queue.callbacks=[updateLane]:isHiddenUpdate.push(updateLane))}else isHiddenUpdate={lane:updateLane,tag:pendingQueue.tag,payload:pendingQueue.payload,callback:pendingQueue.callback,next:null},null===current?(firstPendingUpdate=current=isHiddenUpdate,lastPendingUpdate=newState):current=current.next=isHiddenUpdate,lastBaseUpdate|=updateLane;if(null===(pendingQueue=pendingQueue.next)){if(null===(pendingQueue=queue.shared.pending))break;pendingQueue=(isHiddenUpdate=pendingQueue).next,isHiddenUpdate.next=null,queue.lastBaseUpdate=isHiddenUpdate,queue.shared.pending=null}}null===current&&(lastPendingUpdate=newState),queue.baseState=lastPendingUpdate,queue.firstBaseUpdate=firstPendingUpdate,queue.lastBaseUpdate=current,null===firstBaseUpdate&&(queue.shared.lanes=0),workInProgressRootSkippedLanes|=lastBaseUpdate,workInProgress$jscomp$0.lanes=lastBaseUpdate,workInProgress$jscomp$0.memoizedState=newState}}function callCallback(callback,context){if("function"!=typeof callback)throw Error(formatProdErrorMessage(191,callback));callback.call(context)}function commitCallbacks(updateQueue,context){var callbacks=updateQueue.callbacks;if(null!==callbacks)for(updateQueue.callbacks=null,updateQueue=0;updateQueue<callbacks.length;updateQueue++)callCallback(callbacks[updateQueue],context)}function commitHookEffectListMount(flags,finishedWork){try{var updateQueue=finishedWork.updateQueue,lastEffect=null!==updateQueue?updateQueue.lastEffect:null;if(null!==lastEffect){var firstEffect=lastEffect.next;updateQueue=firstEffect;do{if((updateQueue.tag&flags)===flags){lastEffect=void 0;var create=updateQueue.create,inst=updateQueue.inst;lastEffect=create(),inst.destroy=lastEffect}updateQueue=updateQueue.next}while(updateQueue!==firstEffect)}}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}function commitHookEffectListUnmount(flags,finishedWork,nearestMountedAncestor$jscomp$0){try{var updateQueue=finishedWork.updateQueue,lastEffect=null!==updateQueue?updateQueue.lastEffect:null;if(null!==lastEffect){var firstEffect=lastEffect.next;updateQueue=firstEffect;do{if((updateQueue.tag&flags)===flags){var inst=updateQueue.inst,destroy=inst.destroy;if(void 0!==destroy){inst.destroy=void 0,lastEffect=finishedWork;var nearestMountedAncestor=nearestMountedAncestor$jscomp$0;try{destroy()}catch(error){captureCommitPhaseError(lastEffect,nearestMountedAncestor,error)}}}updateQueue=updateQueue.next}while(updateQueue!==firstEffect)}}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}function commitClassCallbacks(finishedWork){var updateQueue=finishedWork.updateQueue;if(null!==updateQueue){var instance=finishedWork.stateNode;try{commitCallbacks(updateQueue,instance)}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}}function safelyCallComponentWillUnmount(current,nearestMountedAncestor,instance){instance.props=resolveClassComponentProps(current.type,current.memoizedProps),instance.state=current.memoizedState;try{instance.componentWillUnmount()}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error)}}function safelyAttachRef(current,nearestMountedAncestor){try{var ref=current.ref;if(null!==ref){var instance=current.stateNode;switch(current.tag){case 26:case 27:case 5:var instanceToUse=instance;break;default:instanceToUse=instance}"function"==typeof ref?current.refCleanup=ref(instanceToUse):ref.current=instanceToUse}}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error)}}function safelyDetachRef(current,nearestMountedAncestor){var ref=current.ref,refCleanup=current.refCleanup;if(null!==ref)if("function"==typeof refCleanup)try{refCleanup()}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error)}finally{current.refCleanup=null,null!=(current=current.alternate)&&(current.refCleanup=null)}else if("function"==typeof ref)try{ref(null)}catch(error$112){captureCommitPhaseError(current,nearestMountedAncestor,error$112)}else ref.current=null}function commitHostMount(finishedWork){var type=finishedWork.type,props=finishedWork.memoizedProps,instance=finishedWork.stateNode;try{a:switch(type){case"button":case"input":case"select":case"textarea":props.autoFocus&&instance.focus();break a;case"img":props.src?instance.src=props.src:props.srcSet&&(instance.srcset=props.srcSet)}}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}function commitHostUpdate(finishedWork,newProps,oldProps){try{var domElement=finishedWork.stateNode;!function(domElement,tag,lastProps,nextProps){switch(tag){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var name=null,type=null,value=null,defaultValue=null,lastDefaultValue=null,checked=null,defaultChecked=null;for(propKey in lastProps){var lastProp=lastProps[propKey];if(lastProps.hasOwnProperty(propKey)&&null!=lastProp)switch(propKey){case"checked":case"value":break;case"defaultValue":lastDefaultValue=lastProp;default:nextProps.hasOwnProperty(propKey)||setProp(domElement,tag,propKey,null,nextProps,lastProp)}}for(var propKey$203 in nextProps){var propKey=nextProps[propKey$203];if(lastProp=lastProps[propKey$203],nextProps.hasOwnProperty(propKey$203)&&(null!=propKey||null!=lastProp))switch(propKey$203){case"type":type=propKey;break;case"name":name=propKey;break;case"checked":checked=propKey;break;case"defaultChecked":defaultChecked=propKey;break;case"value":value=propKey;break;case"defaultValue":defaultValue=propKey;break;case"children":case"dangerouslySetInnerHTML":if(null!=propKey)throw Error(formatProdErrorMessage(137,tag));break;default:propKey!==lastProp&&setProp(domElement,tag,propKey$203,propKey,nextProps,lastProp)}}return void updateInput(domElement,value,defaultValue,lastDefaultValue,checked,defaultChecked,type,name);case"select":for(type in propKey=value=defaultValue=propKey$203=null,lastProps)if(lastDefaultValue=lastProps[type],lastProps.hasOwnProperty(type)&&null!=lastDefaultValue)switch(type){case"value":break;case"multiple":propKey=lastDefaultValue;default:nextProps.hasOwnProperty(type)||setProp(domElement,tag,type,null,nextProps,lastDefaultValue)}for(name in nextProps)if(type=nextProps[name],lastDefaultValue=lastProps[name],nextProps.hasOwnProperty(name)&&(null!=type||null!=lastDefaultValue))switch(name){case"value":propKey$203=type;break;case"defaultValue":defaultValue=type;break;case"multiple":value=type;default:type!==lastDefaultValue&&setProp(domElement,tag,name,type,nextProps,lastDefaultValue)}return tag=defaultValue,lastProps=value,nextProps=propKey,void(null!=propKey$203?updateOptions(domElement,!!lastProps,propKey$203,!1):!!nextProps!=!!lastProps&&(null!=tag?updateOptions(domElement,!!lastProps,tag,!0):updateOptions(domElement,!!lastProps,lastProps?[]:"",!1)));case"textarea":for(defaultValue in propKey=propKey$203=null,lastProps)if(name=lastProps[defaultValue],lastProps.hasOwnProperty(defaultValue)&&null!=name&&!nextProps.hasOwnProperty(defaultValue))switch(defaultValue){case"value":case"children":break;default:setProp(domElement,tag,defaultValue,null,nextProps,name)}for(value in nextProps)if(name=nextProps[value],type=lastProps[value],nextProps.hasOwnProperty(value)&&(null!=name||null!=type))switch(value){case"value":propKey$203=name;break;case"defaultValue":propKey=name;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=name)throw Error(formatProdErrorMessage(91));break;default:name!==type&&setProp(domElement,tag,value,name,nextProps,type)}return void updateTextarea(domElement,propKey$203,propKey);case"option":for(var propKey$219 in lastProps)if(propKey$203=lastProps[propKey$219],lastProps.hasOwnProperty(propKey$219)&&null!=propKey$203&&!nextProps.hasOwnProperty(propKey$219))if("selected"===propKey$219)domElement.selected=!1;else setProp(domElement,tag,propKey$219,null,nextProps,propKey$203);for(lastDefaultValue in nextProps)if(propKey$203=nextProps[lastDefaultValue],propKey=lastProps[lastDefaultValue],nextProps.hasOwnProperty(lastDefaultValue)&&propKey$203!==propKey&&(null!=propKey$203||null!=propKey))if("selected"===lastDefaultValue)domElement.selected=propKey$203&&"function"!=typeof propKey$203&&"symbol"!=typeof propKey$203;else setProp(domElement,tag,lastDefaultValue,propKey$203,nextProps,propKey);return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var propKey$224 in lastProps)propKey$203=lastProps[propKey$224],lastProps.hasOwnProperty(propKey$224)&&null!=propKey$203&&!nextProps.hasOwnProperty(propKey$224)&&setProp(domElement,tag,propKey$224,null,nextProps,propKey$203);for(checked in nextProps)if(propKey$203=nextProps[checked],propKey=lastProps[checked],nextProps.hasOwnProperty(checked)&&propKey$203!==propKey&&(null!=propKey$203||null!=propKey))switch(checked){case"children":case"dangerouslySetInnerHTML":if(null!=propKey$203)throw Error(formatProdErrorMessage(137,tag));break;default:setProp(domElement,tag,checked,propKey$203,nextProps,propKey)}return;default:if(isCustomElement(tag)){for(var propKey$229 in lastProps)propKey$203=lastProps[propKey$229],lastProps.hasOwnProperty(propKey$229)&&void 0!==propKey$203&&!nextProps.hasOwnProperty(propKey$229)&&setPropOnCustomElement(domElement,tag,propKey$229,void 0,nextProps,propKey$203);for(defaultChecked in nextProps)propKey$203=nextProps[defaultChecked],propKey=lastProps[defaultChecked],!nextProps.hasOwnProperty(defaultChecked)||propKey$203===propKey||void 0===propKey$203&&void 0===propKey||setPropOnCustomElement(domElement,tag,defaultChecked,propKey$203,nextProps,propKey);return}}for(var propKey$234 in lastProps)propKey$203=lastProps[propKey$234],lastProps.hasOwnProperty(propKey$234)&&null!=propKey$203&&!nextProps.hasOwnProperty(propKey$234)&&setProp(domElement,tag,propKey$234,null,nextProps,propKey$203);for(lastProp in nextProps)propKey$203=nextProps[lastProp],propKey=lastProps[lastProp],!nextProps.hasOwnProperty(lastProp)||propKey$203===propKey||null==propKey$203&&null==propKey||setProp(domElement,tag,lastProp,propKey$203,nextProps,propKey)}(domElement,finishedWork.type,oldProps,newProps),domElement[internalPropsKey]=newProps}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}function isHostParent(fiber){return 5===fiber.tag||3===fiber.tag||26===fiber.tag||27===fiber.tag||4===fiber.tag}function getHostSibling(fiber){a:for(;;){for(;null===fiber.sibling;){if(null===fiber.return||isHostParent(fiber.return))return null;fiber=fiber.return}for(fiber.sibling.return=fiber.return,fiber=fiber.sibling;5!==fiber.tag&&6!==fiber.tag&&27!==fiber.tag&&18!==fiber.tag;){if(2&fiber.flags)continue a;if(null===fiber.child||4===fiber.tag)continue a;fiber.child.return=fiber,fiber=fiber.child}if(!(2&fiber.flags))return fiber.stateNode}}function insertOrAppendPlacementNodeIntoContainer(node,before,parent){var tag=node.tag;if(5===tag||6===tag)node=node.stateNode,before?8===parent.nodeType?parent.parentNode.insertBefore(node,before):parent.insertBefore(node,before):(8===parent.nodeType?(before=parent.parentNode).insertBefore(node,parent):(before=parent).appendChild(node),null!=(parent=parent._reactRootContainer)||null!==before.onclick||(before.onclick=noop$1));else if(4!==tag&&27!==tag&&null!==(node=node.child))for(insertOrAppendPlacementNodeIntoContainer(node,before,parent),node=node.sibling;null!==node;)insertOrAppendPlacementNodeIntoContainer(node,before,parent),node=node.sibling}function insertOrAppendPlacementNode(node,before,parent){var tag=node.tag;if(5===tag||6===tag)node=node.stateNode,before?parent.insertBefore(node,before):parent.appendChild(node);else if(4!==tag&&27!==tag&&null!==(node=node.child))for(insertOrAppendPlacementNode(node,before,parent),node=node.sibling;null!==node;)insertOrAppendPlacementNode(node,before,parent),node=node.sibling}var offscreenSubtreeIsHidden=!1,offscreenSubtreeWasHidden=!1,needsFormReset=!1,PossiblyWeakSet="function"==typeof WeakSet?WeakSet:Set,nextEffect=null,shouldFireAfterActiveInstanceBlur=!1;function commitLayoutEffectOnFiber(finishedRoot,current,finishedWork){var flags=finishedWork.flags;switch(finishedWork.tag){case 0:case 11:case 15:recursivelyTraverseLayoutEffects(finishedRoot,finishedWork),4&flags&&commitHookEffectListMount(5,finishedWork);break;case 1:if(recursivelyTraverseLayoutEffects(finishedRoot,finishedWork),4&flags)if(finishedRoot=finishedWork.stateNode,null===current)try{finishedRoot.componentDidMount()}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}else{var prevProps=resolveClassComponentProps(finishedWork.type,current.memoizedProps);current=current.memoizedState;try{finishedRoot.componentDidUpdate(prevProps,current,finishedRoot.__reactInternalSnapshotBeforeUpdate)}catch(error$111){captureCommitPhaseError(finishedWork,finishedWork.return,error$111)}}64&flags&&commitClassCallbacks(finishedWork),512&flags&&safelyAttachRef(finishedWork,finishedWork.return);break;case 3:if(recursivelyTraverseLayoutEffects(finishedRoot,finishedWork),64&flags&&null!==(flags=finishedWork.updateQueue)){if(finishedRoot=null,null!==finishedWork.child)switch(finishedWork.child.tag){case 27:case 5:case 1:finishedRoot=finishedWork.child.stateNode}try{commitCallbacks(flags,finishedRoot)}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}break;case 26:recursivelyTraverseLayoutEffects(finishedRoot,finishedWork),512&flags&&safelyAttachRef(finishedWork,finishedWork.return);break;case 27:case 5:recursivelyTraverseLayoutEffects(finishedRoot,finishedWork),null===current&&4&flags&&commitHostMount(finishedWork),512&flags&&safelyAttachRef(finishedWork,finishedWork.return);break;case 12:default:recursivelyTraverseLayoutEffects(finishedRoot,finishedWork);break;case 13:recursivelyTraverseLayoutEffects(finishedRoot,finishedWork),4&flags&&commitSuspenseHydrationCallbacks(finishedRoot,finishedWork);break;case 22:if(!(prevProps=null!==finishedWork.memoizedState||offscreenSubtreeIsHidden)){current=null!==current&&null!==current.memoizedState||offscreenSubtreeWasHidden;var prevOffscreenSubtreeIsHidden=offscreenSubtreeIsHidden,prevOffscreenSubtreeWasHidden=offscreenSubtreeWasHidden;offscreenSubtreeIsHidden=prevProps,(offscreenSubtreeWasHidden=current)&&!prevOffscreenSubtreeWasHidden?recursivelyTraverseReappearLayoutEffects(finishedRoot,finishedWork,!!(8772&finishedWork.subtreeFlags)):recursivelyTraverseLayoutEffects(finishedRoot,finishedWork),offscreenSubtreeIsHidden=prevOffscreenSubtreeIsHidden,offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden}512&flags&&("manual"===finishedWork.memoizedProps.mode?safelyAttachRef(finishedWork,finishedWork.return):safelyDetachRef(finishedWork,finishedWork.return))}}function detachFiberAfterEffects(fiber){var alternate=fiber.alternate;null!==alternate&&(fiber.alternate=null,detachFiberAfterEffects(alternate)),fiber.child=null,fiber.deletions=null,fiber.sibling=null,5===fiber.tag&&(null!==(alternate=fiber.stateNode)&&detachDeletedInstance(alternate)),fiber.stateNode=null,fiber.return=null,fiber.dependencies=null,fiber.memoizedProps=null,fiber.memoizedState=null,fiber.pendingProps=null,fiber.stateNode=null,fiber.updateQueue=null}var hostParent=null,hostParentIsContainer=!1;function recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,parent){for(parent=parent.child;null!==parent;)commitDeletionEffectsOnFiber(finishedRoot,nearestMountedAncestor,parent),parent=parent.sibling}function commitDeletionEffectsOnFiber(finishedRoot,nearestMountedAncestor,deletedFiber){if(injectedHook&&"function"==typeof injectedHook.onCommitFiberUnmount)try{injectedHook.onCommitFiberUnmount(rendererID,deletedFiber)}catch(err){}switch(deletedFiber.tag){case 26:offscreenSubtreeWasHidden||safelyDetachRef(deletedFiber,nearestMountedAncestor),recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber),deletedFiber.memoizedState?deletedFiber.memoizedState.count--:deletedFiber.stateNode&&(deletedFiber=deletedFiber.stateNode).parentNode.removeChild(deletedFiber);break;case 27:offscreenSubtreeWasHidden||safelyDetachRef(deletedFiber,nearestMountedAncestor);var prevHostParent=hostParent,prevHostParentIsContainer=hostParentIsContainer;for(hostParent=deletedFiber.stateNode,recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber),nearestMountedAncestor=(deletedFiber=deletedFiber.stateNode).attributes;nearestMountedAncestor.length;)deletedFiber.removeAttributeNode(nearestMountedAncestor[0]);detachDeletedInstance(deletedFiber),hostParent=prevHostParent,hostParentIsContainer=prevHostParentIsContainer;break;case 5:offscreenSubtreeWasHidden||safelyDetachRef(deletedFiber,nearestMountedAncestor);case 6:prevHostParentIsContainer=hostParent;var prevHostParentIsContainer$119=hostParentIsContainer;if(hostParent=null,recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber),hostParentIsContainer=prevHostParentIsContainer$119,null!==(hostParent=prevHostParentIsContainer))if(hostParentIsContainer)try{finishedRoot=hostParent,prevHostParent=deletedFiber.stateNode,8===finishedRoot.nodeType?finishedRoot.parentNode.removeChild(prevHostParent):finishedRoot.removeChild(prevHostParent)}catch(error){captureCommitPhaseError(deletedFiber,nearestMountedAncestor,error)}else try{hostParent.removeChild(deletedFiber.stateNode)}catch(error){captureCommitPhaseError(deletedFiber,nearestMountedAncestor,error)}break;case 18:null!==hostParent&&(hostParentIsContainer?(nearestMountedAncestor=hostParent,deletedFiber=deletedFiber.stateNode,8===nearestMountedAncestor.nodeType?clearSuspenseBoundary(nearestMountedAncestor.parentNode,deletedFiber):1===nearestMountedAncestor.nodeType&&clearSuspenseBoundary(nearestMountedAncestor,deletedFiber),retryIfBlockedOn(nearestMountedAncestor)):clearSuspenseBoundary(hostParent,deletedFiber.stateNode));break;case 4:prevHostParent=hostParent,prevHostParentIsContainer=hostParentIsContainer,hostParent=deletedFiber.stateNode.containerInfo,hostParentIsContainer=!0,recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber),hostParent=prevHostParent,hostParentIsContainer=prevHostParentIsContainer;break;case 0:case 11:case 14:case 15:offscreenSubtreeWasHidden||commitHookEffectListUnmount(2,deletedFiber,nearestMountedAncestor),offscreenSubtreeWasHidden||commitHookEffectListUnmount(4,deletedFiber,nearestMountedAncestor),recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);break;case 1:offscreenSubtreeWasHidden||(safelyDetachRef(deletedFiber,nearestMountedAncestor),"function"==typeof(prevHostParent=deletedFiber.stateNode).componentWillUnmount&&safelyCallComponentWillUnmount(deletedFiber,nearestMountedAncestor,prevHostParent)),recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);break;case 21:recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);break;case 22:offscreenSubtreeWasHidden||safelyDetachRef(deletedFiber,nearestMountedAncestor),offscreenSubtreeWasHidden=(prevHostParent=offscreenSubtreeWasHidden)||null!==deletedFiber.memoizedState,recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber),offscreenSubtreeWasHidden=prevHostParent;break;default:recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber)}}function commitSuspenseHydrationCallbacks(finishedRoot,finishedWork){if(null===finishedWork.memoizedState&&(null!==(finishedRoot=finishedWork.alternate)&&(null!==(finishedRoot=finishedRoot.memoizedState)&&null!==(finishedRoot=finishedRoot.dehydrated))))try{retryIfBlockedOn(finishedRoot)}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}function attachSuspenseRetryListeners(finishedWork,wakeables){var retryCache=function(finishedWork){switch(finishedWork.tag){case 13:case 19:var retryCache=finishedWork.stateNode;return null===retryCache&&(retryCache=finishedWork.stateNode=new PossiblyWeakSet),retryCache;case 22:return null===(retryCache=(finishedWork=finishedWork.stateNode)._retryCache)&&(retryCache=finishedWork._retryCache=new PossiblyWeakSet),retryCache;default:throw Error(formatProdErrorMessage(435,finishedWork.tag))}}(finishedWork);wakeables.forEach((function(wakeable){var retry=resolveRetryWakeable.bind(null,finishedWork,wakeable);retryCache.has(wakeable)||(retryCache.add(wakeable),wakeable.then(retry,retry))}))}function recursivelyTraverseMutationEffects(root$jscomp$0,parentFiber){var deletions=parentFiber.deletions;if(null!==deletions)for(var i=0;i<deletions.length;i++){var childToDelete=deletions[i],root=root$jscomp$0,returnFiber=parentFiber,parent=returnFiber;a:for(;null!==parent;){switch(parent.tag){case 27:case 5:hostParent=parent.stateNode,hostParentIsContainer=!1;break a;case 3:case 4:hostParent=parent.stateNode.containerInfo,hostParentIsContainer=!0;break a}parent=parent.return}if(null===hostParent)throw Error(formatProdErrorMessage(160));commitDeletionEffectsOnFiber(root,returnFiber,childToDelete),hostParent=null,hostParentIsContainer=!1,null!==(root=childToDelete.alternate)&&(root.return=null),childToDelete.return=null}if(13878&parentFiber.subtreeFlags)for(parentFiber=parentFiber.child;null!==parentFiber;)commitMutationEffectsOnFiber(parentFiber,root$jscomp$0),parentFiber=parentFiber.sibling}var currentHoistableRoot=null;function commitMutationEffectsOnFiber(finishedWork,root){var current=finishedWork.alternate,flags=finishedWork.flags;switch(finishedWork.tag){case 0:case 11:case 14:case 15:recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork),4&flags&&(commitHookEffectListUnmount(3,finishedWork,finishedWork.return),commitHookEffectListMount(3,finishedWork),commitHookEffectListUnmount(5,finishedWork,finishedWork.return));break;case 1:recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork),512&flags&&(offscreenSubtreeWasHidden||null===current||safelyDetachRef(current,current.return)),64&flags&&offscreenSubtreeIsHidden&&(null!==(finishedWork=finishedWork.updateQueue)&&(null!==(flags=finishedWork.callbacks)&&(current=finishedWork.shared.hiddenCallbacks,finishedWork.shared.hiddenCallbacks=null===current?flags:current.concat(flags))));break;case 26:var hoistableRoot=currentHoistableRoot;if(recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork),512&flags&&(offscreenSubtreeWasHidden||null===current||safelyDetachRef(current,current.return)),4&flags){var currentResource=null!==current?current.memoizedState:null;if(flags=finishedWork.memoizedState,null===current)if(null===flags)if(null===finishedWork.stateNode){a:{flags=finishedWork.type,current=finishedWork.memoizedProps,hoistableRoot=hoistableRoot.ownerDocument||hoistableRoot;b:switch(flags){case"title":(!(currentResource=hoistableRoot.getElementsByTagName("title")[0])||currentResource[internalHoistableMarker]||currentResource[internalInstanceKey]||"http://www.w3.org/2000/svg"===currentResource.namespaceURI||currentResource.hasAttribute("itemprop"))&&(currentResource=hoistableRoot.createElement(flags),hoistableRoot.head.insertBefore(currentResource,hoistableRoot.querySelector("head > title"))),setInitialProperties(currentResource,flags,current),currentResource[internalInstanceKey]=finishedWork,markNodeAsHoistable(currentResource),flags=currentResource;break a;case"link":var maybeNodes=getHydratableHoistableCache("link","href",hoistableRoot).get(flags+(current.href||""));if(maybeNodes)for(var i=0;i<maybeNodes.length;i++)if((currentResource=maybeNodes[i]).getAttribute("href")===(null==current.href?null:current.href)&&currentResource.getAttribute("rel")===(null==current.rel?null:current.rel)&&currentResource.getAttribute("title")===(null==current.title?null:current.title)&&currentResource.getAttribute("crossorigin")===(null==current.crossOrigin?null:current.crossOrigin)){maybeNodes.splice(i,1);break b}setInitialProperties(currentResource=hoistableRoot.createElement(flags),flags,current),hoistableRoot.head.appendChild(currentResource);break;case"meta":if(maybeNodes=getHydratableHoistableCache("meta","content",hoistableRoot).get(flags+(current.content||"")))for(i=0;i<maybeNodes.length;i++)if((currentResource=maybeNodes[i]).getAttribute("content")===(null==current.content?null:""+current.content)&&currentResource.getAttribute("name")===(null==current.name?null:current.name)&&currentResource.getAttribute("property")===(null==current.property?null:current.property)&&currentResource.getAttribute("http-equiv")===(null==current.httpEquiv?null:current.httpEquiv)&&currentResource.getAttribute("charset")===(null==current.charSet?null:current.charSet)){maybeNodes.splice(i,1);break b}setInitialProperties(currentResource=hoistableRoot.createElement(flags),flags,current),hoistableRoot.head.appendChild(currentResource);break;default:throw Error(formatProdErrorMessage(468,flags))}currentResource[internalInstanceKey]=finishedWork,markNodeAsHoistable(currentResource),flags=currentResource}finishedWork.stateNode=flags}else mountHoistable(hoistableRoot,finishedWork.type,finishedWork.stateNode);else finishedWork.stateNode=acquireResource(hoistableRoot,flags,finishedWork.memoizedProps);else currentResource!==flags?(null===currentResource?null!==current.stateNode&&(current=current.stateNode).parentNode.removeChild(current):currentResource.count--,null===flags?mountHoistable(hoistableRoot,finishedWork.type,finishedWork.stateNode):acquireResource(hoistableRoot,flags,finishedWork.memoizedProps)):null===flags&&null!==finishedWork.stateNode&&commitHostUpdate(finishedWork,finishedWork.memoizedProps,current.memoizedProps)}break;case 27:if(4&flags&&null===finishedWork.alternate){hoistableRoot=finishedWork.stateNode,currentResource=finishedWork.memoizedProps;try{for(var node=hoistableRoot.firstChild;node;){var nextNode=node.nextSibling,nodeName=node.nodeName;node[internalHoistableMarker]||"HEAD"===nodeName||"BODY"===nodeName||"SCRIPT"===nodeName||"STYLE"===nodeName||"LINK"===nodeName&&"stylesheet"===node.rel.toLowerCase()||hoistableRoot.removeChild(node),node=nextNode}for(var type=finishedWork.type,attributes=hoistableRoot.attributes;attributes.length;)hoistableRoot.removeAttributeNode(attributes[0]);setInitialProperties(hoistableRoot,type,currentResource),hoistableRoot[internalInstanceKey]=finishedWork,hoistableRoot[internalPropsKey]=currentResource}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}case 5:if(recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork),512&flags&&(offscreenSubtreeWasHidden||null===current||safelyDetachRef(current,current.return)),32&finishedWork.flags){hoistableRoot=finishedWork.stateNode;try{setTextContent(hoistableRoot,"")}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}4&flags&&null!=finishedWork.stateNode&&commitHostUpdate(finishedWork,hoistableRoot=finishedWork.memoizedProps,null!==current?current.memoizedProps:hoistableRoot),1024&flags&&(needsFormReset=!0);break;case 6:if(recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork),4&flags){if(null===finishedWork.stateNode)throw Error(formatProdErrorMessage(162));flags=finishedWork.memoizedProps,current=finishedWork.stateNode;try{current.nodeValue=flags}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}break;case 3:if(tagCaches=null,hoistableRoot=currentHoistableRoot,currentHoistableRoot=getHoistableRoot(root.containerInfo),recursivelyTraverseMutationEffects(root,finishedWork),currentHoistableRoot=hoistableRoot,commitReconciliationEffects(finishedWork),4&flags&&null!==current&&current.memoizedState.isDehydrated)try{retryIfBlockedOn(root.containerInfo)}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}needsFormReset&&(needsFormReset=!1,recursivelyResetForms(finishedWork));break;case 4:flags=currentHoistableRoot,currentHoistableRoot=getHoistableRoot(finishedWork.stateNode.containerInfo),recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork),currentHoistableRoot=flags;break;case 12:recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork);break;case 13:recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork),8192&finishedWork.child.flags&&null!==finishedWork.memoizedState!=(null!==current&&null!==current.memoizedState)&&(globalMostRecentFallbackTime=now()),4&flags&&(null!==(flags=finishedWork.updateQueue)&&(finishedWork.updateQueue=null,attachSuspenseRetryListeners(finishedWork,flags)));break;case 22:if(512&flags&&(offscreenSubtreeWasHidden||null===current||safelyDetachRef(current,current.return)),node=null!==finishedWork.memoizedState,nextNode=null!==current&&null!==current.memoizedState,offscreenSubtreeIsHidden=(nodeName=offscreenSubtreeIsHidden)||node,offscreenSubtreeWasHidden=(type=offscreenSubtreeWasHidden)||nextNode,recursivelyTraverseMutationEffects(root,finishedWork),offscreenSubtreeWasHidden=type,offscreenSubtreeIsHidden=nodeName,commitReconciliationEffects(finishedWork),(root=finishedWork.stateNode)._current=finishedWork,root._visibility&=-3,root._visibility|=2&root._pendingVisibility,8192&flags&&(root._visibility=node?-2&root._visibility:1|root._visibility,node&&(root=offscreenSubtreeIsHidden||offscreenSubtreeWasHidden,null===current||nextNode||root||recursivelyTraverseDisappearLayoutEffects(finishedWork)),null===finishedWork.memoizedProps||"manual"!==finishedWork.memoizedProps.mode))a:for(current=null,root=finishedWork;;){if(5===root.tag||26===root.tag||27===root.tag){if(null===current){nextNode=current=root;try{if(hoistableRoot=nextNode.stateNode,node)"function"==typeof(currentResource=hoistableRoot.style).setProperty?currentResource.setProperty("display","none","important"):currentResource.display="none";else{maybeNodes=nextNode.stateNode;var display=null!=(i=nextNode.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null;maybeNodes.style.display=null==display||"boolean"==typeof display?"":(""+display).trim()}}catch(error){captureCommitPhaseError(nextNode,nextNode.return,error)}}}else if(6===root.tag){if(null===current){nextNode=root;try{nextNode.stateNode.nodeValue=node?"":nextNode.memoizedProps}catch(error){captureCommitPhaseError(nextNode,nextNode.return,error)}}}else if((22!==root.tag&&23!==root.tag||null===root.memoizedState||root===finishedWork)&&null!==root.child){root.child.return=root,root=root.child;continue}if(root===finishedWork)break a;for(;null===root.sibling;){if(null===root.return||root.return===finishedWork)break a;current===root&&(current=null),root=root.return}current===root&&(current=null),root.sibling.return=root.return,root=root.sibling}4&flags&&(null!==(flags=finishedWork.updateQueue)&&(null!==(current=flags.retryQueue)&&(flags.retryQueue=null,attachSuspenseRetryListeners(finishedWork,current))));break;case 19:recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork),4&flags&&(null!==(flags=finishedWork.updateQueue)&&(finishedWork.updateQueue=null,attachSuspenseRetryListeners(finishedWork,flags)));break;case 21:break;default:recursivelyTraverseMutationEffects(root,finishedWork),commitReconciliationEffects(finishedWork)}}function commitReconciliationEffects(finishedWork){var flags=finishedWork.flags;if(2&flags){try{if(27!==finishedWork.tag){a:{for(var parent=finishedWork.return;null!==parent;){if(isHostParent(parent)){var JSCompiler_inline_result=parent;break a}parent=parent.return}throw Error(formatProdErrorMessage(160))}switch(JSCompiler_inline_result.tag){case 27:var parent$jscomp$0=JSCompiler_inline_result.stateNode;insertOrAppendPlacementNode(finishedWork,getHostSibling(finishedWork),parent$jscomp$0);break;case 5:var parent$113=JSCompiler_inline_result.stateNode;32&JSCompiler_inline_result.flags&&(setTextContent(parent$113,""),JSCompiler_inline_result.flags&=-33),insertOrAppendPlacementNode(finishedWork,getHostSibling(finishedWork),parent$113);break;case 3:case 4:var parent$115=JSCompiler_inline_result.stateNode.containerInfo;insertOrAppendPlacementNodeIntoContainer(finishedWork,getHostSibling(finishedWork),parent$115);break;default:throw Error(formatProdErrorMessage(161))}}}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}finishedWork.flags&=-3}4096&flags&&(finishedWork.flags&=-4097)}function recursivelyResetForms(parentFiber){if(1024&parentFiber.subtreeFlags)for(parentFiber=parentFiber.child;null!==parentFiber;){var fiber=parentFiber;recursivelyResetForms(fiber),5===fiber.tag&&1024&fiber.flags&&fiber.stateNode.reset(),parentFiber=parentFiber.sibling}}function recursivelyTraverseLayoutEffects(root,parentFiber){if(8772&parentFiber.subtreeFlags)for(parentFiber=parentFiber.child;null!==parentFiber;)commitLayoutEffectOnFiber(root,parentFiber.alternate,parentFiber),parentFiber=parentFiber.sibling}function recursivelyTraverseDisappearLayoutEffects(parentFiber){for(parentFiber=parentFiber.child;null!==parentFiber;){var finishedWork=parentFiber;switch(finishedWork.tag){case 0:case 11:case 14:case 15:commitHookEffectListUnmount(4,finishedWork,finishedWork.return),recursivelyTraverseDisappearLayoutEffects(finishedWork);break;case 1:safelyDetachRef(finishedWork,finishedWork.return);var instance=finishedWork.stateNode;"function"==typeof instance.componentWillUnmount&&safelyCallComponentWillUnmount(finishedWork,finishedWork.return,instance),recursivelyTraverseDisappearLayoutEffects(finishedWork);break;case 26:case 27:case 5:safelyDetachRef(finishedWork,finishedWork.return),recursivelyTraverseDisappearLayoutEffects(finishedWork);break;case 22:safelyDetachRef(finishedWork,finishedWork.return),null===finishedWork.memoizedState&&recursivelyTraverseDisappearLayoutEffects(finishedWork);break;default:recursivelyTraverseDisappearLayoutEffects(finishedWork)}parentFiber=parentFiber.sibling}}function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0,parentFiber,includeWorkInProgressEffects){for(includeWorkInProgressEffects=includeWorkInProgressEffects&&!!(8772&parentFiber.subtreeFlags),parentFiber=parentFiber.child;null!==parentFiber;){var current=parentFiber.alternate,finishedRoot=finishedRoot$jscomp$0,finishedWork=parentFiber,flags=finishedWork.flags;switch(finishedWork.tag){case 0:case 11:case 15:recursivelyTraverseReappearLayoutEffects(finishedRoot,finishedWork,includeWorkInProgressEffects),commitHookEffectListMount(4,finishedWork);break;case 1:if(recursivelyTraverseReappearLayoutEffects(finishedRoot,finishedWork,includeWorkInProgressEffects),"function"==typeof(finishedRoot=(current=finishedWork).stateNode).componentDidMount)try{finishedRoot.componentDidMount()}catch(error){captureCommitPhaseError(current,current.return,error)}if(null!==(finishedRoot=(current=finishedWork).updateQueue)){var instance=current.stateNode;try{var hiddenCallbacks=finishedRoot.shared.hiddenCallbacks;if(null!==hiddenCallbacks)for(finishedRoot.shared.hiddenCallbacks=null,finishedRoot=0;finishedRoot<hiddenCallbacks.length;finishedRoot++)callCallback(hiddenCallbacks[finishedRoot],instance)}catch(error){captureCommitPhaseError(current,current.return,error)}}includeWorkInProgressEffects&&64&flags&&commitClassCallbacks(finishedWork),safelyAttachRef(finishedWork,finishedWork.return);break;case 26:case 27:case 5:recursivelyTraverseReappearLayoutEffects(finishedRoot,finishedWork,includeWorkInProgressEffects),includeWorkInProgressEffects&&null===current&&4&flags&&commitHostMount(finishedWork),safelyAttachRef(finishedWork,finishedWork.return);break;case 12:default:recursivelyTraverseReappearLayoutEffects(finishedRoot,finishedWork,includeWorkInProgressEffects);break;case 13:recursivelyTraverseReappearLayoutEffects(finishedRoot,finishedWork,includeWorkInProgressEffects),includeWorkInProgressEffects&&4&flags&&commitSuspenseHydrationCallbacks(finishedRoot,finishedWork);break;case 22:null===finishedWork.memoizedState&&recursivelyTraverseReappearLayoutEffects(finishedRoot,finishedWork,includeWorkInProgressEffects),safelyAttachRef(finishedWork,finishedWork.return)}parentFiber=parentFiber.sibling}}function commitOffscreenPassiveMountEffects(current,finishedWork){var previousCache=null;null!==current&&null!==current.memoizedState&&null!==current.memoizedState.cachePool&&(previousCache=current.memoizedState.cachePool.pool),current=null,null!==finishedWork.memoizedState&&null!==finishedWork.memoizedState.cachePool&&(current=finishedWork.memoizedState.cachePool.pool),current!==previousCache&&(null!=current&&current.refCount++,null!=previousCache&&releaseCache(previousCache))}function commitCachePassiveMountEffect(current,finishedWork){current=null,null!==finishedWork.alternate&&(current=finishedWork.alternate.memoizedState.cache),(finishedWork=finishedWork.memoizedState.cache)!==current&&(finishedWork.refCount++,null!=current&&releaseCache(current))}function recursivelyTraversePassiveMountEffects(root,parentFiber,committedLanes,committedTransitions){if(10256&parentFiber.subtreeFlags)for(parentFiber=parentFiber.child;null!==parentFiber;)commitPassiveMountOnFiber(root,parentFiber,committedLanes,committedTransitions),parentFiber=parentFiber.sibling}function commitPassiveMountOnFiber(finishedRoot,finishedWork,committedLanes,committedTransitions){var flags=finishedWork.flags;switch(finishedWork.tag){case 0:case 11:case 15:recursivelyTraversePassiveMountEffects(finishedRoot,finishedWork,committedLanes,committedTransitions),2048&flags&&commitHookEffectListMount(9,finishedWork);break;case 3:recursivelyTraversePassiveMountEffects(finishedRoot,finishedWork,committedLanes,committedTransitions),2048&flags&&(finishedRoot=null,null!==finishedWork.alternate&&(finishedRoot=finishedWork.alternate.memoizedState.cache),(finishedWork=finishedWork.memoizedState.cache)!==finishedRoot&&(finishedWork.refCount++,null!=finishedRoot&&releaseCache(finishedRoot)));break;case 12:if(2048&flags){recursivelyTraversePassiveMountEffects(finishedRoot,finishedWork,committedLanes,committedTransitions),finishedRoot=finishedWork.stateNode;try{var _finishedWork$memoize2=finishedWork.memoizedProps,id=_finishedWork$memoize2.id,onPostCommit=_finishedWork$memoize2.onPostCommit;"function"==typeof onPostCommit&&onPostCommit(id,null===finishedWork.alternate?"mount":"update",finishedRoot.passiveEffectDuration,-0)}catch(error){captureCommitPhaseError(finishedWork,finishedWork.return,error)}}else recursivelyTraversePassiveMountEffects(finishedRoot,finishedWork,committedLanes,committedTransitions);break;case 23:break;case 22:_finishedWork$memoize2=finishedWork.stateNode,null!==finishedWork.memoizedState?4&_finishedWork$memoize2._visibility?recursivelyTraversePassiveMountEffects(finishedRoot,finishedWork,committedLanes,committedTransitions):recursivelyTraverseAtomicPassiveEffects(finishedRoot,finishedWork):4&_finishedWork$memoize2._visibility?recursivelyTraversePassiveMountEffects(finishedRoot,finishedWork,committedLanes,committedTransitions):(_finishedWork$memoize2._visibility|=4,recursivelyTraverseReconnectPassiveEffects(finishedRoot,finishedWork,committedLanes,committedTransitions,!!(10256&finishedWork.subtreeFlags))),2048&flags&&commitOffscreenPassiveMountEffects(finishedWork.alternate,finishedWork);break;case 24:recursivelyTraversePassiveMountEffects(finishedRoot,finishedWork,committedLanes,committedTransitions),2048&flags&&commitCachePassiveMountEffect(finishedWork.alternate,finishedWork);break;default:recursivelyTraversePassiveMountEffects(finishedRoot,finishedWork,committedLanes,committedTransitions)}}function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0,parentFiber,committedLanes$jscomp$0,committedTransitions$jscomp$0,includeWorkInProgressEffects){for(includeWorkInProgressEffects=includeWorkInProgressEffects&&!!(10256&parentFiber.subtreeFlags),parentFiber=parentFiber.child;null!==parentFiber;){var finishedRoot=finishedRoot$jscomp$0,finishedWork=parentFiber,committedLanes=committedLanes$jscomp$0,committedTransitions=committedTransitions$jscomp$0,flags=finishedWork.flags;switch(finishedWork.tag){case 0:case 11:case 15:recursivelyTraverseReconnectPassiveEffects(finishedRoot,finishedWork,committedLanes,committedTransitions,includeWorkInProgressEffects),commitHookEffectListMount(8,finishedWork);break;case 23:break;case 22:var instance=finishedWork.stateNode;null!==finishedWork.memoizedState?4&instance._visibility?recursivelyTraverseReconnectPassiveEffects(finishedRoot,finishedWork,committedLanes,committedTransitions,includeWorkInProgressEffects):recursivelyTraverseAtomicPassiveEffects(finishedRoot,finishedWork):(instance._visibility|=4,recursivelyTraverseReconnectPassiveEffects(finishedRoot,finishedWork,committedLanes,committedTransitions,includeWorkInProgressEffects)),includeWorkInProgressEffects&&2048&flags&&commitOffscreenPassiveMountEffects(finishedWork.alternate,finishedWork);break;case 24:recursivelyTraverseReconnectPassiveEffects(finishedRoot,finishedWork,committedLanes,committedTransitions,includeWorkInProgressEffects),includeWorkInProgressEffects&&2048&flags&&commitCachePassiveMountEffect(finishedWork.alternate,finishedWork);break;default:recursivelyTraverseReconnectPassiveEffects(finishedRoot,finishedWork,committedLanes,committedTransitions,includeWorkInProgressEffects)}parentFiber=parentFiber.sibling}}function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0,parentFiber){if(10256&parentFiber.subtreeFlags)for(parentFiber=parentFiber.child;null!==parentFiber;){var finishedRoot=finishedRoot$jscomp$0,finishedWork=parentFiber,flags=finishedWork.flags;switch(finishedWork.tag){case 22:recursivelyTraverseAtomicPassiveEffects(finishedRoot,finishedWork),2048&flags&&commitOffscreenPassiveMountEffects(finishedWork.alternate,finishedWork);break;case 24:recursivelyTraverseAtomicPassiveEffects(finishedRoot,finishedWork),2048&flags&&commitCachePassiveMountEffect(finishedWork.alternate,finishedWork);break;default:recursivelyTraverseAtomicPassiveEffects(finishedRoot,finishedWork)}parentFiber=parentFiber.sibling}}var suspenseyCommitFlag=8192;function recursivelyAccumulateSuspenseyCommit(parentFiber){if(parentFiber.subtreeFlags&suspenseyCommitFlag)for(parentFiber=parentFiber.child;null!==parentFiber;)accumulateSuspenseyCommitOnFiber(parentFiber),parentFiber=parentFiber.sibling}function accumulateSuspenseyCommitOnFiber(fiber){switch(fiber.tag){case 26:recursivelyAccumulateSuspenseyCommit(fiber),fiber.flags&suspenseyCommitFlag&&null!==fiber.memoizedState&&function(hoistableRoot,resource,props){if(null===suspendedState)throw Error(formatProdErrorMessage(475));var state=suspendedState;if(!("stylesheet"!==resource.type||"string"==typeof props.media&&!1===matchMedia(props.media).matches||4&resource.state.loading)){if(null===resource.instance){var key=getStyleKey(props.href),instance=hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));if(instance)return null!==(hoistableRoot=instance._p)&&"object"==typeof hoistableRoot&&"function"==typeof hoistableRoot.then&&(state.count++,state=onUnsuspend.bind(state),hoistableRoot.then(state,state)),resource.state.loading|=4,resource.instance=instance,void markNodeAsHoistable(instance);instance=hoistableRoot.ownerDocument||hoistableRoot,props=stylesheetPropsFromRawProps(props),(key=preloadPropsMap.get(key))&&adoptPreloadPropsForStylesheet(props,key),markNodeAsHoistable(instance=instance.createElement("link"));var linkInstance=instance;linkInstance._p=new Promise((function(resolve,reject){linkInstance.onload=resolve,linkInstance.onerror=reject})),setInitialProperties(instance,"link",props),resource.instance=instance}null===state.stylesheets&&(state.stylesheets=new Map),state.stylesheets.set(resource,hoistableRoot),(hoistableRoot=resource.state.preload)&&!(3&resource.state.loading)&&(state.count++,resource=onUnsuspend.bind(state),hoistableRoot.addEventListener("load",resource),hoistableRoot.addEventListener("error",resource))}}(currentHoistableRoot,fiber.memoizedState,fiber.memoizedProps);break;case 5:default:recursivelyAccumulateSuspenseyCommit(fiber);break;case 3:case 4:var previousHoistableRoot=currentHoistableRoot;currentHoistableRoot=getHoistableRoot(fiber.stateNode.containerInfo),recursivelyAccumulateSuspenseyCommit(fiber),currentHoistableRoot=previousHoistableRoot;break;case 22:null===fiber.memoizedState&&(null!==(previousHoistableRoot=fiber.alternate)&&null!==previousHoistableRoot.memoizedState?(previousHoistableRoot=suspenseyCommitFlag,suspenseyCommitFlag=16777216,recursivelyAccumulateSuspenseyCommit(fiber),suspenseyCommitFlag=previousHoistableRoot):recursivelyAccumulateSuspenseyCommit(fiber))}}function detachAlternateSiblings(parentFiber){var previousFiber=parentFiber.alternate;if(null!==previousFiber&&null!==(parentFiber=previousFiber.child)){previousFiber.child=null;do{previousFiber=parentFiber.sibling,parentFiber.sibling=null,parentFiber=previousFiber}while(null!==parentFiber)}}function recursivelyTraversePassiveUnmountEffects(parentFiber){var deletions=parentFiber.deletions;if(16&parentFiber.flags){if(null!==deletions)for(var i=0;i<deletions.length;i++){var childToDelete=deletions[i];nextEffect=childToDelete,commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete,parentFiber)}detachAlternateSiblings(parentFiber)}if(10256&parentFiber.subtreeFlags)for(parentFiber=parentFiber.child;null!==parentFiber;)commitPassiveUnmountOnFiber(parentFiber),parentFiber=parentFiber.sibling}function commitPassiveUnmountOnFiber(finishedWork){switch(finishedWork.tag){case 0:case 11:case 15:recursivelyTraversePassiveUnmountEffects(finishedWork),2048&finishedWork.flags&&commitHookEffectListUnmount(9,finishedWork,finishedWork.return);break;case 3:case 12:default:recursivelyTraversePassiveUnmountEffects(finishedWork);break;case 22:var instance=finishedWork.stateNode;null!==finishedWork.memoizedState&&4&instance._visibility&&(null===finishedWork.return||13!==finishedWork.return.tag)?(instance._visibility&=-5,recursivelyTraverseDisconnectPassiveEffects(finishedWork)):recursivelyTraversePassiveUnmountEffects(finishedWork)}}function recursivelyTraverseDisconnectPassiveEffects(parentFiber){var deletions=parentFiber.deletions;if(16&parentFiber.flags){if(null!==deletions)for(var i=0;i<deletions.length;i++){var childToDelete=deletions[i];nextEffect=childToDelete,commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete,parentFiber)}detachAlternateSiblings(parentFiber)}for(parentFiber=parentFiber.child;null!==parentFiber;){switch((deletions=parentFiber).tag){case 0:case 11:case 15:commitHookEffectListUnmount(8,deletions,deletions.return),recursivelyTraverseDisconnectPassiveEffects(deletions);break;case 22:4&(i=deletions.stateNode)._visibility&&(i._visibility&=-5,recursivelyTraverseDisconnectPassiveEffects(deletions));break;default:recursivelyTraverseDisconnectPassiveEffects(deletions)}parentFiber=parentFiber.sibling}}function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot,nearestMountedAncestor){for(;null!==nextEffect;){var fiber=nextEffect;switch(fiber.tag){case 0:case 11:case 15:commitHookEffectListUnmount(8,fiber,nearestMountedAncestor);break;case 23:case 22:if(null!==fiber.memoizedState&&null!==fiber.memoizedState.cachePool){var cache=fiber.memoizedState.cachePool.pool;null!=cache&&cache.refCount++}break;case 24:releaseCache(fiber.memoizedState.cache)}if(null!==(cache=fiber.child))cache.return=fiber,nextEffect=cache;else a:for(fiber=deletedSubtreeRoot;null!==nextEffect;){var sibling=(cache=nextEffect).sibling,returnFiber=cache.return;if(detachFiberAfterEffects(cache),cache===fiber){nextEffect=null;break a}if(null!==sibling){sibling.return=returnFiber,nextEffect=sibling;break a}nextEffect=returnFiber}}}function FiberNode(tag,pendingProps,key,mode){this.tag=tag,this.key=key,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=pendingProps,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=mode,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function createFiberImplClass(tag,pendingProps,key,mode){return new FiberNode(tag,pendingProps,key,mode)}function shouldConstruct(Component){return!(!(Component=Component.prototype)||!Component.isReactComponent)}function createWorkInProgress(current,pendingProps){var workInProgress=current.alternate;return null===workInProgress?((workInProgress=createFiberImplClass(current.tag,pendingProps,current.key,current.mode)).elementType=current.elementType,workInProgress.type=current.type,workInProgress.stateNode=current.stateNode,workInProgress.alternate=current,current.alternate=workInProgress):(workInProgress.pendingProps=pendingProps,workInProgress.type=current.type,workInProgress.flags=0,workInProgress.subtreeFlags=0,workInProgress.deletions=null),workInProgress.flags=31457280&current.flags,workInProgress.childLanes=current.childLanes,workInProgress.lanes=current.lanes,workInProgress.child=current.child,workInProgress.memoizedProps=current.memoizedProps,workInProgress.memoizedState=current.memoizedState,workInProgress.updateQueue=current.updateQueue,pendingProps=current.dependencies,workInProgress.dependencies=null===pendingProps?null:{lanes:pendingProps.lanes,firstContext:pendingProps.firstContext},workInProgress.sibling=current.sibling,workInProgress.index=current.index,workInProgress.ref=current.ref,workInProgress.refCleanup=current.refCleanup,workInProgress}function resetWorkInProgress(workInProgress,renderLanes){workInProgress.flags&=31457282;var current=workInProgress.alternate;return null===current?(workInProgress.childLanes=0,workInProgress.lanes=renderLanes,workInProgress.child=null,workInProgress.subtreeFlags=0,workInProgress.memoizedProps=null,workInProgress.memoizedState=null,workInProgress.updateQueue=null,workInProgress.dependencies=null,workInProgress.stateNode=null):(workInProgress.childLanes=current.childLanes,workInProgress.lanes=current.lanes,workInProgress.child=current.child,workInProgress.subtreeFlags=0,workInProgress.deletions=null,workInProgress.memoizedProps=current.memoizedProps,workInProgress.memoizedState=current.memoizedState,workInProgress.updateQueue=current.updateQueue,workInProgress.type=current.type,renderLanes=current.dependencies,workInProgress.dependencies=null===renderLanes?null:{lanes:renderLanes.lanes,firstContext:renderLanes.firstContext}),workInProgress}function createFiberFromTypeAndProps(type,key,pendingProps,owner,mode,lanes){var fiberTag=0;if(owner=type,"function"==typeof type)shouldConstruct(type)&&(fiberTag=1);else if("string"==typeof type)fiberTag=function(type,props,hostContext){if(1===hostContext||null!=props.itemProp)return!1;switch(type){case"meta":case"title":return!0;case"style":if("string"!=typeof props.precedence||"string"!=typeof props.href||""===props.href)break;return!0;case"link":if("string"!=typeof props.rel||"string"!=typeof props.href||""===props.href||props.onLoad||props.onError)break;return"stylesheet"!==props.rel||(type=props.disabled,"string"==typeof props.precedence&&null==type);case"script":if(props.async&&"function"!=typeof props.async&&"symbol"!=typeof props.async&&!props.onLoad&&!props.onError&&props.src&&"string"==typeof props.src)return!0}return!1}(type,pendingProps,contextStackCursor.current)?26:"html"===type||"head"===type||"body"===type?27:5;else a:switch(type){case REACT_FRAGMENT_TYPE:return createFiberFromFragment(pendingProps.children,mode,lanes,key);case REACT_STRICT_MODE_TYPE:fiberTag=8,mode|=24;break;case REACT_PROFILER_TYPE:return(type=createFiberImplClass(12,pendingProps,key,2|mode)).elementType=REACT_PROFILER_TYPE,type.lanes=lanes,type;case REACT_SUSPENSE_TYPE:return(type=createFiberImplClass(13,pendingProps,key,mode)).elementType=REACT_SUSPENSE_TYPE,type.lanes=lanes,type;case REACT_SUSPENSE_LIST_TYPE:return(type=createFiberImplClass(19,pendingProps,key,mode)).elementType=REACT_SUSPENSE_LIST_TYPE,type.lanes=lanes,type;case REACT_OFFSCREEN_TYPE:return createFiberFromOffscreen(pendingProps,mode,lanes,key);default:if("object"==typeof type&&null!==type)switch(type.$$typeof){case REACT_PROVIDER_TYPE:case REACT_CONTEXT_TYPE:fiberTag=10;break a;case REACT_CONSUMER_TYPE:fiberTag=9;break a;case REACT_FORWARD_REF_TYPE:fiberTag=11;break a;case REACT_MEMO_TYPE:fiberTag=14;break a;case REACT_LAZY_TYPE:fiberTag=16,owner=null;break a}fiberTag=29,pendingProps=Error(formatProdErrorMessage(130,null===type?"null":typeof type,"")),owner=null}return(key=createFiberImplClass(fiberTag,pendingProps,key,mode)).elementType=type,key.type=owner,key.lanes=lanes,key}function createFiberFromFragment(elements,mode,lanes,key){return(elements=createFiberImplClass(7,elements,key,mode)).lanes=lanes,elements}function createFiberFromOffscreen(pendingProps,mode,lanes,key){(pendingProps=createFiberImplClass(22,pendingProps,key,mode)).elementType=REACT_OFFSCREEN_TYPE,pendingProps.lanes=lanes;var primaryChildInstance={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var fiber=primaryChildInstance._current;if(null===fiber)throw Error(formatProdErrorMessage(456));if(!(2&primaryChildInstance._pendingVisibility)){var root=enqueueConcurrentRenderForLane(fiber,2);null!==root&&(primaryChildInstance._pendingVisibility|=2,scheduleUpdateOnFiber(root,fiber,2))}},attach:function(){var fiber=primaryChildInstance._current;if(null===fiber)throw Error(formatProdErrorMessage(456));if(2&primaryChildInstance._pendingVisibility){var root=enqueueConcurrentRenderForLane(fiber,2);null!==root&&(primaryChildInstance._pendingVisibility&=-3,scheduleUpdateOnFiber(root,fiber,2))}}};return pendingProps.stateNode=primaryChildInstance,pendingProps}function createFiberFromText(content,mode,lanes){return(content=createFiberImplClass(6,content,null,mode)).lanes=lanes,content}function createFiberFromPortal(portal,mode,lanes){return(mode=createFiberImplClass(4,null!==portal.children?portal.children:[],portal.key,mode)).lanes=lanes,mode.stateNode={containerInfo:portal.containerInfo,pendingChildren:null,implementation:portal.implementation},mode}function markUpdate(workInProgress){workInProgress.flags|=4}function preloadResourceAndSuspendIfNeeded(workInProgress,resource){if("stylesheet"!==resource.type||4&resource.state.loading)workInProgress.flags&=-16777217;else if(workInProgress.flags|=16777216,!preloadResource(resource)){if(null!==(resource=suspenseHandlerStackCursor.current)&&((4194176&workInProgressRootRenderLanes)===workInProgressRootRenderLanes?null!==shellBoundary:(62914560&workInProgressRootRenderLanes)!==workInProgressRootRenderLanes&&!(536870912&workInProgressRootRenderLanes)||resource!==shellBoundary))throw suspendedThenable=noopSuspenseyCommitThenable,SuspenseyCommitException;workInProgress.flags|=8192}}function scheduleRetryEffect(workInProgress,retryQueue){null!==retryQueue&&(workInProgress.flags|=4),16384&workInProgress.flags&&(retryQueue=22!==workInProgress.tag?claimNextRetryLane():536870912,workInProgress.lanes|=retryQueue,workInProgressSuspendedRetryLanes|=retryQueue)}function cutOffTailIfNeeded(renderState,hasRenderedATailFallback){if(!isHydrating)switch(renderState.tailMode){case"hidden":hasRenderedATailFallback=renderState.tail;for(var lastTailNode=null;null!==hasRenderedATailFallback;)null!==hasRenderedATailFallback.alternate&&(lastTailNode=hasRenderedATailFallback),hasRenderedATailFallback=hasRenderedATailFallback.sibling;null===lastTailNode?renderState.tail=null:lastTailNode.sibling=null;break;case"collapsed":lastTailNode=renderState.tail;for(var lastTailNode$131=null;null!==lastTailNode;)null!==lastTailNode.alternate&&(lastTailNode$131=lastTailNode),lastTailNode=lastTailNode.sibling;null===lastTailNode$131?hasRenderedATailFallback||null===renderState.tail?renderState.tail=null:renderState.tail.sibling=null:lastTailNode$131.sibling=null}}function bubbleProperties(completedWork){var didBailout=null!==completedWork.alternate&&completedWork.alternate.child===completedWork.child,newChildLanes=0,subtreeFlags=0;if(didBailout)for(var child$132=completedWork.child;null!==child$132;)newChildLanes|=child$132.lanes|child$132.childLanes,subtreeFlags|=31457280&child$132.subtreeFlags,subtreeFlags|=31457280&child$132.flags,child$132.return=completedWork,child$132=child$132.sibling;else for(child$132=completedWork.child;null!==child$132;)newChildLanes|=child$132.lanes|child$132.childLanes,subtreeFlags|=child$132.subtreeFlags,subtreeFlags|=child$132.flags,child$132.return=completedWork,child$132=child$132.sibling;return completedWork.subtreeFlags|=subtreeFlags,completedWork.childLanes=newChildLanes,didBailout}function completeWork(current,workInProgress,renderLanes){var newProps=workInProgress.pendingProps;switch(popTreeContext(workInProgress),workInProgress.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return bubbleProperties(workInProgress),null;case 3:return renderLanes=workInProgress.stateNode,newProps=null,null!==current&&(newProps=current.memoizedState.cache),workInProgress.memoizedState.cache!==newProps&&(workInProgress.flags|=2048),popProvider(CacheContext),popHostContainer(),renderLanes.pendingContext&&(renderLanes.context=renderLanes.pendingContext,renderLanes.pendingContext=null),null!==current&&null!==current.child||(popHydrationState(workInProgress)?markUpdate(workInProgress):null===current||current.memoizedState.isDehydrated&&!(256&workInProgress.flags)||(workInProgress.flags|=1024,null!==hydrationErrors&&(queueRecoverableErrors(hydrationErrors),hydrationErrors=null))),bubbleProperties(workInProgress),null;case 26:return renderLanes=workInProgress.memoizedState,null===current?(markUpdate(workInProgress),null!==renderLanes?(bubbleProperties(workInProgress),preloadResourceAndSuspendIfNeeded(workInProgress,renderLanes)):(bubbleProperties(workInProgress),workInProgress.flags&=-16777217)):renderLanes?renderLanes!==current.memoizedState?(markUpdate(workInProgress),bubbleProperties(workInProgress),preloadResourceAndSuspendIfNeeded(workInProgress,renderLanes)):(bubbleProperties(workInProgress),workInProgress.flags&=-16777217):(current.memoizedProps!==newProps&&markUpdate(workInProgress),bubbleProperties(workInProgress),workInProgress.flags&=-16777217),null;case 27:popHostContext(workInProgress),renderLanes=rootInstanceStackCursor.current;var type=workInProgress.type;if(null!==current&&null!=workInProgress.stateNode)current.memoizedProps!==newProps&&markUpdate(workInProgress);else{if(!newProps){if(null===workInProgress.stateNode)throw Error(formatProdErrorMessage(166));return bubbleProperties(workInProgress),null}current=contextStackCursor.current,popHydrationState(workInProgress)?prepareToHydrateHostInstance(workInProgress):(current=resolveSingletonInstance(type,newProps,renderLanes),workInProgress.stateNode=current,markUpdate(workInProgress))}return bubbleProperties(workInProgress),null;case 5:if(popHostContext(workInProgress),renderLanes=workInProgress.type,null!==current&&null!=workInProgress.stateNode)current.memoizedProps!==newProps&&markUpdate(workInProgress);else{if(!newProps){if(null===workInProgress.stateNode)throw Error(formatProdErrorMessage(166));return bubbleProperties(workInProgress),null}if(current=contextStackCursor.current,popHydrationState(workInProgress))prepareToHydrateHostInstance(workInProgress);else{switch(type=getOwnerDocumentFromRootContainer(rootInstanceStackCursor.current),current){case 1:current=type.createElementNS("http://www.w3.org/2000/svg",renderLanes);break;case 2:current=type.createElementNS("http://www.w3.org/1998/Math/MathML",renderLanes);break;default:switch(renderLanes){case"svg":current=type.createElementNS("http://www.w3.org/2000/svg",renderLanes);break;case"math":current=type.createElementNS("http://www.w3.org/1998/Math/MathML",renderLanes);break;case"script":(current=type.createElement("div")).innerHTML="<script><\/script>",current=current.removeChild(current.firstChild);break;case"select":current="string"==typeof newProps.is?type.createElement("select",{is:newProps.is}):type.createElement("select"),newProps.multiple?current.multiple=!0:newProps.size&&(current.size=newProps.size);break;default:current="string"==typeof newProps.is?type.createElement(renderLanes,{is:newProps.is}):type.createElement(renderLanes)}}current[internalInstanceKey]=workInProgress,current[internalPropsKey]=newProps;a:for(type=workInProgress.child;null!==type;){if(5===type.tag||6===type.tag)current.appendChild(type.stateNode);else if(4!==type.tag&&27!==type.tag&&null!==type.child){type.child.return=type,type=type.child;continue}if(type===workInProgress)break a;for(;null===type.sibling;){if(null===type.return||type.return===workInProgress)break a;type=type.return}type.sibling.return=type.return,type=type.sibling}workInProgress.stateNode=current;a:switch(setInitialProperties(current,renderLanes,newProps),renderLanes){case"button":case"input":case"select":case"textarea":current=!!newProps.autoFocus;break a;case"img":current=!0;break a;default:current=!1}current&&markUpdate(workInProgress)}}return bubbleProperties(workInProgress),workInProgress.flags&=-16777217,null;case 6:if(current&&null!=workInProgress.stateNode)current.memoizedProps!==newProps&&markUpdate(workInProgress);else{if("string"!=typeof newProps&&null===workInProgress.stateNode)throw Error(formatProdErrorMessage(166));if(current=rootInstanceStackCursor.current,popHydrationState(workInProgress)){if(current=workInProgress.stateNode,renderLanes=workInProgress.memoizedProps,newProps=null,null!==(type=hydrationParentFiber))switch(type.tag){case 27:case 5:newProps=type.memoizedProps}current[internalInstanceKey]=workInProgress,(current=!!(current.nodeValue===renderLanes||null!==newProps&&!0===newProps.suppressHydrationWarning||checkForUnmatchedText(current.nodeValue,renderLanes)))||throwOnHydrationMismatch(workInProgress)}else(current=getOwnerDocumentFromRootContainer(current).createTextNode(newProps))[internalInstanceKey]=workInProgress,workInProgress.stateNode=current}return bubbleProperties(workInProgress),null;case 13:if(newProps=workInProgress.memoizedState,null===current||null!==current.memoizedState&&null!==current.memoizedState.dehydrated){if(type=popHydrationState(workInProgress),null!==newProps&&null!==newProps.dehydrated){if(null===current){if(!type)throw Error(formatProdErrorMessage(318));if(!(type=null!==(type=workInProgress.memoizedState)?type.dehydrated:null))throw Error(formatProdErrorMessage(317));type[internalInstanceKey]=workInProgress}else resetHydrationState(),!(128&workInProgress.flags)&&(workInProgress.memoizedState=null),workInProgress.flags|=4;bubbleProperties(workInProgress),type=!1}else null!==hydrationErrors&&(queueRecoverableErrors(hydrationErrors),hydrationErrors=null),type=!0;if(!type)return 256&workInProgress.flags?(popSuspenseHandler(workInProgress),workInProgress):(popSuspenseHandler(workInProgress),null)}if(popSuspenseHandler(workInProgress),128&workInProgress.flags)return workInProgress.lanes=renderLanes,workInProgress;if(renderLanes=null!==newProps,current=null!==current&&null!==current.memoizedState,renderLanes){type=null,null!==(newProps=workInProgress.child).alternate&&null!==newProps.alternate.memoizedState&&null!==newProps.alternate.memoizedState.cachePool&&(type=newProps.alternate.memoizedState.cachePool.pool);var cache$144=null;null!==newProps.memoizedState&&null!==newProps.memoizedState.cachePool&&(cache$144=newProps.memoizedState.cachePool.pool),cache$144!==type&&(newProps.flags|=2048)}return renderLanes!==current&&renderLanes&&(workInProgress.child.flags|=8192),scheduleRetryEffect(workInProgress,workInProgress.updateQueue),bubbleProperties(workInProgress),null;case 4:return popHostContainer(),null===current&&listenToAllSupportedEvents(workInProgress.stateNode.containerInfo),bubbleProperties(workInProgress),null;case 10:return popProvider(workInProgress.type),bubbleProperties(workInProgress),null;case 19:if(pop(suspenseStackCursor),null===(type=workInProgress.memoizedState))return bubbleProperties(workInProgress),null;if(newProps=!!(128&workInProgress.flags),null===(cache$144=type.rendering))if(newProps)cutOffTailIfNeeded(type,!1);else{if(0!==workInProgressRootExitStatus||null!==current&&128&current.flags)for(current=workInProgress.child;null!==current;){if(null!==(cache$144=findFirstSuspended(current))){for(workInProgress.flags|=128,cutOffTailIfNeeded(type,!1),current=cache$144.updateQueue,workInProgress.updateQueue=current,scheduleRetryEffect(workInProgress,current),workInProgress.subtreeFlags=0,current=renderLanes,renderLanes=workInProgress.child;null!==renderLanes;)resetWorkInProgress(renderLanes,current),renderLanes=renderLanes.sibling;return push(suspenseStackCursor,1&suspenseStackCursor.current|2),workInProgress.child}current=current.sibling}null!==type.tail&&now()>workInProgressRootRenderTargetTime&&(workInProgress.flags|=128,newProps=!0,cutOffTailIfNeeded(type,!1),workInProgress.lanes=4194304)}else{if(!newProps)if(null!==(current=findFirstSuspended(cache$144))){if(workInProgress.flags|=128,newProps=!0,current=current.updateQueue,workInProgress.updateQueue=current,scheduleRetryEffect(workInProgress,current),cutOffTailIfNeeded(type,!0),null===type.tail&&"hidden"===type.tailMode&&!cache$144.alternate&&!isHydrating)return bubbleProperties(workInProgress),null}else 2*now()-type.renderingStartTime>workInProgressRootRenderTargetTime&&536870912!==renderLanes&&(workInProgress.flags|=128,newProps=!0,cutOffTailIfNeeded(type,!1),workInProgress.lanes=4194304);type.isBackwards?(cache$144.sibling=workInProgress.child,workInProgress.child=cache$144):(null!==(current=type.last)?current.sibling=cache$144:workInProgress.child=cache$144,type.last=cache$144)}return null!==type.tail?(workInProgress=type.tail,type.rendering=workInProgress,type.tail=workInProgress.sibling,type.renderingStartTime=now(),workInProgress.sibling=null,current=suspenseStackCursor.current,push(suspenseStackCursor,newProps?1&current|2:1&current),workInProgress):(bubbleProperties(workInProgress),null);case 22:case 23:return popSuspenseHandler(workInProgress),popHiddenContext(),newProps=null!==workInProgress.memoizedState,null!==current?null!==current.memoizedState!==newProps&&(workInProgress.flags|=8192):newProps&&(workInProgress.flags|=8192),newProps?!!(536870912&renderLanes)&&!(128&workInProgress.flags)&&(bubbleProperties(workInProgress),6&workInProgress.subtreeFlags&&(workInProgress.flags|=8192)):bubbleProperties(workInProgress),null!==(renderLanes=workInProgress.updateQueue)&&scheduleRetryEffect(workInProgress,renderLanes.retryQueue),renderLanes=null,null!==current&&null!==current.memoizedState&&null!==current.memoizedState.cachePool&&(renderLanes=current.memoizedState.cachePool.pool),newProps=null,null!==workInProgress.memoizedState&&null!==workInProgress.memoizedState.cachePool&&(newProps=workInProgress.memoizedState.cachePool.pool),newProps!==renderLanes&&(workInProgress.flags|=2048),null!==current&&pop(resumedCache),null;case 24:return renderLanes=null,null!==current&&(renderLanes=current.memoizedState.cache),workInProgress.memoizedState.cache!==renderLanes&&(workInProgress.flags|=2048),popProvider(CacheContext),bubbleProperties(workInProgress),null;case 25:return null}throw Error(formatProdErrorMessage(156,workInProgress.tag))}function unwindWork(current,workInProgress){switch(popTreeContext(workInProgress),workInProgress.tag){case 1:return 65536&(current=workInProgress.flags)?(workInProgress.flags=-65537&current|128,workInProgress):null;case 3:return popProvider(CacheContext),popHostContainer(),65536&(current=workInProgress.flags)&&!(128&current)?(workInProgress.flags=-65537&current|128,workInProgress):null;case 26:case 27:case 5:return popHostContext(workInProgress),null;case 13:if(popSuspenseHandler(workInProgress),null!==(current=workInProgress.memoizedState)&&null!==current.dehydrated){if(null===workInProgress.alternate)throw Error(formatProdErrorMessage(340));resetHydrationState()}return 65536&(current=workInProgress.flags)?(workInProgress.flags=-65537&current|128,workInProgress):null;case 19:return pop(suspenseStackCursor),null;case 4:return popHostContainer(),null;case 10:return popProvider(workInProgress.type),null;case 22:case 23:return popSuspenseHandler(workInProgress),popHiddenContext(),null!==current&&pop(resumedCache),65536&(current=workInProgress.flags)?(workInProgress.flags=-65537&current|128,workInProgress):null;case 24:return popProvider(CacheContext),null;default:return null}}function unwindInterruptedWork(current,interruptedWork){switch(popTreeContext(interruptedWork),interruptedWork.tag){case 3:popProvider(CacheContext),popHostContainer();break;case 26:case 27:case 5:popHostContext(interruptedWork);break;case 4:popHostContainer();break;case 13:popSuspenseHandler(interruptedWork);break;case 19:pop(suspenseStackCursor);break;case 10:popProvider(interruptedWork.type);break;case 22:case 23:popSuspenseHandler(interruptedWork),popHiddenContext(),null!==current&&pop(resumedCache);break;case 24:popProvider(CacheContext)}}var DefaultAsyncDispatcher={getCacheForType:function(resourceType){var cache=readContext(CacheContext),cacheForType=cache.data.get(resourceType);return void 0===cacheForType&&(cacheForType=resourceType(),cache.data.set(resourceType,cacheForType)),cacheForType}},PossiblyWeakMap="function"==typeof WeakMap?WeakMap:Map,executionContext=0,workInProgressRoot=null,workInProgress=null,workInProgressRootRenderLanes=0,workInProgressSuspendedReason=0,workInProgressThrownValue=null,workInProgressRootDidSkipSuspendedSiblings=!1,workInProgressRootIsPrerendering=!1,workInProgressRootDidAttachPingListener=!1,entangledRenderLanes=0,workInProgressRootExitStatus=0,workInProgressRootSkippedLanes=0,workInProgressRootInterleavedUpdatedLanes=0,workInProgressRootPingedLanes=0,workInProgressDeferredLane=0,workInProgressSuspendedRetryLanes=0,workInProgressRootConcurrentErrors=null,workInProgressRootRecoverableErrors=null,workInProgressRootDidIncludeRecursiveRenderUpdate=!1,globalMostRecentFallbackTime=0,workInProgressRootRenderTargetTime=1/0,workInProgressTransitions=null,legacyErrorBoundariesThatAlreadyFailed=null,rootDoesHavePassiveEffects=!1,rootWithPendingPassiveEffects=null,pendingPassiveEffectsLanes=0,pendingPassiveEffectsRemainingLanes=0,pendingPassiveTransitions=null,nestedUpdateCount=0,rootWithNestedUpdates=null;function requestUpdateLane(){if(2&executionContext&&0!==workInProgressRootRenderLanes)return workInProgressRootRenderLanes&-workInProgressRootRenderLanes;if(null!==ReactSharedInternals.T){return 0!==currentEntangledLane?currentEntangledLane:requestTransitionLane()}return resolveUpdatePriority()}function requestDeferredLane(){0===workInProgressDeferredLane&&(workInProgressDeferredLane=536870912&workInProgressRootRenderLanes&&!isHydrating?536870912:claimNextTransitionLane());var suspenseHandler=suspenseHandlerStackCursor.current;return null!==suspenseHandler&&(suspenseHandler.flags|=32),workInProgressDeferredLane}function scheduleUpdateOnFiber(root,fiber,lane){(root===workInProgressRoot&&2===workInProgressSuspendedReason||null!==root.cancelPendingCommit)&&(prepareFreshStack(root,0),markRootSuspended(root,workInProgressRootRenderLanes,workInProgressDeferredLane,!1)),markRootUpdated$1(root,lane),2&executionContext&&root===workInProgressRoot||(root===workInProgressRoot&&(!(2&executionContext)&&(workInProgressRootInterleavedUpdatedLanes|=lane),4===workInProgressRootExitStatus&&markRootSuspended(root,workInProgressRootRenderLanes,workInProgressDeferredLane,!1)),ensureRootIsScheduled(root))}function performWorkOnRoot(root$jscomp$0,lanes,forceSync){if(6&executionContext)throw Error(formatProdErrorMessage(327));for(var shouldTimeSlice=!forceSync&&!(60&lanes)&&!(lanes&root$jscomp$0.expiredLanes)||checkIfRootIsPrerendering(root$jscomp$0,lanes),exitStatus=shouldTimeSlice?function(root,lanes){var prevExecutionContext=executionContext;executionContext|=2;var prevDispatcher=pushDispatcher(),prevAsyncDispatcher=pushAsyncDispatcher();workInProgressRoot!==root||workInProgressRootRenderLanes!==lanes?(workInProgressTransitions=null,workInProgressRootRenderTargetTime=now()+500,prepareFreshStack(root,lanes)):workInProgressRootIsPrerendering=checkIfRootIsPrerendering(root,lanes);a:for(;;)try{if(0!==workInProgressSuspendedReason&&null!==workInProgress){lanes=workInProgress;var thrownValue=workInProgressThrownValue;b:switch(workInProgressSuspendedReason){case 1:workInProgressSuspendedReason=0,workInProgressThrownValue=null,throwAndUnwindWorkLoop(root,lanes,thrownValue,1);break;case 2:if(isThenableResolved(thrownValue)){workInProgressSuspendedReason=0,workInProgressThrownValue=null,replaySuspendedUnitOfWork(lanes);break}lanes=function(){2===workInProgressSuspendedReason&&workInProgressRoot===root&&(workInProgressSuspendedReason=7),ensureRootIsScheduled(root)},thrownValue.then(lanes,lanes);break a;case 3:workInProgressSuspendedReason=7;break a;case 4:workInProgressSuspendedReason=5;break a;case 7:isThenableResolved(thrownValue)?(workInProgressSuspendedReason=0,workInProgressThrownValue=null,replaySuspendedUnitOfWork(lanes)):(workInProgressSuspendedReason=0,workInProgressThrownValue=null,throwAndUnwindWorkLoop(root,lanes,thrownValue,7));break;case 5:var resource=null;switch(workInProgress.tag){case 26:resource=workInProgress.memoizedState;case 5:case 27:var hostFiber=workInProgress;if(!resource||preloadResource(resource)){workInProgressSuspendedReason=0,workInProgressThrownValue=null;var sibling=hostFiber.sibling;if(null!==sibling)workInProgress=sibling;else{var returnFiber=hostFiber.return;null!==returnFiber?(workInProgress=returnFiber,completeUnitOfWork(returnFiber)):workInProgress=null}break b}}workInProgressSuspendedReason=0,workInProgressThrownValue=null,throwAndUnwindWorkLoop(root,lanes,thrownValue,5);break;case 6:workInProgressSuspendedReason=0,workInProgressThrownValue=null,throwAndUnwindWorkLoop(root,lanes,thrownValue,6);break;case 8:resetWorkInProgressStack(),workInProgressRootExitStatus=6;break a;default:throw Error(formatProdErrorMessage(462))}}workLoopConcurrent();break}catch(thrownValue$166){handleThrow(root,thrownValue$166)}return lastContextDependency=currentlyRenderingFiber=null,ReactSharedInternals.H=prevDispatcher,ReactSharedInternals.A=prevAsyncDispatcher,executionContext=prevExecutionContext,null!==workInProgress?0:(workInProgressRoot=null,workInProgressRootRenderLanes=0,finishQueueingConcurrentUpdates(),workInProgressRootExitStatus)}(root$jscomp$0,lanes):renderRootSync(root$jscomp$0,lanes,!0),renderWasConcurrent=shouldTimeSlice;;){if(0===exitStatus){workInProgressRootIsPrerendering&&!shouldTimeSlice&&markRootSuspended(root$jscomp$0,lanes,0,!1);break}if(6===exitStatus)markRootSuspended(root$jscomp$0,lanes,0,!workInProgressRootDidSkipSuspendedSiblings);else{if(forceSync=root$jscomp$0.current.alternate,renderWasConcurrent&&!isRenderConsistentWithExternalStores(forceSync)){exitStatus=renderRootSync(root$jscomp$0,lanes,!1),renderWasConcurrent=!1;continue}if(2===exitStatus){if(renderWasConcurrent=lanes,root$jscomp$0.errorRecoveryDisabledLanes&renderWasConcurrent)var JSCompiler_inline_result=0;else JSCompiler_inline_result=0!==(JSCompiler_inline_result=-536870913&root$jscomp$0.pendingLanes)?JSCompiler_inline_result:536870912&JSCompiler_inline_result?536870912:0;if(0!==JSCompiler_inline_result){lanes=JSCompiler_inline_result;a:{var root=root$jscomp$0;exitStatus=workInProgressRootConcurrentErrors;var wasRootDehydrated=root.current.memoizedState.isDehydrated;if(wasRootDehydrated&&(prepareFreshStack(root,JSCompiler_inline_result).flags|=256),2!==(JSCompiler_inline_result=renderRootSync(root,JSCompiler_inline_result,!1))){if(workInProgressRootDidAttachPingListener&&!wasRootDehydrated){root.errorRecoveryDisabledLanes|=renderWasConcurrent,workInProgressRootInterleavedUpdatedLanes|=renderWasConcurrent,exitStatus=4;break a}renderWasConcurrent=workInProgressRootRecoverableErrors,workInProgressRootRecoverableErrors=exitStatus,null!==renderWasConcurrent&&queueRecoverableErrors(renderWasConcurrent)}exitStatus=JSCompiler_inline_result}if(renderWasConcurrent=!1,2!==exitStatus)continue}}if(1===exitStatus){prepareFreshStack(root$jscomp$0,0),markRootSuspended(root$jscomp$0,lanes,0,!0);break}a:{switch(shouldTimeSlice=root$jscomp$0,exitStatus){case 0:case 1:throw Error(formatProdErrorMessage(345));case 4:if((4194176&lanes)===lanes){markRootSuspended(shouldTimeSlice,lanes,workInProgressDeferredLane,!workInProgressRootDidSkipSuspendedSiblings);break a}break;case 2:workInProgressRootRecoverableErrors=null;break;case 3:case 5:break;default:throw Error(formatProdErrorMessage(329))}if(shouldTimeSlice.finishedWork=forceSync,shouldTimeSlice.finishedLanes=lanes,(62914560&lanes)===lanes&&10<(renderWasConcurrent=globalMostRecentFallbackTime+300-now())){if(markRootSuspended(shouldTimeSlice,lanes,workInProgressDeferredLane,!workInProgressRootDidSkipSuspendedSiblings),0!==getNextLanes(shouldTimeSlice,0))break a;shouldTimeSlice.timeoutHandle=scheduleTimeout(commitRootWhenReady.bind(null,shouldTimeSlice,forceSync,workInProgressRootRecoverableErrors,workInProgressTransitions,workInProgressRootDidIncludeRecursiveRenderUpdate,lanes,workInProgressDeferredLane,workInProgressRootInterleavedUpdatedLanes,workInProgressSuspendedRetryLanes,workInProgressRootDidSkipSuspendedSiblings,2,-0,0),renderWasConcurrent)}else commitRootWhenReady(shouldTimeSlice,forceSync,workInProgressRootRecoverableErrors,workInProgressTransitions,workInProgressRootDidIncludeRecursiveRenderUpdate,lanes,workInProgressDeferredLane,workInProgressRootInterleavedUpdatedLanes,workInProgressSuspendedRetryLanes,workInProgressRootDidSkipSuspendedSiblings,0,-0,0)}}break}ensureRootIsScheduled(root$jscomp$0)}function queueRecoverableErrors(errors){null===workInProgressRootRecoverableErrors?workInProgressRootRecoverableErrors=errors:workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors,errors)}function commitRootWhenReady(root,finishedWork,recoverableErrors,transitions,didIncludeRenderPhaseUpdate,lanes,spawnedLane,updatedLanes,suspendedRetryLanes,didSkipSuspendedSiblings,suspendedCommitReason,completedRenderStartTime,completedRenderEndTime){var subtreeFlags=finishedWork.subtreeFlags;if((8192&subtreeFlags||!(16785408&~subtreeFlags))&&(suspendedState={stylesheets:null,count:0,unsuspend:noop},accumulateSuspenseyCommitOnFiber(finishedWork),null!==(finishedWork=function(){if(null===suspendedState)throw Error(formatProdErrorMessage(475));var state=suspendedState;return state.stylesheets&&0===state.count&&insertSuspendedStylesheets(state,state.stylesheets),0<state.count?function(commit){var stylesheetTimer=setTimeout((function(){if(state.stylesheets&&insertSuspendedStylesheets(state,state.stylesheets),state.unsuspend){var unsuspend=state.unsuspend;state.unsuspend=null,unsuspend()}}),6e4);return state.unsuspend=commit,function(){state.unsuspend=null,clearTimeout(stylesheetTimer)}}:null}())))return root.cancelPendingCommit=finishedWork(commitRoot.bind(null,root,recoverableErrors,transitions,didIncludeRenderPhaseUpdate,spawnedLane,updatedLanes,suspendedRetryLanes,1,completedRenderStartTime,completedRenderEndTime)),void markRootSuspended(root,lanes,spawnedLane,!didSkipSuspendedSiblings);commitRoot(root,recoverableErrors,transitions,didIncludeRenderPhaseUpdate,spawnedLane,updatedLanes,suspendedRetryLanes,suspendedCommitReason,completedRenderStartTime,completedRenderEndTime)}function isRenderConsistentWithExternalStores(finishedWork){for(var node=finishedWork;;){var tag=node.tag;if((0===tag||11===tag||15===tag)&&16384&node.flags&&(null!==(tag=node.updateQueue)&&null!==(tag=tag.stores)))for(var i=0;i<tag.length;i++){var check=tag[i],getSnapshot=check.getSnapshot;check=check.value;try{if(!objectIs(getSnapshot(),check))return!1}catch(error){return!1}}if(tag=node.child,16384&node.subtreeFlags&&null!==tag)tag.return=node,node=tag;else{if(node===finishedWork)break;for(;null===node.sibling;){if(null===node.return||node.return===finishedWork)return!0;node=node.return}node.sibling.return=node.return,node=node.sibling}}return!0}function markRootSuspended(root,suspendedLanes,spawnedLane,didAttemptEntireTree){suspendedLanes&=~workInProgressRootPingedLanes,suspendedLanes&=~workInProgressRootInterleavedUpdatedLanes,root.suspendedLanes|=suspendedLanes,root.pingedLanes&=~suspendedLanes,didAttemptEntireTree&&(root.warmLanes|=suspendedLanes),didAttemptEntireTree=root.expirationTimes;for(var lanes=suspendedLanes;0<lanes;){var index$6=31-clz32(lanes),lane=1<<index$6;didAttemptEntireTree[index$6]=-1,lanes&=~lane}0!==spawnedLane&&markSpawnedDeferredLane(root,spawnedLane,suspendedLanes)}function flushSyncWork$1(){return!!(6&executionContext)||(flushSyncWorkAcrossRoots_impl(0),!1)}function resetWorkInProgressStack(){if(null!==workInProgress){if(0===workInProgressSuspendedReason)var interruptedWork=workInProgress.return;else lastContextDependency=currentlyRenderingFiber=null,resetHooksOnUnwind(interruptedWork=workInProgress),thenableState$1=null,thenableIndexCounter$1=0,interruptedWork=workInProgress;for(;null!==interruptedWork;)unwindInterruptedWork(interruptedWork.alternate,interruptedWork),interruptedWork=interruptedWork.return;workInProgress=null}}function prepareFreshStack(root,lanes){root.finishedWork=null,root.finishedLanes=0;var timeoutHandle=root.timeoutHandle;-1!==timeoutHandle&&(root.timeoutHandle=-1,cancelTimeout(timeoutHandle)),null!==(timeoutHandle=root.cancelPendingCommit)&&(root.cancelPendingCommit=null,timeoutHandle()),resetWorkInProgressStack(),workInProgressRoot=root,workInProgress=timeoutHandle=createWorkInProgress(root.current,null),workInProgressRootRenderLanes=lanes,workInProgressSuspendedReason=0,workInProgressThrownValue=null,workInProgressRootDidSkipSuspendedSiblings=!1,workInProgressRootIsPrerendering=checkIfRootIsPrerendering(root,lanes),workInProgressRootDidAttachPingListener=!1,workInProgressSuspendedRetryLanes=workInProgressDeferredLane=workInProgressRootPingedLanes=workInProgressRootInterleavedUpdatedLanes=workInProgressRootSkippedLanes=workInProgressRootExitStatus=0,workInProgressRootRecoverableErrors=workInProgressRootConcurrentErrors=null,workInProgressRootDidIncludeRecursiveRenderUpdate=!1,8&lanes&&(lanes|=32&lanes);var allEntangledLanes=root.entangledLanes;if(0!==allEntangledLanes)for(root=root.entanglements,allEntangledLanes&=lanes;0<allEntangledLanes;){var index$4=31-clz32(allEntangledLanes),lane=1<<index$4;lanes|=root[index$4],allEntangledLanes&=~lane}return entangledRenderLanes=lanes,finishQueueingConcurrentUpdates(),timeoutHandle}function handleThrow(root,thrownValue){currentlyRenderingFiber$1=null,ReactSharedInternals.H=ContextOnlyDispatcher,thrownValue===SuspenseException?(thrownValue=getSuspendedThenable(),workInProgressSuspendedReason=3):thrownValue===SuspenseyCommitException?(thrownValue=getSuspendedThenable(),workInProgressSuspendedReason=4):workInProgressSuspendedReason=thrownValue===SelectiveHydrationException?8:null!==thrownValue&&"object"==typeof thrownValue&&"function"==typeof thrownValue.then?6:1,workInProgressThrownValue=thrownValue,null===workInProgress&&(workInProgressRootExitStatus=1,logUncaughtError(root,createCapturedValueAtFiber(thrownValue,root.current)))}function pushDispatcher(){var prevDispatcher=ReactSharedInternals.H;return ReactSharedInternals.H=ContextOnlyDispatcher,null===prevDispatcher?ContextOnlyDispatcher:prevDispatcher}function pushAsyncDispatcher(){var prevAsyncDispatcher=ReactSharedInternals.A;return ReactSharedInternals.A=DefaultAsyncDispatcher,prevAsyncDispatcher}function renderDidSuspendDelayIfPossible(){workInProgressRootExitStatus=4,workInProgressRootDidSkipSuspendedSiblings||(4194176&workInProgressRootRenderLanes)!==workInProgressRootRenderLanes&&null!==suspenseHandlerStackCursor.current||(workInProgressRootIsPrerendering=!0),!(134217727&workInProgressRootSkippedLanes)&&!(134217727&workInProgressRootInterleavedUpdatedLanes)||null===workInProgressRoot||markRootSuspended(workInProgressRoot,workInProgressRootRenderLanes,workInProgressDeferredLane,!1)}function renderRootSync(root,lanes,shouldYieldForPrerendering){var prevExecutionContext=executionContext;executionContext|=2;var prevDispatcher=pushDispatcher(),prevAsyncDispatcher=pushAsyncDispatcher();workInProgressRoot===root&&workInProgressRootRenderLanes===lanes||(workInProgressTransitions=null,prepareFreshStack(root,lanes)),lanes=!1;var exitStatus=workInProgressRootExitStatus;a:for(;;)try{if(0!==workInProgressSuspendedReason&&null!==workInProgress){var unitOfWork=workInProgress,thrownValue=workInProgressThrownValue;switch(workInProgressSuspendedReason){case 8:resetWorkInProgressStack(),exitStatus=6;break a;case 3:case 2:case 6:null===suspenseHandlerStackCursor.current&&(lanes=!0);var reason=workInProgressSuspendedReason;if(workInProgressSuspendedReason=0,workInProgressThrownValue=null,throwAndUnwindWorkLoop(root,unitOfWork,thrownValue,reason),shouldYieldForPrerendering&&workInProgressRootIsPrerendering){exitStatus=0;break a}break;default:reason=workInProgressSuspendedReason,workInProgressSuspendedReason=0,workInProgressThrownValue=null,throwAndUnwindWorkLoop(root,unitOfWork,thrownValue,reason)}}workLoopSync(),exitStatus=workInProgressRootExitStatus;break}catch(thrownValue$164){handleThrow(root,thrownValue$164)}return lanes&&root.shellSuspendCounter++,lastContextDependency=currentlyRenderingFiber=null,executionContext=prevExecutionContext,ReactSharedInternals.H=prevDispatcher,ReactSharedInternals.A=prevAsyncDispatcher,null===workInProgress&&(workInProgressRoot=null,workInProgressRootRenderLanes=0,finishQueueingConcurrentUpdates()),exitStatus}function workLoopSync(){for(;null!==workInProgress;)performUnitOfWork(workInProgress)}function workLoopConcurrent(){for(;null!==workInProgress&&!shouldYield();)performUnitOfWork(workInProgress)}function performUnitOfWork(unitOfWork){var next=beginWork(unitOfWork.alternate,unitOfWork,entangledRenderLanes);unitOfWork.memoizedProps=unitOfWork.pendingProps,null===next?completeUnitOfWork(unitOfWork):workInProgress=next}function replaySuspendedUnitOfWork(unitOfWork){var next=unitOfWork,current=next.alternate;switch(next.tag){case 15:case 0:next=replayFunctionComponent(current,next,next.pendingProps,next.type,void 0,workInProgressRootRenderLanes);break;case 11:next=replayFunctionComponent(current,next,next.pendingProps,next.type.render,next.ref,workInProgressRootRenderLanes);break;case 5:resetHooksOnUnwind(next);default:unwindInterruptedWork(current,next),next=beginWork(current,next=workInProgress=resetWorkInProgress(next,entangledRenderLanes),entangledRenderLanes)}unitOfWork.memoizedProps=unitOfWork.pendingProps,null===next?completeUnitOfWork(unitOfWork):workInProgress=next}function throwAndUnwindWorkLoop(root,unitOfWork,thrownValue,suspendedReason){lastContextDependency=currentlyRenderingFiber=null,resetHooksOnUnwind(unitOfWork),thenableState$1=null,thenableIndexCounter$1=0;var returnFiber=unitOfWork.return;try{if(function(root,returnFiber,sourceFiber,value,rootRenderLanes){if(sourceFiber.flags|=32768,null!==value&&"object"==typeof value&&"function"==typeof value.then){if(null!==(returnFiber=sourceFiber.alternate)&&propagateParentContextChanges(returnFiber,sourceFiber,rootRenderLanes,!0),null!==(sourceFiber=suspenseHandlerStackCursor.current)){switch(sourceFiber.tag){case 13:return null===shellBoundary?renderDidSuspendDelayIfPossible():null===sourceFiber.alternate&&0===workInProgressRootExitStatus&&(workInProgressRootExitStatus=3),sourceFiber.flags&=-257,sourceFiber.flags|=65536,sourceFiber.lanes=rootRenderLanes,value===noopSuspenseyCommitThenable?sourceFiber.flags|=16384:(null===(returnFiber=sourceFiber.updateQueue)?sourceFiber.updateQueue=new Set([value]):returnFiber.add(value),attachPingListener(root,value,rootRenderLanes)),!1;case 22:return sourceFiber.flags|=65536,value===noopSuspenseyCommitThenable?sourceFiber.flags|=16384:(null===(returnFiber=sourceFiber.updateQueue)?(returnFiber={transitions:null,markerInstances:null,retryQueue:new Set([value])},sourceFiber.updateQueue=returnFiber):null===(sourceFiber=returnFiber.retryQueue)?returnFiber.retryQueue=new Set([value]):sourceFiber.add(value),attachPingListener(root,value,rootRenderLanes)),!1}throw Error(formatProdErrorMessage(435,sourceFiber.tag))}return attachPingListener(root,value,rootRenderLanes),renderDidSuspendDelayIfPossible(),!1}if(isHydrating)return null!==(returnFiber=suspenseHandlerStackCursor.current)?(!(65536&returnFiber.flags)&&(returnFiber.flags|=256),returnFiber.flags|=65536,returnFiber.lanes=rootRenderLanes,value!==HydrationMismatchException&&queueHydrationError(createCapturedValueAtFiber(root=Error(formatProdErrorMessage(422),{cause:value}),sourceFiber))):(value!==HydrationMismatchException&&queueHydrationError(createCapturedValueAtFiber(returnFiber=Error(formatProdErrorMessage(423),{cause:value}),sourceFiber)),(root=root.current.alternate).flags|=65536,rootRenderLanes&=-rootRenderLanes,root.lanes|=rootRenderLanes,value=createCapturedValueAtFiber(value,sourceFiber),enqueueCapturedUpdate(root,rootRenderLanes=createRootErrorUpdate(root.stateNode,value,rootRenderLanes)),4!==workInProgressRootExitStatus&&(workInProgressRootExitStatus=2)),!1;var wrapperError=Error(formatProdErrorMessage(520),{cause:value});if(wrapperError=createCapturedValueAtFiber(wrapperError,sourceFiber),null===workInProgressRootConcurrentErrors?workInProgressRootConcurrentErrors=[wrapperError]:workInProgressRootConcurrentErrors.push(wrapperError),4!==workInProgressRootExitStatus&&(workInProgressRootExitStatus=2),null===returnFiber)return!0;value=createCapturedValueAtFiber(value,sourceFiber),sourceFiber=returnFiber;do{switch(sourceFiber.tag){case 3:return sourceFiber.flags|=65536,root=rootRenderLanes&-rootRenderLanes,sourceFiber.lanes|=root,enqueueCapturedUpdate(sourceFiber,root=createRootErrorUpdate(sourceFiber.stateNode,value,root)),!1;case 1:if(returnFiber=sourceFiber.type,wrapperError=sourceFiber.stateNode,!(128&sourceFiber.flags||"function"!=typeof returnFiber.getDerivedStateFromError&&(null===wrapperError||"function"!=typeof wrapperError.componentDidCatch||null!==legacyErrorBoundariesThatAlreadyFailed&&legacyErrorBoundariesThatAlreadyFailed.has(wrapperError))))return sourceFiber.flags|=65536,rootRenderLanes&=-rootRenderLanes,sourceFiber.lanes|=rootRenderLanes,initializeClassErrorUpdate(rootRenderLanes=createClassErrorUpdate(rootRenderLanes),root,sourceFiber,value),enqueueCapturedUpdate(sourceFiber,rootRenderLanes),!1}sourceFiber=sourceFiber.return}while(null!==sourceFiber);return!1}(root,returnFiber,unitOfWork,thrownValue,workInProgressRootRenderLanes))return workInProgressRootExitStatus=1,logUncaughtError(root,createCapturedValueAtFiber(thrownValue,root.current)),void(workInProgress=null)}catch(error){if(null!==returnFiber)throw workInProgress=returnFiber,error;return workInProgressRootExitStatus=1,logUncaughtError(root,createCapturedValueAtFiber(thrownValue,root.current)),void(workInProgress=null)}32768&unitOfWork.flags?(isHydrating||1===suspendedReason?root=!0:workInProgressRootIsPrerendering||536870912&workInProgressRootRenderLanes?root=!1:(workInProgressRootDidSkipSuspendedSiblings=root=!0,(2===suspendedReason||3===suspendedReason||6===suspendedReason)&&(null!==(suspendedReason=suspenseHandlerStackCursor.current)&&13===suspendedReason.tag&&(suspendedReason.flags|=16384))),unwindUnitOfWork(unitOfWork,root)):completeUnitOfWork(unitOfWork)}function completeUnitOfWork(unitOfWork){var completedWork=unitOfWork;do{if(32768&completedWork.flags)return void unwindUnitOfWork(completedWork,workInProgressRootDidSkipSuspendedSiblings);unitOfWork=completedWork.return;var next=completeWork(completedWork.alternate,completedWork,entangledRenderLanes);if(null!==next)return void(workInProgress=next);if(null!==(completedWork=completedWork.sibling))return void(workInProgress=completedWork);workInProgress=completedWork=unitOfWork}while(null!==completedWork);0===workInProgressRootExitStatus&&(workInProgressRootExitStatus=5)}function unwindUnitOfWork(unitOfWork,skipSiblings){do{var next=unwindWork(unitOfWork.alternate,unitOfWork);if(null!==next)return next.flags&=32767,void(workInProgress=next);if(null!==(next=unitOfWork.return)&&(next.flags|=32768,next.subtreeFlags=0,next.deletions=null),!skipSiblings&&null!==(unitOfWork=unitOfWork.sibling))return void(workInProgress=unitOfWork);workInProgress=unitOfWork=next}while(null!==unitOfWork);workInProgressRootExitStatus=6,workInProgress=null}function commitRoot(root,recoverableErrors,transitions,didIncludeRenderPhaseUpdate,spawnedLane,updatedLanes,suspendedRetryLanes,suspendedCommitReason,completedRenderStartTime,completedRenderEndTime){var prevTransition=ReactSharedInternals.T,previousUpdateLanePriority=ReactDOMSharedInternals.p;try{ReactDOMSharedInternals.p=2,ReactSharedInternals.T=null,function(root,recoverableErrors,transitions,didIncludeRenderPhaseUpdate,renderPriorityLevel,spawnedLane,updatedLanes,suspendedRetryLanes){do{flushPassiveEffects()}while(null!==rootWithPendingPassiveEffects);if(6&executionContext)throw Error(formatProdErrorMessage(327));var finishedWork=root.finishedWork;if(didIncludeRenderPhaseUpdate=root.finishedLanes,null===finishedWork)return null;if(root.finishedWork=null,root.finishedLanes=0,finishedWork===root.current)throw Error(formatProdErrorMessage(177));root.callbackNode=null,root.callbackPriority=0,root.cancelPendingCommit=null;var remainingLanes=finishedWork.lanes|finishedWork.childLanes;if(function(root,finishedLanes,remainingLanes,spawnedLane,updatedLanes,suspendedRetryLanes){var previouslyPendingLanes=root.pendingLanes;root.pendingLanes=remainingLanes,root.suspendedLanes=0,root.pingedLanes=0,root.warmLanes=0,root.expiredLanes&=remainingLanes,root.entangledLanes&=remainingLanes,root.errorRecoveryDisabledLanes&=remainingLanes,root.shellSuspendCounter=0;var entanglements=root.entanglements,expirationTimes=root.expirationTimes,hiddenUpdates=root.hiddenUpdates;for(remainingLanes=previouslyPendingLanes&~remainingLanes;0<remainingLanes;){var index$7=31-clz32(remainingLanes),lane=1<<index$7;entanglements[index$7]=0,expirationTimes[index$7]=-1;var hiddenUpdatesForLane=hiddenUpdates[index$7];if(null!==hiddenUpdatesForLane)for(hiddenUpdates[index$7]=null,index$7=0;index$7<hiddenUpdatesForLane.length;index$7++){var update=hiddenUpdatesForLane[index$7];null!==update&&(update.lane&=-536870913)}remainingLanes&=~lane}0!==spawnedLane&&markSpawnedDeferredLane(root,spawnedLane,0),0!==suspendedRetryLanes&&0===updatedLanes&&0!==root.tag&&(root.suspendedLanes|=suspendedRetryLanes&~(previouslyPendingLanes&~finishedLanes))}(root,didIncludeRenderPhaseUpdate,remainingLanes|=concurrentlyUpdatedLanes,spawnedLane,updatedLanes,suspendedRetryLanes),root===workInProgressRoot&&(workInProgress=workInProgressRoot=null,workInProgressRootRenderLanes=0),!(10256&finishedWork.subtreeFlags)&&!(10256&finishedWork.flags)||rootDoesHavePassiveEffects||(rootDoesHavePassiveEffects=!0,pendingPassiveEffectsRemainingLanes=remainingLanes,pendingPassiveTransitions=transitions,function(priorityLevel,callback){scheduleCallback$3(priorityLevel,callback)}(NormalPriority$1,(function(){return flushPassiveEffects(),null}))),transitions=!!(15990&finishedWork.flags),15990&finishedWork.subtreeFlags||transitions?(transitions=ReactSharedInternals.T,ReactSharedInternals.T=null,spawnedLane=ReactDOMSharedInternals.p,ReactDOMSharedInternals.p=2,updatedLanes=executionContext,executionContext|=4,function(root,firstChild){if(root=root.containerInfo,eventsEnabled=_enabled,hasSelectionCapabilities(root=getActiveElementDeep(root))){if("selectionStart"in root)var JSCompiler_temp={start:root.selectionStart,end:root.selectionEnd};else a:{var selection=(JSCompiler_temp=(JSCompiler_temp=root.ownerDocument)&&JSCompiler_temp.defaultView||window).getSelection&&JSCompiler_temp.getSelection();if(selection&&0!==selection.rangeCount){JSCompiler_temp=selection.anchorNode;var anchorOffset=selection.anchorOffset,focusNode=selection.focusNode;selection=selection.focusOffset;try{JSCompiler_temp.nodeType,focusNode.nodeType}catch(e$20){JSCompiler_temp=null;break a}var length=0,start=-1,end=-1,indexWithinAnchor=0,indexWithinFocus=0,node=root,parentNode=null;b:for(;;){for(var next;node!==JSCompiler_temp||0!==anchorOffset&&3!==node.nodeType||(start=length+anchorOffset),node!==focusNode||0!==selection&&3!==node.nodeType||(end=length+selection),3===node.nodeType&&(length+=node.nodeValue.length),null!==(next=node.firstChild);)parentNode=node,node=next;for(;;){if(node===root)break b;if(parentNode===JSCompiler_temp&&++indexWithinAnchor===anchorOffset&&(start=length),parentNode===focusNode&&++indexWithinFocus===selection&&(end=length),null!==(next=node.nextSibling))break;parentNode=(node=parentNode).parentNode}node=next}JSCompiler_temp=-1===start||-1===end?null:{start:start,end:end}}else JSCompiler_temp=null}JSCompiler_temp=JSCompiler_temp||{start:0,end:0}}else JSCompiler_temp=null;for(selectionInformation={focusedElem:root,selectionRange:JSCompiler_temp},_enabled=!1,nextEffect=firstChild;null!==nextEffect;)if(root=(firstChild=nextEffect).child,1028&firstChild.subtreeFlags&&null!==root)root.return=firstChild,nextEffect=root;else for(;null!==nextEffect;){switch(focusNode=(firstChild=nextEffect).alternate,root=firstChild.flags,firstChild.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&root&&null!==focusNode){root=void 0,JSCompiler_temp=firstChild,anchorOffset=focusNode.memoizedProps,focusNode=focusNode.memoizedState,selection=JSCompiler_temp.stateNode;try{var resolvedPrevProps=resolveClassComponentProps(JSCompiler_temp.type,anchorOffset,(JSCompiler_temp.elementType,JSCompiler_temp.type));root=selection.getSnapshotBeforeUpdate(resolvedPrevProps,focusNode),selection.__reactInternalSnapshotBeforeUpdate=root}catch(error){captureCommitPhaseError(JSCompiler_temp,JSCompiler_temp.return,error)}}break;case 3:if(1024&root)if(9===(JSCompiler_temp=(root=firstChild.stateNode.containerInfo).nodeType))clearContainerSparingly(root);else if(1===JSCompiler_temp)switch(root.nodeName){case"HEAD":case"HTML":case"BODY":clearContainerSparingly(root);break;default:root.textContent=""}break;default:if(1024&root)throw Error(formatProdErrorMessage(163))}if(null!==(root=firstChild.sibling)){root.return=firstChild.return,nextEffect=root;break}nextEffect=firstChild.return}resolvedPrevProps=shouldFireAfterActiveInstanceBlur,shouldFireAfterActiveInstanceBlur=!1}(root,finishedWork),commitMutationEffectsOnFiber(finishedWork,root),restoreSelection(selectionInformation,root.containerInfo),_enabled=!!eventsEnabled,selectionInformation=eventsEnabled=null,root.current=finishedWork,commitLayoutEffectOnFiber(root,finishedWork.alternate,finishedWork),requestPaint(),executionContext=updatedLanes,ReactDOMSharedInternals.p=spawnedLane,ReactSharedInternals.T=transitions):root.current=finishedWork,rootDoesHavePassiveEffects?(rootDoesHavePassiveEffects=!1,rootWithPendingPassiveEffects=root,pendingPassiveEffectsLanes=didIncludeRenderPhaseUpdate):releaseRootPooledCache(root,remainingLanes),remainingLanes=root.pendingLanes,0===remainingLanes&&(legacyErrorBoundariesThatAlreadyFailed=null),function(root){if(injectedHook&&"function"==typeof injectedHook.onCommitFiberRoot)try{injectedHook.onCommitFiberRoot(rendererID,root,void 0,!(128&~root.current.flags))}catch(err){}}(finishedWork.stateNode),ensureRootIsScheduled(root),null!==recoverableErrors)for(renderPriorityLevel=root.onRecoverableError,finishedWork=0;finishedWork<recoverableErrors.length;finishedWork++)remainingLanes=recoverableErrors[finishedWork],renderPriorityLevel(remainingLanes.value,{componentStack:remainingLanes.stack});!!(3&pendingPassiveEffectsLanes)&&flushPassiveEffects(),remainingLanes=root.pendingLanes,4194218&didIncludeRenderPhaseUpdate&&42&remainingLanes?root===rootWithNestedUpdates?nestedUpdateCount++:(nestedUpdateCount=0,rootWithNestedUpdates=root):nestedUpdateCount=0,flushSyncWorkAcrossRoots_impl(0)}(root,recoverableErrors,transitions,didIncludeRenderPhaseUpdate,previousUpdateLanePriority,spawnedLane,updatedLanes,suspendedRetryLanes)}finally{ReactSharedInternals.T=prevTransition,ReactDOMSharedInternals.p=previousUpdateLanePriority}}function releaseRootPooledCache(root,remainingLanes){0==(root.pooledCacheLanes&=remainingLanes)&&(null!=(remainingLanes=root.pooledCache)&&(root.pooledCache=null,releaseCache(remainingLanes)))}function flushPassiveEffects(){if(null!==rootWithPendingPassiveEffects){var root$170=rootWithPendingPassiveEffects,remainingLanes=pendingPassiveEffectsRemainingLanes;pendingPassiveEffectsRemainingLanes=0;var renderPriority=lanesToEventPriority(pendingPassiveEffectsLanes),prevTransition=ReactSharedInternals.T,previousPriority=ReactDOMSharedInternals.p;try{if(ReactDOMSharedInternals.p=32>renderPriority?32:renderPriority,ReactSharedInternals.T=null,null===rootWithPendingPassiveEffects)var JSCompiler_inline_result=!1;else{renderPriority=pendingPassiveTransitions,pendingPassiveTransitions=null;var root=rootWithPendingPassiveEffects,lanes=pendingPassiveEffectsLanes;if(rootWithPendingPassiveEffects=null,pendingPassiveEffectsLanes=0,6&executionContext)throw Error(formatProdErrorMessage(331));var prevExecutionContext=executionContext;if(executionContext|=4,commitPassiveUnmountOnFiber(root.current),commitPassiveMountOnFiber(root,root.current,lanes,renderPriority),executionContext=prevExecutionContext,flushSyncWorkAcrossRoots_impl(0,!1),injectedHook&&"function"==typeof injectedHook.onPostCommitFiberRoot)try{injectedHook.onPostCommitFiberRoot(rendererID,root)}catch(err){}JSCompiler_inline_result=!0}return JSCompiler_inline_result}finally{ReactDOMSharedInternals.p=previousPriority,ReactSharedInternals.T=prevTransition,releaseRootPooledCache(root$170,remainingLanes)}}return!1}function captureCommitPhaseErrorOnRoot(rootFiber,sourceFiber,error){sourceFiber=createCapturedValueAtFiber(error,sourceFiber),null!==(rootFiber=enqueueUpdate(rootFiber,sourceFiber=createRootErrorUpdate(rootFiber.stateNode,sourceFiber,2),2))&&(markRootUpdated$1(rootFiber,2),ensureRootIsScheduled(rootFiber))}function captureCommitPhaseError(sourceFiber,nearestMountedAncestor,error){if(3===sourceFiber.tag)captureCommitPhaseErrorOnRoot(sourceFiber,sourceFiber,error);else for(;null!==nearestMountedAncestor;){if(3===nearestMountedAncestor.tag){captureCommitPhaseErrorOnRoot(nearestMountedAncestor,sourceFiber,error);break}if(1===nearestMountedAncestor.tag){var instance=nearestMountedAncestor.stateNode;if("function"==typeof nearestMountedAncestor.type.getDerivedStateFromError||"function"==typeof instance.componentDidCatch&&(null===legacyErrorBoundariesThatAlreadyFailed||!legacyErrorBoundariesThatAlreadyFailed.has(instance))){sourceFiber=createCapturedValueAtFiber(error,sourceFiber),null!==(instance=enqueueUpdate(nearestMountedAncestor,error=createClassErrorUpdate(2),2))&&(initializeClassErrorUpdate(error,instance,nearestMountedAncestor,sourceFiber),markRootUpdated$1(instance,2),ensureRootIsScheduled(instance));break}}nearestMountedAncestor=nearestMountedAncestor.return}}function attachPingListener(root,wakeable,lanes){var pingCache=root.pingCache;if(null===pingCache){pingCache=root.pingCache=new PossiblyWeakMap;var threadIDs=new Set;pingCache.set(wakeable,threadIDs)}else void 0===(threadIDs=pingCache.get(wakeable))&&(threadIDs=new Set,pingCache.set(wakeable,threadIDs));threadIDs.has(lanes)||(workInProgressRootDidAttachPingListener=!0,threadIDs.add(lanes),root=pingSuspendedRoot.bind(null,root,wakeable,lanes),wakeable.then(root,root))}function pingSuspendedRoot(root,wakeable,pingedLanes){var pingCache=root.pingCache;null!==pingCache&&pingCache.delete(wakeable),root.pingedLanes|=root.suspendedLanes&pingedLanes,root.warmLanes&=~pingedLanes,workInProgressRoot===root&&(workInProgressRootRenderLanes&pingedLanes)===pingedLanes&&(4===workInProgressRootExitStatus||3===workInProgressRootExitStatus&&(62914560&workInProgressRootRenderLanes)===workInProgressRootRenderLanes&&300>now()-globalMostRecentFallbackTime?!(2&executionContext)&&prepareFreshStack(root,0):workInProgressRootPingedLanes|=pingedLanes,workInProgressSuspendedRetryLanes===workInProgressRootRenderLanes&&(workInProgressSuspendedRetryLanes=0)),ensureRootIsScheduled(root)}function retryTimedOutBoundary(boundaryFiber,retryLane){0===retryLane&&(retryLane=claimNextRetryLane()),null!==(boundaryFiber=enqueueConcurrentRenderForLane(boundaryFiber,retryLane))&&(markRootUpdated$1(boundaryFiber,retryLane),ensureRootIsScheduled(boundaryFiber))}function retryDehydratedSuspenseBoundary(boundaryFiber){var suspenseState=boundaryFiber.memoizedState,retryLane=0;null!==suspenseState&&(retryLane=suspenseState.retryLane),retryTimedOutBoundary(boundaryFiber,retryLane)}function resolveRetryWakeable(boundaryFiber,wakeable){var retryLane=0;switch(boundaryFiber.tag){case 13:var retryCache=boundaryFiber.stateNode,suspenseState=boundaryFiber.memoizedState;null!==suspenseState&&(retryLane=suspenseState.retryLane);break;case 19:retryCache=boundaryFiber.stateNode;break;case 22:retryCache=boundaryFiber.stateNode._retryCache;break;default:throw Error(formatProdErrorMessage(314))}null!==retryCache&&retryCache.delete(wakeable),retryTimedOutBoundary(boundaryFiber,retryLane)}var firstScheduledRoot=null,lastScheduledRoot=null,didScheduleMicrotask=!1,mightHavePendingSyncWork=!1,isFlushingWork=!1,currentEventTransitionLane=0;function ensureRootIsScheduled(root){var cb;root!==lastScheduledRoot&&null===root.next&&(null===lastScheduledRoot?firstScheduledRoot=lastScheduledRoot=root:lastScheduledRoot=lastScheduledRoot.next=root),mightHavePendingSyncWork=!0,didScheduleMicrotask||(didScheduleMicrotask=!0,cb=processRootScheduleInMicrotask,scheduleMicrotask((function(){6&executionContext?scheduleCallback$3(ImmediatePriority,cb):cb()})))}function flushSyncWorkAcrossRoots_impl(syncTransitionLanes,onlyLegacy){if(!isFlushingWork&&mightHavePendingSyncWork){isFlushingWork=!0;do{for(var didPerformSomeWork=!1,root$172=firstScheduledRoot;null!==root$172;){if(0!==syncTransitionLanes){var pendingLanes=root$172.pendingLanes;if(0===pendingLanes)var JSCompiler_inline_result=0;else{var suspendedLanes=root$172.suspendedLanes,pingedLanes=root$172.pingedLanes;JSCompiler_inline_result=(1<<31-clz32(42|syncTransitionLanes)+1)-1,JSCompiler_inline_result=201326677&(JSCompiler_inline_result&=pendingLanes&~(suspendedLanes&~pingedLanes))?201326677&JSCompiler_inline_result|1:JSCompiler_inline_result?2|JSCompiler_inline_result:0}0!==JSCompiler_inline_result&&(didPerformSomeWork=!0,performSyncWorkOnRoot(root$172,JSCompiler_inline_result))}else JSCompiler_inline_result=workInProgressRootRenderLanes,!(3&(JSCompiler_inline_result=getNextLanes(root$172,root$172===workInProgressRoot?JSCompiler_inline_result:0)))||checkIfRootIsPrerendering(root$172,JSCompiler_inline_result)||(didPerformSomeWork=!0,performSyncWorkOnRoot(root$172,JSCompiler_inline_result));root$172=root$172.next}}while(didPerformSomeWork);isFlushingWork=!1}}function processRootScheduleInMicrotask(){mightHavePendingSyncWork=didScheduleMicrotask=!1;var syncTransitionLanes=0;0!==currentEventTransitionLane&&(function(){var event=window.event;if(event&&"popstate"===event.type)return event!==currentPopstateTransitionEvent&&(currentPopstateTransitionEvent=event,!0);return currentPopstateTransitionEvent=null,!1}()&&(syncTransitionLanes=currentEventTransitionLane),currentEventTransitionLane=0);for(var currentTime=now(),prev=null,root=firstScheduledRoot;null!==root;){var next=root.next,nextLanes=scheduleTaskForRootDuringMicrotask(root,currentTime);0===nextLanes?(root.next=null,null===prev?firstScheduledRoot=next:prev.next=next,null===next&&(lastScheduledRoot=prev)):(prev=root,(0!==syncTransitionLanes||3&nextLanes)&&(mightHavePendingSyncWork=!0)),root=next}flushSyncWorkAcrossRoots_impl(syncTransitionLanes)}function scheduleTaskForRootDuringMicrotask(root,currentTime){for(var suspendedLanes=root.suspendedLanes,pingedLanes=root.pingedLanes,expirationTimes=root.expirationTimes,lanes=-62914561&root.pendingLanes;0<lanes;){var index$5=31-clz32(lanes),lane=1<<index$5,expirationTime=expirationTimes[index$5];-1===expirationTime?lane&suspendedLanes&&!(lane&pingedLanes)||(expirationTimes[index$5]=computeExpirationTime(lane,currentTime)):expirationTime<=currentTime&&(root.expiredLanes|=lane),lanes&=~lane}if(suspendedLanes=workInProgressRootRenderLanes,suspendedLanes=getNextLanes(root,root===(currentTime=workInProgressRoot)?suspendedLanes:0),pingedLanes=root.callbackNode,0===suspendedLanes||root===currentTime&&2===workInProgressSuspendedReason||null!==root.cancelPendingCommit)return null!==pingedLanes&&null!==pingedLanes&&cancelCallback$1(pingedLanes),root.callbackNode=null,root.callbackPriority=0;if(!(3&suspendedLanes)||checkIfRootIsPrerendering(root,suspendedLanes)){if((currentTime=suspendedLanes&-suspendedLanes)===root.callbackPriority)return currentTime;switch(null!==pingedLanes&&cancelCallback$1(pingedLanes),lanesToEventPriority(suspendedLanes)){case 2:case 8:suspendedLanes=UserBlockingPriority;break;case 32:default:suspendedLanes=NormalPriority$1;break;case 268435456:suspendedLanes=IdlePriority}return pingedLanes=performWorkOnRootViaSchedulerTask.bind(null,root),suspendedLanes=scheduleCallback$3(suspendedLanes,pingedLanes),root.callbackPriority=currentTime,root.callbackNode=suspendedLanes,currentTime}return null!==pingedLanes&&null!==pingedLanes&&cancelCallback$1(pingedLanes),root.callbackPriority=2,root.callbackNode=null,2}function performWorkOnRootViaSchedulerTask(root,didTimeout){var originalCallbackNode=root.callbackNode;if(flushPassiveEffects()&&root.callbackNode!==originalCallbackNode)return null;var workInProgressRootRenderLanes$jscomp$0=workInProgressRootRenderLanes;return 0===(workInProgressRootRenderLanes$jscomp$0=getNextLanes(root,root===workInProgressRoot?workInProgressRootRenderLanes$jscomp$0:0))?null:(performWorkOnRoot(root,workInProgressRootRenderLanes$jscomp$0,didTimeout),scheduleTaskForRootDuringMicrotask(root,now()),null!=root.callbackNode&&root.callbackNode===originalCallbackNode?performWorkOnRootViaSchedulerTask.bind(null,root):null)}function performSyncWorkOnRoot(root,lanes){if(flushPassiveEffects())return null;performWorkOnRoot(root,lanes,!0)}function requestTransitionLane(){return 0===currentEventTransitionLane&&(currentEventTransitionLane=claimNextTransitionLane()),currentEventTransitionLane}function coerceFormActionProp(actionProp){return null==actionProp||"symbol"==typeof actionProp||"boolean"==typeof actionProp?null:"function"==typeof actionProp?actionProp:sanitizeURL(""+actionProp)}function createFormDataWithSubmitter(form,submitter){var temp=submitter.ownerDocument.createElement("input");return temp.name=submitter.name,temp.value=submitter.value,form.id&&temp.setAttribute("form",form.id),submitter.parentNode.insertBefore(temp,submitter),form=new FormData(form),temp.parentNode.removeChild(temp),form}for(var i$jscomp$inline_1439=0;i$jscomp$inline_1439<simpleEventPluginEvents.length;i$jscomp$inline_1439++){var eventName$jscomp$inline_1440=simpleEventPluginEvents[i$jscomp$inline_1439];registerSimpleEvent(eventName$jscomp$inline_1440.toLowerCase(),"on"+(eventName$jscomp$inline_1440[0].toUpperCase()+eventName$jscomp$inline_1440.slice(1)))}registerSimpleEvent(ANIMATION_END,"onAnimationEnd"),registerSimpleEvent(ANIMATION_ITERATION,"onAnimationIteration"),registerSimpleEvent(ANIMATION_START,"onAnimationStart"),registerSimpleEvent("dblclick","onDoubleClick"),registerSimpleEvent("focusin","onFocus"),registerSimpleEvent("focusout","onBlur"),registerSimpleEvent(TRANSITION_RUN,"onTransitionRun"),registerSimpleEvent(TRANSITION_START,"onTransitionStart"),registerSimpleEvent(TRANSITION_CANCEL,"onTransitionCancel"),registerSimpleEvent(TRANSITION_END,"onTransitionEnd"),registerDirectEvent("onMouseEnter",["mouseout","mouseover"]),registerDirectEvent("onMouseLeave",["mouseout","mouseover"]),registerDirectEvent("onPointerEnter",["pointerout","pointerover"]),registerDirectEvent("onPointerLeave",["pointerout","pointerover"]),registerTwoPhaseEvent("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),registerTwoPhaseEvent("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),registerTwoPhaseEvent("onBeforeInput",["compositionend","keypress","textInput","paste"]),registerTwoPhaseEvent("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),registerTwoPhaseEvent("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),registerTwoPhaseEvent("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var mediaEventTypes="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),nonDelegatedEvents=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes));function processDispatchQueue(dispatchQueue,eventSystemFlags){eventSystemFlags=!!(4&eventSystemFlags);for(var i=0;i<dispatchQueue.length;i++){var _dispatchQueue$i=dispatchQueue[i],event=_dispatchQueue$i.event;_dispatchQueue$i=_dispatchQueue$i.listeners;a:{var previousInstance=void 0;if(eventSystemFlags)for(var i$jscomp$0=_dispatchQueue$i.length-1;0<=i$jscomp$0;i$jscomp$0--){var _dispatchListeners$i=_dispatchQueue$i[i$jscomp$0],instance=_dispatchListeners$i.instance,currentTarget=_dispatchListeners$i.currentTarget;if(_dispatchListeners$i=_dispatchListeners$i.listener,instance!==previousInstance&&event.isPropagationStopped())break a;previousInstance=_dispatchListeners$i,event.currentTarget=currentTarget;try{previousInstance(event)}catch(error){reportGlobalError(error)}event.currentTarget=null,previousInstance=instance}else for(i$jscomp$0=0;i$jscomp$0<_dispatchQueue$i.length;i$jscomp$0++){if(instance=(_dispatchListeners$i=_dispatchQueue$i[i$jscomp$0]).instance,currentTarget=_dispatchListeners$i.currentTarget,_dispatchListeners$i=_dispatchListeners$i.listener,instance!==previousInstance&&event.isPropagationStopped())break a;previousInstance=_dispatchListeners$i,event.currentTarget=currentTarget;try{previousInstance(event)}catch(error){reportGlobalError(error)}event.currentTarget=null,previousInstance=instance}}}}function listenToNonDelegatedEvent(domEventName,targetElement){var JSCompiler_inline_result=targetElement[internalEventHandlersKey];void 0===JSCompiler_inline_result&&(JSCompiler_inline_result=targetElement[internalEventHandlersKey]=new Set);var listenerSetKey=domEventName+"__bubble";JSCompiler_inline_result.has(listenerSetKey)||(addTrappedEventListener(targetElement,domEventName,2,!1),JSCompiler_inline_result.add(listenerSetKey))}function listenToNativeEvent(domEventName,isCapturePhaseListener,target){var eventSystemFlags=0;isCapturePhaseListener&&(eventSystemFlags|=4),addTrappedEventListener(target,domEventName,eventSystemFlags,isCapturePhaseListener)}var listeningMarker="_reactListening"+Math.random().toString(36).slice(2);function listenToAllSupportedEvents(rootContainerElement){if(!rootContainerElement[listeningMarker]){rootContainerElement[listeningMarker]=!0,allNativeEvents.forEach((function(domEventName){"selectionchange"!==domEventName&&(nonDelegatedEvents.has(domEventName)||listenToNativeEvent(domEventName,!1,rootContainerElement),listenToNativeEvent(domEventName,!0,rootContainerElement))}));var ownerDocument=9===rootContainerElement.nodeType?rootContainerElement:rootContainerElement.ownerDocument;null===ownerDocument||ownerDocument[listeningMarker]||(ownerDocument[listeningMarker]=!0,listenToNativeEvent("selectionchange",!1,ownerDocument))}}function addTrappedEventListener(targetContainer,domEventName,eventSystemFlags,isCapturePhaseListener){switch(getEventPriority(domEventName)){case 2:var listenerWrapper=dispatchDiscreteEvent;break;case 8:listenerWrapper=dispatchContinuousEvent;break;default:listenerWrapper=dispatchEvent}eventSystemFlags=listenerWrapper.bind(null,domEventName,eventSystemFlags,targetContainer),listenerWrapper=void 0,!passiveBrowserEventsSupported||"touchstart"!==domEventName&&"touchmove"!==domEventName&&"wheel"!==domEventName||(listenerWrapper=!0),isCapturePhaseListener?void 0!==listenerWrapper?targetContainer.addEventListener(domEventName,eventSystemFlags,{capture:!0,passive:listenerWrapper}):targetContainer.addEventListener(domEventName,eventSystemFlags,!0):void 0!==listenerWrapper?targetContainer.addEventListener(domEventName,eventSystemFlags,{passive:listenerWrapper}):targetContainer.addEventListener(domEventName,eventSystemFlags,!1)}function dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,targetInst$jscomp$0,targetContainer){var ancestorInst=targetInst$jscomp$0;if(!(1&eventSystemFlags||2&eventSystemFlags||null===targetInst$jscomp$0))a:for(;;){if(null===targetInst$jscomp$0)return;var nodeTag=targetInst$jscomp$0.tag;if(3===nodeTag||4===nodeTag){var container=targetInst$jscomp$0.stateNode.containerInfo;if(container===targetContainer||8===container.nodeType&&container.parentNode===targetContainer)break;if(4===nodeTag)for(nodeTag=targetInst$jscomp$0.return;null!==nodeTag;){var grandTag=nodeTag.tag;if((3===grandTag||4===grandTag)&&((grandTag=nodeTag.stateNode.containerInfo)===targetContainer||8===grandTag.nodeType&&grandTag.parentNode===targetContainer))return;nodeTag=nodeTag.return}for(;null!==container;){if(null===(nodeTag=getClosestInstanceFromNode(container)))return;if(5===(grandTag=nodeTag.tag)||6===grandTag||26===grandTag||27===grandTag){targetInst$jscomp$0=ancestorInst=nodeTag;continue a}container=container.parentNode}}targetInst$jscomp$0=targetInst$jscomp$0.return}batchedUpdates$1((function(){var targetInst=ancestorInst,nativeEventTarget=getEventTarget(nativeEvent),dispatchQueue=[];a:{var reactName=topLevelEventsToReactNames.get(domEventName);if(void 0!==reactName){var SyntheticEventCtor=SyntheticEvent,reactEventType=domEventName;switch(domEventName){case"keypress":if(0===getEventCharCode(nativeEvent))break a;case"keydown":case"keyup":SyntheticEventCtor=SyntheticKeyboardEvent;break;case"focusin":reactEventType="focus",SyntheticEventCtor=SyntheticFocusEvent;break;case"focusout":reactEventType="blur",SyntheticEventCtor=SyntheticFocusEvent;break;case"beforeblur":case"afterblur":SyntheticEventCtor=SyntheticFocusEvent;break;case"click":if(2===nativeEvent.button)break a;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":SyntheticEventCtor=SyntheticMouseEvent;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":SyntheticEventCtor=SyntheticDragEvent;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":SyntheticEventCtor=SyntheticTouchEvent;break;case ANIMATION_END:case ANIMATION_ITERATION:case ANIMATION_START:SyntheticEventCtor=SyntheticAnimationEvent;break;case TRANSITION_END:SyntheticEventCtor=SyntheticTransitionEvent;break;case"scroll":case"scrollend":SyntheticEventCtor=SyntheticUIEvent;break;case"wheel":SyntheticEventCtor=SyntheticWheelEvent;break;case"copy":case"cut":case"paste":SyntheticEventCtor=SyntheticClipboardEvent;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":SyntheticEventCtor=SyntheticPointerEvent;break;case"toggle":case"beforetoggle":SyntheticEventCtor=SyntheticToggleEvent}var inCapturePhase=!!(4&eventSystemFlags),accumulateTargetOnly=!inCapturePhase&&("scroll"===domEventName||"scrollend"===domEventName),reactEventName=inCapturePhase?null!==reactName?reactName+"Capture":null:reactName;inCapturePhase=[];for(var lastHostComponent,instance=targetInst;null!==instance;){var _instance=instance;if(lastHostComponent=_instance.stateNode,5!==(_instance=_instance.tag)&&26!==_instance&&27!==_instance||null===lastHostComponent||null===reactEventName||null!=(_instance=getListener(instance,reactEventName))&&inCapturePhase.push(createDispatchListener(instance,_instance,lastHostComponent)),accumulateTargetOnly)break;instance=instance.return}0<inCapturePhase.length&&(reactName=new SyntheticEventCtor(reactName,reactEventType,null,nativeEvent,nativeEventTarget),dispatchQueue.push({event:reactName,listeners:inCapturePhase}))}}if(!(7&eventSystemFlags)){if(SyntheticEventCtor="mouseout"===domEventName||"pointerout"===domEventName,(!(reactName="mouseover"===domEventName||"pointerover"===domEventName)||nativeEvent===currentReplayingEvent||!(reactEventType=nativeEvent.relatedTarget||nativeEvent.fromElement)||!getClosestInstanceFromNode(reactEventType)&&!reactEventType[internalContainerInstanceKey])&&(SyntheticEventCtor||reactName)&&(reactName=nativeEventTarget.window===nativeEventTarget?nativeEventTarget:(reactName=nativeEventTarget.ownerDocument)?reactName.defaultView||reactName.parentWindow:window,SyntheticEventCtor?(SyntheticEventCtor=targetInst,null!==(reactEventType=(reactEventType=nativeEvent.relatedTarget||nativeEvent.toElement)?getClosestInstanceFromNode(reactEventType):null)&&(accumulateTargetOnly=getNearestMountedFiber(reactEventType),inCapturePhase=reactEventType.tag,reactEventType!==accumulateTargetOnly||5!==inCapturePhase&&27!==inCapturePhase&&6!==inCapturePhase)&&(reactEventType=null)):(SyntheticEventCtor=null,reactEventType=targetInst),SyntheticEventCtor!==reactEventType)){if(inCapturePhase=SyntheticMouseEvent,_instance="onMouseLeave",reactEventName="onMouseEnter",instance="mouse","pointerout"!==domEventName&&"pointerover"!==domEventName||(inCapturePhase=SyntheticPointerEvent,_instance="onPointerLeave",reactEventName="onPointerEnter",instance="pointer"),accumulateTargetOnly=null==SyntheticEventCtor?reactName:getNodeFromInstance(SyntheticEventCtor),lastHostComponent=null==reactEventType?reactName:getNodeFromInstance(reactEventType),(reactName=new inCapturePhase(_instance,instance+"leave",SyntheticEventCtor,nativeEvent,nativeEventTarget)).target=accumulateTargetOnly,reactName.relatedTarget=lastHostComponent,_instance=null,getClosestInstanceFromNode(nativeEventTarget)===targetInst&&((inCapturePhase=new inCapturePhase(reactEventName,instance+"enter",reactEventType,nativeEvent,nativeEventTarget)).target=lastHostComponent,inCapturePhase.relatedTarget=accumulateTargetOnly,_instance=inCapturePhase),accumulateTargetOnly=_instance,SyntheticEventCtor&&reactEventType)b:{for(reactEventName=reactEventType,instance=0,lastHostComponent=inCapturePhase=SyntheticEventCtor;lastHostComponent;lastHostComponent=getParent(lastHostComponent))instance++;for(lastHostComponent=0,_instance=reactEventName;_instance;_instance=getParent(_instance))lastHostComponent++;for(;0<instance-lastHostComponent;)inCapturePhase=getParent(inCapturePhase),instance--;for(;0<lastHostComponent-instance;)reactEventName=getParent(reactEventName),lastHostComponent--;for(;instance--;){if(inCapturePhase===reactEventName||null!==reactEventName&&inCapturePhase===reactEventName.alternate)break b;inCapturePhase=getParent(inCapturePhase),reactEventName=getParent(reactEventName)}inCapturePhase=null}else inCapturePhase=null;null!==SyntheticEventCtor&&accumulateEnterLeaveListenersForEvent(dispatchQueue,reactName,SyntheticEventCtor,inCapturePhase,!1),null!==reactEventType&&null!==accumulateTargetOnly&&accumulateEnterLeaveListenersForEvent(dispatchQueue,accumulateTargetOnly,reactEventType,inCapturePhase,!0)}if("select"===(SyntheticEventCtor=(reactName=targetInst?getNodeFromInstance(targetInst):window).nodeName&&reactName.nodeName.toLowerCase())||"input"===SyntheticEventCtor&&"file"===reactName.type)var getTargetInstFunc=getTargetInstForChangeEvent;else if(isTextInputElement(reactName))if(isInputEventSupported)getTargetInstFunc=getTargetInstForInputOrChangeEvent;else{getTargetInstFunc=getTargetInstForInputEventPolyfill;var handleEventFunc=handleEventsForInputEventPolyfill}else!(SyntheticEventCtor=reactName.nodeName)||"input"!==SyntheticEventCtor.toLowerCase()||"checkbox"!==reactName.type&&"radio"!==reactName.type?targetInst&&isCustomElement(targetInst.elementType)&&(getTargetInstFunc=getTargetInstForChangeEvent):getTargetInstFunc=getTargetInstForClickEvent;switch(getTargetInstFunc&&(getTargetInstFunc=getTargetInstFunc(domEventName,targetInst))?createAndAccumulateChangeEvent(dispatchQueue,getTargetInstFunc,nativeEvent,nativeEventTarget):(handleEventFunc&&handleEventFunc(domEventName,reactName,targetInst),"focusout"===domEventName&&targetInst&&"number"===reactName.type&&null!=targetInst.memoizedProps.value&&setDefaultValue(reactName,"number",reactName.value)),handleEventFunc=targetInst?getNodeFromInstance(targetInst):window,domEventName){case"focusin":(isTextInputElement(handleEventFunc)||"true"===handleEventFunc.contentEditable)&&(activeElement=handleEventFunc,activeElementInst=targetInst,lastSelection=null);break;case"focusout":lastSelection=activeElementInst=activeElement=null;break;case"mousedown":mouseDown=!0;break;case"contextmenu":case"mouseup":case"dragend":mouseDown=!1,constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget);break;case"selectionchange":if(skipSelectionChangeEvent)break;case"keydown":case"keyup":constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget)}var fallbackData;if(canUseCompositionEvent)b:{switch(domEventName){case"compositionstart":var eventType="onCompositionStart";break b;case"compositionend":eventType="onCompositionEnd";break b;case"compositionupdate":eventType="onCompositionUpdate";break b}eventType=void 0}else isComposing?isFallbackCompositionEnd(domEventName,nativeEvent)&&(eventType="onCompositionEnd"):"keydown"===domEventName&&229===nativeEvent.keyCode&&(eventType="onCompositionStart");eventType&&(useFallbackCompositionData&&"ko"!==nativeEvent.locale&&(isComposing||"onCompositionStart"!==eventType?"onCompositionEnd"===eventType&&isComposing&&(fallbackData=getData()):(startText="value"in(root=nativeEventTarget)?root.value:root.textContent,isComposing=!0)),0<(handleEventFunc=accumulateTwoPhaseListeners(targetInst,eventType)).length&&(eventType=new SyntheticCompositionEvent(eventType,domEventName,null,nativeEvent,nativeEventTarget),dispatchQueue.push({event:eventType,listeners:handleEventFunc}),fallbackData?eventType.data=fallbackData:null!==(fallbackData=getDataFromCustomEvent(nativeEvent))&&(eventType.data=fallbackData))),(fallbackData=canUseTextInputEvent?function(domEventName,nativeEvent){switch(domEventName){case"compositionend":return getDataFromCustomEvent(nativeEvent);case"keypress":return 32!==nativeEvent.which?null:(hasSpaceKeypress=!0,SPACEBAR_CHAR);case"textInput":return(domEventName=nativeEvent.data)===SPACEBAR_CHAR&&hasSpaceKeypress?null:domEventName;default:return null}}(domEventName,nativeEvent):function(domEventName,nativeEvent){if(isComposing)return"compositionend"===domEventName||!canUseCompositionEvent&&isFallbackCompositionEnd(domEventName,nativeEvent)?(domEventName=getData(),fallbackText=startText=root=null,isComposing=!1,domEventName):null;switch(domEventName){case"paste":default:return null;case"keypress":if(!(nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)||nativeEvent.ctrlKey&&nativeEvent.altKey){if(nativeEvent.char&&1<nativeEvent.char.length)return nativeEvent.char;if(nativeEvent.which)return String.fromCharCode(nativeEvent.which)}return null;case"compositionend":return useFallbackCompositionData&&"ko"!==nativeEvent.locale?null:nativeEvent.data}}(domEventName,nativeEvent))&&(0<(eventType=accumulateTwoPhaseListeners(targetInst,"onBeforeInput")).length&&(handleEventFunc=new SyntheticCompositionEvent("onBeforeInput","beforeinput",null,nativeEvent,nativeEventTarget),dispatchQueue.push({event:handleEventFunc,listeners:eventType}),handleEventFunc.data=fallbackData)),function(dispatchQueue,domEventName,maybeTargetInst,nativeEvent,nativeEventTarget){if("submit"===domEventName&&maybeTargetInst&&maybeTargetInst.stateNode===nativeEventTarget){var action=coerceFormActionProp((nativeEventTarget[internalPropsKey]||null).action),submitter=nativeEvent.submitter;submitter&&null!==(domEventName=(domEventName=submitter[internalPropsKey]||null)?coerceFormActionProp(domEventName.formAction):submitter.getAttribute("formAction"))&&(action=domEventName,submitter=null);var event=new SyntheticEvent("action","action",null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:event,listeners:[{instance:null,listener:function(){if(nativeEvent.defaultPrevented){if(0!==currentEventTransitionLane){var formData=submitter?createFormDataWithSubmitter(nativeEventTarget,submitter):new FormData(nativeEventTarget);startHostTransition(maybeTargetInst,{pending:!0,data:formData,method:nativeEventTarget.method,action:action},null,formData)}}else"function"==typeof action&&(event.preventDefault(),formData=submitter?createFormDataWithSubmitter(nativeEventTarget,submitter):new FormData(nativeEventTarget),startHostTransition(maybeTargetInst,{pending:!0,data:formData,method:nativeEventTarget.method,action:action},action,formData))},currentTarget:nativeEventTarget}]})}}(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget)}processDispatchQueue(dispatchQueue,eventSystemFlags)}))}function createDispatchListener(instance,listener,currentTarget){return{instance:instance,listener:listener,currentTarget:currentTarget}}function accumulateTwoPhaseListeners(targetFiber,reactName){for(var captureName=reactName+"Capture",listeners=[];null!==targetFiber;){var _instance2=targetFiber,stateNode=_instance2.stateNode;5!==(_instance2=_instance2.tag)&&26!==_instance2&&27!==_instance2||null===stateNode||(null!=(_instance2=getListener(targetFiber,captureName))&&listeners.unshift(createDispatchListener(targetFiber,_instance2,stateNode)),null!=(_instance2=getListener(targetFiber,reactName))&&listeners.push(createDispatchListener(targetFiber,_instance2,stateNode))),targetFiber=targetFiber.return}return listeners}function getParent(inst){if(null===inst)return null;do{inst=inst.return}while(inst&&5!==inst.tag&&27!==inst.tag);return inst||null}function accumulateEnterLeaveListenersForEvent(dispatchQueue,event,target,common,inCapturePhase){for(var registrationName=event._reactName,listeners=[];null!==target&&target!==common;){var _instance3=target,alternate=_instance3.alternate,stateNode=_instance3.stateNode;if(_instance3=_instance3.tag,null!==alternate&&alternate===common)break;5!==_instance3&&26!==_instance3&&27!==_instance3||null===stateNode||(alternate=stateNode,inCapturePhase?null!=(stateNode=getListener(target,registrationName))&&listeners.unshift(createDispatchListener(target,stateNode,alternate)):inCapturePhase||null!=(stateNode=getListener(target,registrationName))&&listeners.push(createDispatchListener(target,stateNode,alternate))),target=target.return}0!==listeners.length&&dispatchQueue.push({event:event,listeners:listeners})}var NORMALIZE_NEWLINES_REGEX=/\r\n?/g,NORMALIZE_NULL_AND_REPLACEMENT_REGEX=/\u0000|\uFFFD/g;function normalizeMarkupForTextOrAttribute(markup){return("string"==typeof markup?markup:""+markup).replace(NORMALIZE_NEWLINES_REGEX,"\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX,"")}function checkForUnmatchedText(serverText,clientText){return clientText=normalizeMarkupForTextOrAttribute(clientText),normalizeMarkupForTextOrAttribute(serverText)===clientText}function noop$1(){}function setProp(domElement,tag,key,value,props,prevValue){switch(key){case"children":"string"==typeof value?"body"===tag||"textarea"===tag&&""===value||setTextContent(domElement,value):("number"==typeof value||"bigint"==typeof value)&&"body"!==tag&&setTextContent(domElement,""+value);break;case"className":setValueForKnownAttribute(domElement,"class",value);break;case"tabIndex":setValueForKnownAttribute(domElement,"tabindex",value);break;case"dir":case"role":case"viewBox":case"width":case"height":setValueForKnownAttribute(domElement,key,value);break;case"style":setValueForStyles(domElement,value,prevValue);break;case"data":if("object"!==tag){setValueForKnownAttribute(domElement,"data",value);break}case"src":case"href":if(""===value&&("a"!==tag||"href"!==key)){domElement.removeAttribute(key);break}if(null==value||"function"==typeof value||"symbol"==typeof value||"boolean"==typeof value){domElement.removeAttribute(key);break}value=sanitizeURL(""+value),domElement.setAttribute(key,value);break;case"action":case"formAction":if("function"==typeof value){domElement.setAttribute(key,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof prevValue&&("formAction"===key?("input"!==tag&&setProp(domElement,tag,"name",props.name,props,null),setProp(domElement,tag,"formEncType",props.formEncType,props,null),setProp(domElement,tag,"formMethod",props.formMethod,props,null),setProp(domElement,tag,"formTarget",props.formTarget,props,null)):(setProp(domElement,tag,"encType",props.encType,props,null),setProp(domElement,tag,"method",props.method,props,null),setProp(domElement,tag,"target",props.target,props,null))),null==value||"symbol"==typeof value||"boolean"==typeof value){domElement.removeAttribute(key);break}value=sanitizeURL(""+value),domElement.setAttribute(key,value);break;case"onClick":null!=value&&(domElement.onclick=noop$1);break;case"onScroll":null!=value&&listenToNonDelegatedEvent("scroll",domElement);break;case"onScrollEnd":null!=value&&listenToNonDelegatedEvent("scrollend",domElement);break;case"dangerouslySetInnerHTML":if(null!=value){if("object"!=typeof value||!("__html"in value))throw Error(formatProdErrorMessage(61));if(null!=(key=value.__html)){if(null!=props.children)throw Error(formatProdErrorMessage(60));domElement.innerHTML=key}}break;case"multiple":domElement.multiple=value&&"function"!=typeof value&&"symbol"!=typeof value;break;case"muted":domElement.muted=value&&"function"!=typeof value&&"symbol"!=typeof value;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==value||"function"==typeof value||"boolean"==typeof value||"symbol"==typeof value){domElement.removeAttribute("xlink:href");break}key=sanitizeURL(""+value),domElement.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",key);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=value&&"function"!=typeof value&&"symbol"!=typeof value?domElement.setAttribute(key,""+value):domElement.removeAttribute(key);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":value&&"function"!=typeof value&&"symbol"!=typeof value?domElement.setAttribute(key,""):domElement.removeAttribute(key);break;case"capture":case"download":!0===value?domElement.setAttribute(key,""):!1!==value&&null!=value&&"function"!=typeof value&&"symbol"!=typeof value?domElement.setAttribute(key,value):domElement.removeAttribute(key);break;case"cols":case"rows":case"size":case"span":null!=value&&"function"!=typeof value&&"symbol"!=typeof value&&!isNaN(value)&&1<=value?domElement.setAttribute(key,value):domElement.removeAttribute(key);break;case"rowSpan":case"start":null==value||"function"==typeof value||"symbol"==typeof value||isNaN(value)?domElement.removeAttribute(key):domElement.setAttribute(key,value);break;case"popover":listenToNonDelegatedEvent("beforetoggle",domElement),listenToNonDelegatedEvent("toggle",domElement),setValueForAttribute(domElement,"popover",value);break;case"xlinkActuate":setValueForNamespacedAttribute(domElement,"http://www.w3.org/1999/xlink","xlink:actuate",value);break;case"xlinkArcrole":setValueForNamespacedAttribute(domElement,"http://www.w3.org/1999/xlink","xlink:arcrole",value);break;case"xlinkRole":setValueForNamespacedAttribute(domElement,"http://www.w3.org/1999/xlink","xlink:role",value);break;case"xlinkShow":setValueForNamespacedAttribute(domElement,"http://www.w3.org/1999/xlink","xlink:show",value);break;case"xlinkTitle":setValueForNamespacedAttribute(domElement,"http://www.w3.org/1999/xlink","xlink:title",value);break;case"xlinkType":setValueForNamespacedAttribute(domElement,"http://www.w3.org/1999/xlink","xlink:type",value);break;case"xmlBase":setValueForNamespacedAttribute(domElement,"http://www.w3.org/XML/1998/namespace","xml:base",value);break;case"xmlLang":setValueForNamespacedAttribute(domElement,"http://www.w3.org/XML/1998/namespace","xml:lang",value);break;case"xmlSpace":setValueForNamespacedAttribute(domElement,"http://www.w3.org/XML/1998/namespace","xml:space",value);break;case"is":setValueForAttribute(domElement,"is",value);break;case"innerText":case"textContent":break;default:(!(2<key.length)||"o"!==key[0]&&"O"!==key[0]||"n"!==key[1]&&"N"!==key[1])&&setValueForAttribute(domElement,key=aliases.get(key)||key,value)}}function setPropOnCustomElement(domElement,tag,key,value,props,prevValue){switch(key){case"style":setValueForStyles(domElement,value,prevValue);break;case"dangerouslySetInnerHTML":if(null!=value){if("object"!=typeof value||!("__html"in value))throw Error(formatProdErrorMessage(61));if(null!=(key=value.__html)){if(null!=props.children)throw Error(formatProdErrorMessage(60));domElement.innerHTML=key}}break;case"children":"string"==typeof value?setTextContent(domElement,value):("number"==typeof value||"bigint"==typeof value)&&setTextContent(domElement,""+value);break;case"onScroll":null!=value&&listenToNonDelegatedEvent("scroll",domElement);break;case"onScrollEnd":null!=value&&listenToNonDelegatedEvent("scrollend",domElement);break;case"onClick":null!=value&&(domElement.onclick=noop$1);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:registrationNameDependencies.hasOwnProperty(key)||("o"!==key[0]||"n"!==key[1]||(props=key.endsWith("Capture"),tag=key.slice(2,props?key.length-7:void 0),"function"==typeof(prevValue=null!=(prevValue=domElement[internalPropsKey]||null)?prevValue[key]:null)&&domElement.removeEventListener(tag,prevValue,props),"function"!=typeof value)?key in domElement?domElement[key]=value:!0===value?domElement.setAttribute(key,""):setValueForAttribute(domElement,key,value):("function"!=typeof prevValue&&null!==prevValue&&(key in domElement?domElement[key]=null:domElement.hasAttribute(key)&&domElement.removeAttribute(key)),domElement.addEventListener(tag,value,props)))}}function setInitialProperties(domElement,tag,props){switch(tag){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":listenToNonDelegatedEvent("error",domElement),listenToNonDelegatedEvent("load",domElement);var propKey,hasSrc=!1,hasSrcSet=!1;for(propKey in props)if(props.hasOwnProperty(propKey)){var propValue=props[propKey];if(null!=propValue)switch(propKey){case"src":hasSrc=!0;break;case"srcSet":hasSrcSet=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(formatProdErrorMessage(137,tag));default:setProp(domElement,tag,propKey,propValue,props,null)}}return hasSrcSet&&setProp(domElement,tag,"srcSet",props.srcSet,props,null),void(hasSrc&&setProp(domElement,tag,"src",props.src,props,null));case"input":listenToNonDelegatedEvent("invalid",domElement);var defaultValue=propKey=propValue=hasSrcSet=null,checked=null,defaultChecked=null;for(hasSrc in props)if(props.hasOwnProperty(hasSrc)){var propValue$186=props[hasSrc];if(null!=propValue$186)switch(hasSrc){case"name":hasSrcSet=propValue$186;break;case"type":propValue=propValue$186;break;case"checked":checked=propValue$186;break;case"defaultChecked":defaultChecked=propValue$186;break;case"value":propKey=propValue$186;break;case"defaultValue":defaultValue=propValue$186;break;case"children":case"dangerouslySetInnerHTML":if(null!=propValue$186)throw Error(formatProdErrorMessage(137,tag));break;default:setProp(domElement,tag,hasSrc,propValue$186,props,null)}}return initInput(domElement,propKey,defaultValue,checked,defaultChecked,propValue,hasSrcSet,!1),void track(domElement);case"select":for(hasSrcSet in listenToNonDelegatedEvent("invalid",domElement),hasSrc=propValue=propKey=null,props)if(props.hasOwnProperty(hasSrcSet)&&null!=(defaultValue=props[hasSrcSet]))switch(hasSrcSet){case"value":propKey=defaultValue;break;case"defaultValue":propValue=defaultValue;break;case"multiple":hasSrc=defaultValue;default:setProp(domElement,tag,hasSrcSet,defaultValue,props,null)}return tag=propKey,props=propValue,domElement.multiple=!!hasSrc,void(null!=tag?updateOptions(domElement,!!hasSrc,tag,!1):null!=props&&updateOptions(domElement,!!hasSrc,props,!0));case"textarea":for(propValue in listenToNonDelegatedEvent("invalid",domElement),propKey=hasSrcSet=hasSrc=null,props)if(props.hasOwnProperty(propValue)&&null!=(defaultValue=props[propValue]))switch(propValue){case"value":hasSrc=defaultValue;break;case"defaultValue":hasSrcSet=defaultValue;break;case"children":propKey=defaultValue;break;case"dangerouslySetInnerHTML":if(null!=defaultValue)throw Error(formatProdErrorMessage(91));break;default:setProp(domElement,tag,propValue,defaultValue,props,null)}return initTextarea(domElement,hasSrc,hasSrcSet,propKey),void track(domElement);case"option":for(checked in props)if(props.hasOwnProperty(checked)&&null!=(hasSrc=props[checked]))if("selected"===checked)domElement.selected=hasSrc&&"function"!=typeof hasSrc&&"symbol"!=typeof hasSrc;else setProp(domElement,tag,checked,hasSrc,props,null);return;case"dialog":listenToNonDelegatedEvent("cancel",domElement),listenToNonDelegatedEvent("close",domElement);break;case"iframe":case"object":listenToNonDelegatedEvent("load",domElement);break;case"video":case"audio":for(hasSrc=0;hasSrc<mediaEventTypes.length;hasSrc++)listenToNonDelegatedEvent(mediaEventTypes[hasSrc],domElement);break;case"image":listenToNonDelegatedEvent("error",domElement),listenToNonDelegatedEvent("load",domElement);break;case"details":listenToNonDelegatedEvent("toggle",domElement);break;case"embed":case"source":case"link":listenToNonDelegatedEvent("error",domElement),listenToNonDelegatedEvent("load",domElement);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(defaultChecked in props)if(props.hasOwnProperty(defaultChecked)&&null!=(hasSrc=props[defaultChecked]))switch(defaultChecked){case"children":case"dangerouslySetInnerHTML":throw Error(formatProdErrorMessage(137,tag));default:setProp(domElement,tag,defaultChecked,hasSrc,props,null)}return;default:if(isCustomElement(tag)){for(propValue$186 in props)props.hasOwnProperty(propValue$186)&&(void 0!==(hasSrc=props[propValue$186])&&setPropOnCustomElement(domElement,tag,propValue$186,hasSrc,props,void 0));return}}for(defaultValue in props)props.hasOwnProperty(defaultValue)&&(null!=(hasSrc=props[defaultValue])&&setProp(domElement,tag,defaultValue,hasSrc,props,null))}var eventsEnabled=null,selectionInformation=null;function getOwnerDocumentFromRootContainer(rootContainerElement){return 9===rootContainerElement.nodeType?rootContainerElement:rootContainerElement.ownerDocument}function getOwnHostContext(namespaceURI){switch(namespaceURI){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function getChildHostContextProd(parentNamespace,type){if(0===parentNamespace)switch(type){case"svg":return 1;case"math":return 2;default:return 0}return 1===parentNamespace&&"foreignObject"===type?0:parentNamespace}function shouldSetTextContent(type,props){return"textarea"===type||"noscript"===type||"string"==typeof props.children||"number"==typeof props.children||"bigint"==typeof props.children||"object"==typeof props.dangerouslySetInnerHTML&&null!==props.dangerouslySetInnerHTML&&null!=props.dangerouslySetInnerHTML.__html}var currentPopstateTransitionEvent=null;var scheduleTimeout="function"==typeof setTimeout?setTimeout:void 0,cancelTimeout="function"==typeof clearTimeout?clearTimeout:void 0,localPromise="function"==typeof Promise?Promise:void 0,scheduleMicrotask="function"==typeof queueMicrotask?queueMicrotask:void 0!==localPromise?function(callback){return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick)}:scheduleTimeout;function handleErrorInNextTick(error){setTimeout((function(){throw error}))}function clearSuspenseBoundary(parentInstance,suspenseInstance){var node=suspenseInstance,depth=0;do{var nextNode=node.nextSibling;if(parentInstance.removeChild(node),nextNode&&8===nextNode.nodeType)if("/$"===(node=nextNode.data)){if(0===depth)return parentInstance.removeChild(nextNode),void retryIfBlockedOn(suspenseInstance);depth--}else"$"!==node&&"$?"!==node&&"$!"!==node||depth++;node=nextNode}while(node);retryIfBlockedOn(suspenseInstance)}function clearContainerSparingly(container){var nextNode=container.firstChild;for(nextNode&&10===nextNode.nodeType&&(nextNode=nextNode.nextSibling);nextNode;){var node=nextNode;switch(nextNode=nextNode.nextSibling,node.nodeName){case"HTML":case"HEAD":case"BODY":clearContainerSparingly(node),detachDeletedInstance(node);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===node.rel.toLowerCase())continue}container.removeChild(node)}}function getNextHydratable(node){for(;null!=node;node=node.nextSibling){var nodeType=node.nodeType;if(1===nodeType||3===nodeType)break;if(8===nodeType){if("$"===(nodeType=node.data)||"$!"===nodeType||"$?"===nodeType||"F!"===nodeType||"F"===nodeType)break;if("/$"===nodeType)return null}}return node}function getParentSuspenseInstance(targetInstance){targetInstance=targetInstance.previousSibling;for(var depth=0;targetInstance;){if(8===targetInstance.nodeType){var data=targetInstance.data;if("$"===data||"$!"===data||"$?"===data){if(0===depth)return targetInstance;depth--}else"/$"===data&&depth++}targetInstance=targetInstance.previousSibling}return null}function resolveSingletonInstance(type,props,rootContainerInstance){switch(props=getOwnerDocumentFromRootContainer(rootContainerInstance),type){case"html":if(!(type=props.documentElement))throw Error(formatProdErrorMessage(452));return type;case"head":if(!(type=props.head))throw Error(formatProdErrorMessage(453));return type;case"body":if(!(type=props.body))throw Error(formatProdErrorMessage(454));return type;default:throw Error(formatProdErrorMessage(451))}}var preloadPropsMap=new Map,preconnectsSet=new Set;function getHoistableRoot(container){return"function"==typeof container.getRootNode?container.getRootNode():container.ownerDocument}var previousDispatcher=ReactDOMSharedInternals.d;ReactDOMSharedInternals.d={f:function(){var previousWasRendering=previousDispatcher.f(),wasRendering=flushSyncWork$1();return previousWasRendering||wasRendering},r:function(form){var formInst=getInstanceFromNode(form);null!==formInst&&5===formInst.tag&&"form"===formInst.type?requestFormReset$1(formInst):previousDispatcher.r(form)},D:function(href){previousDispatcher.D(href),preconnectAs("dns-prefetch",href,null)},C:function(href,crossOrigin){previousDispatcher.C(href,crossOrigin),preconnectAs("preconnect",href,crossOrigin)},L:function(href,as,options){previousDispatcher.L(href,as,options);var ownerDocument=globalDocument;if(ownerDocument&&href&&as){var preloadSelector='link[rel="preload"][as="'+escapeSelectorAttributeValueInsideDoubleQuotes(as)+'"]';"image"===as&&options&&options.imageSrcSet?(preloadSelector+='[imagesrcset="'+escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSrcSet)+'"]',"string"==typeof options.imageSizes&&(preloadSelector+='[imagesizes="'+escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSizes)+'"]')):preloadSelector+='[href="'+escapeSelectorAttributeValueInsideDoubleQuotes(href)+'"]';var key=preloadSelector;switch(as){case"style":key=getStyleKey(href);break;case"script":key=getScriptKey(href)}preloadPropsMap.has(key)||(href=assign({rel:"preload",href:"image"===as&&options&&options.imageSrcSet?void 0:href,as:as},options),preloadPropsMap.set(key,href),null!==ownerDocument.querySelector(preloadSelector)||"style"===as&&ownerDocument.querySelector(getStylesheetSelectorFromKey(key))||"script"===as&&ownerDocument.querySelector(getScriptSelectorFromKey(key))||(setInitialProperties(as=ownerDocument.createElement("link"),"link",href),markNodeAsHoistable(as),ownerDocument.head.appendChild(as)))}},m:function(href,options){previousDispatcher.m(href,options);var ownerDocument=globalDocument;if(ownerDocument&&href){var as=options&&"string"==typeof options.as?options.as:"script",preloadSelector='link[rel="modulepreload"][as="'+escapeSelectorAttributeValueInsideDoubleQuotes(as)+'"][href="'+escapeSelectorAttributeValueInsideDoubleQuotes(href)+'"]',key=preloadSelector;switch(as){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":key=getScriptKey(href)}if(!preloadPropsMap.has(key)&&(href=assign({rel:"modulepreload",href:href},options),preloadPropsMap.set(key,href),null===ownerDocument.querySelector(preloadSelector))){switch(as){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(ownerDocument.querySelector(getScriptSelectorFromKey(key)))return}setInitialProperties(as=ownerDocument.createElement("link"),"link",href),markNodeAsHoistable(as),ownerDocument.head.appendChild(as)}}},X:function(src,options){previousDispatcher.X(src,options);var ownerDocument=globalDocument;if(ownerDocument&&src){var scripts=getResourcesFromRoot(ownerDocument).hoistableScripts,key=getScriptKey(src),resource=scripts.get(key);resource||((resource=ownerDocument.querySelector(getScriptSelectorFromKey(key)))||(src=assign({src:src,async:!0},options),(options=preloadPropsMap.get(key))&&adoptPreloadPropsForScript(src,options),markNodeAsHoistable(resource=ownerDocument.createElement("script")),setInitialProperties(resource,"link",src),ownerDocument.head.appendChild(resource)),resource={type:"script",instance:resource,count:1,state:null},scripts.set(key,resource))}},S:function(href,precedence,options){previousDispatcher.S(href,precedence,options);var ownerDocument=globalDocument;if(ownerDocument&&href){var styles=getResourcesFromRoot(ownerDocument).hoistableStyles,key=getStyleKey(href);precedence=precedence||"default";var resource=styles.get(key);if(!resource){var state={loading:0,preload:null};if(resource=ownerDocument.querySelector(getStylesheetSelectorFromKey(key)))state.loading=5;else{href=assign({rel:"stylesheet",href:href,"data-precedence":precedence},options),(options=preloadPropsMap.get(key))&&adoptPreloadPropsForStylesheet(href,options);var link=resource=ownerDocument.createElement("link");markNodeAsHoistable(link),setInitialProperties(link,"link",href),link._p=new Promise((function(resolve,reject){link.onload=resolve,link.onerror=reject})),link.addEventListener("load",(function(){state.loading|=1})),link.addEventListener("error",(function(){state.loading|=2})),state.loading|=4,insertStylesheet(resource,precedence,ownerDocument)}resource={type:"stylesheet",instance:resource,count:1,state:state},styles.set(key,resource)}}},M:function(src,options){previousDispatcher.M(src,options);var ownerDocument=globalDocument;if(ownerDocument&&src){var scripts=getResourcesFromRoot(ownerDocument).hoistableScripts,key=getScriptKey(src),resource=scripts.get(key);resource||((resource=ownerDocument.querySelector(getScriptSelectorFromKey(key)))||(src=assign({src:src,async:!0,type:"module"},options),(options=preloadPropsMap.get(key))&&adoptPreloadPropsForScript(src,options),markNodeAsHoistable(resource=ownerDocument.createElement("script")),setInitialProperties(resource,"link",src),ownerDocument.head.appendChild(resource)),resource={type:"script",instance:resource,count:1,state:null},scripts.set(key,resource))}}};var globalDocument="undefined"==typeof document?null:document;function preconnectAs(rel,href,crossOrigin){var ownerDocument=globalDocument;if(ownerDocument&&"string"==typeof href&&href){var limitedEscapedHref=escapeSelectorAttributeValueInsideDoubleQuotes(href);limitedEscapedHref='link[rel="'+rel+'"][href="'+limitedEscapedHref+'"]',"string"==typeof crossOrigin&&(limitedEscapedHref+='[crossorigin="'+crossOrigin+'"]'),preconnectsSet.has(limitedEscapedHref)||(preconnectsSet.add(limitedEscapedHref),rel={rel:rel,crossOrigin:crossOrigin,href:href},null===ownerDocument.querySelector(limitedEscapedHref)&&(setInitialProperties(href=ownerDocument.createElement("link"),"link",rel),markNodeAsHoistable(href),ownerDocument.head.appendChild(href)))}}function getResource(type,currentProps,pendingProps,currentResource){var ownerDocument,key,preloadProps,state,JSCompiler_inline_result=(JSCompiler_inline_result=rootInstanceStackCursor.current)?getHoistableRoot(JSCompiler_inline_result):null;if(!JSCompiler_inline_result)throw Error(formatProdErrorMessage(446));switch(type){case"meta":case"title":return null;case"style":return"string"==typeof pendingProps.precedence&&"string"==typeof pendingProps.href?(currentProps=getStyleKey(pendingProps.href),(currentResource=(pendingProps=getResourcesFromRoot(JSCompiler_inline_result).hoistableStyles).get(currentProps))||(currentResource={type:"style",instance:null,count:0,state:null},pendingProps.set(currentProps,currentResource)),currentResource):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===pendingProps.rel&&"string"==typeof pendingProps.href&&"string"==typeof pendingProps.precedence){type=getStyleKey(pendingProps.href);var styles$242=getResourcesFromRoot(JSCompiler_inline_result).hoistableStyles,resource$243=styles$242.get(type);if(resource$243||(JSCompiler_inline_result=JSCompiler_inline_result.ownerDocument||JSCompiler_inline_result,resource$243={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},styles$242.set(type,resource$243),(styles$242=JSCompiler_inline_result.querySelector(getStylesheetSelectorFromKey(type)))&&!styles$242._p&&(resource$243.instance=styles$242,resource$243.state.loading=5),preloadPropsMap.has(type)||(pendingProps={rel:"preload",as:"style",href:pendingProps.href,crossOrigin:pendingProps.crossOrigin,integrity:pendingProps.integrity,media:pendingProps.media,hrefLang:pendingProps.hrefLang,referrerPolicy:pendingProps.referrerPolicy},preloadPropsMap.set(type,pendingProps),styles$242||(ownerDocument=JSCompiler_inline_result,key=type,preloadProps=pendingProps,state=resource$243.state,ownerDocument.querySelector('link[rel="preload"][as="style"]['+key+"]")?state.loading=1:(key=ownerDocument.createElement("link"),state.preload=key,key.addEventListener("load",(function(){return state.loading|=1})),key.addEventListener("error",(function(){return state.loading|=2})),setInitialProperties(key,"link",preloadProps),markNodeAsHoistable(key),ownerDocument.head.appendChild(key))))),currentProps&&null===currentResource)throw Error(formatProdErrorMessage(528,""));return resource$243}if(currentProps&&null!==currentResource)throw Error(formatProdErrorMessage(529,""));return null;case"script":return currentProps=pendingProps.async,"string"==typeof(pendingProps=pendingProps.src)&&currentProps&&"function"!=typeof currentProps&&"symbol"!=typeof currentProps?(currentProps=getScriptKey(pendingProps),(currentResource=(pendingProps=getResourcesFromRoot(JSCompiler_inline_result).hoistableScripts).get(currentProps))||(currentResource={type:"script",instance:null,count:0,state:null},pendingProps.set(currentProps,currentResource)),currentResource):{type:"void",instance:null,count:0,state:null};default:throw Error(formatProdErrorMessage(444,type))}}function getStyleKey(href){return'href="'+escapeSelectorAttributeValueInsideDoubleQuotes(href)+'"'}function getStylesheetSelectorFromKey(key){return'link[rel="stylesheet"]['+key+"]"}function stylesheetPropsFromRawProps(rawProps){return assign({},rawProps,{"data-precedence":rawProps.precedence,precedence:null})}function getScriptKey(src){return'[src="'+escapeSelectorAttributeValueInsideDoubleQuotes(src)+'"]'}function getScriptSelectorFromKey(key){return"script[async]"+key}function acquireResource(hoistableRoot,resource,props){if(resource.count++,null===resource.instance)switch(resource.type){case"style":var instance=hoistableRoot.querySelector('style[data-href~="'+escapeSelectorAttributeValueInsideDoubleQuotes(props.href)+'"]');if(instance)return resource.instance=instance,markNodeAsHoistable(instance),instance;var styleProps=assign({},props,{"data-href":props.href,"data-precedence":props.precedence,href:null,precedence:null});return markNodeAsHoistable(instance=(hoistableRoot.ownerDocument||hoistableRoot).createElement("style")),setInitialProperties(instance,"style",styleProps),insertStylesheet(instance,props.precedence,hoistableRoot),resource.instance=instance;case"stylesheet":styleProps=getStyleKey(props.href);var instance$248=hoistableRoot.querySelector(getStylesheetSelectorFromKey(styleProps));if(instance$248)return resource.state.loading|=4,resource.instance=instance$248,markNodeAsHoistable(instance$248),instance$248;instance=stylesheetPropsFromRawProps(props),(styleProps=preloadPropsMap.get(styleProps))&&adoptPreloadPropsForStylesheet(instance,styleProps),markNodeAsHoistable(instance$248=(hoistableRoot.ownerDocument||hoistableRoot).createElement("link"));var linkInstance=instance$248;return linkInstance._p=new Promise((function(resolve,reject){linkInstance.onload=resolve,linkInstance.onerror=reject})),setInitialProperties(instance$248,"link",instance),resource.state.loading|=4,insertStylesheet(instance$248,props.precedence,hoistableRoot),resource.instance=instance$248;case"script":return instance$248=getScriptKey(props.src),(styleProps=hoistableRoot.querySelector(getScriptSelectorFromKey(instance$248)))?(resource.instance=styleProps,markNodeAsHoistable(styleProps),styleProps):(instance=props,(styleProps=preloadPropsMap.get(instance$248))&&adoptPreloadPropsForScript(instance=assign({},props),styleProps),markNodeAsHoistable(styleProps=(hoistableRoot=hoistableRoot.ownerDocument||hoistableRoot).createElement("script")),setInitialProperties(styleProps,"link",instance),hoistableRoot.head.appendChild(styleProps),resource.instance=styleProps);case"void":return null;default:throw Error(formatProdErrorMessage(443,resource.type))}else"stylesheet"===resource.type&&!(4&resource.state.loading)&&(instance=resource.instance,resource.state.loading|=4,insertStylesheet(instance,props.precedence,hoistableRoot));return resource.instance}function insertStylesheet(instance,precedence,root){for(var nodes=root.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),last=nodes.length?nodes[nodes.length-1]:null,prior=last,i=0;i<nodes.length;i++){var node=nodes[i];if(node.dataset.precedence===precedence)prior=node;else if(prior!==last)break}prior?prior.parentNode.insertBefore(instance,prior.nextSibling):(precedence=9===root.nodeType?root.head:root).insertBefore(instance,precedence.firstChild)}function adoptPreloadPropsForStylesheet(stylesheetProps,preloadProps){null==stylesheetProps.crossOrigin&&(stylesheetProps.crossOrigin=preloadProps.crossOrigin),null==stylesheetProps.referrerPolicy&&(stylesheetProps.referrerPolicy=preloadProps.referrerPolicy),null==stylesheetProps.title&&(stylesheetProps.title=preloadProps.title)}function adoptPreloadPropsForScript(scriptProps,preloadProps){null==scriptProps.crossOrigin&&(scriptProps.crossOrigin=preloadProps.crossOrigin),null==scriptProps.referrerPolicy&&(scriptProps.referrerPolicy=preloadProps.referrerPolicy),null==scriptProps.integrity&&(scriptProps.integrity=preloadProps.integrity)}var tagCaches=null;function getHydratableHoistableCache(type,keyAttribute,ownerDocument){if(null===tagCaches){var cache=new Map,caches=tagCaches=new Map;caches.set(ownerDocument,cache)}else(cache=(caches=tagCaches).get(ownerDocument))||(cache=new Map,caches.set(ownerDocument,cache));if(cache.has(type))return cache;for(cache.set(type,null),ownerDocument=ownerDocument.getElementsByTagName(type),caches=0;caches<ownerDocument.length;caches++){var node=ownerDocument[caches];if(!(node[internalHoistableMarker]||node[internalInstanceKey]||"link"===type&&"stylesheet"===node.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==node.namespaceURI){var nodeKey=node.getAttribute(keyAttribute)||"";nodeKey=type+nodeKey;var existing=cache.get(nodeKey);existing?existing.push(node):cache.set(nodeKey,[node])}}return cache}function mountHoistable(hoistableRoot,type,instance){(hoistableRoot=hoistableRoot.ownerDocument||hoistableRoot).head.insertBefore(instance,"title"===type?hoistableRoot.querySelector("head > title"):null)}function preloadResource(resource){return!!("stylesheet"!==resource.type||3&resource.state.loading)}var suspendedState=null;function noop(){}function onUnsuspend(){if(this.count--,0===this.count)if(this.stylesheets)insertSuspendedStylesheets(this,this.stylesheets);else if(this.unsuspend){var unsuspend=this.unsuspend;this.unsuspend=null,unsuspend()}}var precedencesByRoot=null;function insertSuspendedStylesheets(state,resources){state.stylesheets=null,null!==state.unsuspend&&(state.count++,precedencesByRoot=new Map,resources.forEach(insertStylesheetIntoRoot,state),precedencesByRoot=null,onUnsuspend.call(state))}function insertStylesheetIntoRoot(root,resource){if(!(4&resource.state.loading)){var precedences=precedencesByRoot.get(root);if(precedences)var last=precedences.get(null);else{precedences=new Map,precedencesByRoot.set(root,precedences);for(var nodes=root.querySelectorAll("link[data-precedence],style[data-precedence]"),i=0;i<nodes.length;i++){var node=nodes[i];"LINK"!==node.nodeName&&"not all"===node.getAttribute("media")||(precedences.set(node.dataset.precedence,node),last=node)}last&&precedences.set(null,last)}node=(nodes=resource.instance).getAttribute("data-precedence"),(i=precedences.get(node)||last)===last&&precedences.set(null,nodes),precedences.set(node,nodes),this.count++,last=onUnsuspend.bind(this),nodes.addEventListener("load",last),nodes.addEventListener("error",last),i?i.parentNode.insertBefore(nodes,i.nextSibling):(root=9===root.nodeType?root.head:root).insertBefore(nodes,root.firstChild),resource.state.loading|=4}}var HostTransitionContext={$$typeof:REACT_CONTEXT_TYPE,Provider:null,Consumer:null,_currentValue:sharedNotPendingObject,_currentValue2:sharedNotPendingObject,_threadCount:0};function FiberRootNode(containerInfo,tag,hydrate,identifierPrefix,onUncaughtError,onCaughtError,onRecoverableError,formState){this.tag=1,this.containerInfo=containerInfo,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=createLaneMap(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=createLaneMap(0),this.hiddenUpdates=createLaneMap(null),this.identifierPrefix=identifierPrefix,this.onUncaughtError=onUncaughtError,this.onCaughtError=onCaughtError,this.onRecoverableError=onRecoverableError,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=formState,this.incompleteTransitions=new Map}function createFiberRoot(containerInfo,tag,hydrate,initialChildren,hydrationCallbacks,isStrictMode,identifierPrefix,onUncaughtError,onCaughtError,onRecoverableError,transitionCallbacks,formState){return containerInfo=new FiberRootNode(containerInfo,tag,hydrate,identifierPrefix,onUncaughtError,onCaughtError,onRecoverableError,formState),tag=1,!0===isStrictMode&&(tag|=24),isStrictMode=createFiberImplClass(3,null,null,tag),containerInfo.current=isStrictMode,isStrictMode.stateNode=containerInfo,(tag=createCache()).refCount++,containerInfo.pooledCache=tag,tag.refCount++,isStrictMode.memoizedState={element:initialChildren,isDehydrated:hydrate,cache:tag},initializeUpdateQueue(isStrictMode),containerInfo}function getContextForSubtree(parentComponent){return parentComponent?parentComponent=emptyContextObject:emptyContextObject}function updateContainerImpl(rootFiber,lane,element,container,parentComponent,callback){parentComponent=getContextForSubtree(parentComponent),null===container.context?container.context=parentComponent:container.pendingContext=parentComponent,(container=createUpdate(lane)).payload={element:element},null!==(callback=void 0===callback?null:callback)&&(container.callback=callback),null!==(element=enqueueUpdate(rootFiber,container,lane))&&(scheduleUpdateOnFiber(element,0,lane),entangleTransitions(element,rootFiber,lane))}function markRetryLaneImpl(fiber,retryLane){if(null!==(fiber=fiber.memoizedState)&&null!==fiber.dehydrated){var a=fiber.retryLane;fiber.retryLane=0!==a&&a<retryLane?a:retryLane}}function markRetryLaneIfNotHydrated(fiber,retryLane){markRetryLaneImpl(fiber,retryLane),(fiber=fiber.alternate)&&markRetryLaneImpl(fiber,retryLane)}function attemptContinuousHydration(fiber){if(13===fiber.tag){var root=enqueueConcurrentRenderForLane(fiber,67108864);null!==root&&scheduleUpdateOnFiber(root,0,67108864),markRetryLaneIfNotHydrated(fiber,67108864)}}var _enabled=!0;function dispatchDiscreteEvent(domEventName,eventSystemFlags,container,nativeEvent){var prevTransition=ReactSharedInternals.T;ReactSharedInternals.T=null;var previousPriority=ReactDOMSharedInternals.p;try{ReactDOMSharedInternals.p=2,dispatchEvent(domEventName,eventSystemFlags,container,nativeEvent)}finally{ReactDOMSharedInternals.p=previousPriority,ReactSharedInternals.T=prevTransition}}function dispatchContinuousEvent(domEventName,eventSystemFlags,container,nativeEvent){var prevTransition=ReactSharedInternals.T;ReactSharedInternals.T=null;var previousPriority=ReactDOMSharedInternals.p;try{ReactDOMSharedInternals.p=8,dispatchEvent(domEventName,eventSystemFlags,container,nativeEvent)}finally{ReactDOMSharedInternals.p=previousPriority,ReactSharedInternals.T=prevTransition}}function dispatchEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent){if(_enabled){var blockedOn=findInstanceBlockingEvent(nativeEvent);if(null===blockedOn)dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,return_targetInst,targetContainer),clearIfContinuousEvent(domEventName,nativeEvent);else if(function(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent){switch(domEventName){case"focusin":return queuedFocus=accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus,blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent),!0;case"dragenter":return queuedDrag=accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag,blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent),!0;case"mouseover":return queuedMouse=accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse,blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent),!0;case"pointerover":var pointerId=nativeEvent.pointerId;return queuedPointers.set(pointerId,accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId)||null,blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent)),!0;case"gotpointercapture":return pointerId=nativeEvent.pointerId,queuedPointerCaptures.set(pointerId,accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(pointerId)||null,blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent)),!0}return!1}(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent))nativeEvent.stopPropagation();else if(clearIfContinuousEvent(domEventName,nativeEvent),4&eventSystemFlags&&-1<discreteReplayableEvents.indexOf(domEventName)){for(;null!==blockedOn;){var fiber=getInstanceFromNode(blockedOn);if(null!==fiber)switch(fiber.tag){case 3:if((fiber=fiber.stateNode).current.memoizedState.isDehydrated){var lanes=getHighestPriorityLanes(fiber.pendingLanes);if(0!==lanes){var root=fiber;for(root.pendingLanes|=2,root.entangledLanes|=2;lanes;){var lane=1<<31-clz32(lanes);root.entanglements[1]|=lane,lanes&=~lane}ensureRootIsScheduled(fiber),!(6&executionContext)&&(workInProgressRootRenderTargetTime=now()+500,flushSyncWorkAcrossRoots_impl(0))}}break;case 13:null!==(root=enqueueConcurrentRenderForLane(fiber,2))&&scheduleUpdateOnFiber(root,0,2),flushSyncWork$1(),markRetryLaneIfNotHydrated(fiber,2)}if(null===(fiber=findInstanceBlockingEvent(nativeEvent))&&dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,return_targetInst,targetContainer),fiber===blockedOn)break;blockedOn=fiber}null!==blockedOn&&nativeEvent.stopPropagation()}else dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,null,targetContainer)}}function findInstanceBlockingEvent(nativeEvent){return findInstanceBlockingTarget(nativeEvent=getEventTarget(nativeEvent))}var return_targetInst=null;function findInstanceBlockingTarget(targetNode){if(return_targetInst=null,null!==(targetNode=getClosestInstanceFromNode(targetNode))){var nearestMounted=getNearestMountedFiber(targetNode);if(null===nearestMounted)targetNode=null;else{var tag=nearestMounted.tag;if(13===tag){if(null!==(targetNode=getSuspenseInstanceFromFiber(nearestMounted)))return targetNode;targetNode=null}else if(3===tag){if(nearestMounted.stateNode.current.memoizedState.isDehydrated)return 3===nearestMounted.tag?nearestMounted.stateNode.containerInfo:null;targetNode=null}else nearestMounted!==targetNode&&(targetNode=null)}}return return_targetInst=targetNode,null}function getEventPriority(domEventName){switch(domEventName){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(getCurrentPriorityLevel()){case ImmediatePriority:return 2;case UserBlockingPriority:return 8;case NormalPriority$1:case LowPriority:return 32;case IdlePriority:return 268435456;default:return 32}default:return 32}}var hasScheduledReplayAttempt=!1,queuedFocus=null,queuedDrag=null,queuedMouse=null,queuedPointers=new Map,queuedPointerCaptures=new Map,queuedExplicitHydrationTargets=[],discreteReplayableEvents="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function clearIfContinuousEvent(domEventName,nativeEvent){switch(domEventName){case"focusin":case"focusout":queuedFocus=null;break;case"dragenter":case"dragleave":queuedDrag=null;break;case"mouseover":case"mouseout":queuedMouse=null;break;case"pointerover":case"pointerout":queuedPointers.delete(nativeEvent.pointerId);break;case"gotpointercapture":case"lostpointercapture":queuedPointerCaptures.delete(nativeEvent.pointerId)}}function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent,blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent){return null===existingQueuedEvent||existingQueuedEvent.nativeEvent!==nativeEvent?(existingQueuedEvent={blockedOn:blockedOn,domEventName:domEventName,eventSystemFlags:eventSystemFlags,nativeEvent:nativeEvent,targetContainers:[targetContainer]},null!==blockedOn&&(null!==(blockedOn=getInstanceFromNode(blockedOn))&&attemptContinuousHydration(blockedOn)),existingQueuedEvent):(existingQueuedEvent.eventSystemFlags|=eventSystemFlags,blockedOn=existingQueuedEvent.targetContainers,null!==targetContainer&&-1===blockedOn.indexOf(targetContainer)&&blockedOn.push(targetContainer),existingQueuedEvent)}function attemptExplicitHydrationTarget(queuedTarget){var targetInst=getClosestInstanceFromNode(queuedTarget.target);if(null!==targetInst){var nearestMounted=getNearestMountedFiber(targetInst);if(null!==nearestMounted)if(13===(targetInst=nearestMounted.tag)){if(null!==(targetInst=getSuspenseInstanceFromFiber(nearestMounted)))return queuedTarget.blockedOn=targetInst,void function(priority,fn){var previousPriority=ReactDOMSharedInternals.p;try{return ReactDOMSharedInternals.p=priority,fn()}finally{ReactDOMSharedInternals.p=previousPriority}}(queuedTarget.priority,(function(){if(13===nearestMounted.tag){var lane=requestUpdateLane(),root=enqueueConcurrentRenderForLane(nearestMounted,lane);null!==root&&scheduleUpdateOnFiber(root,0,lane),markRetryLaneIfNotHydrated(nearestMounted,lane)}}))}else if(3===targetInst&&nearestMounted.stateNode.current.memoizedState.isDehydrated)return void(queuedTarget.blockedOn=3===nearestMounted.tag?nearestMounted.stateNode.containerInfo:null)}queuedTarget.blockedOn=null}function attemptReplayContinuousQueuedEvent(queuedEvent){if(null!==queuedEvent.blockedOn)return!1;for(var targetContainers=queuedEvent.targetContainers;0<targetContainers.length;){var nextBlockedOn=findInstanceBlockingEvent(queuedEvent.nativeEvent);if(null!==nextBlockedOn)return null!==(targetContainers=getInstanceFromNode(nextBlockedOn))&&attemptContinuousHydration(targetContainers),queuedEvent.blockedOn=nextBlockedOn,!1;var nativeEventClone=new(nextBlockedOn=queuedEvent.nativeEvent).constructor(nextBlockedOn.type,nextBlockedOn);currentReplayingEvent=nativeEventClone,nextBlockedOn.target.dispatchEvent(nativeEventClone),currentReplayingEvent=null,targetContainers.shift()}return!0}function attemptReplayContinuousQueuedEventInMap(queuedEvent,key,map){attemptReplayContinuousQueuedEvent(queuedEvent)&&map.delete(key)}function replayUnblockedEvents(){hasScheduledReplayAttempt=!1,null!==queuedFocus&&attemptReplayContinuousQueuedEvent(queuedFocus)&&(queuedFocus=null),null!==queuedDrag&&attemptReplayContinuousQueuedEvent(queuedDrag)&&(queuedDrag=null),null!==queuedMouse&&attemptReplayContinuousQueuedEvent(queuedMouse)&&(queuedMouse=null),queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap),queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap)}function scheduleCallbackIfUnblocked(queuedEvent,unblocked){queuedEvent.blockedOn===unblocked&&(queuedEvent.blockedOn=null,hasScheduledReplayAttempt||(hasScheduledReplayAttempt=!0,Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority,replayUnblockedEvents)))}var lastScheduledReplayQueue=null;function scheduleReplayQueueIfNeeded(formReplayingQueue){lastScheduledReplayQueue!==formReplayingQueue&&(lastScheduledReplayQueue=formReplayingQueue,Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority,(function(){lastScheduledReplayQueue===formReplayingQueue&&(lastScheduledReplayQueue=null);for(var i=0;i<formReplayingQueue.length;i+=3){var form=formReplayingQueue[i],submitterOrAction=formReplayingQueue[i+1],formData=formReplayingQueue[i+2];if("function"!=typeof submitterOrAction){if(null===findInstanceBlockingTarget(submitterOrAction||form))continue;break}var formInst=getInstanceFromNode(form);null!==formInst&&(formReplayingQueue.splice(i,3),i-=3,startHostTransition(formInst,{pending:!0,data:formData,method:form.method,action:submitterOrAction},submitterOrAction,formData))}})))}function retryIfBlockedOn(unblocked){function unblock(queuedEvent){return scheduleCallbackIfUnblocked(queuedEvent,unblocked)}null!==queuedFocus&&scheduleCallbackIfUnblocked(queuedFocus,unblocked),null!==queuedDrag&&scheduleCallbackIfUnblocked(queuedDrag,unblocked),null!==queuedMouse&&scheduleCallbackIfUnblocked(queuedMouse,unblocked),queuedPointers.forEach(unblock),queuedPointerCaptures.forEach(unblock);for(var i=0;i<queuedExplicitHydrationTargets.length;i++){var queuedTarget=queuedExplicitHydrationTargets[i];queuedTarget.blockedOn===unblocked&&(queuedTarget.blockedOn=null)}for(;0<queuedExplicitHydrationTargets.length&&null===(i=queuedExplicitHydrationTargets[0]).blockedOn;)attemptExplicitHydrationTarget(i),null===i.blockedOn&&queuedExplicitHydrationTargets.shift();if(null!=(i=(unblocked.ownerDocument||unblocked).$$reactFormReplay))for(queuedTarget=0;queuedTarget<i.length;queuedTarget+=3){var form=i[queuedTarget],submitterOrAction=i[queuedTarget+1],formProps=form[internalPropsKey]||null;if("function"==typeof submitterOrAction)formProps||scheduleReplayQueueIfNeeded(i);else if(formProps){var action=null;if(submitterOrAction&&submitterOrAction.hasAttribute("formAction")){if(form=submitterOrAction,formProps=submitterOrAction[internalPropsKey]||null)action=formProps.formAction;else if(null!==findInstanceBlockingTarget(form))continue}else action=formProps.action;"function"==typeof action?i[queuedTarget+1]=action:(i.splice(queuedTarget,3),queuedTarget-=3),scheduleReplayQueueIfNeeded(i)}}}function ReactDOMRoot(internalRoot){this._internalRoot=internalRoot}function ReactDOMHydrationRoot(internalRoot){this._internalRoot=internalRoot}ReactDOMHydrationRoot.prototype.render=ReactDOMRoot.prototype.render=function(children){var root=this._internalRoot;if(null===root)throw Error(formatProdErrorMessage(409));updateContainerImpl(root.current,requestUpdateLane(),children,root,null,null)},ReactDOMHydrationRoot.prototype.unmount=ReactDOMRoot.prototype.unmount=function(){var root=this._internalRoot;if(null!==root){this._internalRoot=null;var container=root.containerInfo;0===root.tag&&flushPassiveEffects(),updateContainerImpl(root.current,2,null,root,null,null),flushSyncWork$1(),container[internalContainerInstanceKey]=null}},ReactDOMHydrationRoot.prototype.unstable_scheduleHydration=function(target){if(target){var updatePriority=resolveUpdatePriority();target={blockedOn:null,target:target,priority:updatePriority};for(var i=0;i<queuedExplicitHydrationTargets.length&&0!==updatePriority&&updatePriority<queuedExplicitHydrationTargets[i].priority;i++);queuedExplicitHydrationTargets.splice(i,0,target),0===i&&attemptExplicitHydrationTarget(target)}};var isomorphicReactPackageVersion$jscomp$inline_1686=React.version;if("19.0.0"!==isomorphicReactPackageVersion$jscomp$inline_1686)throw Error(formatProdErrorMessage(527,isomorphicReactPackageVersion$jscomp$inline_1686,"19.0.0"));ReactDOMSharedInternals.findDOMNode=function(componentOrElement){var fiber=componentOrElement._reactInternals;if(void 0===fiber){if("function"==typeof componentOrElement.render)throw Error(formatProdErrorMessage(188));throw componentOrElement=Object.keys(componentOrElement).join(","),Error(formatProdErrorMessage(268,componentOrElement))}return componentOrElement=function(fiber){var alternate=fiber.alternate;if(!alternate){if(null===(alternate=getNearestMountedFiber(fiber)))throw Error(formatProdErrorMessage(188));return alternate!==fiber?null:fiber}for(var a=fiber,b=alternate;;){var parentA=a.return;if(null===parentA)break;var parentB=parentA.alternate;if(null===parentB){if(null!==(b=parentA.return)){a=b;continue}break}if(parentA.child===parentB.child){for(parentB=parentA.child;parentB;){if(parentB===a)return assertIsMounted(parentA),fiber;if(parentB===b)return assertIsMounted(parentA),alternate;parentB=parentB.sibling}throw Error(formatProdErrorMessage(188))}if(a.return!==b.return)a=parentA,b=parentB;else{for(var didFindChild=!1,child$2=parentA.child;child$2;){if(child$2===a){didFindChild=!0,a=parentA,b=parentB;break}if(child$2===b){didFindChild=!0,b=parentA,a=parentB;break}child$2=child$2.sibling}if(!didFindChild){for(child$2=parentB.child;child$2;){if(child$2===a){didFindChild=!0,a=parentB,b=parentA;break}if(child$2===b){didFindChild=!0,b=parentB,a=parentA;break}child$2=child$2.sibling}if(!didFindChild)throw Error(formatProdErrorMessage(189))}}if(a.alternate!==b)throw Error(formatProdErrorMessage(190))}if(3!==a.tag)throw Error(formatProdErrorMessage(188));return a.stateNode.current===a?fiber:alternate}(fiber),componentOrElement=null===(componentOrElement=null!==componentOrElement?findCurrentHostFiberImpl(componentOrElement):null)?null:componentOrElement.stateNode};var internals$jscomp$inline_2165={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:ReactSharedInternals,findFiberByHostInstance:getClosestInstanceFromNode,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var hook$jscomp$inline_2166=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!hook$jscomp$inline_2166.isDisabled&&hook$jscomp$inline_2166.supportsFiber)try{rendererID=hook$jscomp$inline_2166.inject(internals$jscomp$inline_2165),injectedHook=hook$jscomp$inline_2166}catch(err){}}return reactDomClient_production.createRoot=function(container,options){if(!isValidContainer(container))throw Error(formatProdErrorMessage(299));var isStrictMode=!1,identifierPrefix="",onUncaughtError=defaultOnUncaughtError,onCaughtError=defaultOnCaughtError,onRecoverableError=defaultOnRecoverableError;return null!=options&&(!0===options.unstable_strictMode&&(isStrictMode=!0),void 0!==options.identifierPrefix&&(identifierPrefix=options.identifierPrefix),void 0!==options.onUncaughtError&&(onUncaughtError=options.onUncaughtError),void 0!==options.onCaughtError&&(onCaughtError=options.onCaughtError),void 0!==options.onRecoverableError&&(onRecoverableError=options.onRecoverableError),void 0!==options.unstable_transitionCallbacks&&options.unstable_transitionCallbacks),options=createFiberRoot(container,1,!1,null,0,isStrictMode,identifierPrefix,onUncaughtError,onCaughtError,onRecoverableError,0,null),container[internalContainerInstanceKey]=options.current,listenToAllSupportedEvents(8===container.nodeType?container.parentNode:container),new ReactDOMRoot(options)},reactDomClient_production.hydrateRoot=function(container,initialChildren,options){if(!isValidContainer(container))throw Error(formatProdErrorMessage(299));var isStrictMode=!1,identifierPrefix="",onUncaughtError=defaultOnUncaughtError,onCaughtError=defaultOnCaughtError,onRecoverableError=defaultOnRecoverableError,formState=null;return null!=options&&(!0===options.unstable_strictMode&&(isStrictMode=!0),void 0!==options.identifierPrefix&&(identifierPrefix=options.identifierPrefix),void 0!==options.onUncaughtError&&(onUncaughtError=options.onUncaughtError),void 0!==options.onCaughtError&&(onCaughtError=options.onCaughtError),void 0!==options.onRecoverableError&&(onRecoverableError=options.onRecoverableError),void 0!==options.unstable_transitionCallbacks&&options.unstable_transitionCallbacks,void 0!==options.formState&&(formState=options.formState)),(initialChildren=createFiberRoot(container,1,!0,initialChildren,0,isStrictMode,identifierPrefix,onUncaughtError,onCaughtError,onRecoverableError,0,formState)).context=getContextForSubtree(null),options=initialChildren.current,(identifierPrefix=createUpdate(isStrictMode=requestUpdateLane())).callback=null,enqueueUpdate(options,identifierPrefix,isStrictMode),initialChildren.current.lanes=isStrictMode,markRootUpdated$1(initialChildren,isStrictMode),ensureRootIsScheduled(initialChildren),container[internalContainerInstanceKey]=initialChildren.current,listenToAllSupportedEvents(container),new ReactDOMHydrationRoot(initialChildren)},reactDomClient_production.version="19.0.0",reactDomClient_production}var clientExports=(hasRequiredClient||(hasRequiredClient=1,function checkDCE(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)}catch(err){console.error(err)}}(),client.exports=requireReactDomClient_production()),client.exports),reactExports=requireReact(),reactDomExports=requireReactDom();const window$1="unsafeWindow"in window?window.unsafeWindow:window,SDK_INITIALIZED=window$1.SDK_INITIALIZED,getWmeSdk=window$1.getWmeSdk,defaultWmeSdk=(()=>{try{return getWmeSdk?.({scriptId:"r0den/wme-userscript-base",scriptName:"WME Userscript Base Template"})}catch{return}})(),WmeSdkContext=reactExports.createContext(defaultWmeSdk);function ScriptTab({tabId:tabId,tabLabel:tabLabel,children:children}){const tabElements=function(tabId){const sidebarModule=function(tabId){const wmeSdk=function(){const wmeSdk=reactExports.useContext(WmeSdkContext);if(void 0===wmeSdk)throw new Error("useWmeSdk must be used within a WmeSdkProvider");return wmeSdk}();return reactExports.useMemo((()=>{if(!tabId)return wmeSdk.Sidebar;const namespacedTabId=`${wmeSdk.Sidebar.scriptId}.${tabId}`;return new(0,wmeSdk.Sidebar.constructor)(namespacedTabId)}),[tabId,wmeSdk])}(tabId),[tabResult,setTabResult]=reactExports.useState(null);return reactExports.useEffect((()=>(sidebarModule.registerScriptTab().then(setTabResult),()=>{sidebarModule.removeScriptTab(),setTabResult(null)})),[sidebarModule]),tabResult?{tabLabel:tabResult.tabLabel,tabPane:tabResult.tabPane}:null}(tabId);return tabElements?jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment,{children:[reactDomExports.createPortal(tabLabel,tabElements.tabLabel),reactDomExports.createPortal(children,tabElements.tabPane)]}):null}function AppComponent(){return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment,{children:"Hello World!"})}AppComponent.displayName="App";const App=function(Component,tabLabel,tabId){const tabbedComponent=props=>jsxRuntimeExports.jsx(ScriptTab,{tabId:tabId,tabLabel:tabLabel,children:jsxRuntimeExports.jsx(Component,{...props})});var component;return tabbedComponent.displayName=`ScriptTab(${component=Component,component.displayName||component.name||"Unknown"})`,tabbedComponent}(AppComponent,"My Userscript");!async function(){await SDK_INITIALIZED,clientExports.createRoot(document.createDocumentFragment()).render(jsxRuntimeExports.jsx(App,{}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid21lLXVzZXJzY3JpcHQubWluLnVzZXIuanMiLCJzb3VyY2VzIjpbInVzZXJzY3JpcHQ6Ly8vcjBkZW4vd21lLXVzZXJzY3JpcHQtYmFzZS9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24uanMiLCJ1c2Vyc2NyaXB0Oi8vL3IwZGVuL3dtZS11c2Vyc2NyaXB0LWJhc2Uvbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwidXNlcnNjcmlwdDovLy9yMGRlbi93bWUtdXNlcnNjcmlwdC1iYXNlL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsInVzZXJzY3JpcHQ6Ly8vcjBkZW4vd21lLXVzZXJzY3JpcHQtYmFzZS9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24uanMiLCJ1c2Vyc2NyaXB0Oi8vL3IwZGVuL3dtZS11c2Vyc2NyaXB0LWJhc2Uvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsInVzZXJzY3JpcHQ6Ly8vcjBkZW4vd21lLXVzZXJzY3JpcHQtYmFzZS9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5qcyIsInVzZXJzY3JpcHQ6Ly8vcjBkZW4vd21lLXVzZXJzY3JpcHQtYmFzZS9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcyIsInVzZXJzY3JpcHQ6Ly8vcjBkZW4vd21lLXVzZXJzY3JpcHQtYmFzZS9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwidXNlcnNjcmlwdDovLy9yMGRlbi93bWUtdXNlcnNjcmlwdC1iYXNlL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS1jbGllbnQucHJvZHVjdGlvbi5qcyIsInVzZXJzY3JpcHQ6Ly8vcjBkZW4vd21lLXVzZXJzY3JpcHQtYmFzZS9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsInVzZXJzY3JpcHQ6Ly8vcjBkZW4vd21lLXVzZXJzY3JpcHQtYmFzZS9zcmMvdXRpbHMvc2RrLXV0aWxzLnRzIiwidXNlcnNjcmlwdDovLy9yMGRlbi93bWUtdXNlcnNjcmlwdC1iYXNlL3NyYy91dGlscy93aW5kb3ctdXRpbHMudHMiLCJ1c2Vyc2NyaXB0Oi8vL3IwZGVuL3dtZS11c2Vyc2NyaXB0LWJhc2Uvc3JjL2NvbnRleHRzL1dtZVNka0NvbnRleHQudHN4IiwidXNlcnNjcmlwdDovLy9yMGRlbi93bWUtdXNlcnNjcmlwdC1iYXNlL3NyYy9jb21wb25lbnRzL1NjcmlwdFRhYi50c3giLCJ1c2Vyc2NyaXB0Oi8vL3IwZGVuL3dtZS11c2Vyc2NyaXB0LWJhc2Uvc3JjL0FwcC50c3giLCJ1c2Vyc2NyaXB0Oi8vL3IwZGVuL3dtZS11c2Vyc2NyaXB0LWJhc2Uvc3JjL3V0aWxzL2FzLXNjcmlwdC10YWIudHN4IiwidXNlcnNjcmlwdDovLy9yMGRlbi93bWUtdXNlcnNjcmlwdC1iYXNlL3NyYy91dGlscy9nZXQtZGlzcGxheS1uYW1lLnRzIiwidXNlcnNjcmlwdDovLy9yMGRlbi93bWUtdXNlcnNjcmlwdC1iYXNlL3NyYy9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50XCIpLFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksXG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksXG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksXG4gIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksXG4gIFJFQUNUX0NPTlNVTUVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29uc3VtZXJcIiksXG4gIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLFxuICBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLFxuICBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLFxuICBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksXG4gIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobnVsbCA9PT0gbWF5YmVJdGVyYWJsZSB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSkgcmV0dXJuIG51bGw7XG4gIG1heWJlSXRlcmFibGUgPVxuICAgIChNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgIG1heWJlSXRlcmFibGVbXCJAQGl0ZXJhdG9yXCJdO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSA/IG1heWJlSXRlcmFibGUgOiBudWxsO1xufVxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0ge1xuICAgIGlzTW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICExO1xuICAgIH0sXG4gICAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uICgpIHt9XG4gIH0sXG4gIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24sXG4gIGVtcHR5T2JqZWN0ID0ge307XG5mdW5jdGlvbiBDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cbkNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gIGlmIChcbiAgICBcIm9iamVjdFwiICE9PSB0eXBlb2YgcGFydGlhbFN0YXRlICYmXG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcGFydGlhbFN0YXRlICYmXG4gICAgbnVsbCAhPSBwYXJ0aWFsU3RhdGVcbiAgKVxuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJ0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIlxuICAgICk7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlLCBjYWxsYmFjaywgXCJzZXRTdGF0ZVwiKTtcbn07XG5Db21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcywgY2FsbGJhY2ssIFwiZm9yY2VVcGRhdGVcIik7XG59O1xuZnVuY3Rpb24gQ29tcG9uZW50RHVtbXkoKSB7fVxuQ29tcG9uZW50RHVtbXkucHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbmZ1bmN0aW9uIFB1cmVDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cbnZhciBwdXJlQ29tcG9uZW50UHJvdG90eXBlID0gKFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCkpO1xucHVyZUNvbXBvbmVudFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFB1cmVDb21wb25lbnQ7XG5hc3NpZ24ocHVyZUNvbXBvbmVudFByb3RvdHlwZSwgQ29tcG9uZW50LnByb3RvdHlwZSk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ID0gITA7XG52YXIgaXNBcnJheUltcGwgPSBBcnJheS5pc0FycmF5LFxuICBSZWFjdFNoYXJlZEludGVybmFscyA9IHsgSDogbnVsbCwgQTogbnVsbCwgVDogbnVsbCwgUzogbnVsbCB9LFxuICBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcykge1xuICBzZWxmID0gcHJvcHMucmVmO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHZvaWQgMCAhPT0gc2VsZiA/IHNlbGYgOiBudWxsLFxuICAgIHByb3BzOiBwcm9wc1xuICB9O1xufVxuZnVuY3Rpb24gY2xvbmVBbmRSZXBsYWNlS2V5KG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICByZXR1cm4gUmVhY3RFbGVtZW50KFxuICAgIG9sZEVsZW1lbnQudHlwZSxcbiAgICBuZXdLZXksXG4gICAgdm9pZCAwLFxuICAgIHZvaWQgMCxcbiAgICB2b2lkIDAsXG4gICAgb2xkRWxlbWVudC5wcm9wc1xuICApO1xufVxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiAoXG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9iamVjdCAmJlxuICAgIG51bGwgIT09IG9iamVjdCAmJlxuICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG4gICk7XG59XG5mdW5jdGlvbiBlc2NhcGUoa2V5KSB7XG4gIHZhciBlc2NhcGVyTG9va3VwID0geyBcIj1cIjogXCI9MFwiLCBcIjpcIjogXCI9MlwiIH07XG4gIHJldHVybiAoXG4gICAgXCIkXCIgK1xuICAgIGtleS5yZXBsYWNlKC9bPTpdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgcmV0dXJuIGVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICAgIH0pXG4gICk7XG59XG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuZnVuY3Rpb24gZ2V0RWxlbWVudEtleShlbGVtZW50LCBpbmRleCkge1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVsZW1lbnQgJiYgbnVsbCAhPT0gZWxlbWVudCAmJiBudWxsICE9IGVsZW1lbnQua2V5XG4gICAgPyBlc2NhcGUoXCJcIiArIGVsZW1lbnQua2V5KVxuICAgIDogaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuZnVuY3Rpb24gbm9vcCQxKCkge31cbmZ1bmN0aW9uIHJlc29sdmVUaGVuYWJsZSh0aGVuYWJsZSkge1xuICBzd2l0Y2ggKHRoZW5hYmxlLnN0YXR1cykge1xuICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgIHRocm93IHRoZW5hYmxlLnJlYXNvbjtcbiAgICBkZWZhdWx0OlxuICAgICAgc3dpdGNoIChcbiAgICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0aGVuYWJsZS5zdGF0dXNcbiAgICAgICAgICA/IHRoZW5hYmxlLnRoZW4obm9vcCQxLCBub29wJDEpXG4gICAgICAgICAgOiAoKHRoZW5hYmxlLnN0YXR1cyA9IFwicGVuZGluZ1wiKSxcbiAgICAgICAgICAgIHRoZW5hYmxlLnRoZW4oXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChmdWxmaWxsZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAgICgodGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIiksXG4gICAgICAgICAgICAgICAgICAodGhlbmFibGUudmFsdWUgPSBmdWxmaWxsZWRWYWx1ZSkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAoKHRoZW5hYmxlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIiksICh0aGVuYWJsZS5yZWFzb24gPSBlcnJvcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApKSxcbiAgICAgICAgdGhlbmFibGUuc3RhdHVzKVxuICAgICAgKSB7XG4gICAgICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICAgIHRocm93IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgIH1cbiAgfVxuICB0aHJvdyB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIG1hcEludG9BcnJheShjaGlsZHJlbiwgYXJyYXksIGVzY2FwZWRQcmVmaXgsIG5hbWVTb0ZhciwgY2FsbGJhY2spIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG4gIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlIHx8IFwiYm9vbGVhblwiID09PSB0eXBlKSBjaGlsZHJlbiA9IG51bGw7XG4gIHZhciBpbnZva2VDYWxsYmFjayA9ICExO1xuICBpZiAobnVsbCA9PT0gY2hpbGRyZW4pIGludm9rZUNhbGxiYWNrID0gITA7XG4gIGVsc2VcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSAhMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIHN3aXRjaCAoY2hpbGRyZW4uJCR0eXBlb2YpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGludm9rZUNhbGxiYWNrID0gY2hpbGRyZW4uX2luaXQpLFxuICAgICAgICAgICAgICBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2soY2hpbGRyZW4uX3BheWxvYWQpLFxuICAgICAgICAgICAgICAgIGFycmF5LFxuICAgICAgICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gIGlmIChpbnZva2VDYWxsYmFjaylcbiAgICByZXR1cm4gKFxuICAgICAgKGNhbGxiYWNrID0gY2FsbGJhY2soY2hpbGRyZW4pKSxcbiAgICAgIChpbnZva2VDYWxsYmFjayA9XG4gICAgICAgIFwiXCIgPT09IG5hbWVTb0ZhciA/IFwiLlwiICsgZ2V0RWxlbWVudEtleShjaGlsZHJlbiwgMCkgOiBuYW1lU29GYXIpLFxuICAgICAgaXNBcnJheUltcGwoY2FsbGJhY2spXG4gICAgICAgID8gKChlc2NhcGVkUHJlZml4ID0gXCJcIiksXG4gICAgICAgICAgbnVsbCAhPSBpbnZva2VDYWxsYmFjayAmJlxuICAgICAgICAgICAgKGVzY2FwZWRQcmVmaXggPVxuICAgICAgICAgICAgICBpbnZva2VDYWxsYmFjay5yZXBsYWNlKHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LCBcIiQmL1wiKSArIFwiL1wiKSxcbiAgICAgICAgICBtYXBJbnRvQXJyYXkoY2FsbGJhY2ssIGFycmF5LCBlc2NhcGVkUHJlZml4LCBcIlwiLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgfSkpXG4gICAgICAgIDogbnVsbCAhPSBjYWxsYmFjayAmJlxuICAgICAgICAgIChpc1ZhbGlkRWxlbWVudChjYWxsYmFjaykgJiZcbiAgICAgICAgICAgIChjYWxsYmFjayA9IGNsb25lQW5kUmVwbGFjZUtleShcbiAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgIGVzY2FwZWRQcmVmaXggK1xuICAgICAgICAgICAgICAgIChudWxsID09IGNhbGxiYWNrLmtleSB8fFxuICAgICAgICAgICAgICAgIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5rZXkgPT09IGNhbGxiYWNrLmtleSlcbiAgICAgICAgICAgICAgICAgID8gXCJcIlxuICAgICAgICAgICAgICAgICAgOiAoXCJcIiArIGNhbGxiYWNrLmtleSkucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCxcbiAgICAgICAgICAgICAgICAgICAgICBcIiQmL1wiXG4gICAgICAgICAgICAgICAgICAgICkgKyBcIi9cIikgK1xuICAgICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICBhcnJheS5wdXNoKGNhbGxiYWNrKSksXG4gICAgICAxXG4gICAgKTtcbiAgaW52b2tlQ2FsbGJhY2sgPSAwO1xuICB2YXIgbmV4dE5hbWVQcmVmaXggPSBcIlwiID09PSBuYW1lU29GYXIgPyBcIi5cIiA6IG5hbWVTb0ZhciArIFwiOlwiO1xuICBpZiAoaXNBcnJheUltcGwoY2hpbGRyZW4pKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspXG4gICAgICAobmFtZVNvRmFyID0gY2hpbGRyZW5baV0pLFxuICAgICAgICAodHlwZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0RWxlbWVudEtleShuYW1lU29GYXIsIGkpKSxcbiAgICAgICAgKGludm9rZUNhbGxiYWNrICs9IG1hcEludG9BcnJheShcbiAgICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgICAgYXJyYXksXG4gICAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICkpO1xuICBlbHNlIGlmICgoKGkgPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKSksIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGkpKVxuICAgIGZvciAoXG4gICAgICBjaGlsZHJlbiA9IGkuY2FsbChjaGlsZHJlbiksIGkgPSAwO1xuICAgICAgIShuYW1lU29GYXIgPSBjaGlsZHJlbi5uZXh0KCkpLmRvbmU7XG5cbiAgICApXG4gICAgICAobmFtZVNvRmFyID0gbmFtZVNvRmFyLnZhbHVlKSxcbiAgICAgICAgKHR5cGUgPSBuZXh0TmFtZVByZWZpeCArIGdldEVsZW1lbnRLZXkobmFtZVNvRmFyLCBpKyspKSxcbiAgICAgICAgKGludm9rZUNhbGxiYWNrICs9IG1hcEludG9BcnJheShcbiAgICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgICAgYXJyYXksXG4gICAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICkpO1xuICBlbHNlIGlmIChcIm9iamVjdFwiID09PSB0eXBlKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNoaWxkcmVuLnRoZW4pXG4gICAgICByZXR1cm4gbWFwSW50b0FycmF5KFxuICAgICAgICByZXNvbHZlVGhlbmFibGUoY2hpbGRyZW4pLFxuICAgICAgICBhcnJheSxcbiAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICBjYWxsYmFja1xuICAgICAgKTtcbiAgICBhcnJheSA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIgK1xuICAgICAgICAoXCJbb2JqZWN0IE9iamVjdF1cIiA9PT0gYXJyYXlcbiAgICAgICAgICA/IFwib2JqZWN0IHdpdGgga2V5cyB7XCIgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbihcIiwgXCIpICsgXCJ9XCJcbiAgICAgICAgICA6IGFycmF5KSArXG4gICAgICAgIFwiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuICByZXR1cm4gaW52b2tlQ2FsbGJhY2s7XG59XG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAobnVsbCA9PSBjaGlsZHJlbikgcmV0dXJuIGNoaWxkcmVuO1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgY291bnQgPSAwO1xuICBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIHJlc3VsdCwgXCJcIiwgXCJcIiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgY291bnQrKyk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbGF6eUluaXRpYWxpemVyKHBheWxvYWQpIHtcbiAgaWYgKC0xID09PSBwYXlsb2FkLl9zdGF0dXMpIHtcbiAgICB2YXIgY3RvciA9IHBheWxvYWQuX3Jlc3VsdDtcbiAgICBjdG9yID0gY3RvcigpO1xuICAgIGN0b3IudGhlbihcbiAgICAgIGZ1bmN0aW9uIChtb2R1bGVPYmplY3QpIHtcbiAgICAgICAgaWYgKDAgPT09IHBheWxvYWQuX3N0YXR1cyB8fCAtMSA9PT0gcGF5bG9hZC5fc3RhdHVzKVxuICAgICAgICAgIChwYXlsb2FkLl9zdGF0dXMgPSAxKSwgKHBheWxvYWQuX3Jlc3VsdCA9IG1vZHVsZU9iamVjdCk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICgwID09PSBwYXlsb2FkLl9zdGF0dXMgfHwgLTEgPT09IHBheWxvYWQuX3N0YXR1cylcbiAgICAgICAgICAocGF5bG9hZC5fc3RhdHVzID0gMiksIChwYXlsb2FkLl9yZXN1bHQgPSBlcnJvcik7XG4gICAgICB9XG4gICAgKTtcbiAgICAtMSA9PT0gcGF5bG9hZC5fc3RhdHVzICYmICgocGF5bG9hZC5fc3RhdHVzID0gMCksIChwYXlsb2FkLl9yZXN1bHQgPSBjdG9yKSk7XG4gIH1cbiAgaWYgKDEgPT09IHBheWxvYWQuX3N0YXR1cykgcmV0dXJuIHBheWxvYWQuX3Jlc3VsdC5kZWZhdWx0O1xuICB0aHJvdyBwYXlsb2FkLl9yZXN1bHQ7XG59XG52YXIgcmVwb3J0R2xvYmFsRXJyb3IgPVxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXBvcnRFcnJvclxuICAgID8gcmVwb3J0RXJyb3JcbiAgICA6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHdpbmRvdyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdpbmRvdy5FcnJvckV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBldmVudCA9IG5ldyB3aW5kb3cuRXJyb3JFdmVudChcImVycm9yXCIsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6ICEwLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogITAsXG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgZXJyb3IgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZXJyb3IgJiZcbiAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIDogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb2Nlc3MgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcm9jZXNzLmVtaXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KFwidW5jYXVnaHRFeGNlcHRpb25cIiwgZXJyb3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH07XG5mdW5jdGlvbiBub29wKCkge31cbmV4cG9ydHMuQ2hpbGRyZW4gPSB7XG4gIG1hcDogbWFwQ2hpbGRyZW4sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIChjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gICAgbWFwQ2hpbGRyZW4oXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yRWFjaEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0sXG4gICAgICBmb3JFYWNoQ29udGV4dFxuICAgICk7XG4gIH0sXG4gIGNvdW50OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgbiA9IDA7XG4gICAgbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmN0aW9uICgpIHtcbiAgICAgIG4rKztcbiAgICB9KTtcbiAgICByZXR1cm4gbjtcbiAgfSxcbiAgdG9BcnJheTogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfSkgfHwgW11cbiAgICApO1xuICB9LFxuICBvbmx5OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSlcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiXG4gICAgICApO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxufTtcbmV4cG9ydHMuQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuZXhwb3J0cy5GcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG5leHBvcnRzLlByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbmV4cG9ydHMuUHVyZUNvbXBvbmVudCA9IFB1cmVDb21wb25lbnQ7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG5leHBvcnRzLl9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSA9XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzO1xuZXhwb3J0cy5hY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7XG59O1xuZXhwb3J0cy5jYWNoZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgaWYgKG51bGwgPT09IGVsZW1lbnQgfHwgdm9pZCAwID09PSBlbGVtZW50KVxuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiICsgZWxlbWVudCArIFwiLlwiXG4gICAgKTtcbiAgdmFyIHByb3BzID0gYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKSxcbiAgICBrZXkgPSBlbGVtZW50LmtleSxcbiAgICBvd25lciA9IHZvaWQgMDtcbiAgaWYgKG51bGwgIT0gY29uZmlnKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKHZvaWQgMCAhPT0gY29uZmlnLnJlZiAmJiAob3duZXIgPSB2b2lkIDApLFxuICAgIHZvaWQgMCAhPT0gY29uZmlnLmtleSAmJiAoa2V5ID0gXCJcIiArIGNvbmZpZy5rZXkpLFxuICAgIGNvbmZpZykpXG4gICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSB8fFxuICAgICAgICBcImtleVwiID09PSBwcm9wTmFtZSB8fFxuICAgICAgICBcIl9fc2VsZlwiID09PSBwcm9wTmFtZSB8fFxuICAgICAgICBcIl9fc291cmNlXCIgPT09IHByb3BOYW1lIHx8XG4gICAgICAgIChcInJlZlwiID09PSBwcm9wTmFtZSAmJiB2b2lkIDAgPT09IGNvbmZpZy5yZWYpIHx8XG4gICAgICAgIChwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdKTtcbiAgdmFyIHByb3BOYW1lID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmICgxID09PSBwcm9wTmFtZSkgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgZWxzZSBpZiAoMSA8IHByb3BOYW1lKSB7XG4gICAgZm9yICh2YXIgY2hpbGRBcnJheSA9IEFycmF5KHByb3BOYW1lKSwgaSA9IDA7IGkgPCBwcm9wTmFtZTsgaSsrKVxuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG4gIHJldHVybiBSZWFjdEVsZW1lbnQoZWxlbWVudC50eXBlLCBrZXksIHZvaWQgMCwgdm9pZCAwLCBvd25lciwgcHJvcHMpO1xufTtcbmV4cG9ydHMuY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChkZWZhdWx0VmFsdWUpIHtcbiAgZGVmYXVsdFZhbHVlID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9DT05URVhUX1RZUEUsXG4gICAgX2N1cnJlbnRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIF9jdXJyZW50VmFsdWUyOiBkZWZhdWx0VmFsdWUsXG4gICAgX3RocmVhZENvdW50OiAwLFxuICAgIFByb3ZpZGVyOiBudWxsLFxuICAgIENvbnN1bWVyOiBudWxsXG4gIH07XG4gIGRlZmF1bHRWYWx1ZS5Qcm92aWRlciA9IGRlZmF1bHRWYWx1ZTtcbiAgZGVmYXVsdFZhbHVlLkNvbnN1bWVyID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9DT05TVU1FUl9UWVBFLFxuICAgIF9jb250ZXh0OiBkZWZhdWx0VmFsdWVcbiAgfTtcbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn07XG5leHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWUsXG4gICAgcHJvcHMgPSB7fSxcbiAgICBrZXkgPSBudWxsO1xuICBpZiAobnVsbCAhPSBjb25maWcpXG4gICAgZm9yIChwcm9wTmFtZSBpbiAodm9pZCAwICE9PSBjb25maWcua2V5ICYmIChrZXkgPSBcIlwiICsgY29uZmlnLmtleSksIGNvbmZpZykpXG4gICAgICBoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmXG4gICAgICAgIFwia2V5XCIgIT09IHByb3BOYW1lICYmXG4gICAgICAgIFwiX19zZWxmXCIgIT09IHByb3BOYW1lICYmXG4gICAgICAgIFwiX19zb3VyY2VcIiAhPT0gcHJvcE5hbWUgJiZcbiAgICAgICAgKHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV0pO1xuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKDEgPT09IGNoaWxkcmVuTGVuZ3RoKSBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICBlbHNlIGlmICgxIDwgY2hpbGRyZW5MZW5ndGgpIHtcbiAgICBmb3IgKHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpLCBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspXG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cbiAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpXG4gICAgZm9yIChwcm9wTmFtZSBpbiAoKGNoaWxkcmVuTGVuZ3RoID0gdHlwZS5kZWZhdWx0UHJvcHMpLCBjaGlsZHJlbkxlbmd0aCkpXG4gICAgICB2b2lkIDAgPT09IHByb3BzW3Byb3BOYW1lXSAmJlxuICAgICAgICAocHJvcHNbcHJvcE5hbWVdID0gY2hpbGRyZW5MZW5ndGhbcHJvcE5hbWVdKTtcbiAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHZvaWQgMCwgdm9pZCAwLCBudWxsLCBwcm9wcyk7XG59O1xuZXhwb3J0cy5jcmVhdGVSZWYgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7IGN1cnJlbnQ6IG51bGwgfTtcbn07XG5leHBvcnRzLmZvcndhcmRSZWYgPSBmdW5jdGlvbiAocmVuZGVyKSB7XG4gIHJldHVybiB7ICQkdHlwZW9mOiBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFLCByZW5kZXI6IHJlbmRlciB9O1xufTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnQgPSBpc1ZhbGlkRWxlbWVudDtcbmV4cG9ydHMubGF6eSA9IGZ1bmN0aW9uIChjdG9yKSB7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0xBWllfVFlQRSxcbiAgICBfcGF5bG9hZDogeyBfc3RhdHVzOiAtMSwgX3Jlc3VsdDogY3RvciB9LFxuICAgIF9pbml0OiBsYXp5SW5pdGlhbGl6ZXJcbiAgfTtcbn07XG5leHBvcnRzLm1lbW8gPSBmdW5jdGlvbiAodHlwZSwgY29tcGFyZSkge1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9NRU1PX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBjb21wYXJlOiB2b2lkIDAgPT09IGNvbXBhcmUgPyBudWxsIDogY29tcGFyZVxuICB9O1xufTtcbmV4cG9ydHMuc3RhcnRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKHNjb3BlKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgY3VycmVudFRyYW5zaXRpb24gPSB7fTtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IGN1cnJlbnRUcmFuc2l0aW9uO1xuICB0cnkge1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IHNjb3BlKCksXG4gICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlM7XG4gICAgbnVsbCAhPT0gb25TdGFydFRyYW5zaXRpb25GaW5pc2ggJiZcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKGN1cnJlbnRUcmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUudGhlbiAmJlxuICAgICAgcmV0dXJuVmFsdWUudGhlbihub29wLCByZXBvcnRHbG9iYWxFcnJvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbjtcbiAgfVxufTtcbmV4cG9ydHMudW5zdGFibGVfdXNlQ2FjaGVSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VDYWNoZVJlZnJlc2goKTtcbn07XG5leHBvcnRzLnVzZSA9IGZ1bmN0aW9uICh1c2FibGUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlKHVzYWJsZSk7XG59O1xuZXhwb3J0cy51c2VBY3Rpb25TdGF0ZSA9IGZ1bmN0aW9uIChhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUFjdGlvblN0YXRlKGFjdGlvbiwgaW5pdGlhbFN0YXRlLCBwZXJtYWxpbmspO1xufTtcbmV4cG9ydHMudXNlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlQ29udGV4dCA9IGZ1bmN0aW9uIChDb250ZXh0KSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUNvbnRleHQoQ29udGV4dCk7XG59O1xuZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlID0gZnVuY3Rpb24gKCkge307XG5leHBvcnRzLnVzZURlZmVycmVkVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VEZWZlcnJlZFZhbHVlKHZhbHVlLCBpbml0aWFsVmFsdWUpO1xufTtcbmV4cG9ydHMudXNlRWZmZWN0ID0gZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZUlkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VJZCgpO1xufTtcbmV4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZSA9IGZ1bmN0aW9uIChyZWYsIGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdCA9IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlTWVtbyA9IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlTWVtbyhjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlT3B0aW1pc3RpYyA9IGZ1bmN0aW9uIChwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VPcHRpbWlzdGljKHBhc3N0aHJvdWdoLCByZWR1Y2VyKTtcbn07XG5leHBvcnRzLnVzZVJlZHVjZXIgPSBmdW5jdGlvbiAocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpO1xufTtcbmV4cG9ydHMudXNlUmVmID0gZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VSZWYoaW5pdGlhbFZhbHVlKTtcbn07XG5leHBvcnRzLnVzZVN0YXRlID0gZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VTdGF0ZShpbml0aWFsU3RhdGUpO1xufTtcbmV4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmUgPSBmdW5jdGlvbiAoXG4gIHN1YnNjcmliZSxcbiAgZ2V0U25hcHNob3QsXG4gIGdldFNlcnZlclNuYXBzaG90XG4pIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlU3luY0V4dGVybmFsU3RvcmUoXG4gICAgc3Vic2NyaWJlLFxuICAgIGdldFNuYXBzaG90LFxuICAgIGdldFNlcnZlclNuYXBzaG90XG4gICk7XG59O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VUcmFuc2l0aW9uKCk7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4wLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50XCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpO1xuZnVuY3Rpb24ganN4UHJvZCh0eXBlLCBjb25maWcsIG1heWJlS2V5KSB7XG4gIHZhciBrZXkgPSBudWxsO1xuICB2b2lkIDAgIT09IG1heWJlS2V5ICYmIChrZXkgPSBcIlwiICsgbWF5YmVLZXkpO1xuICB2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KTtcbiAgaWYgKFwia2V5XCIgaW4gY29uZmlnKSB7XG4gICAgbWF5YmVLZXkgPSB7fTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBjb25maWcpXG4gICAgICBcImtleVwiICE9PSBwcm9wTmFtZSAmJiAobWF5YmVLZXlbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIH0gZWxzZSBtYXliZUtleSA9IGNvbmZpZztcbiAgY29uZmlnID0gbWF5YmVLZXkucmVmO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHZvaWQgMCAhPT0gY29uZmlnID8gY29uZmlnIDogbnVsbCxcbiAgICBwcm9wczogbWF5YmVLZXlcbiAgfTtcbn1cbmV4cG9ydHMuRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xuZXhwb3J0cy5qc3ggPSBqc3hQcm9kO1xuZXhwb3J0cy5qc3hzID0ganN4UHJvZDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHB1c2goaGVhcCwgbm9kZSkge1xuICB2YXIgaW5kZXggPSBoZWFwLmxlbmd0aDtcbiAgaGVhcC5wdXNoKG5vZGUpO1xuICBhOiBmb3IgKDsgMCA8IGluZGV4OyApIHtcbiAgICB2YXIgcGFyZW50SW5kZXggPSAoaW5kZXggLSAxKSA+Pj4gMSxcbiAgICAgIHBhcmVudCA9IGhlYXBbcGFyZW50SW5kZXhdO1xuICAgIGlmICgwIDwgY29tcGFyZShwYXJlbnQsIG5vZGUpKVxuICAgICAgKGhlYXBbcGFyZW50SW5kZXhdID0gbm9kZSksIChoZWFwW2luZGV4XSA9IHBhcmVudCksIChpbmRleCA9IHBhcmVudEluZGV4KTtcbiAgICBlbHNlIGJyZWFrIGE7XG4gIH1cbn1cbmZ1bmN0aW9uIHBlZWsoaGVhcCkge1xuICByZXR1cm4gMCA9PT0gaGVhcC5sZW5ndGggPyBudWxsIDogaGVhcFswXTtcbn1cbmZ1bmN0aW9uIHBvcChoZWFwKSB7XG4gIGlmICgwID09PSBoZWFwLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gIHZhciBmaXJzdCA9IGhlYXBbMF0sXG4gICAgbGFzdCA9IGhlYXAucG9wKCk7XG4gIGlmIChsYXN0ICE9PSBmaXJzdCkge1xuICAgIGhlYXBbMF0gPSBsYXN0O1xuICAgIGE6IGZvciAoXG4gICAgICB2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBoZWFwLmxlbmd0aCwgaGFsZkxlbmd0aCA9IGxlbmd0aCA+Pj4gMTtcbiAgICAgIGluZGV4IDwgaGFsZkxlbmd0aDtcblxuICAgICkge1xuICAgICAgdmFyIGxlZnRJbmRleCA9IDIgKiAoaW5kZXggKyAxKSAtIDEsXG4gICAgICAgIGxlZnQgPSBoZWFwW2xlZnRJbmRleF0sXG4gICAgICAgIHJpZ2h0SW5kZXggPSBsZWZ0SW5kZXggKyAxLFxuICAgICAgICByaWdodCA9IGhlYXBbcmlnaHRJbmRleF07XG4gICAgICBpZiAoMCA+IGNvbXBhcmUobGVmdCwgbGFzdCkpXG4gICAgICAgIHJpZ2h0SW5kZXggPCBsZW5ndGggJiYgMCA+IGNvbXBhcmUocmlnaHQsIGxlZnQpXG4gICAgICAgICAgPyAoKGhlYXBbaW5kZXhdID0gcmlnaHQpLFxuICAgICAgICAgICAgKGhlYXBbcmlnaHRJbmRleF0gPSBsYXN0KSxcbiAgICAgICAgICAgIChpbmRleCA9IHJpZ2h0SW5kZXgpKVxuICAgICAgICAgIDogKChoZWFwW2luZGV4XSA9IGxlZnQpLFxuICAgICAgICAgICAgKGhlYXBbbGVmdEluZGV4XSA9IGxhc3QpLFxuICAgICAgICAgICAgKGluZGV4ID0gbGVmdEluZGV4KSk7XG4gICAgICBlbHNlIGlmIChyaWdodEluZGV4IDwgbGVuZ3RoICYmIDAgPiBjb21wYXJlKHJpZ2h0LCBsYXN0KSlcbiAgICAgICAgKGhlYXBbaW5kZXhdID0gcmlnaHQpLCAoaGVhcFtyaWdodEluZGV4XSA9IGxhc3QpLCAoaW5kZXggPSByaWdodEluZGV4KTtcbiAgICAgIGVsc2UgYnJlYWsgYTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpcnN0O1xufVxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIHZhciBkaWZmID0gYS5zb3J0SW5kZXggLSBiLnNvcnRJbmRleDtcbiAgcmV0dXJuIDAgIT09IGRpZmYgPyBkaWZmIDogYS5pZCAtIGIuaWQ7XG59XG5leHBvcnRzLnVuc3RhYmxlX25vdyA9IHZvaWQgMDtcbmlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgcGVyZm9ybWFuY2UgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcGVyZm9ybWFuY2Uubm93KSB7XG4gIHZhciBsb2NhbFBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NhbFBlcmZvcm1hbmNlLm5vdygpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIGxvY2FsRGF0ZSA9IERhdGUsXG4gICAgaW5pdGlhbFRpbWUgPSBsb2NhbERhdGUubm93KCk7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NhbERhdGUubm93KCkgLSBpbml0aWFsVGltZTtcbiAgfTtcbn1cbnZhciB0YXNrUXVldWUgPSBbXSxcbiAgdGltZXJRdWV1ZSA9IFtdLFxuICB0YXNrSWRDb3VudGVyID0gMSxcbiAgY3VycmVudFRhc2sgPSBudWxsLFxuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IDMsXG4gIGlzUGVyZm9ybWluZ1dvcmsgPSAhMSxcbiAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMSxcbiAgaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICExLFxuICBsb2NhbFNldFRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IG51bGwsXG4gIGxvY2FsQ2xlYXJUaW1lb3V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2xlYXJUaW1lb3V0ID8gY2xlYXJUaW1lb3V0IDogbnVsbCxcbiAgbG9jYWxTZXRJbW1lZGlhdGUgPSBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2Ygc2V0SW1tZWRpYXRlID8gc2V0SW1tZWRpYXRlIDogbnVsbDtcbmZ1bmN0aW9uIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpIHtcbiAgZm9yICh2YXIgdGltZXIgPSBwZWVrKHRpbWVyUXVldWUpOyBudWxsICE9PSB0aW1lcjsgKSB7XG4gICAgaWYgKG51bGwgPT09IHRpbWVyLmNhbGxiYWNrKSBwb3AodGltZXJRdWV1ZSk7XG4gICAgZWxzZSBpZiAodGltZXIuc3RhcnRUaW1lIDw9IGN1cnJlbnRUaW1lKVxuICAgICAgcG9wKHRpbWVyUXVldWUpLFxuICAgICAgICAodGltZXIuc29ydEluZGV4ID0gdGltZXIuZXhwaXJhdGlvblRpbWUpLFxuICAgICAgICBwdXNoKHRhc2tRdWV1ZSwgdGltZXIpO1xuICAgIGVsc2UgYnJlYWs7XG4gICAgdGltZXIgPSBwZWVrKHRpbWVyUXVldWUpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVUaW1lb3V0KGN1cnJlbnRUaW1lKSB7XG4gIGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgPSAhMTtcbiAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gIGlmICghaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQpXG4gICAgaWYgKG51bGwgIT09IHBlZWsodGFza1F1ZXVlKSlcbiAgICAgIChpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICEwKSwgcmVxdWVzdEhvc3RDYWxsYmFjaygpO1xuICAgIGVsc2Uge1xuICAgICAgdmFyIGZpcnN0VGltZXIgPSBwZWVrKHRpbWVyUXVldWUpO1xuICAgICAgbnVsbCAhPT0gZmlyc3RUaW1lciAmJlxuICAgICAgICByZXF1ZXN0SG9zdFRpbWVvdXQoaGFuZGxlVGltZW91dCwgZmlyc3RUaW1lci5zdGFydFRpbWUgLSBjdXJyZW50VGltZSk7XG4gICAgfVxufVxudmFyIGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITEsXG4gIHRhc2tUaW1lb3V0SUQgPSAtMSxcbiAgZnJhbWVJbnRlcnZhbCA9IDUsXG4gIHN0YXJ0VGltZSA9IC0xO1xuZnVuY3Rpb24gc2hvdWxkWWllbGRUb0hvc3QoKSB7XG4gIHJldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpIC0gc3RhcnRUaW1lIDwgZnJhbWVJbnRlcnZhbCA/ICExIDogITA7XG59XG5mdW5jdGlvbiBwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKSB7XG4gIGlmIChpc01lc3NhZ2VMb29wUnVubmluZykge1xuICAgIHZhciBjdXJyZW50VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG4gICAgc3RhcnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgdmFyIGhhc01vcmVXb3JrID0gITA7XG4gICAgdHJ5IHtcbiAgICAgIGE6IHtcbiAgICAgICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMTtcbiAgICAgICAgaXNIb3N0VGltZW91dFNjaGVkdWxlZCAmJlxuICAgICAgICAgICgoaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICExKSxcbiAgICAgICAgICBsb2NhbENsZWFyVGltZW91dCh0YXNrVGltZW91dElEKSxcbiAgICAgICAgICAodGFza1RpbWVvdXRJRCA9IC0xKSk7XG4gICAgICAgIGlzUGVyZm9ybWluZ1dvcmsgPSAhMDtcbiAgICAgICAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGI6IHtcbiAgICAgICAgICAgIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgY3VycmVudFRhc2sgPSBwZWVrKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnRUYXNrICYmXG4gICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgY3VycmVudFRhc2suZXhwaXJhdGlvblRpbWUgPiBjdXJyZW50VGltZSAmJiBzaG91bGRZaWVsZFRvSG9zdCgpXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjdXJyZW50VGFzay5jYWxsYmFjaztcbiAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRhc2suY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gY3VycmVudFRhc2sucHJpb3JpdHlMZXZlbDtcbiAgICAgICAgICAgICAgICB2YXIgY29udGludWF0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayhcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmV4cGlyYXRpb25UaW1lIDw9IGN1cnJlbnRUaW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG4gICAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRpbnVhdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5jYWxsYmFjayA9IGNvbnRpbnVhdGlvbkNhbGxiYWNrO1xuICAgICAgICAgICAgICAgICAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgICBoYXNNb3JlV29yayA9ICEwO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFRhc2sgPT09IHBlZWsodGFza1F1ZXVlKSAmJiBwb3AodGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHBvcCh0YXNrUXVldWUpO1xuICAgICAgICAgICAgICBjdXJyZW50VGFzayA9IHBlZWsodGFza1F1ZXVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50VGFzaykgaGFzTW9yZVdvcmsgPSAhMDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgZmlyc3RUaW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gICAgICAgICAgICAgIG51bGwgIT09IGZpcnN0VGltZXIgJiZcbiAgICAgICAgICAgICAgICByZXF1ZXN0SG9zdFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICBoYW5kbGVUaW1lb3V0LFxuICAgICAgICAgICAgICAgICAgZmlyc3RUaW1lci5zdGFydFRpbWUgLSBjdXJyZW50VGltZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGhhc01vcmVXb3JrID0gITE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgKGN1cnJlbnRUYXNrID0gbnVsbCksXG4gICAgICAgICAgICAoY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWwpLFxuICAgICAgICAgICAgKGlzUGVyZm9ybWluZ1dvcmsgPSAhMSk7XG4gICAgICAgIH1cbiAgICAgICAgaGFzTW9yZVdvcmsgPSB2b2lkIDA7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGhhc01vcmVXb3JrXG4gICAgICAgID8gc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKVxuICAgICAgICA6IChpc01lc3NhZ2VMb29wUnVubmluZyA9ICExKTtcbiAgICB9XG4gIH1cbn1cbnZhciBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZTtcbmlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBsb2NhbFNldEltbWVkaWF0ZSlcbiAgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9jYWxTZXRJbW1lZGlhdGUocGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKTtcbiAgfTtcbmVsc2UgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpLFxuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZTtcbiAgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcG9ydC5wb3N0TWVzc2FnZShudWxsKTtcbiAgfTtcbn0gZWxzZVxuICBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2NhbFNldFRpbWVvdXQocGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lLCAwKTtcbiAgfTtcbmZ1bmN0aW9uIHJlcXVlc3RIb3N0Q2FsbGJhY2soKSB7XG4gIGlzTWVzc2FnZUxvb3BSdW5uaW5nIHx8XG4gICAgKChpc01lc3NhZ2VMb29wUnVubmluZyA9ICEwKSwgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKSk7XG59XG5mdW5jdGlvbiByZXF1ZXN0SG9zdFRpbWVvdXQoY2FsbGJhY2ssIG1zKSB7XG4gIHRhc2tUaW1lb3V0SUQgPSBsb2NhbFNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMudW5zdGFibGVfbm93KCkpO1xuICB9LCBtcyk7XG59XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eSA9IDU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5ID0gMTtcbmV4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHkgPSA0O1xuZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSA9IDM7XG5leHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZyA9IG51bGw7XG5leHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5ID0gMjtcbmV4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sgPSBmdW5jdGlvbiAodGFzaykge1xuICB0YXNrLmNhbGxiYWNrID0gbnVsbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uID0gZnVuY3Rpb24gKCkge1xuICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCB8fFxuICAgIGlzUGVyZm9ybWluZ1dvcmsgfHxcbiAgICAoKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLCByZXF1ZXN0SG9zdENhbGxiYWNrKCkpO1xufTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGUgPSBmdW5jdGlvbiAoZnBzKSB7XG4gIDAgPiBmcHMgfHwgMTI1IDwgZnBzXG4gICAgPyBjb25zb2xlLmVycm9yKFxuICAgICAgICBcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiXG4gICAgICApXG4gICAgOiAoZnJhbWVJbnRlcnZhbCA9IDAgPCBmcHMgPyBNYXRoLmZsb29yKDFlMyAvIGZwcykgOiA1KTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY3VycmVudFByaW9yaXR5TGV2ZWw7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHBlZWsodGFza1F1ZXVlKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX25leHQgPSBmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gIHN3aXRjaCAoY3VycmVudFByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICAgIHZhciBwcmlvcml0eUxldmVsID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIH1cbiAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByaW9yaXR5TGV2ZWw7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV2ZW50SGFuZGxlcigpO1xuICB9IGZpbmFsbHkge1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQgPSBmdW5jdGlvbiAoKSB7fTtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5ID0gZnVuY3Rpb24gKHByaW9yaXR5TGV2ZWwsIGV2ZW50SGFuZGxlcikge1xuICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA1OlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSAzO1xuICB9XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmlvcml0eUxldmVsO1xuICB0cnkge1xuICAgIHJldHVybiBldmVudEhhbmRsZXIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgfVxufTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayA9IGZ1bmN0aW9uIChcbiAgcHJpb3JpdHlMZXZlbCxcbiAgY2FsbGJhY2ssXG4gIG9wdGlvbnNcbikge1xuICB2YXIgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zXG4gICAgPyAoKG9wdGlvbnMgPSBvcHRpb25zLmRlbGF5KSxcbiAgICAgIChvcHRpb25zID1cbiAgICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgMCA8IG9wdGlvbnNcbiAgICAgICAgICA/IGN1cnJlbnRUaW1lICsgb3B0aW9uc1xuICAgICAgICAgIDogY3VycmVudFRpbWUpKVxuICAgIDogKG9wdGlvbnMgPSBjdXJyZW50VGltZSk7XG4gIHN3aXRjaCAocHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB0aW1lb3V0ID0gLTE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB0aW1lb3V0ID0gMjUwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgdGltZW91dCA9IDEwNzM3NDE4MjM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB0aW1lb3V0ID0gMWU0O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRpbWVvdXQgPSA1ZTM7XG4gIH1cbiAgdGltZW91dCA9IG9wdGlvbnMgKyB0aW1lb3V0O1xuICBwcmlvcml0eUxldmVsID0ge1xuICAgIGlkOiB0YXNrSWRDb3VudGVyKyssXG4gICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgIHByaW9yaXR5TGV2ZWw6IHByaW9yaXR5TGV2ZWwsXG4gICAgc3RhcnRUaW1lOiBvcHRpb25zLFxuICAgIGV4cGlyYXRpb25UaW1lOiB0aW1lb3V0LFxuICAgIHNvcnRJbmRleDogLTFcbiAgfTtcbiAgb3B0aW9ucyA+IGN1cnJlbnRUaW1lXG4gICAgPyAoKHByaW9yaXR5TGV2ZWwuc29ydEluZGV4ID0gb3B0aW9ucyksXG4gICAgICBwdXNoKHRpbWVyUXVldWUsIHByaW9yaXR5TGV2ZWwpLFxuICAgICAgbnVsbCA9PT0gcGVlayh0YXNrUXVldWUpICYmXG4gICAgICAgIHByaW9yaXR5TGV2ZWwgPT09IHBlZWsodGltZXJRdWV1ZSkgJiZcbiAgICAgICAgKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWRcbiAgICAgICAgICA/IChsb2NhbENsZWFyVGltZW91dCh0YXNrVGltZW91dElEKSwgKHRhc2tUaW1lb3V0SUQgPSAtMSkpXG4gICAgICAgICAgOiAoaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICEwKSxcbiAgICAgICAgcmVxdWVzdEhvc3RUaW1lb3V0KGhhbmRsZVRpbWVvdXQsIG9wdGlvbnMgLSBjdXJyZW50VGltZSkpKVxuICAgIDogKChwcmlvcml0eUxldmVsLnNvcnRJbmRleCA9IHRpbWVvdXQpLFxuICAgICAgcHVzaCh0YXNrUXVldWUsIHByaW9yaXR5TGV2ZWwpLFxuICAgICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgfHxcbiAgICAgICAgaXNQZXJmb3JtaW5nV29yayB8fFxuICAgICAgICAoKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLCByZXF1ZXN0SG9zdENhbGxiYWNrKCkpKTtcbiAgcmV0dXJuIHByaW9yaXR5TGV2ZWw7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCA9IHNob3VsZFlpZWxkVG9Ib3N0O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIHBhcmVudFByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwYXJlbnRQcmlvcml0eUxldmVsO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gICAgfVxuICB9O1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICB2YXIgdXJsID0gXCJodHRwczovL3JlYWN0LmRldi9lcnJvcnMvXCIgKyBjb2RlO1xuICBpZiAoMSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB1cmwgKz0gXCI/YXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1sxXSk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICB1cmwgKz0gXCImYXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIiArXG4gICAgY29kZSArXG4gICAgXCI7IHZpc2l0IFwiICtcbiAgICB1cmwgK1xuICAgIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIlxuICApO1xufVxuZnVuY3Rpb24gbm9vcCgpIHt9XG52YXIgSW50ZXJuYWxzID0ge1xuICAgIGQ6IHtcbiAgICAgIGY6IG5vb3AsXG4gICAgICByOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTIyKSk7XG4gICAgICB9LFxuICAgICAgRDogbm9vcCxcbiAgICAgIEM6IG5vb3AsXG4gICAgICBMOiBub29wLFxuICAgICAgbTogbm9vcCxcbiAgICAgIFg6IG5vb3AsXG4gICAgICBTOiBub29wLFxuICAgICAgTTogbm9vcFxuICAgIH0sXG4gICAgcDogMCxcbiAgICBmaW5kRE9NTm9kZTogbnVsbFxuICB9LFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik7XG5mdW5jdGlvbiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVySW5mbywgaW1wbGVtZW50YXRpb24pIHtcbiAgdmFyIGtleSA9XG4gICAgMyA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbM10gPyBhcmd1bWVudHNbM10gOiBudWxsO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9QT1JUQUxfVFlQRSxcbiAgICBrZXk6IG51bGwgPT0ga2V5ID8gbnVsbCA6IFwiXCIgKyBrZXksXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lckluZm86IGNvbnRhaW5lckluZm8sXG4gICAgaW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uXG4gIH07XG59XG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICBSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREU7XG5mdW5jdGlvbiBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBpbnB1dCkge1xuICBpZiAoXCJmb250XCIgPT09IGFzKSByZXR1cm4gXCJcIjtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBpbnB1dClcbiAgICByZXR1cm4gXCJ1c2UtY3JlZGVudGlhbHNcIiA9PT0gaW5wdXQgPyBpbnB1dCA6IFwiXCI7XG59XG5leHBvcnRzLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSA9XG4gIEludGVybmFscztcbmV4cG9ydHMuY3JlYXRlUG9ydGFsID0gZnVuY3Rpb24gKGNoaWxkcmVuLCBjb250YWluZXIpIHtcbiAgdmFyIGtleSA9XG4gICAgMiA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuICBpZiAoXG4gICAgIWNvbnRhaW5lciB8fFxuICAgICgxICE9PSBjb250YWluZXIubm9kZVR5cGUgJiZcbiAgICAgIDkgIT09IGNvbnRhaW5lci5ub2RlVHlwZSAmJlxuICAgICAgMTEgIT09IGNvbnRhaW5lci5ub2RlVHlwZSlcbiAgKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHJldHVybiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVyLCBudWxsLCBrZXkpO1xufTtcbmV4cG9ydHMuZmx1c2hTeW5jID0gZnVuY3Rpb24gKGZuKSB7XG4gIHZhciBwcmV2aW91c1RyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIHByZXZpb3VzVXBkYXRlUHJpb3JpdHkgPSBJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICBpZiAoKChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksIChJbnRlcm5hbHMucCA9IDIpLCBmbikpIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldmlvdXNUcmFuc2l0aW9uKSxcbiAgICAgIChJbnRlcm5hbHMucCA9IHByZXZpb3VzVXBkYXRlUHJpb3JpdHkpLFxuICAgICAgSW50ZXJuYWxzLmQuZigpO1xuICB9XG59O1xuZXhwb3J0cy5wcmVjb25uZWN0ID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiZcbiAgICAob3B0aW9uc1xuICAgICAgPyAoKG9wdGlvbnMgPSBvcHRpb25zLmNyb3NzT3JpZ2luKSxcbiAgICAgICAgKG9wdGlvbnMgPVxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zXG4gICAgICAgICAgICA/IFwidXNlLWNyZWRlbnRpYWxzXCIgPT09IG9wdGlvbnNcbiAgICAgICAgICAgICAgPyBvcHRpb25zXG4gICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgOiB2b2lkIDApKVxuICAgICAgOiAob3B0aW9ucyA9IG51bGwpLFxuICAgIEludGVybmFscy5kLkMoaHJlZiwgb3B0aW9ucykpO1xufTtcbmV4cG9ydHMucHJlZmV0Y2hETlMgPSBmdW5jdGlvbiAoaHJlZikge1xuICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBJbnRlcm5hbHMuZC5EKGhyZWYpO1xufTtcbmV4cG9ydHMucHJlaW5pdCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBvcHRpb25zICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzKSB7XG4gICAgdmFyIGFzID0gb3B0aW9ucy5hcyxcbiAgICAgIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhhcywgb3B0aW9ucy5jcm9zc09yaWdpbiksXG4gICAgICBpbnRlZ3JpdHkgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgIGZldGNoUHJpb3JpdHkgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA6IHZvaWQgMDtcbiAgICBcInN0eWxlXCIgPT09IGFzXG4gICAgICA/IEludGVybmFscy5kLlMoXG4gICAgICAgICAgaHJlZixcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5wcmVjZWRlbmNlID8gb3B0aW9ucy5wcmVjZWRlbmNlIDogdm9pZCAwLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgICAgZmV0Y2hQcmlvcml0eTogZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgOiBcInNjcmlwdFwiID09PSBhcyAmJlxuICAgICAgICBJbnRlcm5hbHMuZC5YKGhyZWYsIHtcbiAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgaW50ZWdyaXR5OiBpbnRlZ3JpdHksXG4gICAgICAgICAgZmV0Y2hQcmlvcml0eTogZmV0Y2hQcmlvcml0eSxcbiAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwXG4gICAgICAgIH0pO1xuICB9XG59O1xuZXhwb3J0cy5wcmVpbml0TW9kdWxlID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmKVxuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zKSB7XG4gICAgICBpZiAobnVsbCA9PSBvcHRpb25zLmFzIHx8IFwic2NyaXB0XCIgPT09IG9wdGlvbnMuYXMpIHtcbiAgICAgICAgdmFyIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhcbiAgICAgICAgICBvcHRpb25zLmFzLFxuICAgICAgICAgIG9wdGlvbnMuY3Jvc3NPcmlnaW5cbiAgICAgICAgKTtcbiAgICAgICAgSW50ZXJuYWxzLmQuTShocmVmLCB7XG4gICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgIGludGVncml0eTpcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwLFxuICAgICAgICAgIG5vbmNlOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5ub25jZSA/IG9wdGlvbnMubm9uY2UgOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIG51bGwgPT0gb3B0aW9ucyAmJiBJbnRlcm5hbHMuZC5NKGhyZWYpO1xufTtcbmV4cG9ydHMucHJlbG9hZCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJlxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvcHRpb25zICYmXG4gICAgbnVsbCAhPT0gb3B0aW9ucyAmJlxuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzXG4gICkge1xuICAgIHZhciBhcyA9IG9wdGlvbnMuYXMsXG4gICAgICBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pO1xuICAgIEludGVybmFscy5kLkwoaHJlZiwgYXMsIHtcbiAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgIGludGVncml0eTpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDAsXG4gICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMudHlwZSA/IG9wdGlvbnMudHlwZSA6IHZvaWQgMCxcbiAgICAgIGZldGNoUHJpb3JpdHk6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA/IG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgcmVmZXJyZXJQb2xpY3k6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgPyBvcHRpb25zLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgOiB2b2lkIDAsXG4gICAgICBpbWFnZVNyY1NldDpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTcmNTZXQgPyBvcHRpb25zLmltYWdlU3JjU2V0IDogdm9pZCAwLFxuICAgICAgaW1hZ2VTaXplczpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTaXplcyA/IG9wdGlvbnMuaW1hZ2VTaXplcyA6IHZvaWQgMCxcbiAgICAgIG1lZGlhOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5tZWRpYSA/IG9wdGlvbnMubWVkaWEgOiB2b2lkIDBcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMucHJlbG9hZE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZilcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdmFyIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhvcHRpb25zLmFzLCBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICAgIEludGVybmFscy5kLm0oaHJlZiwge1xuICAgICAgICBhczpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcyAmJiBcInNjcmlwdFwiICE9PSBvcHRpb25zLmFzXG4gICAgICAgICAgICA/IG9wdGlvbnMuYXNcbiAgICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgIGludGVncml0eTpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgfSBlbHNlIEludGVybmFscy5kLm0oaHJlZik7XG59O1xuZXhwb3J0cy5yZXF1ZXN0Rm9ybVJlc2V0ID0gZnVuY3Rpb24gKGZvcm0pIHtcbiAgSW50ZXJuYWxzLmQucihmb3JtKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24gKGZuLCBhKSB7XG4gIHJldHVybiBmbihhKTtcbn07XG5leHBvcnRzLnVzZUZvcm1TdGF0ZSA9IGZ1bmN0aW9uIChhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUZvcm1TdGF0ZShhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKTtcbn07XG5leHBvcnRzLnVzZUZvcm1TdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzKCk7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4wLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cblwidXNlIHN0cmljdFwiO1xudmFyIFNjaGVkdWxlciA9IHJlcXVpcmUoXCJzY2hlZHVsZXJcIiksXG4gIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpLFxuICBSZWFjdERPTSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgdmFyIHVybCA9IFwiaHR0cHM6Ly9yZWFjdC5kZXYvZXJyb3JzL1wiICsgY29kZTtcbiAgaWYgKDEgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdXJsICs9IFwiP2FyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbMV0pO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgdXJsICs9IFwiJmFyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAoXG4gICAgXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIgK1xuICAgIGNvZGUgK1xuICAgIFwiOyB2aXNpdCBcIiArXG4gICAgdXJsICtcbiAgICBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRDb250YWluZXIobm9kZSkge1xuICByZXR1cm4gIShcbiAgICAhbm9kZSB8fFxuICAgICgxICE9PSBub2RlLm5vZGVUeXBlICYmIDkgIT09IG5vZGUubm9kZVR5cGUgJiYgMTEgIT09IG5vZGUubm9kZVR5cGUpXG4gICk7XG59XG52YXIgUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLFxuICBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QudHJhbnNpdGlvbmFsLmVsZW1lbnRcIiksXG4gIFJFQUNUX1BPUlRBTF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxcbiAgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxcbiAgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxcbiAgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxcbiAgUkVBQ1RfUFJPVklERVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxcbiAgUkVBQ1RfQ09OU1VNRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb25zdW1lclwiKSxcbiAgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksXG4gIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksXG4gIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLFxuICBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7XG5TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7XG5TeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7XG5TeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTtcbnZhciBSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIiksXG4gIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobnVsbCA9PT0gbWF5YmVJdGVyYWJsZSB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSkgcmV0dXJuIG51bGw7XG4gIG1heWJlSXRlcmFibGUgPVxuICAgIChNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgIG1heWJlSXRlcmFibGVbXCJAQGl0ZXJhdG9yXCJdO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSA/IG1heWJlSXRlcmFibGUgOiBudWxsO1xufVxudmFyIFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UgPSBTeW1ib2wuZm9yKFwicmVhY3QuY2xpZW50LnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKSB7XG4gIGlmIChudWxsID09IHR5cGUpIHJldHVybiBudWxsO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZSlcbiAgICByZXR1cm4gdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRVxuICAgICAgPyBudWxsXG4gICAgICA6IHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdHlwZSkgcmV0dXJuIHR5cGU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgIHJldHVybiBcIkZyYWdtZW50XCI7XG4gICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgIHJldHVybiBcIlBvcnRhbFwiO1xuICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgIHJldHVybiBcIlByb2ZpbGVyXCI7XG4gICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgcmV0dXJuIFwiU3RyaWN0TW9kZVwiO1xuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgIHJldHVybiBcIlN1c3BlbnNlXCI7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gXCJTdXNwZW5zZUxpc3RcIjtcbiAgfVxuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgcmV0dXJuICh0eXBlLmRpc3BsYXlOYW1lIHx8IFwiQ29udGV4dFwiKSArIFwiLlByb3ZpZGVyXCI7XG4gICAgICBjYXNlIFJFQUNUX0NPTlNVTUVSX1RZUEU6XG4gICAgICAgIHJldHVybiAodHlwZS5fY29udGV4dC5kaXNwbGF5TmFtZSB8fCBcIkNvbnRleHRcIikgKyBcIi5Db25zdW1lclwiO1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICB2YXIgaW5uZXJUeXBlID0gdHlwZS5yZW5kZXI7XG4gICAgICAgIHR5cGUgPSB0eXBlLmRpc3BsYXlOYW1lO1xuICAgICAgICB0eXBlIHx8XG4gICAgICAgICAgKCh0eXBlID0gaW5uZXJUeXBlLmRpc3BsYXlOYW1lIHx8IGlubmVyVHlwZS5uYW1lIHx8IFwiXCIpLFxuICAgICAgICAgICh0eXBlID0gXCJcIiAhPT0gdHlwZSA/IFwiRm9yd2FyZFJlZihcIiArIHR5cGUgKyBcIilcIiA6IFwiRm9yd2FyZFJlZlwiKSk7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKGlubmVyVHlwZSA9IHR5cGUuZGlzcGxheU5hbWUgfHwgbnVsbCksXG4gICAgICAgICAgbnVsbCAhPT0gaW5uZXJUeXBlXG4gICAgICAgICAgICA/IGlubmVyVHlwZVxuICAgICAgICAgICAgOiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZS50eXBlKSB8fCBcIk1lbW9cIlxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIGlubmVyVHlwZSA9IHR5cGUuX3BheWxvYWQ7XG4gICAgICAgIHR5cGUgPSB0eXBlLl9pbml0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZShpbm5lclR5cGUpKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzID1cbiAgICBSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUsXG4gIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24sXG4gIHByZWZpeCxcbiAgc3VmZml4O1xuZnVuY3Rpb24gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSkge1xuICBpZiAodm9pZCAwID09PSBwcmVmaXgpXG4gICAgdHJ5IHtcbiAgICAgIHRocm93IEVycm9yKCk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgIHByZWZpeCA9IChtYXRjaCAmJiBtYXRjaFsxXSkgfHwgXCJcIjtcbiAgICAgIHN1ZmZpeCA9XG4gICAgICAgIC0xIDwgeC5zdGFjay5pbmRleE9mKFwiXFxuICAgIGF0XCIpXG4gICAgICAgICAgPyBcIiAoPGFub255bW91cz4pXCJcbiAgICAgICAgICA6IC0xIDwgeC5zdGFjay5pbmRleE9mKFwiQFwiKVxuICAgICAgICAgICAgPyBcIkB1bmtub3duOjA6MFwiXG4gICAgICAgICAgICA6IFwiXCI7XG4gICAgfVxuICByZXR1cm4gXCJcXG5cIiArIHByZWZpeCArIG5hbWUgKyBzdWZmaXg7XG59XG52YXIgcmVlbnRyeSA9ICExO1xuZnVuY3Rpb24gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmbiwgY29uc3RydWN0KSB7XG4gIGlmICghZm4gfHwgcmVlbnRyeSkgcmV0dXJuIFwiXCI7XG4gIHJlZW50cnkgPSAhMDtcbiAgdmFyIHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtcbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgdmFyIFJ1bkluUm9vdEZyYW1lID0ge1xuICAgICAgRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGNvbnN0cnVjdCkge1xuICAgICAgICAgICAgdmFyIEZha2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZha2UucHJvdG90eXBlLCBcInByb3BzXCIsIHtcbiAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIFJlZmxlY3QgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChGYWtlLCBbXSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbCA9IHg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgUmVmbGVjdC5jb25zdHJ1Y3QoZm4sIFtdLCBGYWtlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgRmFrZS5jYWxsKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKHgkMCkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2wgPSB4JDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm4uY2FsbChGYWtlLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgICB9IGNhdGNoICh4JDEpIHtcbiAgICAgICAgICAgICAgY29udHJvbCA9IHgkMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChGYWtlID0gZm4oKSkgJiZcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgRmFrZS5jYXRjaCAmJlxuICAgICAgICAgICAgICBGYWtlLmNhdGNoKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKHNhbXBsZSkge1xuICAgICAgICAgIGlmIChzYW1wbGUgJiYgY29udHJvbCAmJiBcInN0cmluZ1wiID09PSB0eXBlb2Ygc2FtcGxlLnN0YWNrKVxuICAgICAgICAgICAgcmV0dXJuIFtzYW1wbGUuc3RhY2ssIGNvbnRyb2wuc3RhY2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgICB9XG4gICAgfTtcbiAgICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QuZGlzcGxheU5hbWUgPVxuICAgICAgXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIjtcbiAgICB2YXIgbmFtZVByb3BEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgICAgIFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCxcbiAgICAgIFwibmFtZVwiXG4gICAgKTtcbiAgICBuYW1lUHJvcERlc2NyaXB0b3IgJiZcbiAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci5jb25maWd1cmFibGUgJiZcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LFxuICAgICAgICBcIm5hbWVcIixcbiAgICAgICAgeyB2YWx1ZTogXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIiB9XG4gICAgICApO1xuICAgIHZhciBfUnVuSW5Sb290RnJhbWUkRGV0ZXIgPSBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QoKSxcbiAgICAgIHNhbXBsZVN0YWNrID0gX1J1bkluUm9vdEZyYW1lJERldGVyWzBdLFxuICAgICAgY29udHJvbFN0YWNrID0gX1J1bkluUm9vdEZyYW1lJERldGVyWzFdO1xuICAgIGlmIChzYW1wbGVTdGFjayAmJiBjb250cm9sU3RhY2spIHtcbiAgICAgIHZhciBzYW1wbGVMaW5lcyA9IHNhbXBsZVN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuICAgICAgICBjb250cm9sTGluZXMgPSBjb250cm9sU3RhY2suc3BsaXQoXCJcXG5cIik7XG4gICAgICBmb3IgKFxuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPSBSdW5JblJvb3RGcmFtZSA9IDA7XG4gICAgICAgIFJ1bkluUm9vdEZyYW1lIDwgc2FtcGxlTGluZXMubGVuZ3RoICYmXG4gICAgICAgICFzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0uaW5jbHVkZXMoXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIik7XG5cbiAgICAgIClcbiAgICAgICAgUnVuSW5Sb290RnJhbWUrKztcbiAgICAgIGZvciAoXG4gICAgICAgIDtcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yIDwgY29udHJvbExpbmVzLmxlbmd0aCAmJlxuICAgICAgICAhY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl0uaW5jbHVkZXMoXG4gICAgICAgICAgXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIlxuICAgICAgICApO1xuXG4gICAgICApXG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvcisrO1xuICAgICAgaWYgKFxuICAgICAgICBSdW5JblJvb3RGcmFtZSA9PT0gc2FtcGxlTGluZXMubGVuZ3RoIHx8XG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9PT0gY29udHJvbExpbmVzLmxlbmd0aFxuICAgICAgKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIFJ1bkluUm9vdEZyYW1lID0gc2FtcGxlTGluZXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9IGNvbnRyb2xMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICAgIDEgPD0gUnVuSW5Sb290RnJhbWUgJiZcbiAgICAgICAgICAwIDw9IG5hbWVQcm9wRGVzY3JpcHRvciAmJlxuICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXSAhPT0gY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl07XG5cbiAgICAgICAgKVxuICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci0tO1xuICAgICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICAxIDw9IFJ1bkluUm9vdEZyYW1lICYmIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yO1xuICAgICAgICBSdW5JblJvb3RGcmFtZS0tLCBuYW1lUHJvcERlc2NyaXB0b3ItLVxuICAgICAgKVxuICAgICAgICBpZiAoc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdICE9PSBjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXSkge1xuICAgICAgICAgIGlmICgxICE9PSBSdW5JblJvb3RGcmFtZSB8fCAxICE9PSBuYW1lUHJvcERlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGRvXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoUnVuSW5Sb290RnJhbWUtLSxcbiAgICAgICAgICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3ItLSxcbiAgICAgICAgICAgICAgICAwID4gbmFtZVByb3BEZXNjcmlwdG9yIHx8XG4gICAgICAgICAgICAgICAgICBzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0gIT09XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWUgPVxuICAgICAgICAgICAgICAgICAgXCJcXG5cIiArXG4gICAgICAgICAgICAgICAgICBzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0ucmVwbGFjZShcIiBhdCBuZXcgXCIsIFwiIGF0IFwiKTtcbiAgICAgICAgICAgICAgICBmbi5kaXNwbGF5TmFtZSAmJlxuICAgICAgICAgICAgICAgICAgZnJhbWUuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSAmJlxuICAgICAgICAgICAgICAgICAgKGZyYW1lID0gZnJhbWUucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsIGZuLmRpc3BsYXlOYW1lKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoMSA8PSBSdW5JblJvb3RGcmFtZSAmJiAwIDw9IG5hbWVQcm9wRGVzY3JpcHRvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIChyZWVudHJ5ID0gITEpLCAoRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlKTtcbiAgfVxuICByZXR1cm4gKHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBmbiA/IGZuLmRpc3BsYXlOYW1lIHx8IGZuLm5hbWUgOiBcIlwiKVxuICAgID8gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUocHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSlcbiAgICA6IFwiXCI7XG59XG5mdW5jdGlvbiBkZXNjcmliZUZpYmVyKGZpYmVyKSB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShmaWJlci50eXBlKTtcbiAgICBjYXNlIDE2OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiTGF6eVwiKTtcbiAgICBjYXNlIDEzOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiU3VzcGVuc2VcIik7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShcIlN1c3BlbnNlTGlzdFwiKTtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJldHVybiAoZmliZXIgPSBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUsICExKSksIGZpYmVyO1xuICAgIGNhc2UgMTE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZmliZXIgPSBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUucmVuZGVyLCAhMSkpLCBmaWJlclxuICAgICAgKTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gKGZpYmVyID0gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmaWJlci50eXBlLCAhMCkpLCBmaWJlcjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZCh3b3JrSW5Qcm9ncmVzcykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gXCJcIjtcbiAgICBkb1xuICAgICAgKGluZm8gKz0gZGVzY3JpYmVGaWJlcih3b3JrSW5Qcm9ncmVzcykpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm4pO1xuICAgIHdoaWxlICh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcmV0dXJuIGluZm87XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICByZXR1cm4gXCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIiArIHgubWVzc2FnZSArIFwiXFxuXCIgKyB4LnN0YWNrO1xuICB9XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKSB7XG4gIHZhciBub2RlID0gZmliZXIsXG4gICAgbmVhcmVzdE1vdW50ZWQgPSBmaWJlcjtcbiAgaWYgKGZpYmVyLmFsdGVybmF0ZSkgZm9yICg7IG5vZGUucmV0dXJuOyApIG5vZGUgPSBub2RlLnJldHVybjtcbiAgZWxzZSB7XG4gICAgZmliZXIgPSBub2RlO1xuICAgIGRvXG4gICAgICAobm9kZSA9IGZpYmVyKSxcbiAgICAgICAgMCAhPT0gKG5vZGUuZmxhZ3MgJiA0MDk4KSAmJiAobmVhcmVzdE1vdW50ZWQgPSBub2RlLnJldHVybiksXG4gICAgICAgIChmaWJlciA9IG5vZGUucmV0dXJuKTtcbiAgICB3aGlsZSAoZmliZXIpO1xuICB9XG4gIHJldHVybiAzID09PSBub2RlLnRhZyA/IG5lYXJlc3RNb3VudGVkIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIoZmliZXIpIHtcbiAgaWYgKDEzID09PSBmaWJlci50YWcpIHtcbiAgICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgbnVsbCA9PT0gc3VzcGVuc2VTdGF0ZSAmJlxuICAgICAgKChmaWJlciA9IGZpYmVyLmFsdGVybmF0ZSksXG4gICAgICBudWxsICE9PSBmaWJlciAmJiAoc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGUpKTtcbiAgICBpZiAobnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSkgcmV0dXJuIHN1c3BlbnNlU3RhdGUuZGVoeWRyYXRlZDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGFzc2VydElzTW91bnRlZChmaWJlcikge1xuICBpZiAoZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcikgIT09IGZpYmVyKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG59XG5mdW5jdGlvbiBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoIWFsdGVybmF0ZSkge1xuICAgIGFsdGVybmF0ZSA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpO1xuICAgIGlmIChudWxsID09PSBhbHRlcm5hdGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgcmV0dXJuIGFsdGVybmF0ZSAhPT0gZmliZXIgPyBudWxsIDogZmliZXI7XG4gIH1cbiAgZm9yICh2YXIgYSA9IGZpYmVyLCBiID0gYWx0ZXJuYXRlOyA7ICkge1xuICAgIHZhciBwYXJlbnRBID0gYS5yZXR1cm47XG4gICAgaWYgKG51bGwgPT09IHBhcmVudEEpIGJyZWFrO1xuICAgIHZhciBwYXJlbnRCID0gcGFyZW50QS5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgPT09IHBhcmVudEIpIHtcbiAgICAgIGIgPSBwYXJlbnRBLnJldHVybjtcbiAgICAgIGlmIChudWxsICE9PSBiKSB7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAocGFyZW50QS5jaGlsZCA9PT0gcGFyZW50Qi5jaGlsZCkge1xuICAgICAgZm9yIChwYXJlbnRCID0gcGFyZW50QS5jaGlsZDsgcGFyZW50QjsgKSB7XG4gICAgICAgIGlmIChwYXJlbnRCID09PSBhKSByZXR1cm4gYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpLCBmaWJlcjtcbiAgICAgICAgaWYgKHBhcmVudEIgPT09IGIpIHJldHVybiBhc3NlcnRJc01vdW50ZWQocGFyZW50QSksIGFsdGVybmF0ZTtcbiAgICAgICAgcGFyZW50QiA9IHBhcmVudEIuc2libGluZztcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgfVxuICAgIGlmIChhLnJldHVybiAhPT0gYi5yZXR1cm4pIChhID0gcGFyZW50QSksIChiID0gcGFyZW50Qik7XG4gICAgZWxzZSB7XG4gICAgICBmb3IgKHZhciBkaWRGaW5kQ2hpbGQgPSAhMSwgY2hpbGQkMiA9IHBhcmVudEEuY2hpbGQ7IGNoaWxkJDI7ICkge1xuICAgICAgICBpZiAoY2hpbGQkMiA9PT0gYSkge1xuICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgICAgIGIgPSBwYXJlbnRCO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCQyID09PSBiKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgYSA9IHBhcmVudEI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQkMiA9IGNoaWxkJDIuc2libGluZztcbiAgICAgIH1cbiAgICAgIGlmICghZGlkRmluZENoaWxkKSB7XG4gICAgICAgIGZvciAoY2hpbGQkMiA9IHBhcmVudEIuY2hpbGQ7IGNoaWxkJDI7ICkge1xuICAgICAgICAgIGlmIChjaGlsZCQyID09PSBhKSB7XG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoaWxkJDIgPT09IGIpIHtcbiAgICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZCQyID0gY2hpbGQkMi5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGlkRmluZENoaWxkKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYS5hbHRlcm5hdGUgIT09IGIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTkwKSk7XG4gIH1cbiAgaWYgKDMgIT09IGEudGFnKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICByZXR1cm4gYS5zdGF0ZU5vZGUuY3VycmVudCA9PT0gYSA/IGZpYmVyIDogYWx0ZXJuYXRlO1xufVxuZnVuY3Rpb24gZmluZEN1cnJlbnRIb3N0RmliZXJJbXBsKG5vZGUpIHtcbiAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDI2ID09PSB0YWcgfHwgMjcgPT09IHRhZyB8fCA2ID09PSB0YWcpIHJldHVybiBub2RlO1xuICBmb3IgKG5vZGUgPSBub2RlLmNoaWxkOyBudWxsICE9PSBub2RlOyApIHtcbiAgICB0YWcgPSBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwobm9kZSk7XG4gICAgaWYgKG51bGwgIT09IHRhZykgcmV0dXJuIHRhZztcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIGlzQXJyYXlJbXBsID0gQXJyYXkuaXNBcnJheSxcbiAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMgPVxuICAgIFJlYWN0RE9NLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSxcbiAgc2hhcmVkTm90UGVuZGluZ09iamVjdCA9IHtcbiAgICBwZW5kaW5nOiAhMSxcbiAgICBkYXRhOiBudWxsLFxuICAgIG1ldGhvZDogbnVsbCxcbiAgICBhY3Rpb246IG51bGxcbiAgfSxcbiAgdmFsdWVTdGFjayA9IFtdLFxuICBpbmRleCA9IC0xO1xuZnVuY3Rpb24gY3JlYXRlQ3Vyc29yKGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4geyBjdXJyZW50OiBkZWZhdWx0VmFsdWUgfTtcbn1cbmZ1bmN0aW9uIHBvcChjdXJzb3IpIHtcbiAgMCA+IGluZGV4IHx8XG4gICAgKChjdXJzb3IuY3VycmVudCA9IHZhbHVlU3RhY2tbaW5kZXhdKSwgKHZhbHVlU3RhY2tbaW5kZXhdID0gbnVsbCksIGluZGV4LS0pO1xufVxuZnVuY3Rpb24gcHVzaChjdXJzb3IsIHZhbHVlKSB7XG4gIGluZGV4Kys7XG4gIHZhbHVlU3RhY2tbaW5kZXhdID0gY3Vyc29yLmN1cnJlbnQ7XG4gIGN1cnNvci5jdXJyZW50ID0gdmFsdWU7XG59XG52YXIgY29udGV4dFN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBjb250ZXh0RmliZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCk7XG5mdW5jdGlvbiBwdXNoSG9zdENvbnRhaW5lcihmaWJlciwgbmV4dFJvb3RJbnN0YW5jZSkge1xuICBwdXNoKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLCBuZXh0Um9vdEluc3RhbmNlKTtcbiAgcHVzaChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpO1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbnVsbCk7XG4gIGZpYmVyID0gbmV4dFJvb3RJbnN0YW5jZS5ub2RlVHlwZTtcbiAgc3dpdGNoIChmaWJlcikge1xuICAgIGNhc2UgOTpcbiAgICBjYXNlIDExOlxuICAgICAgbmV4dFJvb3RJbnN0YW5jZSA9IChuZXh0Um9vdEluc3RhbmNlID0gbmV4dFJvb3RJbnN0YW5jZS5kb2N1bWVudEVsZW1lbnQpXG4gICAgICAgID8gKG5leHRSb290SW5zdGFuY2UgPSBuZXh0Um9vdEluc3RhbmNlLm5hbWVzcGFjZVVSSSlcbiAgICAgICAgICA/IGdldE93bkhvc3RDb250ZXh0KG5leHRSb290SW5zdGFuY2UpXG4gICAgICAgICAgOiAwXG4gICAgICAgIDogMDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXG4gICAgICAgICgoZmliZXIgPSA4ID09PSBmaWJlciA/IG5leHRSb290SW5zdGFuY2UucGFyZW50Tm9kZSA6IG5leHRSb290SW5zdGFuY2UpLFxuICAgICAgICAobmV4dFJvb3RJbnN0YW5jZSA9IGZpYmVyLnRhZ05hbWUpLFxuICAgICAgICAoZmliZXIgPSBmaWJlci5uYW1lc3BhY2VVUkkpKVxuICAgICAgKVxuICAgICAgICAoZmliZXIgPSBnZXRPd25Ib3N0Q29udGV4dChmaWJlcikpLFxuICAgICAgICAgIChuZXh0Um9vdEluc3RhbmNlID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QoZmliZXIsIG5leHRSb290SW5zdGFuY2UpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgc3dpdGNoIChuZXh0Um9vdEluc3RhbmNlKSB7XG4gICAgICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICAgICAgbmV4dFJvb3RJbnN0YW5jZSA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgICAgICAgbmV4dFJvb3RJbnN0YW5jZSA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbmV4dFJvb3RJbnN0YW5jZSA9IDA7XG4gICAgICAgIH1cbiAgfVxuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yKTtcbiAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gcG9wSG9zdENvbnRhaW5lcigpIHtcbiAgcG9wKGNvbnRleHRTdGFja0N1cnNvcik7XG4gIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvcik7XG4gIHBvcChyb290SW5zdGFuY2VTdGFja0N1cnNvcik7XG59XG5mdW5jdGlvbiBwdXNoSG9zdENvbnRleHQoZmliZXIpIHtcbiAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJiBwdXNoKGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IsIGZpYmVyKTtcbiAgdmFyIGNvbnRleHQgPSBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudDtcbiAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGdldENoaWxkSG9zdENvbnRleHRQcm9kKGNvbnRleHQsIGZpYmVyLnR5cGUpO1xuICBjb250ZXh0ICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAocHVzaChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpLFxuICAgIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpKTtcbn1cbmZ1bmN0aW9uIHBvcEhvc3RDb250ZXh0KGZpYmVyKSB7XG4gIGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLmN1cnJlbnQgPT09IGZpYmVyICYmXG4gICAgKHBvcChjb250ZXh0U3RhY2tDdXJzb3IpLCBwb3AoY29udGV4dEZpYmVyU3RhY2tDdXJzb3IpKTtcbiAgaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvci5jdXJyZW50ID09PSBmaWJlciAmJlxuICAgIChwb3AoaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciksXG4gICAgKEhvc3RUcmFuc2l0aW9uQ29udGV4dC5fY3VycmVudFZhbHVlID0gc2hhcmVkTm90UGVuZGluZ09iamVjdCkpO1xufVxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbiAgc2NoZWR1bGVDYWxsYmFjayQzID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssXG4gIGNhbmNlbENhbGxiYWNrJDEgPSBTY2hlZHVsZXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssXG4gIHNob3VsZFlpZWxkID0gU2NoZWR1bGVyLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFxuICByZXF1ZXN0UGFpbnQgPSBTY2hlZHVsZXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFxuICBub3cgPSBTY2hlZHVsZXIudW5zdGFibGVfbm93LFxuICBnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCA9IFNjaGVkdWxlci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxcbiAgSW1tZWRpYXRlUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksXG4gIFVzZXJCbG9ja2luZ1ByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFxuICBOb3JtYWxQcmlvcml0eSQxID0gU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICBMb3dQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9Mb3dQcmlvcml0eSxcbiAgSWRsZVByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxcbiAgbG9nJDEgPSBTY2hlZHVsZXIubG9nLFxuICB1bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZSA9IFNjaGVkdWxlci51bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZSxcbiAgcmVuZGVyZXJJRCA9IG51bGwsXG4gIGluamVjdGVkSG9vayA9IG51bGw7XG5mdW5jdGlvbiBvbkNvbW1pdFJvb3Qocm9vdCkge1xuICBpZiAoaW5qZWN0ZWRIb29rICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyUm9vdClcbiAgICB0cnkge1xuICAgICAgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJSb290KFxuICAgICAgICByZW5kZXJlcklELFxuICAgICAgICByb290LFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIDEyOCA9PT0gKHJvb3QuY3VycmVudC5mbGFncyAmIDEyOClcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxuZnVuY3Rpb24gc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMobmV3SXNTdHJpY3RNb2RlKSB7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxvZyQxICYmIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlKG5ld0lzU3RyaWN0TW9kZSk7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLnNldFN0cmljdE1vZGUpXG4gICAgdHJ5IHtcbiAgICAgIGluamVjdGVkSG9vay5zZXRTdHJpY3RNb2RlKHJlbmRlcmVySUQsIG5ld0lzU3RyaWN0TW9kZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxudmFyIGNsejMyID0gTWF0aC5jbHozMiA/IE1hdGguY2x6MzIgOiBjbHozMkZhbGxiYWNrLFxuICBsb2cgPSBNYXRoLmxvZyxcbiAgTE4yID0gTWF0aC5MTjI7XG5mdW5jdGlvbiBjbHozMkZhbGxiYWNrKHgpIHtcbiAgeCA+Pj49IDA7XG4gIHJldHVybiAwID09PSB4ID8gMzIgOiAoMzEgLSAoKGxvZyh4KSAvIExOMikgfCAwKSkgfCAwO1xufVxudmFyIG5leHRUcmFuc2l0aW9uTGFuZSA9IDEyOCxcbiAgbmV4dFJldHJ5TGFuZSA9IDQxOTQzMDQ7XG5mdW5jdGlvbiBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhsYW5lcykge1xuICB2YXIgcGVuZGluZ1N5bmNMYW5lcyA9IGxhbmVzICYgNDI7XG4gIGlmICgwICE9PSBwZW5kaW5nU3luY0xhbmVzKSByZXR1cm4gcGVuZGluZ1N5bmNMYW5lcztcbiAgc3dpdGNoIChsYW5lcyAmIC1sYW5lcykge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiA0O1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gMTY7XG4gICAgY2FzZSAzMjpcbiAgICAgIHJldHVybiAzMjtcbiAgICBjYXNlIDY0OlxuICAgICAgcmV0dXJuIDY0O1xuICAgIGNhc2UgMTI4OlxuICAgIGNhc2UgMjU2OlxuICAgIGNhc2UgNTEyOlxuICAgIGNhc2UgMTAyNDpcbiAgICBjYXNlIDIwNDg6XG4gICAgY2FzZSA0MDk2OlxuICAgIGNhc2UgODE5MjpcbiAgICBjYXNlIDE2Mzg0OlxuICAgIGNhc2UgMzI3Njg6XG4gICAgY2FzZSA2NTUzNjpcbiAgICBjYXNlIDEzMTA3MjpcbiAgICBjYXNlIDI2MjE0NDpcbiAgICBjYXNlIDUyNDI4ODpcbiAgICBjYXNlIDEwNDg1NzY6XG4gICAgY2FzZSAyMDk3MTUyOlxuICAgICAgcmV0dXJuIGxhbmVzICYgNDE5NDE3NjtcbiAgICBjYXNlIDQxOTQzMDQ6XG4gICAgY2FzZSA4Mzg4NjA4OlxuICAgIGNhc2UgMTY3NzcyMTY6XG4gICAgY2FzZSAzMzU1NDQzMjpcbiAgICAgIHJldHVybiBsYW5lcyAmIDYyOTE0NTYwO1xuICAgIGNhc2UgNjcxMDg4NjQ6XG4gICAgICByZXR1cm4gNjcxMDg4NjQ7XG4gICAgY2FzZSAxMzQyMTc3Mjg6XG4gICAgICByZXR1cm4gMTM0MjE3NzI4O1xuICAgIGNhc2UgMjY4NDM1NDU2OlxuICAgICAgcmV0dXJuIDI2ODQzNTQ1NjtcbiAgICBjYXNlIDUzNjg3MDkxMjpcbiAgICAgIHJldHVybiA1MzY4NzA5MTI7XG4gICAgY2FzZSAxMDczNzQxODI0OlxuICAgICAgcmV0dXJuIDA7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBsYW5lcztcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TmV4dExhbmVzKHJvb3QsIHdpcExhbmVzKSB7XG4gIHZhciBwZW5kaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcbiAgaWYgKDAgPT09IHBlbmRpbmdMYW5lcykgcmV0dXJuIDA7XG4gIHZhciBuZXh0TGFuZXMgPSAwLFxuICAgIHN1c3BlbmRlZExhbmVzID0gcm9vdC5zdXNwZW5kZWRMYW5lcyxcbiAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXMsXG4gICAgd2FybUxhbmVzID0gcm9vdC53YXJtTGFuZXM7XG4gIHJvb3QgPSAwICE9PSByb290LmZpbmlzaGVkTGFuZXM7XG4gIHZhciBub25JZGxlUGVuZGluZ0xhbmVzID0gcGVuZGluZ0xhbmVzICYgMTM0MjE3NzI3O1xuICAwICE9PSBub25JZGxlUGVuZGluZ0xhbmVzXG4gICAgPyAoKHBlbmRpbmdMYW5lcyA9IG5vbklkbGVQZW5kaW5nTGFuZXMgJiB+c3VzcGVuZGVkTGFuZXMpLFxuICAgICAgMCAhPT0gcGVuZGluZ0xhbmVzXG4gICAgICAgID8gKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHBlbmRpbmdMYW5lcykpXG4gICAgICAgIDogKChwaW5nZWRMYW5lcyAmPSBub25JZGxlUGVuZGluZ0xhbmVzKSxcbiAgICAgICAgICAwICE9PSBwaW5nZWRMYW5lc1xuICAgICAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGluZ2VkTGFuZXMpKVxuICAgICAgICAgICAgOiByb290IHx8XG4gICAgICAgICAgICAgICgod2FybUxhbmVzID0gbm9uSWRsZVBlbmRpbmdMYW5lcyAmIH53YXJtTGFuZXMpLFxuICAgICAgICAgICAgICAwICE9PSB3YXJtTGFuZXMgJiZcbiAgICAgICAgICAgICAgICAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMod2FybUxhbmVzKSkpKSlcbiAgICA6ICgobm9uSWRsZVBlbmRpbmdMYW5lcyA9IHBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcyksXG4gICAgICAwICE9PSBub25JZGxlUGVuZGluZ0xhbmVzXG4gICAgICAgID8gKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKG5vbklkbGVQZW5kaW5nTGFuZXMpKVxuICAgICAgICA6IDAgIT09IHBpbmdlZExhbmVzXG4gICAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGluZ2VkTGFuZXMpKVxuICAgICAgICAgIDogcm9vdCB8fFxuICAgICAgICAgICAgKCh3YXJtTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiB+d2FybUxhbmVzKSxcbiAgICAgICAgICAgIDAgIT09IHdhcm1MYW5lcyAmJlxuICAgICAgICAgICAgICAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMod2FybUxhbmVzKSkpKTtcbiAgcmV0dXJuIDAgPT09IG5leHRMYW5lc1xuICAgID8gMFxuICAgIDogMCAhPT0gd2lwTGFuZXMgJiZcbiAgICAgICAgd2lwTGFuZXMgIT09IG5leHRMYW5lcyAmJlxuICAgICAgICAwID09PSAod2lwTGFuZXMgJiBzdXNwZW5kZWRMYW5lcykgJiZcbiAgICAgICAgKChzdXNwZW5kZWRMYW5lcyA9IG5leHRMYW5lcyAmIC1uZXh0TGFuZXMpLFxuICAgICAgICAod2FybUxhbmVzID0gd2lwTGFuZXMgJiAtd2lwTGFuZXMpLFxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA+PSB3YXJtTGFuZXMgfHxcbiAgICAgICAgICAoMzIgPT09IHN1c3BlbmRlZExhbmVzICYmIDAgIT09ICh3YXJtTGFuZXMgJiA0MTk0MTc2KSkpXG4gICAgICA/IHdpcExhbmVzXG4gICAgICA6IG5leHRMYW5lcztcbn1cbmZ1bmN0aW9uIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgcmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIChcbiAgICAwID09PVxuICAgIChyb290LnBlbmRpbmdMYW5lcyAmXG4gICAgICB+KHJvb3Quc3VzcGVuZGVkTGFuZXMgJiB+cm9vdC5waW5nZWRMYW5lcykgJlxuICAgICAgcmVuZGVyTGFuZXMpXG4gICk7XG59XG5mdW5jdGlvbiBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpIHtcbiAgc3dpdGNoIChsYW5lKSB7XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lICsgMjUwO1xuICAgIGNhc2UgMTY6XG4gICAgY2FzZSAzMjpcbiAgICBjYXNlIDY0OlxuICAgIGNhc2UgMTI4OlxuICAgIGNhc2UgMjU2OlxuICAgIGNhc2UgNTEyOlxuICAgIGNhc2UgMTAyNDpcbiAgICBjYXNlIDIwNDg6XG4gICAgY2FzZSA0MDk2OlxuICAgIGNhc2UgODE5MjpcbiAgICBjYXNlIDE2Mzg0OlxuICAgIGNhc2UgMzI3Njg6XG4gICAgY2FzZSA2NTUzNjpcbiAgICBjYXNlIDEzMTA3MjpcbiAgICBjYXNlIDI2MjE0NDpcbiAgICBjYXNlIDUyNDI4ODpcbiAgICBjYXNlIDEwNDg1NzY6XG4gICAgY2FzZSAyMDk3MTUyOlxuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lICsgNWUzO1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGNhc2UgNjcxMDg4NjQ6XG4gICAgY2FzZSAxMzQyMTc3Mjg6XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgY2FzZSA1MzY4NzA5MTI6XG4gICAgY2FzZSAxMDczNzQxODI0OlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gLTE7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKCkge1xuICB2YXIgbGFuZSA9IG5leHRUcmFuc2l0aW9uTGFuZTtcbiAgbmV4dFRyYW5zaXRpb25MYW5lIDw8PSAxO1xuICAwID09PSAobmV4dFRyYW5zaXRpb25MYW5lICYgNDE5NDE3NikgJiYgKG5leHRUcmFuc2l0aW9uTGFuZSA9IDEyOCk7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY2xhaW1OZXh0UmV0cnlMYW5lKCkge1xuICB2YXIgbGFuZSA9IG5leHRSZXRyeUxhbmU7XG4gIG5leHRSZXRyeUxhbmUgPDw9IDE7XG4gIDAgPT09IChuZXh0UmV0cnlMYW5lICYgNjI5MTQ1NjApICYmIChuZXh0UmV0cnlMYW5lID0gNDE5NDMwNCk7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY3JlYXRlTGFuZU1hcChpbml0aWFsKSB7XG4gIGZvciAodmFyIGxhbmVNYXAgPSBbXSwgaSA9IDA7IDMxID4gaTsgaSsrKSBsYW5lTWFwLnB1c2goaW5pdGlhbCk7XG4gIHJldHVybiBsYW5lTWFwO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RVcGRhdGVkJDEocm9vdCwgdXBkYXRlTGFuZSkge1xuICByb290LnBlbmRpbmdMYW5lcyB8PSB1cGRhdGVMYW5lO1xuICAyNjg0MzU0NTYgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAoKHJvb3Quc3VzcGVuZGVkTGFuZXMgPSAwKSwgKHJvb3QucGluZ2VkTGFuZXMgPSAwKSwgKHJvb3Qud2FybUxhbmVzID0gMCkpO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RGaW5pc2hlZChcbiAgcm9vdCxcbiAgZmluaXNoZWRMYW5lcyxcbiAgcmVtYWluaW5nTGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXNcbikge1xuICB2YXIgcHJldmlvdXNseVBlbmRpbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICByb290LnBlbmRpbmdMYW5lcyA9IHJlbWFpbmluZ0xhbmVzO1xuICByb290LnN1c3BlbmRlZExhbmVzID0gMDtcbiAgcm9vdC5waW5nZWRMYW5lcyA9IDA7XG4gIHJvb3Qud2FybUxhbmVzID0gMDtcbiAgcm9vdC5leHBpcmVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZW50YW5nbGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3Quc2hlbGxTdXNwZW5kQ291bnRlciA9IDA7XG4gIHZhciBlbnRhbmdsZW1lbnRzID0gcm9vdC5lbnRhbmdsZW1lbnRzLFxuICAgIGV4cGlyYXRpb25UaW1lcyA9IHJvb3QuZXhwaXJhdGlvblRpbWVzLFxuICAgIGhpZGRlblVwZGF0ZXMgPSByb290LmhpZGRlblVwZGF0ZXM7XG4gIGZvciAoXG4gICAgcmVtYWluaW5nTGFuZXMgPSBwcmV2aW91c2x5UGVuZGluZ0xhbmVzICYgfnJlbWFpbmluZ0xhbmVzO1xuICAgIDAgPCByZW1haW5pbmdMYW5lcztcblxuICApIHtcbiAgICB2YXIgaW5kZXgkNyA9IDMxIC0gY2x6MzIocmVtYWluaW5nTGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNztcbiAgICBlbnRhbmdsZW1lbnRzW2luZGV4JDddID0gMDtcbiAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkN10gPSAtMTtcbiAgICB2YXIgaGlkZGVuVXBkYXRlc0ZvckxhbmUgPSBoaWRkZW5VcGRhdGVzW2luZGV4JDddO1xuICAgIGlmIChudWxsICE9PSBoaWRkZW5VcGRhdGVzRm9yTGFuZSlcbiAgICAgIGZvciAoXG4gICAgICAgIGhpZGRlblVwZGF0ZXNbaW5kZXgkN10gPSBudWxsLCBpbmRleCQ3ID0gMDtcbiAgICAgICAgaW5kZXgkNyA8IGhpZGRlblVwZGF0ZXNGb3JMYW5lLmxlbmd0aDtcbiAgICAgICAgaW5kZXgkNysrXG4gICAgICApIHtcbiAgICAgICAgdmFyIHVwZGF0ZSA9IGhpZGRlblVwZGF0ZXNGb3JMYW5lW2luZGV4JDddO1xuICAgICAgICBudWxsICE9PSB1cGRhdGUgJiYgKHVwZGF0ZS5sYW5lICY9IC01MzY4NzA5MTMpO1xuICAgICAgfVxuICAgIHJlbWFpbmluZ0xhbmVzICY9IH5sYW5lO1xuICB9XG4gIDAgIT09IHNwYXduZWRMYW5lICYmIG1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lKHJvb3QsIHNwYXduZWRMYW5lLCAwKTtcbiAgMCAhPT0gc3VzcGVuZGVkUmV0cnlMYW5lcyAmJlxuICAgIDAgPT09IHVwZGF0ZWRMYW5lcyAmJlxuICAgIDAgIT09IHJvb3QudGFnICYmXG4gICAgKHJvb3Quc3VzcGVuZGVkTGFuZXMgfD1cbiAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMgJiB+KHByZXZpb3VzbHlQZW5kaW5nTGFuZXMgJiB+ZmluaXNoZWRMYW5lcykpO1xufVxuZnVuY3Rpb24gbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIGVudGFuZ2xlZExhbmVzKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHNwYXduZWRMYW5lO1xuICByb290LnN1c3BlbmRlZExhbmVzICY9IH5zcGF3bmVkTGFuZTtcbiAgdmFyIHNwYXduZWRMYW5lSW5kZXggPSAzMSAtIGNsejMyKHNwYXduZWRMYW5lKTtcbiAgcm9vdC5lbnRhbmdsZWRMYW5lcyB8PSBzcGF3bmVkTGFuZTtcbiAgcm9vdC5lbnRhbmdsZW1lbnRzW3NwYXduZWRMYW5lSW5kZXhdID1cbiAgICByb290LmVudGFuZ2xlbWVudHNbc3Bhd25lZExhbmVJbmRleF0gfFxuICAgIDEwNzM3NDE4MjQgfFxuICAgIChlbnRhbmdsZWRMYW5lcyAmIDQxOTQyMTgpO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgZW50YW5nbGVkTGFuZXMpIHtcbiAgdmFyIHJvb3RFbnRhbmdsZWRMYW5lcyA9IChyb290LmVudGFuZ2xlZExhbmVzIHw9IGVudGFuZ2xlZExhbmVzKTtcbiAgZm9yIChyb290ID0gcm9vdC5lbnRhbmdsZW1lbnRzOyByb290RW50YW5nbGVkTGFuZXM7ICkge1xuICAgIHZhciBpbmRleCQ4ID0gMzEgLSBjbHozMihyb290RW50YW5nbGVkTGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkODtcbiAgICAobGFuZSAmIGVudGFuZ2xlZExhbmVzKSB8IChyb290W2luZGV4JDhdICYgZW50YW5nbGVkTGFuZXMpICYmXG4gICAgICAocm9vdFtpbmRleCQ4XSB8PSBlbnRhbmdsZWRMYW5lcyk7XG4gICAgcm9vdEVudGFuZ2xlZExhbmVzICY9IH5sYW5lO1xuICB9XG59XG5mdW5jdGlvbiBsYW5lc1RvRXZlbnRQcmlvcml0eShsYW5lcykge1xuICBsYW5lcyAmPSAtbGFuZXM7XG4gIHJldHVybiAyIDwgbGFuZXNcbiAgICA/IDggPCBsYW5lc1xuICAgICAgPyAwICE9PSAobGFuZXMgJiAxMzQyMTc3MjcpXG4gICAgICAgID8gMzJcbiAgICAgICAgOiAyNjg0MzU0NTZcbiAgICAgIDogOFxuICAgIDogMjtcbn1cbmZ1bmN0aW9uIHJlc29sdmVVcGRhdGVQcmlvcml0eSgpIHtcbiAgdmFyIHVwZGF0ZVByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgaWYgKDAgIT09IHVwZGF0ZVByaW9yaXR5KSByZXR1cm4gdXBkYXRlUHJpb3JpdHk7XG4gIHVwZGF0ZVByaW9yaXR5ID0gd2luZG93LmV2ZW50O1xuICByZXR1cm4gdm9pZCAwID09PSB1cGRhdGVQcmlvcml0eSA/IDMyIDogZ2V0RXZlbnRQcmlvcml0eSh1cGRhdGVQcmlvcml0eS50eXBlKTtcbn1cbmZ1bmN0aW9uIHJ1bldpdGhQcmlvcml0eShwcmlvcml0eSwgZm4pIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIHJldHVybiAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByaW9yaXR5KSwgZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eTtcbiAgfVxufVxudmFyIHJhbmRvbUtleSA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFxuICBpbnRlcm5hbEluc3RhbmNlS2V5ID0gXCJfX3JlYWN0RmliZXIkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsUHJvcHNLZXkgPSBcIl9fcmVhY3RQcm9wcyRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleSA9IFwiX19yZWFjdENvbnRhaW5lciRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5ID0gXCJfX3JlYWN0RXZlbnRzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleSA9IFwiX19yZWFjdExpc3RlbmVycyRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxFdmVudEhhbmRsZXNTZXRLZXkgPSBcIl9fcmVhY3RIYW5kbGVzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5ID0gXCJfX3JlYWN0UmVzb3VyY2VzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEhvaXN0YWJsZU1hcmtlciA9IFwiX19yZWFjdE1hcmtlciRcIiArIHJhbmRvbUtleTtcbmZ1bmN0aW9uIGRldGFjaERlbGV0ZWRJbnN0YW5jZShub2RlKSB7XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbFByb3BzS2V5XTtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XTtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJMaXN0ZW5lcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleV07XG59XG5mdW5jdGlvbiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXROb2RlKSB7XG4gIHZhciB0YXJnZXRJbnN0ID0gdGFyZ2V0Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgaWYgKHRhcmdldEluc3QpIHJldHVybiB0YXJnZXRJbnN0O1xuICBmb3IgKHZhciBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlOyBwYXJlbnROb2RlOyApIHtcbiAgICBpZiAoXG4gICAgICAodGFyZ2V0SW5zdCA9XG4gICAgICAgIHBhcmVudE5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgcGFyZW50Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSlcbiAgICApIHtcbiAgICAgIHBhcmVudE5vZGUgPSB0YXJnZXRJbnN0LmFsdGVybmF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gdGFyZ2V0SW5zdC5jaGlsZCB8fFxuICAgICAgICAobnVsbCAhPT0gcGFyZW50Tm9kZSAmJiBudWxsICE9PSBwYXJlbnROb2RlLmNoaWxkKVxuICAgICAgKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIHRhcmdldE5vZGUgPSBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldE5vZGUpO1xuICAgICAgICAgIG51bGwgIT09IHRhcmdldE5vZGU7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKChwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkpIHJldHVybiBwYXJlbnROb2RlO1xuICAgICAgICAgIHRhcmdldE5vZGUgPSBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgICB9XG4gICAgdGFyZ2V0Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZSA9IHRhcmdldE5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICBpZiAoXG4gICAgKG5vZGUgPSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldIHx8IG5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0pXG4gICkge1xuICAgIHZhciB0YWcgPSBub2RlLnRhZztcbiAgICBpZiAoXG4gICAgICA1ID09PSB0YWcgfHxcbiAgICAgIDYgPT09IHRhZyB8fFxuICAgICAgMTMgPT09IHRhZyB8fFxuICAgICAgMjYgPT09IHRhZyB8fFxuICAgICAgMjcgPT09IHRhZyB8fFxuICAgICAgMyA9PT0gdGFnXG4gICAgKVxuICAgICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3QpIHtcbiAgdmFyIHRhZyA9IGluc3QudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDI2ID09PSB0YWcgfHwgMjcgPT09IHRhZyB8fCA2ID09PSB0YWcpIHJldHVybiBpbnN0LnN0YXRlTm9kZTtcbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMykpO1xufVxuZnVuY3Rpb24gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qocm9vdCkge1xuICB2YXIgcmVzb3VyY2VzID0gcm9vdFtpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5XTtcbiAgcmVzb3VyY2VzIHx8XG4gICAgKHJlc291cmNlcyA9IHJvb3RbaW50ZXJuYWxSb290Tm9kZVJlc291cmNlc0tleV0gPVxuICAgICAgeyBob2lzdGFibGVTdHlsZXM6IG5ldyBNYXAoKSwgaG9pc3RhYmxlU2NyaXB0czogbmV3IE1hcCgpIH0pO1xuICByZXR1cm4gcmVzb3VyY2VzO1xufVxuZnVuY3Rpb24gbWFya05vZGVBc0hvaXN0YWJsZShub2RlKSB7XG4gIG5vZGVbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdID0gITA7XG59XG52YXIgYWxsTmF0aXZlRXZlbnRzID0gbmV3IFNldCgpLFxuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzID0ge307XG5mdW5jdGlvbiByZWdpc3RlclR3b1BoYXNlRXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKTtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lICsgXCJDYXB0dXJlXCIsIGRlcGVuZGVuY2llcyk7XG59XG5mdW5jdGlvbiByZWdpc3RlckRpcmVjdEV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGRlcGVuZGVuY2llcykge1xuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gZGVwZW5kZW5jaWVzO1xuICBmb3IgKFxuICAgIHJlZ2lzdHJhdGlvbk5hbWUgPSAwO1xuICAgIHJlZ2lzdHJhdGlvbk5hbWUgPCBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuICAgIHJlZ2lzdHJhdGlvbk5hbWUrK1xuICApXG4gICAgYWxsTmF0aXZlRXZlbnRzLmFkZChkZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0pO1xufVxudmFyIGNhblVzZURPTSA9ICEoXG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdyB8fFxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgfHxcbiAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbiAgKSxcbiAgVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVggPSBSZWdFeHAoXG4gICAgXCJeWzpBLVpfYS16XFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkRdWzpBLVpfYS16XFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkRcXFxcLS4wLTlcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MF0qJFwiXG4gICksXG4gIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fSxcbiAgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlLCBhdHRyaWJ1dGVOYW1lKSlcbiAgICByZXR1cm4gITA7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUsIGF0dHJpYnV0ZU5hbWUpKSByZXR1cm4gITE7XG4gIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKVxuICAgIHJldHVybiAodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gITApO1xuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gITA7XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yQXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKVxuICAgIGlmIChudWxsID09PSB2YWx1ZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgIHZhciBwcmVmaXgkMTAgPSBuYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgNSk7XG4gICAgICAgICAgaWYgKFwiZGF0YS1cIiAhPT0gcHJlZml4JDEwICYmIFwiYXJpYS1cIiAhPT0gcHJlZml4JDEwKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBcIlwiICsgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgZWxzZSB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgXCJcIiArIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKG5vZGUsIG5hbWVzcGFjZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgZWxzZSB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIG5hbWUsIFwiXCIgKyB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5mdW5jdGlvbiBpc0NoZWNrYWJsZShlbGVtKSB7XG4gIHZhciB0eXBlID0gZWxlbS50eXBlO1xuICByZXR1cm4gKFxuICAgIChlbGVtID0gZWxlbS5ub2RlTmFtZSkgJiZcbiAgICBcImlucHV0XCIgPT09IGVsZW0udG9Mb3dlckNhc2UoKSAmJlxuICAgIChcImNoZWNrYm94XCIgPT09IHR5cGUgfHwgXCJyYWRpb1wiID09PSB0eXBlKVxuICApO1xufVxuZnVuY3Rpb24gdHJhY2tWYWx1ZU9uTm9kZShub2RlKSB7XG4gIHZhciB2YWx1ZUZpZWxkID0gaXNDaGVja2FibGUobm9kZSkgPyBcImNoZWNrZWRcIiA6IFwidmFsdWVcIixcbiAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgICAgIG5vZGUuY29uc3RydWN0b3IucHJvdG90eXBlLFxuICAgICAgdmFsdWVGaWVsZFxuICAgICksXG4gICAgY3VycmVudFZhbHVlID0gXCJcIiArIG5vZGVbdmFsdWVGaWVsZF07XG4gIGlmIChcbiAgICAhbm9kZS5oYXNPd25Qcm9wZXJ0eSh2YWx1ZUZpZWxkKSAmJlxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBkZXNjcmlwdG9yICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVzY3JpcHRvci5nZXQgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkZXNjcmlwdG9yLnNldFxuICApIHtcbiAgICB2YXIgZ2V0ID0gZGVzY3JpcHRvci5nZXQsXG4gICAgICBzZXQgPSBkZXNjcmlwdG9yLnNldDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0LmNhbGwodGhpcyk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gXCJcIiArIHZhbHVlO1xuICAgICAgICBzZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vZGUsIHZhbHVlRmllbGQsIHtcbiAgICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gXCJcIiArIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHN0b3BUcmFja2luZzogZnVuY3Rpb24gKCkge1xuICAgICAgICBub2RlLl92YWx1ZVRyYWNrZXIgPSBudWxsO1xuICAgICAgICBkZWxldGUgbm9kZVt2YWx1ZUZpZWxkXTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiB0cmFjayhub2RlKSB7XG4gIG5vZGUuX3ZhbHVlVHJhY2tlciB8fCAobm9kZS5fdmFsdWVUcmFja2VyID0gdHJhY2tWYWx1ZU9uTm9kZShub2RlKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVWYWx1ZUlmQ2hhbmdlZChub2RlKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuICExO1xuICB2YXIgdHJhY2tlciA9IG5vZGUuX3ZhbHVlVHJhY2tlcjtcbiAgaWYgKCF0cmFja2VyKSByZXR1cm4gITA7XG4gIHZhciBsYXN0VmFsdWUgPSB0cmFja2VyLmdldFZhbHVlKCk7XG4gIHZhciB2YWx1ZSA9IFwiXCI7XG4gIG5vZGUgJiZcbiAgICAodmFsdWUgPSBpc0NoZWNrYWJsZShub2RlKVxuICAgICAgPyBub2RlLmNoZWNrZWRcbiAgICAgICAgPyBcInRydWVcIlxuICAgICAgICA6IFwiZmFsc2VcIlxuICAgICAgOiBub2RlLnZhbHVlKTtcbiAgbm9kZSA9IHZhbHVlO1xuICByZXR1cm4gbm9kZSAhPT0gbGFzdFZhbHVlID8gKHRyYWNrZXIuc2V0VmFsdWUobm9kZSksICEwKSA6ICExO1xufVxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHtcbiAgZG9jID0gZG9jIHx8IChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgZG9jdW1lbnQgPyBkb2N1bWVudCA6IHZvaWQgMCk7XG4gIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgZG9jKSByZXR1cm4gbnVsbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cbnZhciBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzUmVnZXggPSAvW1xcblwiXFxcXF0vZztcbmZ1bmN0aW9uIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXModmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoXG4gICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlc1JlZ2V4LFxuICAgIGZ1bmN0aW9uIChjaCkge1xuICAgICAgcmV0dXJuIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikgKyBcIiBcIjtcbiAgICB9XG4gICk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbnB1dChcbiAgZWxlbWVudCxcbiAgdmFsdWUsXG4gIGRlZmF1bHRWYWx1ZSxcbiAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgY2hlY2tlZCxcbiAgZGVmYXVsdENoZWNrZWQsXG4gIHR5cGUsXG4gIG5hbWVcbikge1xuICBlbGVtZW50Lm5hbWUgPSBcIlwiO1xuICBudWxsICE9IHR5cGUgJiZcbiAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIHR5cGVcbiAgICA/IChlbGVtZW50LnR5cGUgPSB0eXBlKVxuICAgIDogZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICBpZiAobnVsbCAhPSB2YWx1ZSlcbiAgICBpZiAoXCJudW1iZXJcIiA9PT0gdHlwZSkge1xuICAgICAgaWYgKCgwID09PSB2YWx1ZSAmJiBcIlwiID09PSBlbGVtZW50LnZhbHVlKSB8fCBlbGVtZW50LnZhbHVlICE9IHZhbHVlKVxuICAgICAgICBlbGVtZW50LnZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZVxuICAgICAgZWxlbWVudC52YWx1ZSAhPT0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpICYmXG4gICAgICAgIChlbGVtZW50LnZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpKTtcbiAgZWxzZVxuICAgIChcInN1Ym1pdFwiICE9PSB0eXBlICYmIFwicmVzZXRcIiAhPT0gdHlwZSkgfHwgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcbiAgbnVsbCAhPSB2YWx1ZVxuICAgID8gc2V0RGVmYXVsdFZhbHVlKGVsZW1lbnQsIHR5cGUsIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpKVxuICAgIDogbnVsbCAhPSBkZWZhdWx0VmFsdWVcbiAgICAgID8gc2V0RGVmYXVsdFZhbHVlKGVsZW1lbnQsIHR5cGUsIGdldFRvU3RyaW5nVmFsdWUoZGVmYXVsdFZhbHVlKSlcbiAgICAgIDogbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlICYmIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7XG4gIG51bGwgPT0gY2hlY2tlZCAmJlxuICAgIG51bGwgIT0gZGVmYXVsdENoZWNrZWQgJiZcbiAgICAoZWxlbWVudC5kZWZhdWx0Q2hlY2tlZCA9ICEhZGVmYXVsdENoZWNrZWQpO1xuICBudWxsICE9IGNoZWNrZWQgJiZcbiAgICAoZWxlbWVudC5jaGVja2VkID1cbiAgICAgIGNoZWNrZWQgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgY2hlY2tlZCk7XG4gIG51bGwgIT0gbmFtZSAmJlxuICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gIFwic3ltYm9sXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgbmFtZVxuICAgID8gKGVsZW1lbnQubmFtZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKG5hbWUpKVxuICAgIDogZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJuYW1lXCIpO1xufVxuZnVuY3Rpb24gaW5pdElucHV0KFxuICBlbGVtZW50LFxuICB2YWx1ZSxcbiAgZGVmYXVsdFZhbHVlLFxuICBjaGVja2VkLFxuICBkZWZhdWx0Q2hlY2tlZCxcbiAgdHlwZSxcbiAgbmFtZSxcbiAgaXNIeWRyYXRpbmdcbikge1xuICBudWxsICE9IHR5cGUgJiZcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICAoZWxlbWVudC50eXBlID0gdHlwZSk7XG4gIGlmIChudWxsICE9IHZhbHVlIHx8IG51bGwgIT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKFxuICAgICAgIShcbiAgICAgICAgKFwic3VibWl0XCIgIT09IHR5cGUgJiYgXCJyZXNldFwiICE9PSB0eXBlKSB8fFxuICAgICAgICAodm9pZCAwICE9PSB2YWx1ZSAmJiBudWxsICE9PSB2YWx1ZSlcbiAgICAgIClcbiAgICApXG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdFZhbHVlID1cbiAgICAgIG51bGwgIT0gZGVmYXVsdFZhbHVlID8gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUoZGVmYXVsdFZhbHVlKSA6IFwiXCI7XG4gICAgdmFsdWUgPSBudWxsICE9IHZhbHVlID8gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpIDogZGVmYXVsdFZhbHVlO1xuICAgIGlzSHlkcmF0aW5nIHx8IHZhbHVlID09PSBlbGVtZW50LnZhbHVlIHx8IChlbGVtZW50LnZhbHVlID0gdmFsdWUpO1xuICAgIGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgY2hlY2tlZCA9IG51bGwgIT0gY2hlY2tlZCA/IGNoZWNrZWQgOiBkZWZhdWx0Q2hlY2tlZDtcbiAgY2hlY2tlZCA9XG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiAhIWNoZWNrZWQ7XG4gIGVsZW1lbnQuY2hlY2tlZCA9IGlzSHlkcmF0aW5nID8gZWxlbWVudC5jaGVja2VkIDogISFjaGVja2VkO1xuICBlbGVtZW50LmRlZmF1bHRDaGVja2VkID0gISFjaGVja2VkO1xuICBudWxsICE9IG5hbWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICAoZWxlbWVudC5uYW1lID0gbmFtZSk7XG59XG5mdW5jdGlvbiBzZXREZWZhdWx0VmFsdWUobm9kZSwgdHlwZSwgdmFsdWUpIHtcbiAgKFwibnVtYmVyXCIgPT09IHR5cGUgJiYgZ2V0QWN0aXZlRWxlbWVudChub2RlLm93bmVyRG9jdW1lbnQpID09PSBub2RlKSB8fFxuICAgIG5vZGUuZGVmYXVsdFZhbHVlID09PSBcIlwiICsgdmFsdWUgfHxcbiAgICAobm9kZS5kZWZhdWx0VmFsdWUgPSBcIlwiICsgdmFsdWUpO1xufVxuZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhub2RlLCBtdWx0aXBsZSwgcHJvcFZhbHVlLCBzZXREZWZhdWx0U2VsZWN0ZWQpIHtcbiAgbm9kZSA9IG5vZGUub3B0aW9ucztcbiAgaWYgKG11bHRpcGxlKSB7XG4gICAgbXVsdGlwbGUgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKylcbiAgICAgIG11bHRpcGxlW1wiJFwiICsgcHJvcFZhbHVlW2ldXSA9ICEwO1xuICAgIGZvciAocHJvcFZhbHVlID0gMDsgcHJvcFZhbHVlIDwgbm9kZS5sZW5ndGg7IHByb3BWYWx1ZSsrKVxuICAgICAgKGkgPSBtdWx0aXBsZS5oYXNPd25Qcm9wZXJ0eShcIiRcIiArIG5vZGVbcHJvcFZhbHVlXS52YWx1ZSkpLFxuICAgICAgICBub2RlW3Byb3BWYWx1ZV0uc2VsZWN0ZWQgIT09IGkgJiYgKG5vZGVbcHJvcFZhbHVlXS5zZWxlY3RlZCA9IGkpLFxuICAgICAgICBpICYmIHNldERlZmF1bHRTZWxlY3RlZCAmJiAobm9kZVtwcm9wVmFsdWVdLmRlZmF1bHRTZWxlY3RlZCA9ICEwKTtcbiAgfSBlbHNlIHtcbiAgICBwcm9wVmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShwcm9wVmFsdWUpO1xuICAgIG11bHRpcGxlID0gbnVsbDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG5vZGVbaV0udmFsdWUgPT09IHByb3BWYWx1ZSkge1xuICAgICAgICBub2RlW2ldLnNlbGVjdGVkID0gITA7XG4gICAgICAgIHNldERlZmF1bHRTZWxlY3RlZCAmJiAobm9kZVtpXS5kZWZhdWx0U2VsZWN0ZWQgPSAhMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG51bGwgIT09IG11bHRpcGxlIHx8IG5vZGVbaV0uZGlzYWJsZWQgfHwgKG11bHRpcGxlID0gbm9kZVtpXSk7XG4gICAgfVxuICAgIG51bGwgIT09IG11bHRpcGxlICYmIChtdWx0aXBsZS5zZWxlY3RlZCA9ICEwKTtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlVGV4dGFyZWEoZWxlbWVudCwgdmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoXG4gICAgbnVsbCAhPSB2YWx1ZSAmJlxuICAgICgodmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpLFxuICAgIHZhbHVlICE9PSBlbGVtZW50LnZhbHVlICYmIChlbGVtZW50LnZhbHVlID0gdmFsdWUpLFxuICAgIG51bGwgPT0gZGVmYXVsdFZhbHVlKVxuICApIHtcbiAgICBlbGVtZW50LmRlZmF1bHRWYWx1ZSAhPT0gdmFsdWUgJiYgKGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuICBlbGVtZW50LmRlZmF1bHRWYWx1ZSA9XG4gICAgbnVsbCAhPSBkZWZhdWx0VmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGluaXRUZXh0YXJlYShlbGVtZW50LCB2YWx1ZSwgZGVmYXVsdFZhbHVlLCBjaGlsZHJlbikge1xuICBpZiAobnVsbCA9PSB2YWx1ZSkge1xuICAgIGlmIChudWxsICE9IGNoaWxkcmVuKSB7XG4gICAgICBpZiAobnVsbCAhPSBkZWZhdWx0VmFsdWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTIpKTtcbiAgICAgIGlmIChpc0FycmF5SW1wbChjaGlsZHJlbikpIHtcbiAgICAgICAgaWYgKDEgPCBjaGlsZHJlbi5sZW5ndGgpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTMpKTtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHRWYWx1ZSA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICBudWxsID09IGRlZmF1bHRWYWx1ZSAmJiAoZGVmYXVsdFZhbHVlID0gXCJcIik7XG4gICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIH1cbiAgZGVmYXVsdFZhbHVlID0gZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSk7XG4gIGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICBjaGlsZHJlbiA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG4gIGNoaWxkcmVuID09PSBkZWZhdWx0VmFsdWUgJiZcbiAgICBcIlwiICE9PSBjaGlsZHJlbiAmJlxuICAgIG51bGwgIT09IGNoaWxkcmVuICYmXG4gICAgKGVsZW1lbnQudmFsdWUgPSBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudChub2RlLCB0ZXh0KSB7XG4gIGlmICh0ZXh0KSB7XG4gICAgdmFyIGZpcnN0Q2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgaWYgKFxuICAgICAgZmlyc3RDaGlsZCAmJlxuICAgICAgZmlyc3RDaGlsZCA9PT0gbm9kZS5sYXN0Q2hpbGQgJiZcbiAgICAgIDMgPT09IGZpcnN0Q2hpbGQubm9kZVR5cGVcbiAgICApIHtcbiAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG52YXIgdW5pdGxlc3NOdW1iZXJzID0gbmV3IFNldChcbiAgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudCBhc3BlY3RSYXRpbyBib3JkZXJJbWFnZU91dHNldCBib3JkZXJJbWFnZVNsaWNlIGJvcmRlckltYWdlV2lkdGggYm94RmxleCBib3hGbGV4R3JvdXAgYm94T3JkaW5hbEdyb3VwIGNvbHVtbkNvdW50IGNvbHVtbnMgZmxleCBmbGV4R3JvdyBmbGV4UG9zaXRpdmUgZmxleFNocmluayBmbGV4TmVnYXRpdmUgZmxleE9yZGVyIGdyaWRBcmVhIGdyaWRSb3cgZ3JpZFJvd0VuZCBncmlkUm93U3BhbiBncmlkUm93U3RhcnQgZ3JpZENvbHVtbiBncmlkQ29sdW1uRW5kIGdyaWRDb2x1bW5TcGFuIGdyaWRDb2x1bW5TdGFydCBmb250V2VpZ2h0IGxpbmVDbGFtcCBsaW5lSGVpZ2h0IG9wYWNpdHkgb3JkZXIgb3JwaGFucyBzY2FsZSB0YWJTaXplIHdpZG93cyB6SW5kZXggem9vbSBmaWxsT3BhY2l0eSBmbG9vZE9wYWNpdHkgc3RvcE9wYWNpdHkgc3Ryb2tlRGFzaGFycmF5IHN0cm9rZURhc2hvZmZzZXQgc3Ryb2tlTWl0ZXJsaW1pdCBzdHJva2VPcGFjaXR5IHN0cm9rZVdpZHRoIE1vekFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IE1vekJveEZsZXggTW96Qm94RmxleEdyb3VwIE1vekxpbmVDbGFtcCBtc0FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IG1zRmxleCBtc1pvb20gbXNGbGV4R3JvdyBtc0ZsZXhOZWdhdGl2ZSBtc0ZsZXhPcmRlciBtc0ZsZXhQb3NpdGl2ZSBtc0ZsZXhTaHJpbmsgbXNHcmlkQ29sdW1uIG1zR3JpZENvbHVtblNwYW4gbXNHcmlkUm93IG1zR3JpZFJvd1NwYW4gV2Via2l0QW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgV2Via2l0Qm94RmxleCBXZWJLaXRCb3hGbGV4R3JvdXAgV2Via2l0Qm94T3JkaW5hbEdyb3VwIFdlYmtpdENvbHVtbkNvdW50IFdlYmtpdENvbHVtbnMgV2Via2l0RmxleCBXZWJraXRGbGV4R3JvdyBXZWJraXRGbGV4UG9zaXRpdmUgV2Via2l0RmxleFNocmluayBXZWJraXRMaW5lQ2xhbXBcIi5zcGxpdChcbiAgICBcIiBcIlxuICApXG4pO1xuZnVuY3Rpb24gc2V0VmFsdWVGb3JTdHlsZShzdHlsZSwgc3R5bGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IDAgPT09IHN0eWxlTmFtZS5pbmRleE9mKFwiLS1cIik7XG4gIG51bGwgPT0gdmFsdWUgfHwgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcIlwiID09PSB2YWx1ZVxuICAgID8gaXNDdXN0b21Qcm9wZXJ0eVxuICAgICAgPyBzdHlsZS5zZXRQcm9wZXJ0eShzdHlsZU5hbWUsIFwiXCIpXG4gICAgICA6IFwiZmxvYXRcIiA9PT0gc3R5bGVOYW1lXG4gICAgICAgID8gKHN0eWxlLmNzc0Zsb2F0ID0gXCJcIilcbiAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IFwiXCIpXG4gICAgOiBpc0N1c3RvbVByb3BlcnR5XG4gICAgICA/IHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgdmFsdWUpXG4gICAgICA6IFwibnVtYmVyXCIgIT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICAgIDAgPT09IHZhbHVlIHx8XG4gICAgICAgICAgdW5pdGxlc3NOdW1iZXJzLmhhcyhzdHlsZU5hbWUpXG4gICAgICAgID8gXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgICA/IChzdHlsZS5jc3NGbG9hdCA9IHZhbHVlKVxuICAgICAgICAgIDogKHN0eWxlW3N0eWxlTmFtZV0gPSAoXCJcIiArIHZhbHVlKS50cmltKCkpXG4gICAgICAgIDogKHN0eWxlW3N0eWxlTmFtZV0gPSB2YWx1ZSArIFwicHhcIik7XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlcyhub2RlLCBzdHlsZXMsIHByZXZTdHlsZXMpIHtcbiAgaWYgKG51bGwgIT0gc3R5bGVzICYmIFwib2JqZWN0XCIgIT09IHR5cGVvZiBzdHlsZXMpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MikpO1xuICBub2RlID0gbm9kZS5zdHlsZTtcbiAgaWYgKG51bGwgIT0gcHJldlN0eWxlcykge1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBwcmV2U3R5bGVzKVxuICAgICAgIXByZXZTdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSB8fFxuICAgICAgICAobnVsbCAhPSBzdHlsZXMgJiYgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHx8XG4gICAgICAgICgwID09PSBzdHlsZU5hbWUuaW5kZXhPZihcIi0tXCIpXG4gICAgICAgICAgPyBub2RlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgXCJcIilcbiAgICAgICAgICA6IFwiZmxvYXRcIiA9PT0gc3R5bGVOYW1lXG4gICAgICAgICAgICA/IChub2RlLmNzc0Zsb2F0ID0gXCJcIilcbiAgICAgICAgICAgIDogKG5vZGVbc3R5bGVOYW1lXSA9IFwiXCIpKTtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUkMTYgaW4gc3R5bGVzKVxuICAgICAgKHN0eWxlTmFtZSA9IHN0eWxlc1tzdHlsZU5hbWUkMTZdKSxcbiAgICAgICAgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSQxNikgJiZcbiAgICAgICAgICBwcmV2U3R5bGVzW3N0eWxlTmFtZSQxNl0gIT09IHN0eWxlTmFtZSAmJlxuICAgICAgICAgIHNldFZhbHVlRm9yU3R5bGUobm9kZSwgc3R5bGVOYW1lJDE2LCBzdHlsZU5hbWUpO1xuICB9IGVsc2VcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUkMTcgaW4gc3R5bGVzKVxuICAgICAgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSQxNykgJiZcbiAgICAgICAgc2V0VmFsdWVGb3JTdHlsZShub2RlLCBzdHlsZU5hbWUkMTcsIHN0eWxlc1tzdHlsZU5hbWUkMTddKTtcbn1cbmZ1bmN0aW9uIGlzQ3VzdG9tRWxlbWVudCh0YWdOYW1lKSB7XG4gIGlmICgtMSA9PT0gdGFnTmFtZS5pbmRleE9mKFwiLVwiKSkgcmV0dXJuICExO1xuICBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICBjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpcbiAgICBjYXNlIFwiY29sb3ItcHJvZmlsZVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2VcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLXNyY1wiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtdXJpXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpcbiAgICBjYXNlIFwibWlzc2luZy1nbHlwaFwiOlxuICAgICAgcmV0dXJuICExO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITA7XG4gIH1cbn1cbnZhciBhbGlhc2VzID0gbmV3IE1hcChbXG4gICAgW1wiYWNjZXB0Q2hhcnNldFwiLCBcImFjY2VwdC1jaGFyc2V0XCJdLFxuICAgIFtcImh0bWxGb3JcIiwgXCJmb3JcIl0sXG4gICAgW1wiaHR0cEVxdWl2XCIsIFwiaHR0cC1lcXVpdlwiXSxcbiAgICBbXCJjcm9zc09yaWdpblwiLCBcImNyb3Nzb3JpZ2luXCJdLFxuICAgIFtcImFjY2VudEhlaWdodFwiLCBcImFjY2VudC1oZWlnaHRcIl0sXG4gICAgW1wiYWxpZ25tZW50QmFzZWxpbmVcIiwgXCJhbGlnbm1lbnQtYmFzZWxpbmVcIl0sXG4gICAgW1wiYXJhYmljRm9ybVwiLCBcImFyYWJpYy1mb3JtXCJdLFxuICAgIFtcImJhc2VsaW5lU2hpZnRcIiwgXCJiYXNlbGluZS1zaGlmdFwiXSxcbiAgICBbXCJjYXBIZWlnaHRcIiwgXCJjYXAtaGVpZ2h0XCJdLFxuICAgIFtcImNsaXBQYXRoXCIsIFwiY2xpcC1wYXRoXCJdLFxuICAgIFtcImNsaXBSdWxlXCIsIFwiY2xpcC1ydWxlXCJdLFxuICAgIFtcImNvbG9ySW50ZXJwb2xhdGlvblwiLCBcImNvbG9yLWludGVycG9sYXRpb25cIl0sXG4gICAgW1wiY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc1wiLCBcImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyc1wiXSxcbiAgICBbXCJjb2xvclByb2ZpbGVcIiwgXCJjb2xvci1wcm9maWxlXCJdLFxuICAgIFtcImNvbG9yUmVuZGVyaW5nXCIsIFwiY29sb3ItcmVuZGVyaW5nXCJdLFxuICAgIFtcImRvbWluYW50QmFzZWxpbmVcIiwgXCJkb21pbmFudC1iYXNlbGluZVwiXSxcbiAgICBbXCJlbmFibGVCYWNrZ3JvdW5kXCIsIFwiZW5hYmxlLWJhY2tncm91bmRcIl0sXG4gICAgW1wiZmlsbE9wYWNpdHlcIiwgXCJmaWxsLW9wYWNpdHlcIl0sXG4gICAgW1wiZmlsbFJ1bGVcIiwgXCJmaWxsLXJ1bGVcIl0sXG4gICAgW1wiZmxvb2RDb2xvclwiLCBcImZsb29kLWNvbG9yXCJdLFxuICAgIFtcImZsb29kT3BhY2l0eVwiLCBcImZsb29kLW9wYWNpdHlcIl0sXG4gICAgW1wiZm9udEZhbWlseVwiLCBcImZvbnQtZmFtaWx5XCJdLFxuICAgIFtcImZvbnRTaXplXCIsIFwiZm9udC1zaXplXCJdLFxuICAgIFtcImZvbnRTaXplQWRqdXN0XCIsIFwiZm9udC1zaXplLWFkanVzdFwiXSxcbiAgICBbXCJmb250U3RyZXRjaFwiLCBcImZvbnQtc3RyZXRjaFwiXSxcbiAgICBbXCJmb250U3R5bGVcIiwgXCJmb250LXN0eWxlXCJdLFxuICAgIFtcImZvbnRWYXJpYW50XCIsIFwiZm9udC12YXJpYW50XCJdLFxuICAgIFtcImZvbnRXZWlnaHRcIiwgXCJmb250LXdlaWdodFwiXSxcbiAgICBbXCJnbHlwaE5hbWVcIiwgXCJnbHlwaC1uYW1lXCJdLFxuICAgIFtcImdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsXCIsIFwiZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbFwiXSxcbiAgICBbXCJnbHlwaE9yaWVudGF0aW9uVmVydGljYWxcIiwgXCJnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbFwiXSxcbiAgICBbXCJob3JpekFkdlhcIiwgXCJob3Jpei1hZHYteFwiXSxcbiAgICBbXCJob3Jpek9yaWdpblhcIiwgXCJob3Jpei1vcmlnaW4teFwiXSxcbiAgICBbXCJpbWFnZVJlbmRlcmluZ1wiLCBcImltYWdlLXJlbmRlcmluZ1wiXSxcbiAgICBbXCJsZXR0ZXJTcGFjaW5nXCIsIFwibGV0dGVyLXNwYWNpbmdcIl0sXG4gICAgW1wibGlnaHRpbmdDb2xvclwiLCBcImxpZ2h0aW5nLWNvbG9yXCJdLFxuICAgIFtcIm1hcmtlckVuZFwiLCBcIm1hcmtlci1lbmRcIl0sXG4gICAgW1wibWFya2VyTWlkXCIsIFwibWFya2VyLW1pZFwiXSxcbiAgICBbXCJtYXJrZXJTdGFydFwiLCBcIm1hcmtlci1zdGFydFwiXSxcbiAgICBbXCJvdmVybGluZVBvc2l0aW9uXCIsIFwib3ZlcmxpbmUtcG9zaXRpb25cIl0sXG4gICAgW1wib3ZlcmxpbmVUaGlja25lc3NcIiwgXCJvdmVybGluZS10aGlja25lc3NcIl0sXG4gICAgW1wicGFpbnRPcmRlclwiLCBcInBhaW50LW9yZGVyXCJdLFxuICAgIFtcInBhbm9zZS0xXCIsIFwicGFub3NlLTFcIl0sXG4gICAgW1wicG9pbnRlckV2ZW50c1wiLCBcInBvaW50ZXItZXZlbnRzXCJdLFxuICAgIFtcInJlbmRlcmluZ0ludGVudFwiLCBcInJlbmRlcmluZy1pbnRlbnRcIl0sXG4gICAgW1wic2hhcGVSZW5kZXJpbmdcIiwgXCJzaGFwZS1yZW5kZXJpbmdcIl0sXG4gICAgW1wic3RvcENvbG9yXCIsIFwic3RvcC1jb2xvclwiXSxcbiAgICBbXCJzdG9wT3BhY2l0eVwiLCBcInN0b3Atb3BhY2l0eVwiXSxcbiAgICBbXCJzdHJpa2V0aHJvdWdoUG9zaXRpb25cIiwgXCJzdHJpa2V0aHJvdWdoLXBvc2l0aW9uXCJdLFxuICAgIFtcInN0cmlrZXRocm91Z2hUaGlja25lc3NcIiwgXCJzdHJpa2V0aHJvdWdoLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJzdHJva2VEYXNoYXJyYXlcIiwgXCJzdHJva2UtZGFzaGFycmF5XCJdLFxuICAgIFtcInN0cm9rZURhc2hvZmZzZXRcIiwgXCJzdHJva2UtZGFzaG9mZnNldFwiXSxcbiAgICBbXCJzdHJva2VMaW5lY2FwXCIsIFwic3Ryb2tlLWxpbmVjYXBcIl0sXG4gICAgW1wic3Ryb2tlTGluZWpvaW5cIiwgXCJzdHJva2UtbGluZWpvaW5cIl0sXG4gICAgW1wic3Ryb2tlTWl0ZXJsaW1pdFwiLCBcInN0cm9rZS1taXRlcmxpbWl0XCJdLFxuICAgIFtcInN0cm9rZU9wYWNpdHlcIiwgXCJzdHJva2Utb3BhY2l0eVwiXSxcbiAgICBbXCJzdHJva2VXaWR0aFwiLCBcInN0cm9rZS13aWR0aFwiXSxcbiAgICBbXCJ0ZXh0QW5jaG9yXCIsIFwidGV4dC1hbmNob3JcIl0sXG4gICAgW1widGV4dERlY29yYXRpb25cIiwgXCJ0ZXh0LWRlY29yYXRpb25cIl0sXG4gICAgW1widGV4dFJlbmRlcmluZ1wiLCBcInRleHQtcmVuZGVyaW5nXCJdLFxuICAgIFtcInRyYW5zZm9ybU9yaWdpblwiLCBcInRyYW5zZm9ybS1vcmlnaW5cIl0sXG4gICAgW1widW5kZXJsaW5lUG9zaXRpb25cIiwgXCJ1bmRlcmxpbmUtcG9zaXRpb25cIl0sXG4gICAgW1widW5kZXJsaW5lVGhpY2tuZXNzXCIsIFwidW5kZXJsaW5lLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJ1bmljb2RlQmlkaVwiLCBcInVuaWNvZGUtYmlkaVwiXSxcbiAgICBbXCJ1bmljb2RlUmFuZ2VcIiwgXCJ1bmljb2RlLXJhbmdlXCJdLFxuICAgIFtcInVuaXRzUGVyRW1cIiwgXCJ1bml0cy1wZXItZW1cIl0sXG4gICAgW1widkFscGhhYmV0aWNcIiwgXCJ2LWFscGhhYmV0aWNcIl0sXG4gICAgW1widkhhbmdpbmdcIiwgXCJ2LWhhbmdpbmdcIl0sXG4gICAgW1widklkZW9ncmFwaGljXCIsIFwidi1pZGVvZ3JhcGhpY1wiXSxcbiAgICBbXCJ2TWF0aGVtYXRpY2FsXCIsIFwidi1tYXRoZW1hdGljYWxcIl0sXG4gICAgW1widmVjdG9yRWZmZWN0XCIsIFwidmVjdG9yLWVmZmVjdFwiXSxcbiAgICBbXCJ2ZXJ0QWR2WVwiLCBcInZlcnQtYWR2LXlcIl0sXG4gICAgW1widmVydE9yaWdpblhcIiwgXCJ2ZXJ0LW9yaWdpbi14XCJdLFxuICAgIFtcInZlcnRPcmlnaW5ZXCIsIFwidmVydC1vcmlnaW4teVwiXSxcbiAgICBbXCJ3b3JkU3BhY2luZ1wiLCBcIndvcmQtc3BhY2luZ1wiXSxcbiAgICBbXCJ3cml0aW5nTW9kZVwiLCBcIndyaXRpbmctbW9kZVwiXSxcbiAgICBbXCJ4bWxuc1hsaW5rXCIsIFwieG1sbnM6eGxpbmtcIl0sXG4gICAgW1wieEhlaWdodFwiLCBcIngtaGVpZ2h0XCJdXG4gIF0pLFxuICBpc0phdmFTY3JpcHRQcm90b2NvbCA9XG4gICAgL15bXFx1MDAwMC1cXHUwMDFGIF0qaltcXHJcXG5cXHRdKmFbXFxyXFxuXFx0XSp2W1xcclxcblxcdF0qYVtcXHJcXG5cXHRdKnNbXFxyXFxuXFx0XSpjW1xcclxcblxcdF0qcltcXHJcXG5cXHRdKmlbXFxyXFxuXFx0XSpwW1xcclxcblxcdF0qdFtcXHJcXG5cXHRdKjovaTtcbmZ1bmN0aW9uIHNhbml0aXplVVJMKHVybCkge1xuICByZXR1cm4gaXNKYXZhU2NyaXB0UHJvdG9jb2wudGVzdChcIlwiICsgdXJsKVxuICAgID8gXCJqYXZhc2NyaXB0OnRocm93IG5ldyBFcnJvcignUmVhY3QgaGFzIGJsb2NrZWQgYSBqYXZhc2NyaXB0OiBVUkwgYXMgYSBzZWN1cml0eSBwcmVjYXV0aW9uLicpXCJcbiAgICA6IHVybDtcbn1cbnZhciBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBudWxsO1xuZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIG5hdGl2ZUV2ZW50LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50ICYmXG4gICAgKG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO1xuICByZXR1cm4gMyA9PT0gbmF0aXZlRXZlbnQubm9kZVR5cGUgPyBuYXRpdmVFdmVudC5wYXJlbnROb2RlIDogbmF0aXZlRXZlbnQ7XG59XG52YXIgcmVzdG9yZVRhcmdldCA9IG51bGwsXG4gIHJlc3RvcmVRdWV1ZSA9IG51bGw7XG5mdW5jdGlvbiByZXN0b3JlU3RhdGVPZlRhcmdldCh0YXJnZXQpIHtcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKHRhcmdldCk7XG4gIGlmIChpbnRlcm5hbEluc3RhbmNlICYmICh0YXJnZXQgPSBpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSkpIHtcbiAgICB2YXIgcHJvcHMgPSB0YXJnZXRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgICBhOiBzd2l0Y2ggKCgodGFyZ2V0ID0gaW50ZXJuYWxJbnN0YW5jZS5zdGF0ZU5vZGUpLCBpbnRlcm5hbEluc3RhbmNlLnR5cGUpKSB7XG4gICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgdXBkYXRlSW5wdXQoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHByb3BzLnZhbHVlLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICBwcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgICAgICBwcm9wcy50eXBlLFxuICAgICAgICAgIHByb3BzLm5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9IHByb3BzLm5hbWU7XG4gICAgICAgIGlmIChcInJhZGlvXCIgPT09IHByb3BzLnR5cGUgJiYgbnVsbCAhPSBpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgICAgZm9yIChwcm9wcyA9IHRhcmdldDsgcHJvcHMucGFyZW50Tm9kZTsgKSBwcm9wcyA9IHByb3BzLnBhcmVudE5vZGU7XG4gICAgICAgICAgcHJvcHMgPSBwcm9wcy5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgJ2lucHV0W25hbWU9XCInICtcbiAgICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhcbiAgICAgICAgICAgICAgICBcIlwiICsgaW50ZXJuYWxJbnN0YW5jZVxuICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgJ1wiXVt0eXBlPVwicmFkaW9cIl0nXG4gICAgICAgICAgKTtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlIDwgcHJvcHMubGVuZ3RoO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSsrXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXJOb2RlID0gcHJvcHNbaW50ZXJuYWxJbnN0YW5jZV07XG4gICAgICAgICAgICBpZiAob3RoZXJOb2RlICE9PSB0YXJnZXQgJiYgb3RoZXJOb2RlLmZvcm0gPT09IHRhcmdldC5mb3JtKSB7XG4gICAgICAgICAgICAgIHZhciBvdGhlclByb3BzID0gb3RoZXJOb2RlW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgICAgICAgICAgIGlmICghb3RoZXJQcm9wcykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MCkpO1xuICAgICAgICAgICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLnR5cGUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5uYW1lXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gMDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPCBwcm9wcy5sZW5ndGg7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlKytcbiAgICAgICAgICApXG4gICAgICAgICAgICAob3RoZXJOb2RlID0gcHJvcHNbaW50ZXJuYWxJbnN0YW5jZV0pLFxuICAgICAgICAgICAgICBvdGhlck5vZGUuZm9ybSA9PT0gdGFyZ2V0LmZvcm0gJiYgdXBkYXRlVmFsdWVJZkNoYW5nZWQob3RoZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIHVwZGF0ZVRleHRhcmVhKHRhcmdldCwgcHJvcHMudmFsdWUsIHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIChpbnRlcm5hbEluc3RhbmNlID0gcHJvcHMudmFsdWUpLFxuICAgICAgICAgIG51bGwgIT0gaW50ZXJuYWxJbnN0YW5jZSAmJlxuICAgICAgICAgICAgdXBkYXRlT3B0aW9ucyh0YXJnZXQsICEhcHJvcHMubXVsdGlwbGUsIGludGVybmFsSW5zdGFuY2UsICExKTtcbiAgICB9XG4gIH1cbn1cbnZhciBpc0luc2lkZUV2ZW50SGFuZGxlciA9ICExO1xuZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMkMShmbiwgYSwgYikge1xuICBpZiAoaXNJbnNpZGVFdmVudEhhbmRsZXIpIHJldHVybiBmbihhLCBiKTtcbiAgaXNJbnNpZGVFdmVudEhhbmRsZXIgPSAhMDtcbiAgdHJ5IHtcbiAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZm4oYSk7XG4gICAgcmV0dXJuIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoXG4gICAgICAoKGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gITEpLFxuICAgICAgbnVsbCAhPT0gcmVzdG9yZVRhcmdldCB8fCBudWxsICE9PSByZXN0b3JlUXVldWUpXG4gICAgKVxuICAgICAgaWYgKFxuICAgICAgICAoZmx1c2hTeW5jV29yayQxKCksXG4gICAgICAgIHJlc3RvcmVUYXJnZXQgJiZcbiAgICAgICAgICAoKGEgPSByZXN0b3JlVGFyZ2V0KSxcbiAgICAgICAgICAoZm4gPSByZXN0b3JlUXVldWUpLFxuICAgICAgICAgIChyZXN0b3JlUXVldWUgPSByZXN0b3JlVGFyZ2V0ID0gbnVsbCksXG4gICAgICAgICAgcmVzdG9yZVN0YXRlT2ZUYXJnZXQoYSksXG4gICAgICAgICAgZm4pKVxuICAgICAgKVxuICAgICAgICBmb3IgKGEgPSAwOyBhIDwgZm4ubGVuZ3RoOyBhKyspIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KGZuW2FdKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICB2YXIgc3RhdGVOb2RlID0gaW5zdC5zdGF0ZU5vZGU7XG4gIGlmIChudWxsID09PSBzdGF0ZU5vZGUpIHJldHVybiBudWxsO1xuICB2YXIgcHJvcHMgPSBzdGF0ZU5vZGVbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgaWYgKG51bGwgPT09IHByb3BzKSByZXR1cm4gbnVsbDtcbiAgc3RhdGVOb2RlID0gcHJvcHNbcmVnaXN0cmF0aW9uTmFtZV07XG4gIGE6IHN3aXRjaCAocmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIGNhc2UgXCJvbkNsaWNrXCI6XG4gICAgY2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpcbiAgICBjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZURvd25cIjpcbiAgICBjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VNb3ZlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlVXBcIjpcbiAgICBjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRW50ZXJcIjpcbiAgICAgIChwcm9wcyA9ICFwcm9wcy5kaXNhYmxlZCkgfHxcbiAgICAgICAgKChpbnN0ID0gaW5zdC50eXBlKSxcbiAgICAgICAgKHByb3BzID0gIShcbiAgICAgICAgICBcImJ1dHRvblwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJpbnB1dFwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJzZWxlY3RcIiA9PT0gaW5zdCB8fFxuICAgICAgICAgIFwidGV4dGFyZWFcIiA9PT0gaW5zdFxuICAgICAgICApKSk7XG4gICAgICBpbnN0ID0gIXByb3BzO1xuICAgICAgYnJlYWsgYTtcbiAgICBkZWZhdWx0OlxuICAgICAgaW5zdCA9ICExO1xuICB9XG4gIGlmIChpbnN0KSByZXR1cm4gbnVsbDtcbiAgaWYgKHN0YXRlTm9kZSAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBzdGF0ZU5vZGUpXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIzMSwgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIHN0YXRlTm9kZSlcbiAgICApO1xuICByZXR1cm4gc3RhdGVOb2RlO1xufVxudmFyIHBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkID0gITE7XG5pZiAoY2FuVXNlRE9NKVxuICB0cnkge1xuICAgIHZhciBvcHRpb25zID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdGlvbnMsIFwicGFzc2l2ZVwiLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMTtcbiAgfVxudmFyIHJvb3QgPSBudWxsLFxuICBzdGFydFRleHQgPSBudWxsLFxuICBmYWxsYmFja1RleHQgPSBudWxsO1xuZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgaWYgKGZhbGxiYWNrVGV4dCkgcmV0dXJuIGZhbGxiYWNrVGV4dDtcbiAgdmFyIHN0YXJ0LFxuICAgIHN0YXJ0VmFsdWUgPSBzdGFydFRleHQsXG4gICAgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aCxcbiAgICBlbmQsXG4gICAgZW5kVmFsdWUgPSBcInZhbHVlXCIgaW4gcm9vdCA/IHJvb3QudmFsdWUgOiByb290LnRleHRDb250ZW50LFxuICAgIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcbiAgZm9yIChcbiAgICBzdGFydCA9IDA7XG4gICAgc3RhcnQgPCBzdGFydExlbmd0aCAmJiBzdGFydFZhbHVlW3N0YXJ0XSA9PT0gZW5kVmFsdWVbc3RhcnRdO1xuICAgIHN0YXJ0KytcbiAgKTtcbiAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gIGZvciAoXG4gICAgZW5kID0gMTtcbiAgICBlbmQgPD0gbWluRW5kICYmXG4gICAgc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gPT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF07XG4gICAgZW5kKytcbiAgKTtcbiAgcmV0dXJuIChmYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgMSA8IGVuZCA/IDEgLSBlbmQgOiB2b2lkIDApKTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuICBcImNoYXJDb2RlXCIgaW4gbmF0aXZlRXZlbnRcbiAgICA/ICgobmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5jaGFyQ29kZSksXG4gICAgICAwID09PSBuYXRpdmVFdmVudCAmJiAxMyA9PT0ga2V5Q29kZSAmJiAobmF0aXZlRXZlbnQgPSAxMykpXG4gICAgOiAobmF0aXZlRXZlbnQgPSBrZXlDb2RlKTtcbiAgMTAgPT09IG5hdGl2ZUV2ZW50ICYmIChuYXRpdmVFdmVudCA9IDEzKTtcbiAgcmV0dXJuIDMyIDw9IG5hdGl2ZUV2ZW50IHx8IDEzID09PSBuYXRpdmVFdmVudCA/IG5hdGl2ZUV2ZW50IDogMDtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlKCkge1xuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UoKSB7XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEludGVyZmFjZSkge1xuICBmdW5jdGlvbiBTeW50aGV0aWNCYXNlRXZlbnQoXG4gICAgcmVhY3ROYW1lLFxuICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgIHRhcmdldEluc3QsXG4gICAgbmF0aXZlRXZlbnQsXG4gICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgKSB7XG4gICAgdGhpcy5fcmVhY3ROYW1lID0gcmVhY3ROYW1lO1xuICAgIHRoaXMuX3RhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICAgIHRoaXMudHlwZSA9IHJlYWN0RXZlbnRUeXBlO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKVxuICAgICAgSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJlxuICAgICAgICAoKHJlYWN0TmFtZSA9IEludGVyZmFjZVtwcm9wTmFtZV0pLFxuICAgICAgICAodGhpc1twcm9wTmFtZV0gPSByZWFjdE5hbWVcbiAgICAgICAgICA/IHJlYWN0TmFtZShuYXRpdmVFdmVudClcbiAgICAgICAgICA6IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXSkpO1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gKFxuICAgICAgbnVsbCAhPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgID8gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICA6ICExID09PSBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZVxuICAgIClcbiAgICAgID8gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWVcbiAgICAgIDogZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlO1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYXNzaWduKFN5bnRoZXRpY0Jhc2VFdmVudC5wcm90b3R5cGUsIHtcbiAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gITA7XG4gICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgZXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnByZXZlbnREZWZhdWx0XG4gICAgICAgICAgPyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgOiBcInVua25vd25cIiAhPT0gdHlwZW9mIGV2ZW50LnJldHVyblZhbHVlICYmIChldmVudC5yZXR1cm5WYWx1ZSA9ICExKSxcbiAgICAgICAgKHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUpKTtcbiAgICB9LFxuICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgIGV2ZW50ICYmXG4gICAgICAgIChldmVudC5zdG9wUHJvcGFnYXRpb25cbiAgICAgICAgICA/IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgOiBcInVua25vd25cIiAhPT0gdHlwZW9mIGV2ZW50LmNhbmNlbEJ1YmJsZSAmJlxuICAgICAgICAgICAgKGV2ZW50LmNhbmNlbEJ1YmJsZSA9ICEwKSxcbiAgICAgICAgKHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSkpO1xuICAgIH0sXG4gICAgcGVyc2lzdDogZnVuY3Rpb24gKCkge30sXG4gICAgaXNQZXJzaXN0ZW50OiBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZVxuICB9KTtcbiAgcmV0dXJuIFN5bnRoZXRpY0Jhc2VFdmVudDtcbn1cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgICBldmVudFBoYXNlOiAwLFxuICAgIGJ1YmJsZXM6IDAsXG4gICAgY2FuY2VsYWJsZTogMCxcbiAgICB0aW1lU3RhbXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICAgIH0sXG4gICAgZGVmYXVsdFByZXZlbnRlZDogMCxcbiAgICBpc1RydXN0ZWQ6IDBcbiAgfSxcbiAgU3ludGhldGljRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChFdmVudEludGVyZmFjZSksXG4gIFVJRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7IHZpZXc6IDAsIGRldGFpbDogMCB9KSxcbiAgU3ludGhldGljVUlFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFVJRXZlbnRJbnRlcmZhY2UpLFxuICBsYXN0TW92ZW1lbnRYLFxuICBsYXN0TW92ZW1lbnRZLFxuICBsYXN0TW91c2VFdmVudCxcbiAgTW91c2VFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICAgIHNjcmVlblg6IDAsXG4gICAgc2NyZWVuWTogMCxcbiAgICBjbGllbnRYOiAwLFxuICAgIGNsaWVudFk6IDAsXG4gICAgcGFnZVg6IDAsXG4gICAgcGFnZVk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gICAgYnV0dG9uOiAwLFxuICAgIGJ1dHRvbnM6IDAsXG4gICAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gdm9pZCAwID09PSBldmVudC5yZWxhdGVkVGFyZ2V0XG4gICAgICAgID8gZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnNyY0VsZW1lbnRcbiAgICAgICAgICA/IGV2ZW50LnRvRWxlbWVudFxuICAgICAgICAgIDogZXZlbnQuZnJvbUVsZW1lbnRcbiAgICAgICAgOiBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIH0sXG4gICAgbW92ZW1lbnRYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChcIm1vdmVtZW50WFwiIGluIGV2ZW50KSByZXR1cm4gZXZlbnQubW92ZW1lbnRYO1xuICAgICAgZXZlbnQgIT09IGxhc3RNb3VzZUV2ZW50ICYmXG4gICAgICAgIChsYXN0TW91c2VFdmVudCAmJiBcIm1vdXNlbW92ZVwiID09PSBldmVudC50eXBlXG4gICAgICAgICAgPyAoKGxhc3RNb3ZlbWVudFggPSBldmVudC5zY3JlZW5YIC0gbGFzdE1vdXNlRXZlbnQuc2NyZWVuWCksXG4gICAgICAgICAgICAobGFzdE1vdmVtZW50WSA9IGV2ZW50LnNjcmVlblkgLSBsYXN0TW91c2VFdmVudC5zY3JlZW5ZKSlcbiAgICAgICAgICA6IChsYXN0TW92ZW1lbnRZID0gbGFzdE1vdmVtZW50WCA9IDApLFxuICAgICAgICAobGFzdE1vdXNlRXZlbnQgPSBldmVudCkpO1xuICAgICAgcmV0dXJuIGxhc3RNb3ZlbWVudFg7XG4gICAgfSxcbiAgICBtb3ZlbWVudFk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwibW92ZW1lbnRZXCIgaW4gZXZlbnQgPyBldmVudC5tb3ZlbWVudFkgOiBsYXN0TW92ZW1lbnRZO1xuICAgIH1cbiAgfSksXG4gIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChNb3VzZUV2ZW50SW50ZXJmYWNlKSxcbiAgRHJhZ0V2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7IGRhdGFUcmFuc2ZlcjogMCB9KSxcbiAgU3ludGhldGljRHJhZ0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRHJhZ0V2ZW50SW50ZXJmYWNlKSxcbiAgRm9jdXNFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwgeyByZWxhdGVkVGFyZ2V0OiAwIH0pLFxuICBTeW50aGV0aWNGb2N1c0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRm9jdXNFdmVudEludGVyZmFjZSksXG4gIEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIGFuaW1hdGlvbk5hbWU6IDAsXG4gICAgZWxhcHNlZFRpbWU6IDAsXG4gICAgcHNldWRvRWxlbWVudDogMFxuICB9KSxcbiAgU3ludGhldGljQW5pbWF0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChBbmltYXRpb25FdmVudEludGVyZmFjZSksXG4gIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiY2xpcGJvYXJkRGF0YVwiIGluIGV2ZW50XG4gICAgICAgID8gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICAgICAgICA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICAgIH1cbiAgfSksXG4gIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpLFxuICBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwgeyBkYXRhOiAwIH0pLFxuICBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSksXG4gIG5vcm1hbGl6ZUtleSA9IHtcbiAgICBFc2M6IFwiRXNjYXBlXCIsXG4gICAgU3BhY2ViYXI6IFwiIFwiLFxuICAgIExlZnQ6IFwiQXJyb3dMZWZ0XCIsXG4gICAgVXA6IFwiQXJyb3dVcFwiLFxuICAgIFJpZ2h0OiBcIkFycm93UmlnaHRcIixcbiAgICBEb3duOiBcIkFycm93RG93blwiLFxuICAgIERlbDogXCJEZWxldGVcIixcbiAgICBXaW46IFwiT1NcIixcbiAgICBNZW51OiBcIkNvbnRleHRNZW51XCIsXG4gICAgQXBwczogXCJDb250ZXh0TWVudVwiLFxuICAgIFNjcm9sbDogXCJTY3JvbGxMb2NrXCIsXG4gICAgTW96UHJpbnRhYmxlS2V5OiBcIlVuaWRlbnRpZmllZFwiXG4gIH0sXG4gIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICAgIDg6IFwiQmFja3NwYWNlXCIsXG4gICAgOTogXCJUYWJcIixcbiAgICAxMjogXCJDbGVhclwiLFxuICAgIDEzOiBcIkVudGVyXCIsXG4gICAgMTY6IFwiU2hpZnRcIixcbiAgICAxNzogXCJDb250cm9sXCIsXG4gICAgMTg6IFwiQWx0XCIsXG4gICAgMTk6IFwiUGF1c2VcIixcbiAgICAyMDogXCJDYXBzTG9ja1wiLFxuICAgIDI3OiBcIkVzY2FwZVwiLFxuICAgIDMyOiBcIiBcIixcbiAgICAzMzogXCJQYWdlVXBcIixcbiAgICAzNDogXCJQYWdlRG93blwiLFxuICAgIDM1OiBcIkVuZFwiLFxuICAgIDM2OiBcIkhvbWVcIixcbiAgICAzNzogXCJBcnJvd0xlZnRcIixcbiAgICAzODogXCJBcnJvd1VwXCIsXG4gICAgMzk6IFwiQXJyb3dSaWdodFwiLFxuICAgIDQwOiBcIkFycm93RG93blwiLFxuICAgIDQ1OiBcIkluc2VydFwiLFxuICAgIDQ2OiBcIkRlbGV0ZVwiLFxuICAgIDExMjogXCJGMVwiLFxuICAgIDExMzogXCJGMlwiLFxuICAgIDExNDogXCJGM1wiLFxuICAgIDExNTogXCJGNFwiLFxuICAgIDExNjogXCJGNVwiLFxuICAgIDExNzogXCJGNlwiLFxuICAgIDExODogXCJGN1wiLFxuICAgIDExOTogXCJGOFwiLFxuICAgIDEyMDogXCJGOVwiLFxuICAgIDEyMTogXCJGMTBcIixcbiAgICAxMjI6IFwiRjExXCIsXG4gICAgMTIzOiBcIkYxMlwiLFxuICAgIDE0NDogXCJOdW1Mb2NrXCIsXG4gICAgMTQ1OiBcIlNjcm9sbExvY2tcIixcbiAgICAyMjQ6IFwiTWV0YVwiXG4gIH0sXG4gIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuICAgIEFsdDogXCJhbHRLZXlcIixcbiAgICBDb250cm9sOiBcImN0cmxLZXlcIixcbiAgICBNZXRhOiBcIm1ldGFLZXlcIixcbiAgICBTaGlmdDogXCJzaGlmdEtleVwiXG4gIH07XG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICB2YXIgbmF0aXZlRXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZVxuICAgID8gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpXG4gICAgOiAoa2V5QXJnID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXSlcbiAgICAgID8gISFuYXRpdmVFdmVudFtrZXlBcmddXG4gICAgICA6ICExO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7XG4gICAga2V5OiBmdW5jdGlvbiAobmF0aXZlRXZlbnQpIHtcbiAgICAgIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAgICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICAgICAgaWYgKFwiVW5pZGVudGlmaWVkXCIgIT09IGtleSkgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IG5hdGl2ZUV2ZW50LnR5cGVcbiAgICAgICAgPyAoKG5hdGl2ZUV2ZW50ID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkpLFxuICAgICAgICAgIDEzID09PSBuYXRpdmVFdmVudCA/IFwiRW50ZXJcIiA6IFN0cmluZy5mcm9tQ2hhckNvZGUobmF0aXZlRXZlbnQpKVxuICAgICAgICA6IFwia2V5ZG93blwiID09PSBuYXRpdmVFdmVudC50eXBlIHx8IFwia2V5dXBcIiA9PT0gbmF0aXZlRXZlbnQudHlwZVxuICAgICAgICAgID8gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgXCJVbmlkZW50aWZpZWRcIlxuICAgICAgICAgIDogXCJcIjtcbiAgICB9LFxuICAgIGNvZGU6IDAsXG4gICAgbG9jYXRpb246IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICByZXBlYXQ6IDAsXG4gICAgbG9jYWxlOiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgICBjaGFyQ29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBldmVudC50eXBlID8gZ2V0RXZlbnRDaGFyQ29kZShldmVudCkgOiAwO1xuICAgIH0sXG4gICAga2V5Q29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlkb3duXCIgPT09IGV2ZW50LnR5cGUgfHwgXCJrZXl1cFwiID09PSBldmVudC50eXBlXG4gICAgICAgID8gZXZlbnQua2V5Q29kZVxuICAgICAgICA6IDA7XG4gICAgfSxcbiAgICB3aGljaDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBldmVudC50eXBlXG4gICAgICAgID8gZ2V0RXZlbnRDaGFyQ29kZShldmVudClcbiAgICAgICAgOiBcImtleWRvd25cIiA9PT0gZXZlbnQudHlwZSB8fCBcImtleXVwXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICA/IGV2ZW50LmtleUNvZGVcbiAgICAgICAgICA6IDA7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpLFxuICBQb2ludGVyRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBwb2ludGVySWQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHByZXNzdXJlOiAwLFxuICAgIHRhbmdlbnRpYWxQcmVzc3VyZTogMCxcbiAgICB0aWx0WDogMCxcbiAgICB0aWx0WTogMCxcbiAgICB0d2lzdDogMCxcbiAgICBwb2ludGVyVHlwZTogMCxcbiAgICBpc1ByaW1hcnk6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1BvaW50ZXJFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFBvaW50ZXJFdmVudEludGVyZmFjZSksXG4gIFRvdWNoRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgICB0b3VjaGVzOiAwLFxuICAgIHRhcmdldFRvdWNoZXM6IDAsXG4gICAgY2hhbmdlZFRvdWNoZXM6IDAsXG4gICAgYWx0S2V5OiAwLFxuICAgIG1ldGFLZXk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbiAgfSksXG4gIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb3VjaEV2ZW50SW50ZXJmYWNlKSxcbiAgVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIHByb3BlcnR5TmFtZTogMCxcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBwc2V1ZG9FbGVtZW50OiAwXG4gIH0pLFxuICBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UpLFxuICBXaGVlbEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7XG4gICAgZGVsdGFYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImRlbHRhWFwiIGluIGV2ZW50XG4gICAgICAgID8gZXZlbnQuZGVsdGFYXG4gICAgICAgIDogXCJ3aGVlbERlbHRhWFwiIGluIGV2ZW50XG4gICAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVhcbiAgICAgICAgICA6IDA7XG4gICAgfSxcbiAgICBkZWx0YVk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiZGVsdGFZXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5kZWx0YVlcbiAgICAgICAgOiBcIndoZWVsRGVsdGFZXCIgaW4gZXZlbnRcbiAgICAgICAgICA/IC1ldmVudC53aGVlbERlbHRhWVxuICAgICAgICAgIDogXCJ3aGVlbERlbHRhXCIgaW4gZXZlbnRcbiAgICAgICAgICAgID8gLWV2ZW50LndoZWVsRGVsdGFcbiAgICAgICAgICAgIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWjogMCxcbiAgICBkZWx0YU1vZGU6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1doZWVsRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChXaGVlbEV2ZW50SW50ZXJmYWNlKSxcbiAgVG9nZ2xlRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgbmV3U3RhdGU6IDAsXG4gICAgb2xkU3RhdGU6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1RvZ2dsZUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVG9nZ2xlRXZlbnRJbnRlcmZhY2UpLFxuICBFTkRfS0VZQ09ERVMgPSBbOSwgMTMsIDI3LCAzMl0sXG4gIGNhblVzZUNvbXBvc2l0aW9uRXZlbnQgPSBjYW5Vc2VET00gJiYgXCJDb21wb3NpdGlvbkV2ZW50XCIgaW4gd2luZG93LFxuICBkb2N1bWVudE1vZGUgPSBudWxsO1xuY2FuVXNlRE9NICYmXG4gIFwiZG9jdW1lbnRNb2RlXCIgaW4gZG9jdW1lbnQgJiZcbiAgKGRvY3VtZW50TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBjYW5Vc2VET00gJiYgXCJUZXh0RXZlbnRcIiBpbiB3aW5kb3cgJiYgIWRvY3VtZW50TW9kZSxcbiAgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPVxuICAgIGNhblVzZURPTSAmJlxuICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fFxuICAgICAgKGRvY3VtZW50TW9kZSAmJiA4IDwgZG9jdW1lbnRNb2RlICYmIDExID49IGRvY3VtZW50TW9kZSkpLFxuICBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMiksXG4gIGhhc1NwYWNlS2V5cHJlc3MgPSAhMTtcbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgICByZXR1cm4gLTEgIT09IEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpO1xuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICByZXR1cm4gMjI5ICE9PSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHJldHVybiAhMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICExO1xuICB9XG59XG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQuZGV0YWlsO1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5hdGl2ZUV2ZW50ICYmIFwiZGF0YVwiIGluIG5hdGl2ZUV2ZW50XG4gICAgPyBuYXRpdmVFdmVudC5kYXRhXG4gICAgOiBudWxsO1xufVxudmFyIGlzQ29tcG9zaW5nID0gITE7XG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmICgzMiAhPT0gbmF0aXZlRXZlbnQud2hpY2gpIHJldHVybiBudWxsO1xuICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9ICEwO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG4gICAgY2FzZSBcInRleHRJbnB1dFwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGRvbUV2ZW50TmFtZSA9IG5hdGl2ZUV2ZW50LmRhdGEpLFxuICAgICAgICBkb21FdmVudE5hbWUgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcyA/IG51bGwgOiBkb21FdmVudE5hbWVcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBpZiAoaXNDb21wb3NpbmcpXG4gICAgcmV0dXJuIFwiY29tcG9zaXRpb25lbmRcIiA9PT0gZG9tRXZlbnROYW1lIHx8XG4gICAgICAoIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgJiZcbiAgICAgICAgaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpKVxuICAgICAgPyAoKGRvbUV2ZW50TmFtZSA9IGdldERhdGEoKSksXG4gICAgICAgIChmYWxsYmFja1RleHQgPSBzdGFydFRleHQgPSByb290ID0gbnVsbCksXG4gICAgICAgIChpc0NvbXBvc2luZyA9ICExKSxcbiAgICAgICAgZG9tRXZlbnROYW1lKVxuICAgICAgOiBudWxsO1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgICBpZiAoXG4gICAgICAgICEobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgfHxcbiAgICAgICAgKG5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgbmF0aXZlRXZlbnQuYWx0S2V5KVxuICAgICAgKSB7XG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5jaGFyICYmIDEgPCBuYXRpdmVFdmVudC5jaGFyLmxlbmd0aClcbiAgICAgICAgICByZXR1cm4gbmF0aXZlRXZlbnQuY2hhcjtcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LndoaWNoKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSAmJiBcImtvXCIgIT09IG5hdGl2ZUV2ZW50LmxvY2FsZVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxudmFyIHN1cHBvcnRlZElucHV0VHlwZXMgPSB7XG4gIGNvbG9yOiAhMCxcbiAgZGF0ZTogITAsXG4gIGRhdGV0aW1lOiAhMCxcbiAgXCJkYXRldGltZS1sb2NhbFwiOiAhMCxcbiAgZW1haWw6ICEwLFxuICBtb250aDogITAsXG4gIG51bWJlcjogITAsXG4gIHBhc3N3b3JkOiAhMCxcbiAgcmFuZ2U6ICEwLFxuICBzZWFyY2g6ICEwLFxuICB0ZWw6ICEwLFxuICB0ZXh0OiAhMCxcbiAgdGltZTogITAsXG4gIHVybDogITAsXG4gIHdlZWs6ICEwXG59O1xuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIFwiaW5wdXRcIiA9PT0gbm9kZU5hbWVcbiAgICA/ICEhc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdXG4gICAgOiBcInRleHRhcmVhXCIgPT09IG5vZGVOYW1lXG4gICAgICA/ICEwXG4gICAgICA6ICExO1xufVxuZnVuY3Rpb24gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICBkaXNwYXRjaFF1ZXVlLFxuICBpbnN0LFxuICBuYXRpdmVFdmVudCxcbiAgdGFyZ2V0XG4pIHtcbiAgcmVzdG9yZVRhcmdldFxuICAgID8gcmVzdG9yZVF1ZXVlXG4gICAgICA/IHJlc3RvcmVRdWV1ZS5wdXNoKHRhcmdldClcbiAgICAgIDogKHJlc3RvcmVRdWV1ZSA9IFt0YXJnZXRdKVxuICAgIDogKHJlc3RvcmVUYXJnZXQgPSB0YXJnZXQpO1xuICBpbnN0ID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKGluc3QsIFwib25DaGFuZ2VcIik7XG4gIDAgPCBpbnN0Lmxlbmd0aCAmJlxuICAgICgobmF0aXZlRXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBcIm9uQ2hhbmdlXCIsXG4gICAgICBcImNoYW5nZVwiLFxuICAgICAgbnVsbCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgdGFyZ2V0XG4gICAgKSksXG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IG5hdGl2ZUV2ZW50LCBsaXN0ZW5lcnM6IGluc3QgfSkpO1xufVxudmFyIGFjdGl2ZUVsZW1lbnQkMSA9IG51bGwsXG4gIGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBudWxsO1xuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGRpc3BhdGNoUXVldWUpIHtcbiAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgMCk7XG59XG5mdW5jdGlvbiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCkge1xuICB2YXIgdGFyZ2V0Tm9kZSA9IGdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCk7XG4gIGlmICh1cGRhdGVWYWx1ZUlmQ2hhbmdlZCh0YXJnZXROb2RlKSkgcmV0dXJuIHRhcmdldEluc3Q7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImNoYW5nZVwiID09PSBkb21FdmVudE5hbWUpIHJldHVybiB0YXJnZXRJbnN0O1xufVxudmFyIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9ICExO1xuaWYgKGNhblVzZURPTSkge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODM7XG4gIGlmIChjYW5Vc2VET00pIHtcbiAgICB2YXIgaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTggPSBcIm9uaW5wdXRcIiBpbiBkb2N1bWVudDtcbiAgICBpZiAoIWlzU3VwcG9ydGVkJGpzY29tcCRpbmxpbmVfNDE4KSB7XG4gICAgICB2YXIgZWxlbWVudCRqc2NvbXAkaW5saW5lXzQxOSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5LnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIiwgXCJyZXR1cm47XCIpO1xuICAgICAgaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTggPVxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5Lm9uaW5wdXQ7XG4gICAgfVxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzID0gaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTg7XG4gIH0gZWxzZSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MyA9ICExO1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPVxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzICYmXG4gICAgKCFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgOSA8IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG59XG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgYWN0aXZlRWxlbWVudCQxICYmXG4gICAgKGFjdGl2ZUVsZW1lbnQkMS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgaGFuZGxlUHJvcGVydHlDaGFuZ2UpLFxuICAgIChhY3RpdmVFbGVtZW50SW5zdCQxID0gYWN0aXZlRWxlbWVudCQxID0gbnVsbCkpO1xufVxuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKFxuICAgIFwidmFsdWVcIiA9PT0gbmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICYmXG4gICAgZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0JDEpXG4gICkge1xuICAgIHZhciBkaXNwYXRjaFF1ZXVlID0gW107XG4gICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0JDEsXG4gICAgICBuYXRpdmVFdmVudCxcbiAgICAgIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KVxuICAgICk7XG4gICAgYmF0Y2hlZFVwZGF0ZXMkMShydW5FdmVudEluQmF0Y2gsIGRpc3BhdGNoUXVldWUpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lLCB0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgXCJmb2N1c2luXCIgPT09IGRvbUV2ZW50TmFtZVxuICAgID8gKHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCksXG4gICAgICAoYWN0aXZlRWxlbWVudCQxID0gdGFyZ2V0KSxcbiAgICAgIChhY3RpdmVFbGVtZW50SW5zdCQxID0gdGFyZ2V0SW5zdCksXG4gICAgICBhY3RpdmVFbGVtZW50JDEuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKSlcbiAgICA6IFwiZm9jdXNvdXRcIiA9PT0gZG9tRXZlbnROYW1lICYmIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsKGRvbUV2ZW50TmFtZSkge1xuICBpZiAoXG4gICAgXCJzZWxlY3Rpb25jaGFuZ2VcIiA9PT0gZG9tRXZlbnROYW1lIHx8XG4gICAgXCJrZXl1cFwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICBcImtleWRvd25cIiA9PT0gZG9tRXZlbnROYW1lXG4gIClcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0JDEpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImNsaWNrXCIgPT09IGRvbUV2ZW50TmFtZSkgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImlucHV0XCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcImNoYW5nZVwiID09PSBkb21FdmVudE5hbWUpXG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbn1cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgcmV0dXJuICh4ID09PSB5ICYmICgwICE9PSB4IHx8IDEgLyB4ID09PSAxIC8geSkpIHx8ICh4ICE9PSB4ICYmIHkgIT09IHkpO1xufVxudmFyIG9iamVjdElzID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogaXM7XG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqZWN0SXMob2JqQSwgb2JqQikpIHJldHVybiAhMDtcbiAgaWYgKFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvYmpBIHx8XG4gICAgbnVsbCA9PT0gb2JqQSB8fFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvYmpCIHx8XG4gICAgbnVsbCA9PT0gb2JqQlxuICApXG4gICAgcmV0dXJuICExO1xuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKSxcbiAgICBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiAhMTtcbiAgZm9yIChrZXlzQiA9IDA7IGtleXNCIDwga2V5c0EubGVuZ3RoOyBrZXlzQisrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzQVtrZXlzQl07XG4gICAgaWYgKFxuICAgICAgIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwgY3VycmVudEtleSkgfHxcbiAgICAgICFvYmplY3RJcyhvYmpBW2N1cnJlbnRLZXldLCBvYmpCW2N1cnJlbnRLZXldKVxuICAgIClcbiAgICAgIHJldHVybiAhMTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIGZvciAoOyBub2RlICYmIG5vZGUuZmlyc3RDaGlsZDsgKSBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHJvb3QgPSAwO1xuICBmb3IgKHZhciBub2RlRW5kOyBub2RlOyApIHtcbiAgICBpZiAoMyA9PT0gbm9kZS5ub2RlVHlwZSkge1xuICAgICAgbm9kZUVuZCA9IHJvb3QgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgIGlmIChyb290IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldClcbiAgICAgICAgcmV0dXJuIHsgbm9kZTogbm9kZSwgb2Zmc2V0OiBvZmZzZXQgLSByb290IH07XG4gICAgICByb290ID0gbm9kZUVuZDtcbiAgICB9XG4gICAgYToge1xuICAgICAgZm9yICg7IG5vZGU7ICkge1xuICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSB2b2lkIDA7XG4gICAgfVxuICAgIG5vZGUgPSBnZXRMZWFmTm9kZShub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIHJldHVybiBvdXRlck5vZGUgJiYgaW5uZXJOb2RlXG4gICAgPyBvdXRlck5vZGUgPT09IGlubmVyTm9kZVxuICAgICAgPyAhMFxuICAgICAgOiBvdXRlck5vZGUgJiYgMyA9PT0gb3V0ZXJOb2RlLm5vZGVUeXBlXG4gICAgICAgID8gITFcbiAgICAgICAgOiBpbm5lck5vZGUgJiYgMyA9PT0gaW5uZXJOb2RlLm5vZGVUeXBlXG4gICAgICAgICAgPyBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgICA6IFwiY29udGFpbnNcIiBpbiBvdXRlck5vZGVcbiAgICAgICAgICAgID8gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSlcbiAgICAgICAgICAgIDogb3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG4gICAgICAgICAgICAgID8gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNilcbiAgICAgICAgICAgICAgOiAhMVxuICAgIDogITE7XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50RGVlcChjb250YWluZXJJbmZvKSB7XG4gIGNvbnRhaW5lckluZm8gPVxuICAgIG51bGwgIT0gY29udGFpbmVySW5mbyAmJlxuICAgIG51bGwgIT0gY29udGFpbmVySW5mby5vd25lckRvY3VtZW50ICYmXG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgID8gY29udGFpbmVySW5mby5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3XG4gICAgICA6IHdpbmRvdztcbiAgZm9yIChcbiAgICB2YXIgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVySW5mby5kb2N1bWVudCk7XG4gICAgZWxlbWVudCBpbnN0YW5jZW9mIGNvbnRhaW5lckluZm8uSFRNTElGcmFtZUVsZW1lbnQ7XG5cbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZWxlbWVudC5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICB9XG4gICAgaWYgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgY29udGFpbmVySW5mbyA9IGVsZW1lbnQuY29udGVudFdpbmRvdztcbiAgICBlbHNlIGJyZWFrO1xuICAgIGVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KGNvbnRhaW5lckluZm8uZG9jdW1lbnQpO1xuICB9XG4gIHJldHVybiBlbGVtZW50O1xufVxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChcbiAgICBub2RlTmFtZSAmJlxuICAgICgoXCJpbnB1dFwiID09PSBub2RlTmFtZSAmJlxuICAgICAgKFwidGV4dFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJzZWFyY2hcIiA9PT0gZWxlbS50eXBlIHx8XG4gICAgICAgIFwidGVsXCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInVybFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJwYXNzd29yZFwiID09PSBlbGVtLnR5cGUpKSB8fFxuICAgICAgXCJ0ZXh0YXJlYVwiID09PSBub2RlTmFtZSB8fFxuICAgICAgXCJ0cnVlXCIgPT09IGVsZW0uY29udGVudEVkaXRhYmxlKVxuICApO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNlbGVjdGlvbihwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLCBjb250YWluZXJJbmZvKSB7XG4gIHZhciBjdXJGb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnREZWVwKGNvbnRhaW5lckluZm8pO1xuICBjb250YWluZXJJbmZvID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbTtcbiAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICBpZiAoXG4gICAgY3VyRm9jdXNlZEVsZW0gIT09IGNvbnRhaW5lckluZm8gJiZcbiAgICBjb250YWluZXJJbmZvICYmXG4gICAgY29udGFpbmVySW5mby5vd25lckRvY3VtZW50ICYmXG4gICAgY29udGFpbnNOb2RlKGNvbnRhaW5lckluZm8ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNvbnRhaW5lckluZm8pXG4gICkge1xuICAgIGlmIChudWxsICE9PSBwcmlvclNlbGVjdGlvblJhbmdlICYmIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhjb250YWluZXJJbmZvKSlcbiAgICAgIGlmIChcbiAgICAgICAgKChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID0gcHJpb3JTZWxlY3Rpb25SYW5nZS5zdGFydCksXG4gICAgICAgIChjdXJGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kKSxcbiAgICAgICAgdm9pZCAwID09PSBjdXJGb2N1c2VkRWxlbSAmJlxuICAgICAgICAgIChjdXJGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pLFxuICAgICAgICBcInNlbGVjdGlvblN0YXJ0XCIgaW4gY29udGFpbmVySW5mbylcbiAgICAgIClcbiAgICAgICAgKGNvbnRhaW5lckluZm8uc2VsZWN0aW9uU3RhcnQgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSxcbiAgICAgICAgICAoY29udGFpbmVySW5mby5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLFxuICAgICAgICAgICAgY29udGFpbmVySW5mby52YWx1ZS5sZW5ndGhcbiAgICAgICAgICApKTtcbiAgICAgIGVsc2UgaWYgKFxuICAgICAgICAoKGN1ckZvY3VzZWRFbGVtID1cbiAgICAgICAgICAoKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24gPVxuICAgICAgICAgICAgY29udGFpbmVySW5mby5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSAmJlxuICAgICAgICAgICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5kZWZhdWx0VmlldykgfHxcbiAgICAgICAgICB3aW5kb3cpLFxuICAgICAgICBjdXJGb2N1c2VkRWxlbS5nZXRTZWxlY3Rpb24pXG4gICAgICApIHtcbiAgICAgICAgY3VyRm9jdXNlZEVsZW0gPSBjdXJGb2N1c2VkRWxlbS5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbnRhaW5lckluZm8udGV4dENvbnRlbnQubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gTWF0aC5taW4ocHJpb3JTZWxlY3Rpb25SYW5nZS5zdGFydCwgbGVuZ3RoKTtcbiAgICAgICAgcHJpb3JTZWxlY3Rpb25SYW5nZSA9XG4gICAgICAgICAgdm9pZCAwID09PSBwcmlvclNlbGVjdGlvblJhbmdlLmVuZFxuICAgICAgICAgICAgPyBzdGFydFxuICAgICAgICAgICAgOiBNYXRoLm1pbihwcmlvclNlbGVjdGlvblJhbmdlLmVuZCwgbGVuZ3RoKTtcbiAgICAgICAgIWN1ckZvY3VzZWRFbGVtLmV4dGVuZCAmJlxuICAgICAgICAgIHN0YXJ0ID4gcHJpb3JTZWxlY3Rpb25SYW5nZSAmJlxuICAgICAgICAgICgobGVuZ3RoID0gcHJpb3JTZWxlY3Rpb25SYW5nZSksXG4gICAgICAgICAgKHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBzdGFydCksXG4gICAgICAgICAgKHN0YXJ0ID0gbGVuZ3RoKSk7XG4gICAgICAgIGxlbmd0aCA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQoY29udGFpbmVySW5mbywgc3RhcnQpO1xuICAgICAgICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChcbiAgICAgICAgICBjb250YWluZXJJbmZvLFxuICAgICAgICAgIHByaW9yU2VsZWN0aW9uUmFuZ2VcbiAgICAgICAgKTtcbiAgICAgICAgbGVuZ3RoICYmXG4gICAgICAgICAgZW5kTWFya2VyICYmXG4gICAgICAgICAgKDEgIT09IGN1ckZvY3VzZWRFbGVtLnJhbmdlQ291bnQgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmFuY2hvck5vZGUgIT09IGxlbmd0aC5ub2RlIHx8XG4gICAgICAgICAgICBjdXJGb2N1c2VkRWxlbS5hbmNob3JPZmZzZXQgIT09IGxlbmd0aC5vZmZzZXQgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmZvY3VzTm9kZSAhPT0gZW5kTWFya2VyLm5vZGUgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmZvY3VzT2Zmc2V0ICE9PSBlbmRNYXJrZXIub2Zmc2V0KSAmJlxuICAgICAgICAgICgocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9XG4gICAgICAgICAgICBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmNyZWF0ZVJhbmdlKCkpLFxuICAgICAgICAgIHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2V0U3RhcnQobGVuZ3RoLm5vZGUsIGxlbmd0aC5vZmZzZXQpLFxuICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLnJlbW92ZUFsbFJhbmdlcygpLFxuICAgICAgICAgIHN0YXJ0ID4gcHJpb3JTZWxlY3Rpb25SYW5nZVxuICAgICAgICAgICAgPyAoY3VyRm9jdXNlZEVsZW0uYWRkUmFuZ2UocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiksXG4gICAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCkpXG4gICAgICAgICAgICA6IChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNldEVuZChcbiAgICAgICAgICAgICAgICBlbmRNYXJrZXIubm9kZSxcbiAgICAgICAgICAgICAgICBlbmRNYXJrZXIub2Zmc2V0XG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmFkZFJhbmdlKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pKSk7XG4gICAgICB9XG4gICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9IFtdO1xuICAgIGZvciAoXG4gICAgICBjdXJGb2N1c2VkRWxlbSA9IGNvbnRhaW5lckluZm87XG4gICAgICAoY3VyRm9jdXNlZEVsZW0gPSBjdXJGb2N1c2VkRWxlbS5wYXJlbnROb2RlKTtcblxuICAgIClcbiAgICAgIDEgPT09IGN1ckZvY3VzZWRFbGVtLm5vZGVUeXBlICYmXG4gICAgICAgIHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24ucHVzaCh7XG4gICAgICAgICAgZWxlbWVudDogY3VyRm9jdXNlZEVsZW0sXG4gICAgICAgICAgbGVmdDogY3VyRm9jdXNlZEVsZW0uc2Nyb2xsTGVmdCxcbiAgICAgICAgICB0b3A6IGN1ckZvY3VzZWRFbGVtLnNjcm9sbFRvcFxuICAgICAgICB9KTtcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250YWluZXJJbmZvLmZvY3VzICYmIGNvbnRhaW5lckluZm8uZm9jdXMoKTtcbiAgICBmb3IgKFxuICAgICAgY29udGFpbmVySW5mbyA9IDA7XG4gICAgICBjb250YWluZXJJbmZvIDwgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5sZW5ndGg7XG4gICAgICBjb250YWluZXJJbmZvKytcbiAgICApXG4gICAgICAoY3VyRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uW2NvbnRhaW5lckluZm9dKSxcbiAgICAgICAgKGN1ckZvY3VzZWRFbGVtLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IGN1ckZvY3VzZWRFbGVtLmxlZnQpLFxuICAgICAgICAoY3VyRm9jdXNlZEVsZW0uZWxlbWVudC5zY3JvbGxUb3AgPSBjdXJGb2N1c2VkRWxlbS50b3ApO1xuICB9XG59XG52YXIgc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50ID1cbiAgICBjYW5Vc2VET00gJiYgXCJkb2N1bWVudE1vZGVcIiBpbiBkb2N1bWVudCAmJiAxMSA+PSBkb2N1bWVudC5kb2N1bWVudE1vZGUsXG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsLFxuICBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGwsXG4gIGxhc3RTZWxlY3Rpb24gPSBudWxsLFxuICBtb3VzZURvd24gPSAhMTtcbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KGRpc3BhdGNoUXVldWUsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgZG9jID1cbiAgICBuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICA/IG5hdGl2ZUV2ZW50VGFyZ2V0LmRvY3VtZW50XG4gICAgICA6IDkgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0Lm5vZGVUeXBlXG4gICAgICAgID8gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgOiBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50O1xuICBtb3VzZURvd24gfHxcbiAgICBudWxsID09IGFjdGl2ZUVsZW1lbnQgfHxcbiAgICBhY3RpdmVFbGVtZW50ICE9PSBnZXRBY3RpdmVFbGVtZW50KGRvYykgfHxcbiAgICAoKGRvYyA9IGFjdGl2ZUVsZW1lbnQpLFxuICAgIFwic2VsZWN0aW9uU3RhcnRcIiBpbiBkb2MgJiYgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGRvYylcbiAgICAgID8gKGRvYyA9IHsgc3RhcnQ6IGRvYy5zZWxlY3Rpb25TdGFydCwgZW5kOiBkb2Muc2VsZWN0aW9uRW5kIH0pXG4gICAgICA6ICgoZG9jID0gKFxuICAgICAgICAgIChkb2Mub3duZXJEb2N1bWVudCAmJiBkb2Mub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgfHxcbiAgICAgICAgICB3aW5kb3dcbiAgICAgICAgKS5nZXRTZWxlY3Rpb24oKSksXG4gICAgICAgIChkb2MgPSB7XG4gICAgICAgICAgYW5jaG9yTm9kZTogZG9jLmFuY2hvck5vZGUsXG4gICAgICAgICAgYW5jaG9yT2Zmc2V0OiBkb2MuYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgIGZvY3VzTm9kZTogZG9jLmZvY3VzTm9kZSxcbiAgICAgICAgICBmb2N1c09mZnNldDogZG9jLmZvY3VzT2Zmc2V0XG4gICAgICAgIH0pKSxcbiAgICAobGFzdFNlbGVjdGlvbiAmJiBzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgZG9jKSkgfHxcbiAgICAgICgobGFzdFNlbGVjdGlvbiA9IGRvYyksXG4gICAgICAoZG9jID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKGFjdGl2ZUVsZW1lbnRJbnN0LCBcIm9uU2VsZWN0XCIpKSxcbiAgICAgIDAgPCBkb2MubGVuZ3RoICYmXG4gICAgICAgICgobmF0aXZlRXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICAgICAgXCJvblNlbGVjdFwiLFxuICAgICAgICAgIFwic2VsZWN0XCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICApKSxcbiAgICAgICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IG5hdGl2ZUV2ZW50LCBsaXN0ZW5lcnM6IGRvYyB9KSxcbiAgICAgICAgKG5hdGl2ZUV2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQpKSkpO1xufVxuZnVuY3Rpb24gbWFrZVByZWZpeE1hcChzdHlsZVByb3AsIGV2ZW50TmFtZSkge1xuICB2YXIgcHJlZml4ZXMgPSB7fTtcbiAgcHJlZml4ZXNbc3R5bGVQcm9wLnRvTG93ZXJDYXNlKCldID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHByZWZpeGVzW1wiV2Via2l0XCIgKyBzdHlsZVByb3BdID0gXCJ3ZWJraXRcIiArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbXCJNb3pcIiArIHN0eWxlUHJvcF0gPSBcIm1velwiICsgZXZlbnROYW1lO1xuICByZXR1cm4gcHJlZml4ZXM7XG59XG52YXIgdmVuZG9yUHJlZml4ZXMgPSB7XG4gICAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uRW5kXCIpLFxuICAgIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxcbiAgICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvblN0YXJ0XCIpLFxuICAgIHRyYW5zaXRpb25ydW46IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvblJ1blwiKSxcbiAgICB0cmFuc2l0aW9uc3RhcnQ6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvblN0YXJ0XCIpLFxuICAgIHRyYW5zaXRpb25jYW5jZWw6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvbkNhbmNlbFwiKSxcbiAgICB0cmFuc2l0aW9uZW5kOiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25FbmRcIilcbiAgfSxcbiAgcHJlZml4ZWRFdmVudE5hbWVzID0ge30sXG4gIHN0eWxlID0ge307XG5jYW5Vc2VET00gJiZcbiAgKChzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUpLFxuICBcIkFuaW1hdGlvbkV2ZW50XCIgaW4gd2luZG93IHx8XG4gICAgKGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFxuICBcIlRyYW5zaXRpb25FdmVudFwiIGluIHdpbmRvdyB8fFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoZXZlbnROYW1lKSB7XG4gIGlmIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSkgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICBpZiAoIXZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0pIHJldHVybiBldmVudE5hbWU7XG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdLFxuICAgIHN0eWxlUHJvcDtcbiAgZm9yIChzdHlsZVByb3AgaW4gcHJlZml4TWFwKVxuICAgIGlmIChwcmVmaXhNYXAuaGFzT3duUHJvcGVydHkoc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpXG4gICAgICByZXR1cm4gKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdID0gcHJlZml4TWFwW3N0eWxlUHJvcF0pO1xuICByZXR1cm4gZXZlbnROYW1lO1xufVxudmFyIEFOSU1BVElPTl9FTkQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbmVuZFwiKSxcbiAgQU5JTUFUSU9OX0lURVJBVElPTiA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFxuICBBTklNQVRJT05fU1RBUlQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbnN0YXJ0XCIpLFxuICBUUkFOU0lUSU9OX1JVTiA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbnJ1blwiKSxcbiAgVFJBTlNJVElPTl9TVEFSVCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbnN0YXJ0XCIpLFxuICBUUkFOU0lUSU9OX0NBTkNFTCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbmNhbmNlbFwiKSxcbiAgVFJBTlNJVElPTl9FTkQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25lbmRcIiksXG4gIHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzID0gbmV3IE1hcCgpLFxuICBzaW1wbGVFdmVudFBsdWdpbkV2ZW50cyA9XG4gICAgXCJhYm9ydCBhdXhDbGljayBiZWZvcmVUb2dnbGUgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCBzY3JvbGxFbmQgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXG4gICAgICBcIiBcIlxuICAgICk7XG5mdW5jdGlvbiByZWdpc3RlclNpbXBsZUV2ZW50KGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lKSB7XG4gIHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzLnNldChkb21FdmVudE5hbWUsIHJlYWN0TmFtZSk7XG4gIHJlZ2lzdGVyVHdvUGhhc2VFdmVudChyZWFjdE5hbWUsIFtkb21FdmVudE5hbWVdKTtcbn1cbnZhciBjb25jdXJyZW50UXVldWVzID0gW10sXG4gIGNvbmN1cnJlbnRRdWV1ZXNJbmRleCA9IDAsXG4gIGNvbmN1cnJlbnRseVVwZGF0ZWRMYW5lcyA9IDA7XG5mdW5jdGlvbiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCkge1xuICBmb3IgKFxuICAgIHZhciBlbmRJbmRleCA9IGNvbmN1cnJlbnRRdWV1ZXNJbmRleCxcbiAgICAgIGkgPSAoY29uY3VycmVudGx5VXBkYXRlZExhbmVzID0gY29uY3VycmVudFF1ZXVlc0luZGV4ID0gMCk7XG4gICAgaSA8IGVuZEluZGV4O1xuXG4gICkge1xuICAgIHZhciBmaWJlciA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgcXVldWUgPSBjb25jdXJyZW50UXVldWVzW2ldO1xuICAgIGNvbmN1cnJlbnRRdWV1ZXNbaSsrXSA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgbGFuZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUgJiYgbnVsbCAhPT0gdXBkYXRlKSB7XG4gICAgICB2YXIgcGVuZGluZyA9IHF1ZXVlLnBlbmRpbmc7XG4gICAgICBudWxsID09PSBwZW5kaW5nXG4gICAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgICA6ICgodXBkYXRlLm5leHQgPSBwZW5kaW5nLm5leHQpLCAocGVuZGluZy5uZXh0ID0gdXBkYXRlKSk7XG4gICAgICBxdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xuICAgIH1cbiAgICAwICE9PSBsYW5lICYmIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KGZpYmVyLCB1cGRhdGUsIGxhbmUpO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBmaWJlcjtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBxdWV1ZTtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSB1cGRhdGU7XG4gIGNvbmN1cnJlbnRRdWV1ZXNbY29uY3VycmVudFF1ZXVlc0luZGV4KytdID0gbGFuZTtcbiAgY29uY3VycmVudGx5VXBkYXRlZExhbmVzIHw9IGxhbmU7XG4gIGZpYmVyLmxhbmVzIHw9IGxhbmU7XG4gIGZpYmVyID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmaWJlciAmJiAoZmliZXIubGFuZXMgfD0gbGFuZSk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCBsYW5lKSB7XG4gIGVucXVldWVVcGRhdGUkMShmaWJlciwgbnVsbCwgbnVsbCwgbGFuZSk7XG4gIHJldHVybiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KHNvdXJjZUZpYmVyLCB1cGRhdGUsIGxhbmUpIHtcbiAgc291cmNlRmliZXIubGFuZXMgfD0gbGFuZTtcbiAgdmFyIGFsdGVybmF0ZSA9IHNvdXJjZUZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUubGFuZXMgfD0gbGFuZSk7XG4gIGZvciAodmFyIGlzSGlkZGVuID0gITEsIHBhcmVudCA9IHNvdXJjZUZpYmVyLnJldHVybjsgbnVsbCAhPT0gcGFyZW50OyApXG4gICAgKHBhcmVudC5jaGlsZExhbmVzIHw9IGxhbmUpLFxuICAgICAgKGFsdGVybmF0ZSA9IHBhcmVudC5hbHRlcm5hdGUpLFxuICAgICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSBsYW5lKSxcbiAgICAgIDIyID09PSBwYXJlbnQudGFnICYmXG4gICAgICAgICgoc291cmNlRmliZXIgPSBwYXJlbnQuc3RhdGVOb2RlKSxcbiAgICAgICAgbnVsbCA9PT0gc291cmNlRmliZXIgfHwgc291cmNlRmliZXIuX3Zpc2liaWxpdHkgJiAxIHx8IChpc0hpZGRlbiA9ICEwKSksXG4gICAgICAoc291cmNlRmliZXIgPSBwYXJlbnQpLFxuICAgICAgKHBhcmVudCA9IHBhcmVudC5yZXR1cm4pO1xuICBpc0hpZGRlbiAmJlxuICAgIG51bGwgIT09IHVwZGF0ZSAmJlxuICAgIDMgPT09IHNvdXJjZUZpYmVyLnRhZyAmJlxuICAgICgocGFyZW50ID0gc291cmNlRmliZXIuc3RhdGVOb2RlKSxcbiAgICAoaXNIaWRkZW4gPSAzMSAtIGNsejMyKGxhbmUpKSxcbiAgICAocGFyZW50ID0gcGFyZW50LmhpZGRlblVwZGF0ZXMpLFxuICAgIChzb3VyY2VGaWJlciA9IHBhcmVudFtpc0hpZGRlbl0pLFxuICAgIG51bGwgPT09IHNvdXJjZUZpYmVyXG4gICAgICA/IChwYXJlbnRbaXNIaWRkZW5dID0gW3VwZGF0ZV0pXG4gICAgICA6IHNvdXJjZUZpYmVyLnB1c2godXBkYXRlKSxcbiAgICAodXBkYXRlLmxhbmUgPSBsYW5lIHwgNTM2ODcwOTEyKSk7XG59XG5mdW5jdGlvbiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKHNvdXJjZUZpYmVyKSB7XG4gIGlmICg1MCA8IG5lc3RlZFVwZGF0ZUNvdW50KVxuICAgIHRocm93IChcbiAgICAgICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSxcbiAgICAgIChyb290V2l0aE5lc3RlZFVwZGF0ZXMgPSBudWxsKSxcbiAgICAgIEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg1KSkpXG4gICAgKTtcbiAgZm9yICh2YXIgcGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICAoc291cmNlRmliZXIgPSBwYXJlbnQpLCAocGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuKTtcbiAgcmV0dXJuIDMgPT09IHNvdXJjZUZpYmVyLnRhZyA/IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSA6IG51bGw7XG59XG52YXIgZW1wdHlDb250ZXh0T2JqZWN0ID0ge30sXG4gIENhcHR1cmVkU3RhY2tzID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHZhbHVlLCBzb3VyY2UpIHtcbiAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiB2YWx1ZSAmJiBudWxsICE9PSB2YWx1ZSkge1xuICAgIHZhciBleGlzdGluZyA9IENhcHR1cmVkU3RhY2tzLmdldCh2YWx1ZSk7XG4gICAgaWYgKHZvaWQgMCAhPT0gZXhpc3RpbmcpIHJldHVybiBleGlzdGluZztcbiAgICBzb3VyY2UgPSB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIHN0YWNrOiBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2Qoc291cmNlKVxuICAgIH07XG4gICAgQ2FwdHVyZWRTdGFja3Muc2V0KHZhbHVlLCBzb3VyY2UpO1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgc291cmNlOiBzb3VyY2UsXG4gICAgc3RhY2s6IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpXG4gIH07XG59XG52YXIgZm9ya1N0YWNrID0gW10sXG4gIGZvcmtTdGFja0luZGV4ID0gMCxcbiAgdHJlZUZvcmtQcm92aWRlciA9IG51bGwsXG4gIHRyZWVGb3JrQ291bnQgPSAwLFxuICBpZFN0YWNrID0gW10sXG4gIGlkU3RhY2tJbmRleCA9IDAsXG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSBudWxsLFxuICB0cmVlQ29udGV4dElkID0gMSxcbiAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IFwiXCI7XG5mdW5jdGlvbiBwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4pIHtcbiAgZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4KytdID0gdHJlZUZvcmtDb3VudDtcbiAgZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4KytdID0gdHJlZUZvcmtQcm92aWRlcjtcbiAgdHJlZUZvcmtQcm92aWRlciA9IHdvcmtJblByb2dyZXNzO1xuICB0cmVlRm9ya0NvdW50ID0gdG90YWxDaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4sIGluZGV4KSB7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRJZDtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0UHJvdmlkZXI7XG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgdmFyIGJhc2VJZFdpdGhMZWFkaW5nQml0ID0gdHJlZUNvbnRleHRJZDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICB2YXIgYmFzZUxlbmd0aCA9IDMyIC0gY2x6MzIoYmFzZUlkV2l0aExlYWRpbmdCaXQpIC0gMTtcbiAgYmFzZUlkV2l0aExlYWRpbmdCaXQgJj0gfigxIDw8IGJhc2VMZW5ndGgpO1xuICBpbmRleCArPSAxO1xuICB2YXIgbGVuZ3RoID0gMzIgLSBjbHozMih0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGg7XG4gIGlmICgzMCA8IGxlbmd0aCkge1xuICAgIHZhciBudW1iZXJPZk92ZXJmbG93Qml0cyA9IGJhc2VMZW5ndGggLSAoYmFzZUxlbmd0aCAlIDUpO1xuICAgIGxlbmd0aCA9IChcbiAgICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0ICZcbiAgICAgICgoMSA8PCBudW1iZXJPZk92ZXJmbG93Qml0cykgLSAxKVxuICAgICkudG9TdHJpbmcoMzIpO1xuICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0ID4+PSBudW1iZXJPZk92ZXJmbG93Qml0cztcbiAgICBiYXNlTGVuZ3RoIC09IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIHRyZWVDb250ZXh0SWQgPVxuICAgICAgKDEgPDwgKDMyIC0gY2x6MzIodG90YWxDaGlsZHJlbikgKyBiYXNlTGVuZ3RoKSkgfFxuICAgICAgKGluZGV4IDw8IGJhc2VMZW5ndGgpIHxcbiAgICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0O1xuICAgIHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBsZW5ndGggKyB3b3JrSW5Qcm9ncmVzcztcbiAgfSBlbHNlXG4gICAgKHRyZWVDb250ZXh0SWQgPVxuICAgICAgKDEgPDwgbGVuZ3RoKSB8IChpbmRleCA8PCBiYXNlTGVuZ3RoKSB8IGJhc2VJZFdpdGhMZWFkaW5nQml0KSxcbiAgICAgICh0cmVlQ29udGV4dE92ZXJmbG93ID0gd29ya0luUHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcykge1xuICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm4gJiZcbiAgICAocHVzaFRyZWVGb3JrKHdvcmtJblByb2dyZXNzLCAxKSwgcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgMSwgMCkpO1xufVxuZnVuY3Rpb24gcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgZm9yICg7IHdvcmtJblByb2dyZXNzID09PSB0cmVlRm9ya1Byb3ZpZGVyOyApXG4gICAgKHRyZWVGb3JrUHJvdmlkZXIgPSBmb3JrU3RhY2tbLS1mb3JrU3RhY2tJbmRleF0pLFxuICAgICAgKGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsKSxcbiAgICAgICh0cmVlRm9ya0NvdW50ID0gZm9ya1N0YWNrWy0tZm9ya1N0YWNrSW5kZXhdKSxcbiAgICAgIChmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXhdID0gbnVsbCk7XG4gIGZvciAoOyB3b3JrSW5Qcm9ncmVzcyA9PT0gdHJlZUNvbnRleHRQcm92aWRlcjsgKVxuICAgICh0cmVlQ29udGV4dFByb3ZpZGVyID0gaWRTdGFja1stLWlkU3RhY2tJbmRleF0pLFxuICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGwpLFxuICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBpZFN0YWNrWy0taWRTdGFja0luZGV4XSksXG4gICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXhdID0gbnVsbCksXG4gICAgICAodHJlZUNvbnRleHRJZCA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdKSxcbiAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleF0gPSBudWxsKTtcbn1cbnZhciBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGwsXG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsLFxuICBpc0h5ZHJhdGluZyA9ICExLFxuICBoeWRyYXRpb25FcnJvcnMgPSBudWxsLFxuICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEsXG4gIEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MTkpKTtcbmZ1bmN0aW9uIHRocm93T25IeWRyYXRpb25NaXNtYXRjaChmaWJlcikge1xuICB2YXIgZXJyb3IgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQxOCwgXCJcIikpO1xuICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBmaWJlcikpO1xuICB0aHJvdyBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbjtcbn1cbmZ1bmN0aW9uIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UoZmliZXIpIHtcbiAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlLFxuICAgIHR5cGUgPSBmaWJlci50eXBlLFxuICAgIHByb3BzID0gZmliZXIubWVtb2l6ZWRQcm9wcztcbiAgaW5zdGFuY2VbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBmaWJlcjtcbiAgaW5zdGFuY2VbaW50ZXJuYWxQcm9wc0tleV0gPSBwcm9wcztcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBpbnN0YW5jZSk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2xvc2VcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlmcmFtZVwiOlxuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yICh0eXBlID0gMDsgdHlwZSA8IG1lZGlhRXZlbnRUeXBlcy5sZW5ndGg7IHR5cGUrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbdHlwZV0sIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImltYWdlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBpbnN0YW5jZSk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGV0YWlsc1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGluc3RhbmNlKTtcbiAgICAgIGluaXRJbnB1dChcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIHByb3BzLnZhbHVlLFxuICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgIHByb3BzLmNoZWNrZWQsXG4gICAgICAgIHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICBwcm9wcy50eXBlLFxuICAgICAgICBwcm9wcy5uYW1lLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICAgIHRyYWNrKGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpLFxuICAgICAgICBpbml0VGV4dGFyZWEoaW5zdGFuY2UsIHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHByb3BzLmNoaWxkcmVuKSxcbiAgICAgICAgdHJhY2soaW5zdGFuY2UpO1xuICB9XG4gIHR5cGUgPSBwcm9wcy5jaGlsZHJlbjtcbiAgKFwic3RyaW5nXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJudW1iZXJcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcImJpZ2ludFwiICE9PSB0eXBlb2YgdHlwZSkgfHxcbiAgaW5zdGFuY2UudGV4dENvbnRlbnQgPT09IFwiXCIgKyB0eXBlIHx8XG4gICEwID09PSBwcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgfHxcbiAgY2hlY2tGb3JVbm1hdGNoZWRUZXh0KGluc3RhbmNlLnRleHRDb250ZW50LCB0eXBlKVxuICAgID8gKG51bGwgIT0gcHJvcHMucG9wb3ZlciAmJlxuICAgICAgICAobGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImJlZm9yZXRvZ2dsZVwiLCBpbnN0YW5jZSksXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgaW5zdGFuY2UpKSxcbiAgICAgIG51bGwgIT0gcHJvcHMub25TY3JvbGwgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBpbnN0YW5jZSksXG4gICAgICBudWxsICE9IHByb3BzLm9uU2Nyb2xsRW5kICYmXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgaW5zdGFuY2UpLFxuICAgICAgbnVsbCAhPSBwcm9wcy5vbkNsaWNrICYmIChpbnN0YW5jZS5vbmNsaWNrID0gbm9vcCQxKSxcbiAgICAgIChpbnN0YW5jZSA9ICEwKSlcbiAgICA6IChpbnN0YW5jZSA9ICExKTtcbiAgaW5zdGFuY2UgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpIHtcbiAgZm9yIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyLnJldHVybjsgaHlkcmF0aW9uUGFyZW50RmliZXI7IClcbiAgICBzd2l0Y2ggKGh5ZHJhdGlvblBhcmVudEZpYmVyLnRhZykge1xuICAgICAgY2FzZSAzOlxuICAgICAgY2FzZSAyNzpcbiAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICEwO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIDU6XG4gICAgICBjYXNlIDEzOlxuICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gaHlkcmF0aW9uUGFyZW50RmliZXIucmV0dXJuO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBvcEh5ZHJhdGlvblN0YXRlKGZpYmVyKSB7XG4gIGlmIChmaWJlciAhPT0gaHlkcmF0aW9uUGFyZW50RmliZXIpIHJldHVybiAhMTtcbiAgaWYgKCFpc0h5ZHJhdGluZykgcmV0dXJuIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpLCAoaXNIeWRyYXRpbmcgPSAhMCksICExO1xuICB2YXIgc2hvdWxkQ2xlYXIgPSAhMSxcbiAgICBKU0NvbXBpbGVyX3RlbXA7XG4gIGlmICgoSlNDb21waWxlcl90ZW1wID0gMyAhPT0gZmliZXIudGFnICYmIDI3ICE9PSBmaWJlci50YWcpKSB7XG4gICAgaWYgKChKU0NvbXBpbGVyX3RlbXAgPSA1ID09PSBmaWJlci50YWcpKVxuICAgICAgKEpTQ29tcGlsZXJfdGVtcCA9IGZpYmVyLnR5cGUpLFxuICAgICAgICAoSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgICAhKFwiZm9ybVwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiYgXCJidXR0b25cIiAhPT0gSlNDb21waWxlcl90ZW1wKSB8fFxuICAgICAgICAgIHNob3VsZFNldFRleHRDb250ZW50KGZpYmVyLnR5cGUsIGZpYmVyLm1lbW9pemVkUHJvcHMpKTtcbiAgICBKU0NvbXBpbGVyX3RlbXAgPSAhSlNDb21waWxlcl90ZW1wO1xuICB9XG4gIEpTQ29tcGlsZXJfdGVtcCAmJiAoc2hvdWxkQ2xlYXIgPSAhMCk7XG4gIHNob3VsZENsZWFyICYmIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgJiYgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKTtcbiAgcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcik7XG4gIGlmICgxMyA9PT0gZmliZXIudGFnKSB7XG4gICAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICAgIGZpYmVyID0gbnVsbCAhPT0gZmliZXIgPyBmaWJlci5kZWh5ZHJhdGVkIDogbnVsbDtcbiAgICBpZiAoIWZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNykpO1xuICAgIGE6IHtcbiAgICAgIGZpYmVyID0gZmliZXIubmV4dFNpYmxpbmc7XG4gICAgICBmb3IgKHNob3VsZENsZWFyID0gMDsgZmliZXI7ICkge1xuICAgICAgICBpZiAoOCA9PT0gZmliZXIubm9kZVR5cGUpXG4gICAgICAgICAgaWYgKCgoSlNDb21waWxlcl90ZW1wID0gZmliZXIuZGF0YSksIFwiLyRcIiA9PT0gSlNDb21waWxlcl90ZW1wKSkge1xuICAgICAgICAgICAgaWYgKDAgPT09IHNob3VsZENsZWFyKSB7XG4gICAgICAgICAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShmaWJlci5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaG91bGRDbGVhci0tO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgKFwiJFwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgXCIkIVwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgXCIkP1wiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgICAgIHNob3VsZENsZWFyKys7XG4gICAgICAgIGZpYmVyID0gZmliZXIubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH0gZWxzZVxuICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlclxuICAgICAgPyBnZXROZXh0SHlkcmF0YWJsZShmaWJlci5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpXG4gICAgICA6IG51bGw7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSB7XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGw7XG4gIGlzSHlkcmF0aW5nID0gITE7XG59XG5mdW5jdGlvbiBxdWV1ZUh5ZHJhdGlvbkVycm9yKGVycm9yKSB7XG4gIG51bGwgPT09IGh5ZHJhdGlvbkVycm9yc1xuICAgID8gKGh5ZHJhdGlvbkVycm9ycyA9IFtlcnJvcl0pXG4gICAgOiBoeWRyYXRpb25FcnJvcnMucHVzaChlcnJvcik7XG59XG52YXIgU3VzcGVuc2VFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2MCkpLFxuICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NCkpLFxuICBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGUgPSB7IHRoZW46IGZ1bmN0aW9uICgpIHt9IH07XG5mdW5jdGlvbiBpc1RoZW5hYmxlUmVzb2x2ZWQodGhlbmFibGUpIHtcbiAgdGhlbmFibGUgPSB0aGVuYWJsZS5zdGF0dXM7XG4gIHJldHVybiBcImZ1bGZpbGxlZFwiID09PSB0aGVuYWJsZSB8fCBcInJlamVjdGVkXCIgPT09IHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gbm9vcCQzKCkge31cbmZ1bmN0aW9uIHRyYWNrVXNlZFRoZW5hYmxlKHRoZW5hYmxlU3RhdGUsIHRoZW5hYmxlLCBpbmRleCkge1xuICBpbmRleCA9IHRoZW5hYmxlU3RhdGVbaW5kZXhdO1xuICB2b2lkIDAgPT09IGluZGV4XG4gICAgPyB0aGVuYWJsZVN0YXRlLnB1c2godGhlbmFibGUpXG4gICAgOiBpbmRleCAhPT0gdGhlbmFibGUgJiYgKHRoZW5hYmxlLnRoZW4obm9vcCQzLCBub29wJDMpLCAodGhlbmFibGUgPSBpbmRleCkpO1xuICBzd2l0Y2ggKHRoZW5hYmxlLnN0YXR1cykge1xuICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgIHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZS5yZWFzb247XG4gICAgICBpZiAodGhlbmFibGVTdGF0ZSA9PT0gU3VzcGVuc2VFeGNlcHRpb24pXG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDgzKSk7XG4gICAgICB0aHJvdyB0aGVuYWJsZVN0YXRlO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHRoZW5hYmxlLnN0YXR1cykgdGhlbmFibGUudGhlbihub29wJDMsIG5vb3AkMyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHdvcmtJblByb2dyZXNzUm9vdDtcbiAgICAgICAgaWYgKG51bGwgIT09IHRoZW5hYmxlU3RhdGUgJiYgMTAwIDwgdGhlbmFibGVTdGF0ZS5zaGVsbFN1c3BlbmRDb3VudGVyKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDgyKSk7XG4gICAgICAgIHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZTtcbiAgICAgICAgdGhlbmFibGVTdGF0ZS5zdGF0dXMgPSBcInBlbmRpbmdcIjtcbiAgICAgICAgdGhlbmFibGVTdGF0ZS50aGVuKFxuICAgICAgICAgIGZ1bmN0aW9uIChmdWxmaWxsZWRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdmFyIGZ1bGZpbGxlZFRoZW5hYmxlID0gdGhlbmFibGU7XG4gICAgICAgICAgICAgIGZ1bGZpbGxlZFRoZW5hYmxlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCI7XG4gICAgICAgICAgICAgIGZ1bGZpbGxlZFRoZW5hYmxlLnZhbHVlID0gZnVsZmlsbGVkVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgICAgICAgIHZhciByZWplY3RlZFRoZW5hYmxlID0gdGhlbmFibGU7XG4gICAgICAgICAgICAgIHJlamVjdGVkVGhlbmFibGUuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgICAgICByZWplY3RlZFRoZW5hYmxlLnJlYXNvbiA9IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICAgIHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZS5yZWFzb247XG4gICAgICAgICAgaWYgKHRoZW5hYmxlU3RhdGUgPT09IFN1c3BlbnNlRXhjZXB0aW9uKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODMpKTtcbiAgICAgICAgICB0aHJvdyB0aGVuYWJsZVN0YXRlO1xuICAgICAgfVxuICAgICAgc3VzcGVuZGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgIHRocm93IFN1c3BlbnNlRXhjZXB0aW9uO1xuICB9XG59XG52YXIgc3VzcGVuZGVkVGhlbmFibGUgPSBudWxsO1xuZnVuY3Rpb24gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRUaGVuYWJsZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTkpKTtcbiAgdmFyIHRoZW5hYmxlID0gc3VzcGVuZGVkVGhlbmFibGU7XG4gIHN1c3BlbmRlZFRoZW5hYmxlID0gbnVsbDtcbiAgcmV0dXJuIHRoZW5hYmxlO1xufVxudmFyIHRoZW5hYmxlU3RhdGUkMSA9IG51bGwsXG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuZnVuY3Rpb24gdW53cmFwVGhlbmFibGUodGhlbmFibGUpIHtcbiAgdmFyIGluZGV4ID0gdGhlbmFibGVJbmRleENvdW50ZXIkMTtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSArPSAxO1xuICBudWxsID09PSB0aGVuYWJsZVN0YXRlJDEgJiYgKHRoZW5hYmxlU3RhdGUkMSA9IFtdKTtcbiAgcmV0dXJuIHRyYWNrVXNlZFRoZW5hYmxlKHRoZW5hYmxlU3RhdGUkMSwgdGhlbmFibGUsIGluZGV4KTtcbn1cbmZ1bmN0aW9uIGNvZXJjZVJlZih3b3JrSW5Qcm9ncmVzcywgZWxlbWVudCkge1xuICBlbGVtZW50ID0gZWxlbWVudC5wcm9wcy5yZWY7XG4gIHdvcmtJblByb2dyZXNzLnJlZiA9IHZvaWQgMCAhPT0gZWxlbWVudCA/IGVsZW1lbnQgOiBudWxsO1xufVxuZnVuY3Rpb24gdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCkge1xuICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0xFR0FDWV9FTEVNRU5UX1RZUEUpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjUpKTtcbiAgcmV0dXJuRmliZXIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3Q2hpbGQpO1xuICB0aHJvdyBFcnJvcihcbiAgICBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKFxuICAgICAgMzEsXG4gICAgICBcIltvYmplY3QgT2JqZWN0XVwiID09PSByZXR1cm5GaWJlclxuICAgICAgICA/IFwib2JqZWN0IHdpdGgga2V5cyB7XCIgKyBPYmplY3Qua2V5cyhuZXdDaGlsZCkuam9pbihcIiwgXCIpICsgXCJ9XCJcbiAgICAgICAgOiByZXR1cm5GaWJlclxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVMYXp5KGxhenlUeXBlKSB7XG4gIHZhciBpbml0ID0gbGF6eVR5cGUuX2luaXQ7XG4gIHJldHVybiBpbml0KGxhenlUeXBlLl9wYXlsb2FkKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkUmVjb25jaWxlcihzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gIGZ1bmN0aW9uIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKSB7XG4gICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIHZhciBkZWxldGlvbnMgPSByZXR1cm5GaWJlci5kZWxldGlvbnM7XG4gICAgICBudWxsID09PSBkZWxldGlvbnNcbiAgICAgICAgPyAoKHJldHVybkZpYmVyLmRlbGV0aW9ucyA9IFtjaGlsZFRvRGVsZXRlXSksIChyZXR1cm5GaWJlci5mbGFncyB8PSAxNikpXG4gICAgICAgIDogZGVsZXRpb25zLnB1c2goY2hpbGRUb0RlbGV0ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCkge1xuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykgcmV0dXJuIG51bGw7XG4gICAgZm9yICg7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApXG4gICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpLFxuICAgICAgICAoY3VycmVudEZpcnN0Q2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBtYXBSZW1haW5pbmdDaGlsZHJlbihjdXJyZW50Rmlyc3RDaGlsZCkge1xuICAgIGZvciAodmFyIGV4aXN0aW5nQ2hpbGRyZW4gPSBuZXcgTWFwKCk7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApXG4gICAgICBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZC5rZXlcbiAgICAgICAgPyBleGlzdGluZ0NoaWxkcmVuLnNldChjdXJyZW50Rmlyc3RDaGlsZC5rZXksIGN1cnJlbnRGaXJzdENoaWxkKVxuICAgICAgICA6IGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGN1cnJlbnRGaXJzdENoaWxkLmluZGV4LCBjdXJyZW50Rmlyc3RDaGlsZCksXG4gICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpO1xuICAgIHJldHVybiBleGlzdGluZ0NoaWxkcmVuO1xuICB9XG4gIGZ1bmN0aW9uIHVzZUZpYmVyKGZpYmVyLCBwZW5kaW5nUHJvcHMpIHtcbiAgICBmaWJlciA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGZpYmVyLCBwZW5kaW5nUHJvcHMpO1xuICAgIGZpYmVyLmluZGV4ID0gMDtcbiAgICBmaWJlci5zaWJsaW5nID0gbnVsbDtcbiAgICByZXR1cm4gZmliZXI7XG4gIH1cbiAgZnVuY3Rpb24gcGxhY2VDaGlsZChuZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJbmRleCkge1xuICAgIG5ld0ZpYmVyLmluZGV4ID0gbmV3SW5kZXg7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKVxuICAgICAgcmV0dXJuIChuZXdGaWJlci5mbGFncyB8PSAxMDQ4NTc2KSwgbGFzdFBsYWNlZEluZGV4O1xuICAgIG5ld0luZGV4ID0gbmV3RmliZXIuYWx0ZXJuYXRlO1xuICAgIGlmIChudWxsICE9PSBuZXdJbmRleClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChuZXdJbmRleCA9IG5ld0luZGV4LmluZGV4KSxcbiAgICAgICAgbmV3SW5kZXggPCBsYXN0UGxhY2VkSW5kZXhcbiAgICAgICAgICA/ICgobmV3RmliZXIuZmxhZ3MgfD0gMzM1NTQ0MzQpLCBsYXN0UGxhY2VkSW5kZXgpXG4gICAgICAgICAgOiBuZXdJbmRleFxuICAgICAgKTtcbiAgICBuZXdGaWJlci5mbGFncyB8PSAzMzU1NDQzNDtcbiAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICB9XG4gIGZ1bmN0aW9uIHBsYWNlU2luZ2xlQ2hpbGQobmV3RmliZXIpIHtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBudWxsID09PSBuZXdGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgIChuZXdGaWJlci5mbGFncyB8PSAzMzU1NDQzNCk7XG4gICAgcmV0dXJuIG5ld0ZpYmVyO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50LCB0ZXh0Q29udGVudCwgbGFuZXMpIHtcbiAgICBpZiAobnVsbCA9PT0gY3VycmVudCB8fCA2ICE9PSBjdXJyZW50LnRhZylcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tVGV4dCh0ZXh0Q29udGVudCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCB0ZXh0Q29udGVudCk7XG4gICAgY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBjdXJyZW50LCBlbGVtZW50LCBsYW5lcykge1xuICAgIHZhciBlbGVtZW50VHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgICBpZiAoZWxlbWVudFR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpXG4gICAgICByZXR1cm4gdXBkYXRlRnJhZ21lbnQoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICBlbGVtZW50LnByb3BzLmNoaWxkcmVuLFxuICAgICAgICBsYW5lcyxcbiAgICAgICAgZWxlbWVudC5rZXlcbiAgICAgICk7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgKGN1cnJlbnQuZWxlbWVudFR5cGUgPT09IGVsZW1lbnRUeXBlIHx8XG4gICAgICAgIChcIm9iamVjdFwiID09PSB0eXBlb2YgZWxlbWVudFR5cGUgJiZcbiAgICAgICAgICBudWxsICE9PSBlbGVtZW50VHlwZSAmJlxuICAgICAgICAgIGVsZW1lbnRUeXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgJiZcbiAgICAgICAgICByZXNvbHZlTGF6eShlbGVtZW50VHlwZSkgPT09IGN1cnJlbnQudHlwZSkpXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBlbGVtZW50LnByb3BzKSksXG4gICAgICAgIGNvZXJjZVJlZihjdXJyZW50LCBlbGVtZW50KSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICBlbGVtZW50LnR5cGUsXG4gICAgICBlbGVtZW50LmtleSxcbiAgICAgIGVsZW1lbnQucHJvcHMsXG4gICAgICBudWxsLFxuICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgIGxhbmVzXG4gICAgKTtcbiAgICBjb2VyY2VSZWYoY3VycmVudCwgZWxlbWVudCk7XG4gICAgY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVQb3J0YWwocmV0dXJuRmliZXIsIGN1cnJlbnQsIHBvcnRhbCwgbGFuZXMpIHtcbiAgICBpZiAoXG4gICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICA0ICE9PSBjdXJyZW50LnRhZyB8fFxuICAgICAgY3VycmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyAhPT0gcG9ydGFsLmNvbnRhaW5lckluZm8gfHxcbiAgICAgIGN1cnJlbnQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uICE9PSBwb3J0YWwuaW1wbGVtZW50YXRpb25cbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChwb3J0YWwsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKSksXG4gICAgICAgIChjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgY3VycmVudFxuICAgICAgKTtcbiAgICBjdXJyZW50ID0gdXNlRmliZXIoY3VycmVudCwgcG9ydGFsLmNoaWxkcmVuIHx8IFtdKTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBjdXJyZW50LCBmcmFnbWVudCwgbGFuZXMsIGtleSkge1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IDcgIT09IGN1cnJlbnQudGFnKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgIGtleVxuICAgICAgICApKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBmcmFnbWVudCk7XG4gICAgY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgaWYgKFxuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tVGV4dChcbiAgICAgICAgICBcIlwiICsgbmV3Q2hpbGQsXG4gICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgbmV3Q2hpbGRcbiAgICAgICk7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgICAgICAgICBuZXdDaGlsZC50eXBlLFxuICAgICAgICAgICAgICBuZXdDaGlsZC5rZXksXG4gICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChuZXdDaGlsZCA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChcbiAgICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChuZXdDaGlsZC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICBuZXdDaGlsZFxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBpbml0ID0gbmV3Q2hpbGQuX2luaXQ7XG4gICAgICAgICAgbmV3Q2hpbGQgPSBpbml0KG5ld0NoaWxkLl9wYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkLCBsYW5lcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUltcGwobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChuZXdDaGlsZCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICBuZXdDaGlsZFxuICAgICAgICApO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG5ld0NoaWxkLnRoZW4pXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgdW53cmFwVGhlbmFibGUobmV3Q2hpbGQpLCBsYW5lcyk7XG4gICAgICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSlcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICB2YXIga2V5ID0gbnVsbCAhPT0gb2xkRmliZXIgPyBvbGRGaWJlci5rZXkgOiBudWxsO1xuICAgIGlmIChcbiAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgIClcbiAgICAgIHJldHVybiBudWxsICE9PSBrZXlcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBcIlwiICsgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiBuZXdDaGlsZC5rZXkgPT09IGtleVxuICAgICAgICAgICAgPyB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHJldHVybiBuZXdDaGlsZC5rZXkgPT09IGtleVxuICAgICAgICAgICAgPyB1cGRhdGVQb3J0YWwocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoa2V5ID0gbmV3Q2hpbGQuX2luaXQpLFxuICAgICAgICAgICAgKG5ld0NoaWxkID0ga2V5KG5ld0NoaWxkLl9wYXlsb2FkKSksXG4gICAgICAgICAgICB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUltcGwobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKVxuICAgICAgICByZXR1cm4gbnVsbCAhPT0ga2V5XG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcywgbnVsbCk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVNsb3QoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgb2xkRmliZXIsXG4gICAgICAgICAgdW53cmFwVGhlbmFibGUobmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSlcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVNsb3QoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgb2xkRmliZXIsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRnJvbU1hcChcbiAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgIHJldHVybkZpYmVyLFxuICAgIG5ld0lkeCxcbiAgICBuZXdDaGlsZCxcbiAgICBsYW5lc1xuICApIHtcbiAgICBpZiAoXG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbCksXG4gICAgICAgIHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBcIlwiICsgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9XG4gICAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KFxuICAgICAgICAgICAgICAgIG51bGwgPT09IG5ld0NoaWxkLmtleSA/IG5ld0lkeCA6IG5ld0NoaWxkLmtleVxuICAgICAgICAgICAgICApIHx8IG51bGwpLFxuICAgICAgICAgICAgdXBkYXRlRWxlbWVudChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChleGlzdGluZ0NoaWxkcmVuID1cbiAgICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5nZXQoXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICkgfHwgbnVsbCksXG4gICAgICAgICAgICB1cGRhdGVQb3J0YWwocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICB2YXIgaW5pdCA9IG5ld0NoaWxkLl9pbml0O1xuICAgICAgICAgIG5ld0NoaWxkID0gaW5pdChuZXdDaGlsZC5fcGF5bG9hZCk7XG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZUZyb21NYXAoXG4gICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICBuZXdJZHgsXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdJZHgpIHx8IG51bGwpLFxuICAgICAgICAgIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBuZXdDaGlsZCwgbGFuZXMsIG51bGwpXG4gICAgICAgICk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZyb21NYXAoXG4gICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbixcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBuZXdJZHgsXG4gICAgICAgICAgdW53cmFwVGhlbmFibGUobmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSlcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZyb21NYXAoXG4gICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbixcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBuZXdJZHgsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW5BcnJheShcbiAgICByZXR1cm5GaWJlcixcbiAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICBuZXdDaGlsZHJlbixcbiAgICBsYW5lc1xuICApIHtcbiAgICBmb3IgKFxuICAgICAgdmFyIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBudWxsLFxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gbnVsbCxcbiAgICAgICAgb2xkRmliZXIgPSBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3SWR4ID0gKGN1cnJlbnRGaXJzdENoaWxkID0gMCksXG4gICAgICAgIG5leHRPbGRGaWJlciA9IG51bGw7XG4gICAgICBudWxsICE9PSBvbGRGaWJlciAmJiBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7XG4gICAgICBuZXdJZHgrK1xuICAgICkge1xuICAgICAgb2xkRmliZXIuaW5kZXggPiBuZXdJZHhcbiAgICAgICAgPyAoKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyKSwgKG9sZEZpYmVyID0gbnVsbCkpXG4gICAgICAgIDogKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmcpO1xuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG9sZEZpYmVyLFxuICAgICAgICBuZXdDaGlsZHJlbltuZXdJZHhdLFxuICAgICAgICBsYW5lc1xuICAgICAgKTtcbiAgICAgIGlmIChudWxsID09PSBuZXdGaWJlcikge1xuICAgICAgICBudWxsID09PSBvbGRGaWJlciAmJiAob2xkRmliZXIgPSBuZXh0T2xkRmliZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgb2xkRmliZXIgJiZcbiAgICAgICAgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpO1xuICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXIpXG4gICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyKTtcbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cbiAgICBpZiAobmV3SWR4ID09PSBuZXdDaGlsZHJlbi5sZW5ndGgpXG4gICAgICByZXR1cm4gKFxuICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpLFxuICAgICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCksXG4gICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGRcbiAgICAgICk7XG4gICAgaWYgKG51bGwgPT09IG9sZEZpYmVyKSB7XG4gICAgICBmb3IgKDsgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBuZXdJZHgrKylcbiAgICAgICAgKG9sZEZpYmVyID0gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkcmVuW25ld0lkeF0sIGxhbmVzKSksXG4gICAgICAgICAgbnVsbCAhPT0gb2xkRmliZXIgJiZcbiAgICAgICAgICAgICgoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKFxuICAgICAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAgIG5ld0lkeFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBvbGRGaWJlcilcbiAgICAgICAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gb2xkRmliZXIpLFxuICAgICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBvbGRGaWJlcikpO1xuICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpO1xuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICBvbGRGaWJlciA9IG1hcFJlbWFpbmluZ0NoaWxkcmVuKG9sZEZpYmVyKTtcbiAgICAgIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDtcbiAgICAgIG5ld0lkeCsrXG4gICAgKVxuICAgICAgKG5leHRPbGRGaWJlciA9IHVwZGF0ZUZyb21NYXAoXG4gICAgICAgIG9sZEZpYmVyLFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgbmV3SWR4LFxuICAgICAgICBuZXdDaGlsZHJlbltuZXdJZHhdLFxuICAgICAgICBsYW5lc1xuICAgICAgKSksXG4gICAgICAgIG51bGwgIT09IG5leHRPbGRGaWJlciAmJlxuICAgICAgICAgIChzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICAgICAgICBudWxsICE9PSBuZXh0T2xkRmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICBvbGRGaWJlci5kZWxldGUoXG4gICAgICAgICAgICAgIG51bGwgPT09IG5leHRPbGRGaWJlci5rZXkgPyBuZXdJZHggOiBuZXh0T2xkRmliZXIua2V5XG4gICAgICAgICAgICApLFxuICAgICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoXG4gICAgICAgICAgICBuZXh0T2xkRmliZXIsXG4gICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgIG5ld0lkeFxuICAgICAgICAgICkpLFxuICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXh0T2xkRmliZXIpXG4gICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXh0T2xkRmliZXIpLFxuICAgICAgICAgIChwcmV2aW91c05ld0ZpYmVyID0gbmV4dE9sZEZpYmVyKSk7XG4gICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgb2xkRmliZXIuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gIH1cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcihcbiAgICByZXR1cm5GaWJlcixcbiAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICBuZXdDaGlsZHJlbixcbiAgICBsYW5lc1xuICApIHtcbiAgICBpZiAobnVsbCA9PSBuZXdDaGlsZHJlbikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTEpKTtcbiAgICBmb3IgKFxuICAgICAgdmFyIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBudWxsLFxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gbnVsbCxcbiAgICAgICAgb2xkRmliZXIgPSBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3SWR4ID0gKGN1cnJlbnRGaXJzdENoaWxkID0gMCksXG4gICAgICAgIG5leHRPbGRGaWJlciA9IG51bGwsXG4gICAgICAgIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCk7XG4gICAgICBudWxsICE9PSBvbGRGaWJlciAmJiAhc3RlcC5kb25lO1xuICAgICAgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KClcbiAgICApIHtcbiAgICAgIG9sZEZpYmVyLmluZGV4ID4gbmV3SWR4XG4gICAgICAgID8gKChuZXh0T2xkRmliZXIgPSBvbGRGaWJlciksIChvbGRGaWJlciA9IG51bGwpKVxuICAgICAgICA6IChuZXh0T2xkRmliZXIgPSBvbGRGaWJlci5zaWJsaW5nKTtcbiAgICAgIHZhciBuZXdGaWJlciA9IHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBzdGVwLnZhbHVlLCBsYW5lcyk7XG4gICAgICBpZiAobnVsbCA9PT0gbmV3RmliZXIpIHtcbiAgICAgICAgbnVsbCA9PT0gb2xkRmliZXIgJiYgKG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICAgIG9sZEZpYmVyICYmXG4gICAgICAgIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KTtcbiAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5ld0ZpYmVyKVxuICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXdGaWJlcik7XG4gICAgICBwcmV2aW91c05ld0ZpYmVyID0gbmV3RmliZXI7XG4gICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICB9XG4gICAgaWYgKHN0ZXAuZG9uZSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksXG4gICAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KSxcbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZFxuICAgICAgKTtcbiAgICBpZiAobnVsbCA9PT0gb2xkRmliZXIpIHtcbiAgICAgIGZvciAoOyAhc3RlcC5kb25lOyBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKSlcbiAgICAgICAgKHN0ZXAgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgc3RlcC52YWx1ZSwgbGFuZXMpKSxcbiAgICAgICAgICBudWxsICE9PSBzdGVwICYmXG4gICAgICAgICAgICAoKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChzdGVwLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KSksXG4gICAgICAgICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBzdGVwKVxuICAgICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBzdGVwKSxcbiAgICAgICAgICAgIChwcmV2aW91c05ld0ZpYmVyID0gc3RlcCkpO1xuICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpO1xuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICBvbGRGaWJlciA9IG1hcFJlbWFpbmluZ0NoaWxkcmVuKG9sZEZpYmVyKTtcbiAgICAgICFzdGVwLmRvbmU7XG4gICAgICBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKVxuICAgIClcbiAgICAgIChzdGVwID0gdXBkYXRlRnJvbU1hcChvbGRGaWJlciwgcmV0dXJuRmliZXIsIG5ld0lkeCwgc3RlcC52YWx1ZSwgbGFuZXMpKSxcbiAgICAgICAgbnVsbCAhPT0gc3RlcCAmJlxuICAgICAgICAgIChzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICAgICAgICBudWxsICE9PSBzdGVwLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgb2xkRmliZXIuZGVsZXRlKG51bGwgPT09IHN0ZXAua2V5ID8gbmV3SWR4IDogc3RlcC5rZXkpLFxuICAgICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoc3RlcCwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCkpLFxuICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBzdGVwKVxuICAgICAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gc3RlcCksXG4gICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBzdGVwKSk7XG4gICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgb2xkRmliZXIuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gIH1cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkLFxuICAgIGxhbmVzXG4gICkge1xuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJlxuICAgICAgbnVsbCAhPT0gbmV3Q2hpbGQgJiZcbiAgICAgIG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgJiZcbiAgICAgIG51bGwgPT09IG5ld0NoaWxkLmtleSAmJlxuICAgICAgKG5ld0NoaWxkID0gbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgYToge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5ID0gbmV3Q2hpbGQua2V5OyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZC5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIGtleSA9IG5ld0NoaWxkLnR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgICAgICAgICAgICAgICAgaWYgKDcgPT09IGN1cnJlbnRGaXJzdENoaWxkLnRhZykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGxhbmVzID0gdXNlRmliZXIoXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLmVsZW1lbnRUeXBlID09PSBrZXkgfHxcbiAgICAgICAgICAgICAgICAgIChcIm9iamVjdFwiID09PSB0eXBlb2Yga2V5ICYmXG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IGtleSAmJlxuICAgICAgICAgICAgICAgICAgICBrZXkuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSAmJlxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlTGF6eShrZXkpID09PSBjdXJyZW50Rmlyc3RDaGlsZC50eXBlKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQucHJvcHMpO1xuICAgICAgICAgICAgICAgICAgY29lcmNlUmVmKGxhbmVzLCBuZXdDaGlsZCk7XG4gICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9IGVsc2UgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRVxuICAgICAgICAgICAgICA/ICgobGFuZXMgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpXG4gICAgICAgICAgICAgIDogKChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnR5cGUsXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5rZXksXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcyxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKSxcbiAgICAgICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICBmb3IgKGtleSA9IG5ld0NoaWxkLmtleTsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7ICkge1xuICAgICAgICAgICAgICBpZiAoY3VycmVudEZpcnN0Q2hpbGQua2V5ID09PSBrZXkpXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgNCA9PT0gY3VycmVudEZpcnN0Q2hpbGQudGFnICYmXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyA9PT1cbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQuY29udGFpbmVySW5mbyAmJlxuICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uID09PVxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5pbXBsZW1lbnRhdGlvblxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgICAgICAgICAgICAgbGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlciA9IGxhbmVzO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpO1xuICAgICAgICAgICAgbGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICByZXR1cm5GaWJlciA9IGxhbmVzO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZXR1cm5GaWJlcik7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoa2V5ID0gbmV3Q2hpbGQuX2luaXQpLFxuICAgICAgICAgICAgKG5ld0NoaWxkID0ga2V5KG5ld0NoaWxkLl9wYXlsb2FkKSksXG4gICAgICAgICAgICByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICBpZiAoZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgICAga2V5ID0gZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCk7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBrZXkpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUwKSk7XG4gICAgICAgIG5ld0NoaWxkID0ga2V5LmNhbGwobmV3Q2hpbGQpO1xuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcihcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG5ld0NoaWxkLnRoZW4pXG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgdW53cmFwVGhlbmFibGUobmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSlcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgICA/ICgobmV3Q2hpbGQgPSBcIlwiICsgbmV3Q2hpbGQpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZCAmJiA2ID09PSBjdXJyZW50Rmlyc3RDaGlsZC50YWdcbiAgICAgICAgICA/IChkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyksXG4gICAgICAgICAgICAobGFuZXMgPSB1c2VGaWJlcihjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQpKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpXG4gICAgICAgICAgOiAoZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSxcbiAgICAgICAgICAgIChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbVRleHQobmV3Q2hpbGQsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKSksXG4gICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKSxcbiAgICAgICAgcGxhY2VTaW5nbGVDaGlsZChyZXR1cm5GaWJlcikpXG4gICAgICA6IGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBsYW5lcykge1xuICAgIHRyeSB7XG4gICAgICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMDtcbiAgICAgIHZhciBmaXJzdENoaWxkRmliZXIgPSByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgdGhlbmFibGVTdGF0ZSQxID0gbnVsbDtcbiAgICAgIHJldHVybiBmaXJzdENoaWxkRmliZXI7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgaWYgKHggPT09IFN1c3BlbnNlRXhjZXB0aW9uKSB0aHJvdyB4O1xuICAgICAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMjksIHgsIG51bGwsIHJldHVybkZpYmVyLm1vZGUpO1xuICAgICAgZmliZXIubGFuZXMgPSBsYW5lcztcbiAgICAgIGZpYmVyLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGZpYmVyO1xuICAgIH0gZmluYWxseSB7XG4gICAgfVxuICB9O1xufVxudmFyIHJlY29uY2lsZUNoaWxkRmliZXJzID0gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKCEwKSxcbiAgbW91bnRDaGlsZEZpYmVycyA9IGNyZWF0ZUNoaWxkUmVjb25jaWxlcighMSksXG4gIGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciA9IGNyZWF0ZUN1cnNvcigwKTtcbmZ1bmN0aW9uIHB1c2hIaWRkZW5Db250ZXh0KGZpYmVyLCBjb250ZXh0KSB7XG4gIGZpYmVyID0gZW50YW5nbGVkUmVuZGVyTGFuZXM7XG4gIHB1c2gocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLCBmaWJlcik7XG4gIHB1c2goY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciwgY29udGV4dCk7XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gZmliZXIgfCBjb250ZXh0LmJhc2VMYW5lcztcbn1cbmZ1bmN0aW9uIHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSB7XG4gIHB1c2gocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLCBlbnRhbmdsZWRSZW5kZXJMYW5lcyk7XG4gIHB1c2goY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciwgY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvci5jdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHBvcEhpZGRlbkNvbnRleHQoKSB7XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gcHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLmN1cnJlbnQ7XG4gIHBvcChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yKTtcbiAgcG9wKHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvcik7XG59XG52YXIgc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIHNoZWxsQm91bmRhcnkgPSBudWxsO1xuZnVuY3Rpb24gcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKGhhbmRsZXIpIHtcbiAgdmFyIGN1cnJlbnQgPSBoYW5kbGVyLmFsdGVybmF0ZTtcbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQgJiAxKTtcbiAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgaGFuZGxlcik7XG4gIG51bGwgPT09IHNoZWxsQm91bmRhcnkgJiZcbiAgICAobnVsbCA9PT0gY3VycmVudCB8fCBudWxsICE9PSBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgID8gKHNoZWxsQm91bmRhcnkgPSBoYW5kbGVyKVxuICAgICAgOiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiYgKHNoZWxsQm91bmRhcnkgPSBoYW5kbGVyKSk7XG59XG5mdW5jdGlvbiBwdXNoT2Zmc2NyZWVuU3VzcGVuc2VIYW5kbGVyKGZpYmVyKSB7XG4gIGlmICgyMiA9PT0gZmliZXIudGFnKSB7XG4gICAgaWYgKFxuICAgICAgKHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgIHB1c2goc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IsIGZpYmVyKSxcbiAgICAgIG51bGwgPT09IHNoZWxsQm91bmRhcnkpXG4gICAgKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIChzaGVsbEJvdW5kYXJ5ID0gZmliZXIpO1xuICAgIH1cbiAgfSBlbHNlIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayhmaWJlcik7XG59XG5mdW5jdGlvbiByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2soKSB7XG4gIHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCk7XG59XG5mdW5jdGlvbiBwb3BTdXNwZW5zZUhhbmRsZXIoZmliZXIpIHtcbiAgcG9wKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yKTtcbiAgc2hlbGxCb3VuZGFyeSA9PT0gZmliZXIgJiYgKHNoZWxsQm91bmRhcnkgPSBudWxsKTtcbiAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpO1xufVxudmFyIHN1c3BlbnNlU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoMCk7XG5mdW5jdGlvbiBmaW5kRmlyc3RTdXNwZW5kZWQocm93KSB7XG4gIGZvciAodmFyIG5vZGUgPSByb3c7IG51bGwgIT09IG5vZGU7ICkge1xuICAgIGlmICgxMyA9PT0gbm9kZS50YWcpIHtcbiAgICAgIHZhciBzdGF0ZSA9IG5vZGUubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gc3RhdGUgJiZcbiAgICAgICAgKChzdGF0ZSA9IHN0YXRlLmRlaHlkcmF0ZWQpLFxuICAgICAgICBudWxsID09PSBzdGF0ZSB8fCBcIiQ/XCIgPT09IHN0YXRlLmRhdGEgfHwgXCIkIVwiID09PSBzdGF0ZS5kYXRhKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKDE5ID09PSBub2RlLnRhZyAmJiB2b2lkIDAgIT09IG5vZGUubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcikge1xuICAgICAgaWYgKDAgIT09IChub2RlLmZsYWdzICYgMTI4KSkgcmV0dXJuIG5vZGU7XG4gICAgfSBlbHNlIGlmIChudWxsICE9PSBub2RlLmNoaWxkKSB7XG4gICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAobm9kZSA9PT0gcm93KSBicmVhaztcbiAgICBmb3IgKDsgbnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgIGlmIChudWxsID09PSBub2RlLnJldHVybiB8fCBub2RlLnJldHVybiA9PT0gcm93KSByZXR1cm4gbnVsbDtcbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgQWJvcnRDb250cm9sbGVyTG9jYWwgPVxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBBYm9ydENvbnRyb2xsZXJcbiAgICAgID8gQWJvcnRDb250cm9sbGVyXG4gICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gW10sXG4gICAgICAgICAgICBzaWduYWwgPSAodGhpcy5zaWduYWwgPSB7XG4gICAgICAgICAgICAgIGFib3J0ZWQ6ICExLFxuICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzaWduYWwuYWJvcnRlZCA9ICEwO1xuICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgc2NoZWR1bGVDYWxsYmFjayQyID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssXG4gIE5vcm1hbFByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICBDYWNoZUNvbnRleHQgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBDb25zdW1lcjogbnVsbCxcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBfY3VycmVudFZhbHVlOiBudWxsLFxuICAgIF9jdXJyZW50VmFsdWUyOiBudWxsLFxuICAgIF90aHJlYWRDb3VudDogMFxuICB9O1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlckxvY2FsKCksXG4gICAgZGF0YTogbmV3IE1hcCgpLFxuICAgIHJlZkNvdW50OiAwXG4gIH07XG59XG5mdW5jdGlvbiByZWxlYXNlQ2FjaGUoY2FjaGUpIHtcbiAgY2FjaGUucmVmQ291bnQtLTtcbiAgMCA9PT0gY2FjaGUucmVmQ291bnQgJiZcbiAgICBzY2hlZHVsZUNhbGxiYWNrJDIoTm9ybWFsUHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhY2hlLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB9KTtcbn1cbnZhciBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzID0gbnVsbCxcbiAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCA9IDAsXG4gIGN1cnJlbnRFbnRhbmdsZWRMYW5lID0gMCxcbiAgY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gbnVsbDtcbmZ1bmN0aW9uIGVudGFuZ2xlQXN5bmNBY3Rpb24odHJhbnNpdGlvbiwgdGhlbmFibGUpIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMpIHtcbiAgICB2YXIgZW50YW5nbGVkTGlzdGVuZXJzID0gKGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMgPSBbXSk7XG4gICAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCA9IDA7XG4gICAgY3VycmVudEVudGFuZ2xlZExhbmUgPSByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKTtcbiAgICBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSB7XG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGVudGFuZ2xlZExpc3RlbmVycy5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCsrO1xuICB0aGVuYWJsZS50aGVuKHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUsIHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUpO1xuICByZXR1cm4gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBwaW5nRW5ndGFuZ2xlZEFjdGlvblNjb3BlKCkge1xuICBpZiAoXG4gICAgMCA9PT0gLS1jdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ICYmXG4gICAgbnVsbCAhPT0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVyc1xuICApIHtcbiAgICBudWxsICE9PSBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgJiZcbiAgICAgIChjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIik7XG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnM7XG4gICAgY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyA9IG51bGw7XG4gICAgY3VycmVudEVudGFuZ2xlZExhbmUgPSAwO1xuICAgIGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspICgwLCBsaXN0ZW5lcnNbaV0pKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNoYWluVGhlbmFibGVWYWx1ZSh0aGVuYWJsZSwgcmVzdWx0KSB7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICB0aGVuYWJsZVdpdGhPdmVycmlkZSA9IHtcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHJlYXNvbjogbnVsbCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH07XG4gIHRoZW5hYmxlLnRoZW4oXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnZhbHVlID0gcmVzdWx0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspICgwLCBsaXN0ZW5lcnNbaV0pKHJlc3VsdCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnJlYXNvbiA9IGVycm9yO1xuICAgICAgZm9yIChlcnJvciA9IDA7IGVycm9yIDwgbGlzdGVuZXJzLmxlbmd0aDsgZXJyb3IrKylcbiAgICAgICAgKDAsIGxpc3RlbmVyc1tlcnJvcl0pKHZvaWQgMCk7XG4gICAgfVxuICApO1xuICByZXR1cm4gdGhlbmFibGVXaXRoT3ZlcnJpZGU7XG59XG52YXIgcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcblJlYWN0U2hhcmVkSW50ZXJuYWxzLlMgPSBmdW5jdGlvbiAodHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpIHtcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuICYmXG4gICAgZW50YW5nbGVBc3luY0FjdGlvbih0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gIG51bGwgIT09IHByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgIHByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCh0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG59O1xudmFyIHJlc3VtZWRDYWNoZSA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbmZ1bmN0aW9uIHBlZWtDYWNoZUZyb21Qb29sKCkge1xuICB2YXIgY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyID0gcmVzdW1lZENhY2hlLmN1cnJlbnQ7XG4gIHJldHVybiBudWxsICE9PSBjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXJcbiAgICA/IGNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlclxuICAgIDogd29ya0luUHJvZ3Jlc3NSb290LnBvb2xlZENhY2hlO1xufVxuZnVuY3Rpb24gcHVzaFRyYW5zaXRpb24ob2Zmc2NyZWVuV29ya0luUHJvZ3Jlc3MsIHByZXZDYWNoZVBvb2wpIHtcbiAgbnVsbCA9PT0gcHJldkNhY2hlUG9vbFxuICAgID8gcHVzaChyZXN1bWVkQ2FjaGUsIHJlc3VtZWRDYWNoZS5jdXJyZW50KVxuICAgIDogcHVzaChyZXN1bWVkQ2FjaGUsIHByZXZDYWNoZVBvb2wucG9vbCk7XG59XG5mdW5jdGlvbiBnZXRTdXNwZW5kZWRDYWNoZSgpIHtcbiAgdmFyIGNhY2hlRnJvbVBvb2wgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpO1xuICByZXR1cm4gbnVsbCA9PT0gY2FjaGVGcm9tUG9vbFxuICAgID8gbnVsbFxuICAgIDogeyBwYXJlbnQ6IENhY2hlQ29udGV4dC5fY3VycmVudFZhbHVlLCBwb29sOiBjYWNoZUZyb21Qb29sIH07XG59XG52YXIgcmVuZGVyTGFuZXMgPSAwLFxuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbCxcbiAgY3VycmVudEhvb2sgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsLFxuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITEsXG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9ICExLFxuICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViA9ICExLFxuICBsb2NhbElkQ291bnRlciA9IDAsXG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMCxcbiAgdGhlbmFibGVTdGF0ZSA9IG51bGwsXG4gIGdsb2JhbENsaWVudElkQ291bnRlciA9IDA7XG5mdW5jdGlvbiB0aHJvd0ludmFsaWRIb29rRXJyb3IoKSB7XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzIxKSk7XG59XG5mdW5jdGlvbiBhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSB7XG4gIGlmIChudWxsID09PSBwcmV2RGVwcykgcmV0dXJuICExO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXZEZXBzLmxlbmd0aCAmJiBpIDwgbmV4dERlcHMubGVuZ3RoOyBpKyspXG4gICAgaWYgKCFvYmplY3RJcyhuZXh0RGVwc1tpXSwgcHJldkRlcHNbaV0pKSByZXR1cm4gITE7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIHJlbmRlcldpdGhIb29rcyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgcHJvcHMsXG4gIHNlY29uZEFyZyxcbiAgbmV4dFJlbmRlckxhbmVzXG4pIHtcbiAgcmVuZGVyTGFuZXMgPSBuZXh0UmVuZGVyTGFuZXM7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSB3b3JrSW5Qcm9ncmVzcztcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID1cbiAgICBudWxsID09PSBjdXJyZW50IHx8IG51bGwgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgPyBIb29rc0Rpc3BhdGNoZXJPbk1vdW50XG4gICAgICA6IEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlO1xuICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViA9ICExO1xuICBuZXh0UmVuZGVyTGFuZXMgPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7XG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITE7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyAmJlxuICAgIChuZXh0UmVuZGVyTGFuZXMgPSByZW5kZXJXaXRoSG9va3NBZ2FpbihcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgQ29tcG9uZW50LFxuICAgICAgcHJvcHMsXG4gICAgICBzZWNvbmRBcmdcbiAgICApKTtcbiAgZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCk7XG4gIHJldHVybiBuZXh0UmVuZGVyTGFuZXM7XG59XG5mdW5jdGlvbiBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KSB7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG4gIHZhciBkaWRSZW5kZXJUb29GZXdIb29rcyA9IG51bGwgIT09IGN1cnJlbnRIb29rICYmIG51bGwgIT09IGN1cnJlbnRIb29rLm5leHQ7XG4gIHJlbmRlckxhbmVzID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9ICExO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciA9IDA7XG4gIHRoZW5hYmxlU3RhdGUgPSBudWxsO1xuICBpZiAoZGlkUmVuZGVyVG9vRmV3SG9va3MpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAwKSk7XG4gIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICBkaWRSZWNlaXZlVXBkYXRlIHx8XG4gICAgKChjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXMpLFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSAmJlxuICAgICAgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCkpO1xufVxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzQWdhaW4od29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcHJvcHMsIHNlY29uZEFyZykge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gd29ya0luUHJvZ3Jlc3M7XG4gIHZhciBudW1iZXJPZlJlUmVuZGVycyA9IDA7XG4gIGRvIHtcbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgJiYgKHRoZW5hYmxlU3RhdGUgPSBudWxsKTtcbiAgICB0aGVuYWJsZUluZGV4Q291bnRlciA9IDA7XG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITE7XG4gICAgaWYgKDI1IDw9IG51bWJlck9mUmVSZW5kZXJzKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwMSkpO1xuICAgIG51bWJlck9mUmVSZW5kZXJzICs9IDE7XG4gICAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBudWxsO1xuICAgIGlmIChudWxsICE9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgICAgIGNoaWxkcmVuLmxhc3RFZmZlY3QgPSBudWxsO1xuICAgICAgY2hpbGRyZW4uZXZlbnRzID0gbnVsbDtcbiAgICAgIGNoaWxkcmVuLnN0b3JlcyA9IG51bGw7XG4gICAgICBudWxsICE9IGNoaWxkcmVuLm1lbW9DYWNoZSAmJiAoY2hpbGRyZW4ubWVtb0NhY2hlLmluZGV4ID0gMCk7XG4gICAgfVxuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyO1xuICAgIGNoaWxkcmVuID0gQ29tcG9uZW50KHByb3BzLCBzZWNvbmRBcmcpO1xuICB9IHdoaWxlIChkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MpO1xuICByZXR1cm4gY2hpbGRyZW47XG59XG5mdW5jdGlvbiBUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50KCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgsXG4gICAgbWF5YmVUaGVuYWJsZSA9IGRpc3BhdGNoZXIudXNlU3RhdGUoKVswXTtcbiAgbWF5YmVUaGVuYWJsZSA9XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVUaGVuYWJsZS50aGVuXG4gICAgICA/IHVzZVRoZW5hYmxlKG1heWJlVGhlbmFibGUpXG4gICAgICA6IG1heWJlVGhlbmFibGU7XG4gIGRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyLnVzZVN0YXRlKClbMF07XG4gIChudWxsICE9PSBjdXJyZW50SG9vayA/IGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUgOiBudWxsKSAhPT0gZGlzcGF0Y2hlciAmJlxuICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmZsYWdzIHw9IDEwMjQpO1xuICByZXR1cm4gbWF5YmVUaGVuYWJsZTtcbn1cbmZ1bmN0aW9uIGNoZWNrRGlkUmVuZGVySWRIb29rKCkge1xuICB2YXIgZGlkUmVuZGVySWRIb29rID0gMCAhPT0gbG9jYWxJZENvdW50ZXI7XG4gIGxvY2FsSWRDb3VudGVyID0gMDtcbiAgcmV0dXJuIGRpZFJlbmRlcklkSG9vaztcbn1cbmZ1bmN0aW9uIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMjA1MztcbiAgY3VycmVudC5sYW5lcyAmPSB+bGFuZXM7XG59XG5mdW5jdGlvbiByZXNldEhvb2tzT25VbndpbmQod29ya0luUHJvZ3Jlc3MpIHtcbiAgaWYgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUpIHtcbiAgICBmb3IgKFxuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3M7XG5cbiAgICApIHtcbiAgICAgIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnF1ZXVlO1xuICAgICAgbnVsbCAhPT0gcXVldWUgJiYgKHF1ZXVlLnBlbmRpbmcgPSBudWxsKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MubmV4dDtcbiAgICB9XG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9ICExO1xuICB9XG4gIHJlbmRlckxhbmVzID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gbG9jYWxJZENvdW50ZXIgPSAwO1xuICB0aGVuYWJsZVN0YXRlID0gbnVsbDtcbn1cbmZ1bmN0aW9uIG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkge1xuICB2YXIgaG9vayA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBudWxsLFxuICAgIGJhc2VTdGF0ZTogbnVsbCxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICA/IChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1lbW9pemVkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBob29rKVxuICAgIDogKHdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID0gaG9vayk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG5mdW5jdGlvbiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIGlmIChudWxsID09PSBjdXJyZW50SG9vaykge1xuICAgIHZhciBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmFsdGVybmF0ZTtcbiAgICBuZXh0Q3VycmVudEhvb2sgPVxuICAgICAgbnVsbCAhPT0gbmV4dEN1cnJlbnRIb29rID8gbmV4dEN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUgOiBudWxsO1xuICB9IGVsc2UgbmV4dEN1cnJlbnRIb29rID0gY3VycmVudEhvb2submV4dDtcbiAgdmFyIG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgPVxuICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgICAgPyBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1lbW9pemVkU3RhdGVcbiAgICAgIDogd29ya0luUHJvZ3Jlc3NIb29rLm5leHQ7XG4gIGlmIChudWxsICE9PSBuZXh0V29ya0luUHJvZ3Jlc3NIb29rKVxuICAgICh3b3JrSW5Qcm9ncmVzc0hvb2sgPSBuZXh0V29ya0luUHJvZ3Jlc3NIb29rKSxcbiAgICAgIChjdXJyZW50SG9vayA9IG5leHRDdXJyZW50SG9vayk7XG4gIGVsc2Uge1xuICAgIGlmIChudWxsID09PSBuZXh0Q3VycmVudEhvb2spIHtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmFsdGVybmF0ZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjcpKTtcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzEwKSk7XG4gICAgfVxuICAgIGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rO1xuICAgIG5leHRDdXJyZW50SG9vayA9IHtcbiAgICAgIG1lbW9pemVkU3RhdGU6IGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUsXG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnRIb29rLmJhc2VTdGF0ZSxcbiAgICAgIGJhc2VRdWV1ZTogY3VycmVudEhvb2suYmFzZVF1ZXVlLFxuICAgICAgcXVldWU6IGN1cnJlbnRIb29rLnF1ZXVlLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NIb29rXG4gICAgICA/IChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1lbW9pemVkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc0hvb2sgPVxuICAgICAgICAgIG5leHRDdXJyZW50SG9vaylcbiAgICAgIDogKHdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID0gbmV4dEN1cnJlbnRIb29rKTtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NIb29rO1xufVxudmFyIGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWU7XG5jcmVhdGVGdW5jdGlvbkNvbXBvbmVudFVwZGF0ZVF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4geyBsYXN0RWZmZWN0OiBudWxsLCBldmVudHM6IG51bGwsIHN0b3JlczogbnVsbCwgbWVtb0NhY2hlOiBudWxsIH07XG59O1xuZnVuY3Rpb24gdXNlVGhlbmFibGUodGhlbmFibGUpIHtcbiAgdmFyIGluZGV4ID0gdGhlbmFibGVJbmRleENvdW50ZXI7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyICs9IDE7XG4gIG51bGwgPT09IHRoZW5hYmxlU3RhdGUgJiYgKHRoZW5hYmxlU3RhdGUgPSBbXSk7XG4gIHRoZW5hYmxlID0gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSwgdGhlbmFibGUsIGluZGV4KTtcbiAgaW5kZXggPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxO1xuICBudWxsID09PVxuICAgIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gaW5kZXgubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dCkgJiZcbiAgICAoKGluZGV4ID0gaW5kZXguYWx0ZXJuYXRlKSxcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9XG4gICAgICBudWxsID09PSBpbmRleCB8fCBudWxsID09PSBpbmRleC5tZW1vaXplZFN0YXRlXG4gICAgICAgID8gSG9va3NEaXNwYXRjaGVyT25Nb3VudFxuICAgICAgICA6IEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlKSk7XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIHVzZSh1c2FibGUpIHtcbiAgaWYgKG51bGwgIT09IHVzYWJsZSAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdXNhYmxlKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVzYWJsZS50aGVuKSByZXR1cm4gdXNlVGhlbmFibGUodXNhYmxlKTtcbiAgICBpZiAodXNhYmxlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUpIHJldHVybiByZWFkQ29udGV4dCh1c2FibGUpO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM4LCBTdHJpbmcodXNhYmxlKSkpO1xufVxuZnVuY3Rpb24gdXNlTWVtb0NhY2hlKHNpemUpIHtcbiAgdmFyIG1lbW9DYWNoZSA9IG51bGwsXG4gICAgdXBkYXRlUXVldWUgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlO1xuICBudWxsICE9PSB1cGRhdGVRdWV1ZSAmJiAobWVtb0NhY2hlID0gdXBkYXRlUXVldWUubWVtb0NhY2hlKTtcbiAgaWYgKG51bGwgPT0gbWVtb0NhY2hlKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgKChjdXJyZW50ID0gY3VycmVudC5tZW1vQ2FjaGUpLFxuICAgICAgICBudWxsICE9IGN1cnJlbnQgJiZcbiAgICAgICAgICAobWVtb0NhY2hlID0ge1xuICAgICAgICAgICAgZGF0YTogY3VycmVudC5kYXRhLm1hcChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LnNsaWNlKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGluZGV4OiAwXG4gICAgICAgICAgfSkpKTtcbiAgfVxuICBudWxsID09IG1lbW9DYWNoZSAmJiAobWVtb0NhY2hlID0geyBkYXRhOiBbXSwgaW5kZXg6IDAgfSk7XG4gIG51bGwgPT09IHVwZGF0ZVF1ZXVlICYmXG4gICAgKCh1cGRhdGVRdWV1ZSA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSksXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZSkpO1xuICB1cGRhdGVRdWV1ZS5tZW1vQ2FjaGUgPSBtZW1vQ2FjaGU7XG4gIHVwZGF0ZVF1ZXVlID0gbWVtb0NhY2hlLmRhdGFbbWVtb0NhY2hlLmluZGV4XTtcbiAgaWYgKHZvaWQgMCA9PT0gdXBkYXRlUXVldWUpXG4gICAgZm9yIChcbiAgICAgIHVwZGF0ZVF1ZXVlID0gbWVtb0NhY2hlLmRhdGFbbWVtb0NhY2hlLmluZGV4XSA9IEFycmF5KHNpemUpLCBjdXJyZW50ID0gMDtcbiAgICAgIGN1cnJlbnQgPCBzaXplO1xuICAgICAgY3VycmVudCsrXG4gICAgKVxuICAgICAgdXBkYXRlUXVldWVbY3VycmVudF0gPSBSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMO1xuICBtZW1vQ2FjaGUuaW5kZXgrKztcbiAgcmV0dXJuIHVwZGF0ZVF1ZXVlO1xufVxuZnVuY3Rpb24gYmFzaWNTdGF0ZVJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uID8gYWN0aW9uKHN0YXRlKSA6IGFjdGlvbjtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZHVjZXIocmVkdWNlcikge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICByZXR1cm4gdXBkYXRlUmVkdWNlckltcGwoaG9vaywgY3VycmVudEhvb2ssIHJlZHVjZXIpO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlckltcGwoaG9vaywgY3VycmVudCwgcmVkdWNlcikge1xuICB2YXIgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgYmFzZVF1ZXVlID0gaG9vay5iYXNlUXVldWUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUucGVuZGluZztcbiAgaWYgKG51bGwgIT09IHBlbmRpbmdRdWV1ZSkge1xuICAgIGlmIChudWxsICE9PSBiYXNlUXVldWUpIHtcbiAgICAgIHZhciBiYXNlRmlyc3QgPSBiYXNlUXVldWUubmV4dDtcbiAgICAgIGJhc2VRdWV1ZS5uZXh0ID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBwZW5kaW5nUXVldWUubmV4dCA9IGJhc2VGaXJzdDtcbiAgICB9XG4gICAgY3VycmVudC5iYXNlUXVldWUgPSBiYXNlUXVldWUgPSBwZW5kaW5nUXVldWU7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gIH1cbiAgcGVuZGluZ1F1ZXVlID0gaG9vay5iYXNlU3RhdGU7XG4gIGlmIChudWxsID09PSBiYXNlUXVldWUpIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgZWxzZSB7XG4gICAgY3VycmVudCA9IGJhc2VRdWV1ZS5uZXh0O1xuICAgIHZhciBuZXdCYXNlUXVldWVGaXJzdCA9IChiYXNlRmlyc3QgPSBudWxsKSxcbiAgICAgIG5ld0Jhc2VRdWV1ZUxhc3QgPSBudWxsLFxuICAgICAgdXBkYXRlID0gY3VycmVudCxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQgPSAhMTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHVwZGF0ZS5sYW5lICYgLTUzNjg3MDkxMztcbiAgICAgIGlmIChcbiAgICAgICAgdXBkYXRlTGFuZSAhPT0gdXBkYXRlLmxhbmVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXZlcnRMYW5lID0gdXBkYXRlLnJldmVydExhbmU7XG4gICAgICAgIGlmICgwID09PSByZXZlcnRMYW5lKVxuICAgICAgICAgIG51bGwgIT09IG5ld0Jhc2VRdWV1ZUxhc3QgJiZcbiAgICAgICAgICAgIChuZXdCYXNlUXVldWVMYXN0ID0gbmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID1cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0TGFuZTogMCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgICAgICAgaGFzRWFnZXJTdGF0ZTogdXBkYXRlLmhhc0VhZ2VyU3RhdGUsXG4gICAgICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHVwZGF0ZUxhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0ID0gITApO1xuICAgICAgICBlbHNlIGlmICgocmVuZGVyTGFuZXMgJiByZXZlcnRMYW5lKSA9PT0gcmV2ZXJ0TGFuZSkge1xuICAgICAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgICAgICAgIHJldmVydExhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgICAoZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQ1NCA9ICEwKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgKHVwZGF0ZUxhbmUgPSB7XG4gICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgcmV2ZXJ0TGFuZTogdXBkYXRlLnJldmVydExhbmUsXG4gICAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICAgIGVhZ2VyU3RhdGU6IHVwZGF0ZS5lYWdlclN0YXRlLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgICAgICAgICA/ICgobmV3QmFzZVF1ZXVlRmlyc3QgPSBuZXdCYXNlUXVldWVMYXN0ID0gdXBkYXRlTGFuZSksXG4gICAgICAgICAgICAgICAgKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmxhbmVzIHw9IHJldmVydExhbmUpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSByZXZlcnRMYW5lKTtcbiAgICAgICAgdXBkYXRlTGFuZSA9IHVwZGF0ZS5hY3Rpb247XG4gICAgICAgIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWICYmXG4gICAgICAgICAgcmVkdWNlcihwZW5kaW5nUXVldWUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICBwZW5kaW5nUXVldWUgPSB1cGRhdGUuaGFzRWFnZXJTdGF0ZVxuICAgICAgICAgID8gdXBkYXRlLmVhZ2VyU3RhdGVcbiAgICAgICAgICA6IHJlZHVjZXIocGVuZGluZ1F1ZXVlLCB1cGRhdGVMYW5lKTtcbiAgICAgIH0gZWxzZVxuICAgICAgICAocmV2ZXJ0TGFuZSA9IHtcbiAgICAgICAgICBsYW5lOiB1cGRhdGVMYW5lLFxuICAgICAgICAgIHJldmVydExhbmU6IHVwZGF0ZS5yZXZlcnRMYW5lLFxuICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICBlYWdlclN0YXRlOiB1cGRhdGUuZWFnZXJTdGF0ZSxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH0pLFxuICAgICAgICAgIG51bGwgPT09IG5ld0Jhc2VRdWV1ZUxhc3RcbiAgICAgICAgICAgID8gKChuZXdCYXNlUXVldWVGaXJzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QgPSByZXZlcnRMYW5lKSxcbiAgICAgICAgICAgICAgKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgICA6IChuZXdCYXNlUXVldWVMYXN0ID0gbmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gcmV2ZXJ0TGFuZSksXG4gICAgICAgICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgfD0gdXBkYXRlTGFuZSksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSB1cGRhdGVMYW5lKTtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgIH0gd2hpbGUgKG51bGwgIT09IHVwZGF0ZSAmJiB1cGRhdGUgIT09IGN1cnJlbnQpO1xuICAgIG51bGwgPT09IG5ld0Jhc2VRdWV1ZUxhc3RcbiAgICAgID8gKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSlcbiAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QubmV4dCA9IG5ld0Jhc2VRdWV1ZUZpcnN0KTtcbiAgICBpZiAoXG4gICAgICAhb2JqZWN0SXMocGVuZGluZ1F1ZXVlLCBob29rLm1lbW9pemVkU3RhdGUpICYmXG4gICAgICAoKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCksXG4gICAgICBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0ICYmXG4gICAgICAgICgocmVkdWNlciA9IGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSksIG51bGwgIT09IHJlZHVjZXIpKVxuICAgIClcbiAgICAgIHRocm93IHJlZHVjZXI7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICAgIGhvb2suYmFzZVN0YXRlID0gYmFzZUZpcnN0O1xuICAgIGhvb2suYmFzZVF1ZXVlID0gbmV3QmFzZVF1ZXVlTGFzdDtcbiAgICBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgfVxuICBudWxsID09PSBiYXNlUXVldWUgJiYgKHF1ZXVlLmxhbmVzID0gMCk7XG4gIHJldHVybiBbaG9vay5tZW1vaXplZFN0YXRlLCBxdWV1ZS5kaXNwYXRjaF07XG59XG5mdW5jdGlvbiByZXJlbmRlclJlZHVjZXIocmVkdWNlcikge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIHF1ZXVlID0gaG9vay5xdWV1ZTtcbiAgaWYgKG51bGwgPT09IHF1ZXVlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxMSkpO1xuICBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGRpc3BhdGNoID0gcXVldWUuZGlzcGF0Y2gsXG4gICAgbGFzdFJlbmRlclBoYXNlVXBkYXRlID0gcXVldWUucGVuZGluZyxcbiAgICBuZXdTdGF0ZSA9IGhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKG51bGwgIT09IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSkge1xuICAgIHF1ZXVlLnBlbmRpbmcgPSBudWxsO1xuICAgIHZhciB1cGRhdGUgPSAobGFzdFJlbmRlclBoYXNlVXBkYXRlID0gbGFzdFJlbmRlclBoYXNlVXBkYXRlLm5leHQpO1xuICAgIGRvIChuZXdTdGF0ZSA9IHJlZHVjZXIobmV3U3RhdGUsIHVwZGF0ZS5hY3Rpb24pKSwgKHVwZGF0ZSA9IHVwZGF0ZS5uZXh0KTtcbiAgICB3aGlsZSAodXBkYXRlICE9PSBsYXN0UmVuZGVyUGhhc2VVcGRhdGUpO1xuICAgIG9iamVjdElzKG5ld1N0YXRlLCBob29rLm1lbW9pemVkU3RhdGUpIHx8IChkaWRSZWNlaXZlVXBkYXRlID0gITApO1xuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICAgIG51bGwgPT09IGhvb2suYmFzZVF1ZXVlICYmIChob29rLmJhc2VTdGF0ZSA9IG5ld1N0YXRlKTtcbiAgICBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICB9XG4gIHJldHVybiBbbmV3U3RhdGUsIGRpc3BhdGNoXTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gIHZhciBmaWJlciA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGlzSHlkcmF0aW5nJGpzY29tcCQwID0gaXNIeWRyYXRpbmc7XG4gIGlmIChpc0h5ZHJhdGluZyRqc2NvbXAkMCkge1xuICAgIGlmICh2b2lkIDAgPT09IGdldFNlcnZlclNuYXBzaG90KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQwNykpO1xuICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgfSBlbHNlIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgdmFyIHNuYXBzaG90Q2hhbmdlZCA9ICFvYmplY3RJcyhcbiAgICAoY3VycmVudEhvb2sgfHwgaG9vaykubWVtb2l6ZWRTdGF0ZSxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xuICBzbmFwc2hvdENoYW5nZWQgJiZcbiAgICAoKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGdldFNlcnZlclNuYXBzaG90KSwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCkpO1xuICBob29rID0gaG9vay5xdWV1ZTtcbiAgdXBkYXRlRWZmZWN0KHN1YnNjcmliZVRvU3RvcmUuYmluZChudWxsLCBmaWJlciwgaG9vaywgc3Vic2NyaWJlKSwgW1xuICAgIHN1YnNjcmliZVxuICBdKTtcbiAgaWYgKFxuICAgIGhvb2suZ2V0U25hcHNob3QgIT09IGdldFNuYXBzaG90IHx8XG4gICAgc25hcHNob3RDaGFuZ2VkIHx8XG4gICAgKG51bGwgIT09IHdvcmtJblByb2dyZXNzSG9vayAmJiB3b3JrSW5Qcm9ncmVzc0hvb2subWVtb2l6ZWRTdGF0ZS50YWcgJiAxKVxuICApIHtcbiAgICBmaWJlci5mbGFncyB8PSAyMDQ4O1xuICAgIHB1c2hFZmZlY3QoXG4gICAgICA5LFxuICAgICAgdXBkYXRlU3RvcmVJbnN0YW5jZS5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBmaWJlcixcbiAgICAgICAgaG9vayxcbiAgICAgICAgZ2V0U2VydmVyU25hcHNob3QsXG4gICAgICAgIGdldFNuYXBzaG90XG4gICAgICApLFxuICAgICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ5KSk7XG4gICAgaXNIeWRyYXRpbmckanNjb21wJDAgfHxcbiAgICAgIDAgIT09IChyZW5kZXJMYW5lcyAmIDYwKSB8fFxuICAgICAgcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgfVxuICByZXR1cm4gZ2V0U2VydmVyU25hcHNob3Q7XG59XG5mdW5jdGlvbiBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgcmVuZGVyZWRTbmFwc2hvdCkge1xuICBmaWJlci5mbGFncyB8PSAxNjM4NDtcbiAgZmliZXIgPSB7IGdldFNuYXBzaG90OiBnZXRTbmFwc2hvdCwgdmFsdWU6IHJlbmRlcmVkU25hcHNob3QgfTtcbiAgZ2V0U25hcHNob3QgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlO1xuICBudWxsID09PSBnZXRTbmFwc2hvdFxuICAgID8gKChnZXRTbmFwc2hvdCA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSksXG4gICAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZSA9IGdldFNuYXBzaG90KSxcbiAgICAgIChnZXRTbmFwc2hvdC5zdG9yZXMgPSBbZmliZXJdKSlcbiAgICA6ICgocmVuZGVyZWRTbmFwc2hvdCA9IGdldFNuYXBzaG90LnN0b3JlcyksXG4gICAgICBudWxsID09PSByZW5kZXJlZFNuYXBzaG90XG4gICAgICAgID8gKGdldFNuYXBzaG90LnN0b3JlcyA9IFtmaWJlcl0pXG4gICAgICAgIDogcmVuZGVyZWRTbmFwc2hvdC5wdXNoKGZpYmVyKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVTdG9yZUluc3RhbmNlKGZpYmVyLCBpbnN0LCBuZXh0U25hcHNob3QsIGdldFNuYXBzaG90KSB7XG4gIGluc3QudmFsdWUgPSBuZXh0U25hcHNob3Q7XG4gIGluc3QuZ2V0U25hcHNob3QgPSBnZXRTbmFwc2hvdDtcbiAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlVG9TdG9yZShmaWJlciwgaW5zdCwgc3Vic2NyaWJlKSB7XG4gIHJldHVybiBzdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkgJiYgZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpIHtcbiAgdmFyIGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgaW5zdCA9IGluc3QudmFsdWU7XG4gIHRyeSB7XG4gICAgdmFyIG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFvYmplY3RJcyhpbnN0LCBuZXh0VmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAhMDtcbiAgfVxufVxuZnVuY3Rpb24gZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKSB7XG4gIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDIpO1xufVxuZnVuY3Rpb24gbW91bnRTdGF0ZUltcGwoaW5pdGlhbFN0YXRlKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluaXRpYWxTdGF0ZSkge1xuICAgIHZhciBpbml0aWFsU3RhdGVJbml0aWFsaXplciA9IGluaXRpYWxTdGF0ZTtcbiAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGVJbml0aWFsaXplcigpO1xuICAgIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaW5pdGlhbFN0YXRlSW5pdGlhbGl6ZXIoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIGhvb2sucXVldWUgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG4gIHJldHVybiBob29rO1xufVxuZnVuY3Rpb24gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudCwgcGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgcmV0dXJuIHVwZGF0ZVJlZHVjZXJJbXBsKFxuICAgIGhvb2ssXG4gICAgY3VycmVudEhvb2ssXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVkdWNlciA/IHJlZHVjZXIgOiBiYXNpY1N0YXRlUmVkdWNlclxuICApO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hBY3Rpb25TdGF0ZShcbiAgZmliZXIsXG4gIGFjdGlvblF1ZXVlLFxuICBzZXRQZW5kaW5nU3RhdGUsXG4gIHNldFN0YXRlLFxuICBwYXlsb2FkXG4pIHtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4NSkpO1xuICBmaWJlciA9IGFjdGlvblF1ZXVlLmFjdGlvbjtcbiAgaWYgKG51bGwgIT09IGZpYmVyKSB7XG4gICAgdmFyIGFjdGlvbk5vZGUgPSB7XG4gICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgYWN0aW9uOiBmaWJlcixcbiAgICAgIG5leHQ6IG51bGwsXG4gICAgICBpc1RyYW5zaXRpb246ICEwLFxuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcmVhc29uOiBudWxsLFxuICAgICAgbGlzdGVuZXJzOiBbXSxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBhY3Rpb25Ob2RlLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG51bGwgIT09IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlRcbiAgICAgID8gc2V0UGVuZGluZ1N0YXRlKCEwKVxuICAgICAgOiAoYWN0aW9uTm9kZS5pc1RyYW5zaXRpb24gPSAhMSk7XG4gICAgc2V0U3RhdGUoYWN0aW9uTm9kZSk7XG4gICAgc2V0UGVuZGluZ1N0YXRlID0gYWN0aW9uUXVldWUucGVuZGluZztcbiAgICBudWxsID09PSBzZXRQZW5kaW5nU3RhdGVcbiAgICAgID8gKChhY3Rpb25Ob2RlLm5leHQgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nID0gYWN0aW9uTm9kZSksXG4gICAgICAgIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlKSlcbiAgICAgIDogKChhY3Rpb25Ob2RlLm5leHQgPSBzZXRQZW5kaW5nU3RhdGUubmV4dCksXG4gICAgICAgIChhY3Rpb25RdWV1ZS5wZW5kaW5nID0gc2V0UGVuZGluZ1N0YXRlLm5leHQgPSBhY3Rpb25Ob2RlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBub2RlKSB7XG4gIHZhciBhY3Rpb24gPSBub2RlLmFjdGlvbixcbiAgICBwYXlsb2FkID0gbm9kZS5wYXlsb2FkLFxuICAgIHByZXZTdGF0ZSA9IGFjdGlvblF1ZXVlLnN0YXRlO1xuICBpZiAobm9kZS5pc1RyYW5zaXRpb24pIHtcbiAgICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgICAgY3VycmVudFRyYW5zaXRpb24gPSB7fTtcbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGFjdGlvbihwcmV2U3RhdGUsIHBheWxvYWQpLFxuICAgICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlM7XG4gICAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgICAgaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgbm9kZSwgZXJyb3IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb247XG4gICAgfVxuICB9IGVsc2VcbiAgICB0cnkge1xuICAgICAgKHByZXZUcmFuc2l0aW9uID0gYWN0aW9uKHByZXZTdGF0ZSwgcGF5bG9hZCkpLFxuICAgICAgICBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcHJldlRyYW5zaXRpb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yJDYwKSB7XG4gICAgICBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvciQ2MCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKSB7XG4gIG51bGwgIT09IHJldHVyblZhbHVlICYmXG4gIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgPyByZXR1cm5WYWx1ZS50aGVuKFxuICAgICAgICBmdW5jdGlvbiAobmV4dFN0YXRlKSB7XG4gICAgICAgICAgb25BY3Rpb25TdWNjZXNzKGFjdGlvblF1ZXVlLCBub2RlLCBuZXh0U3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgbm9kZSwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgOiBvbkFjdGlvblN1Y2Nlc3MoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKTtcbn1cbmZ1bmN0aW9uIG9uQWN0aW9uU3VjY2VzcyhhY3Rpb25RdWV1ZSwgYWN0aW9uTm9kZSwgbmV4dFN0YXRlKSB7XG4gIGFjdGlvbk5vZGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgYWN0aW9uTm9kZS52YWx1ZSA9IG5leHRTdGF0ZTtcbiAgbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpO1xuICBhY3Rpb25RdWV1ZS5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgYWN0aW9uTm9kZSA9IGFjdGlvblF1ZXVlLnBlbmRpbmc7XG4gIG51bGwgIT09IGFjdGlvbk5vZGUgJiZcbiAgICAoKG5leHRTdGF0ZSA9IGFjdGlvbk5vZGUubmV4dCksXG4gICAgbmV4dFN0YXRlID09PSBhY3Rpb25Ob2RlXG4gICAgICA/IChhY3Rpb25RdWV1ZS5wZW5kaW5nID0gbnVsbClcbiAgICAgIDogKChuZXh0U3RhdGUgPSBuZXh0U3RhdGUubmV4dCksXG4gICAgICAgIChhY3Rpb25Ob2RlLm5leHQgPSBuZXh0U3RhdGUpLFxuICAgICAgICBydW5BY3Rpb25TdGF0ZUFjdGlvbihhY3Rpb25RdWV1ZSwgbmV4dFN0YXRlKSkpO1xufVxuZnVuY3Rpb24gb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgYWN0aW9uTm9kZSwgZXJyb3IpIHtcbiAgdmFyIGxhc3QgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nO1xuICBhY3Rpb25RdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgaWYgKG51bGwgIT09IGxhc3QpIHtcbiAgICBsYXN0ID0gbGFzdC5uZXh0O1xuICAgIGRvXG4gICAgICAoYWN0aW9uTm9kZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLFxuICAgICAgICAoYWN0aW9uTm9kZS5yZWFzb24gPSBlcnJvciksXG4gICAgICAgIG5vdGlmeUFjdGlvbkxpc3RlbmVycyhhY3Rpb25Ob2RlKSxcbiAgICAgICAgKGFjdGlvbk5vZGUgPSBhY3Rpb25Ob2RlLm5leHQpO1xuICAgIHdoaWxlIChhY3Rpb25Ob2RlICE9PSBsYXN0KTtcbiAgfVxuICBhY3Rpb25RdWV1ZS5hY3Rpb24gPSBudWxsO1xufVxuZnVuY3Rpb24gbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpIHtcbiAgYWN0aW9uTm9kZSA9IGFjdGlvbk5vZGUubGlzdGVuZXJzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGlvbk5vZGUubGVuZ3RoOyBpKyspICgwLCBhY3Rpb25Ob2RlW2ldKSgpO1xufVxuZnVuY3Rpb24gYWN0aW9uU3RhdGVSZWR1Y2VyKG9sZFN0YXRlLCBuZXdTdGF0ZSkge1xuICByZXR1cm4gbmV3U3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudEFjdGlvblN0YXRlKGFjdGlvbiwgaW5pdGlhbFN0YXRlUHJvcCkge1xuICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICB2YXIgc3NyRm9ybVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290LmZvcm1TdGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gc3NyRm9ybVN0YXRlKSB7XG4gICAgICBhOiB7XG4gICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxO1xuICAgICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgICBpZiAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSkge1xuICAgICAgICAgICAgYjoge1xuICAgICAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbiAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICB2YXIgaW5Sb290T3JTaW5nbGV0b24gPSByb290T3JTaW5nbGV0b25Db250ZXh0O1xuICAgICAgICAgICAgICAgIDggIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5ub2RlVHlwZTtcblxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoIWluUm9vdE9yU2luZ2xldG9uKSB7XG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAubmV4dFNpYmxpbmdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpblJvb3RPclNpbmdsZXRvbiA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5kYXRhO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgIFwiRiFcIiA9PT0gaW5Sb290T3JTaW5nbGV0b24gfHwgXCJGXCIgPT09IGluUm9vdE9yU2luZ2xldG9uXG4gICAgICAgICAgICAgICAgICA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMFxuICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCkge1xuICAgICAgICAgICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgICAgXCJGIVwiID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAuZGF0YTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gITE7XG4gICAgICB9XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiYgKGluaXRpYWxTdGF0ZVByb3AgPSBzc3JGb3JtU3RhdGVbMF0pO1xuICAgIH1cbiAgfVxuICBzc3JGb3JtU3RhdGUgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBzc3JGb3JtU3RhdGUubWVtb2l6ZWRTdGF0ZSA9IHNzckZvcm1TdGF0ZS5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGVQcm9wO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBhY3Rpb25TdGF0ZVJlZHVjZXIsXG4gICAgbGFzdFJlbmRlcmVkU3RhdGU6IGluaXRpYWxTdGF0ZVByb3BcbiAgfTtcbiAgc3NyRm9ybVN0YXRlLnF1ZXVlID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICBzc3JGb3JtU3RhdGUgPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuZGlzcGF0Y2ggPSBzc3JGb3JtU3RhdGU7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IG1vdW50U3RhdGVJbXBsKCExKTtcbiAgaW5Sb290T3JTaW5nbGV0b24gPSBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZS5iaW5kKFxuICAgIG51bGwsXG4gICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAhMSxcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVldWVcbiAgKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0ge1xuICAgIHN0YXRlOiBpbml0aWFsU3RhdGVQcm9wLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIHBlbmRpbmc6IG51bGxcbiAgfTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnF1ZXVlID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwO1xuICBzc3JGb3JtU3RhdGUgPSBkaXNwYXRjaEFjdGlvblN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCxcbiAgICBpblJvb3RPclNpbmdsZXRvbixcbiAgICBzc3JGb3JtU3RhdGVcbiAgKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLmRpc3BhdGNoID0gc3NyRm9ybVN0YXRlO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQubWVtb2l6ZWRTdGF0ZSA9IGFjdGlvbjtcbiAgcmV0dXJuIFtpbml0aWFsU3RhdGVQcm9wLCBzc3JGb3JtU3RhdGUsICExXTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUFjdGlvblN0YXRlKGFjdGlvbikge1xuICB2YXIgc3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVBY3Rpb25TdGF0ZUltcGwoc3RhdGVIb29rLCBjdXJyZW50SG9vaywgYWN0aW9uKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRTdGF0ZUhvb2ssIGFjdGlvbikge1xuICBjdXJyZW50U3RhdGVIb29rID0gdXBkYXRlUmVkdWNlckltcGwoXG4gICAgc3RhdGVIb29rLFxuICAgIGN1cnJlbnRTdGF0ZUhvb2ssXG4gICAgYWN0aW9uU3RhdGVSZWR1Y2VyXG4gIClbMF07XG4gIHN0YXRlSG9vayA9IHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdO1xuICBjdXJyZW50U3RhdGVIb29rID1cbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY3VycmVudFN0YXRlSG9vayAmJlxuICAgIG51bGwgIT09IGN1cnJlbnRTdGF0ZUhvb2sgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjdXJyZW50U3RhdGVIb29rLnRoZW5cbiAgICAgID8gdXNlVGhlbmFibGUoY3VycmVudFN0YXRlSG9vaylcbiAgICAgIDogY3VycmVudFN0YXRlSG9vaztcbiAgdmFyIGFjdGlvblF1ZXVlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGFjdGlvblF1ZXVlID0gYWN0aW9uUXVldWVIb29rLnF1ZXVlLFxuICAgIGRpc3BhdGNoID0gYWN0aW9uUXVldWUuZGlzcGF0Y2g7XG4gIGFjdGlvbiAhPT0gYWN0aW9uUXVldWVIb29rLm1lbW9pemVkU3RhdGUgJiZcbiAgICAoKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuZmxhZ3MgfD0gMjA0OCksXG4gICAgcHVzaEVmZmVjdChcbiAgICAgIDksXG4gICAgICBhY3Rpb25TdGF0ZUFjdGlvbkVmZmVjdC5iaW5kKG51bGwsIGFjdGlvblF1ZXVlLCBhY3Rpb24pLFxuICAgICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICAgIG51bGxcbiAgICApKTtcbiAgcmV0dXJuIFtjdXJyZW50U3RhdGVIb29rLCBkaXNwYXRjaCwgc3RhdGVIb29rXTtcbn1cbmZ1bmN0aW9uIGFjdGlvblN0YXRlQWN0aW9uRWZmZWN0KGFjdGlvblF1ZXVlLCBhY3Rpb24pIHtcbiAgYWN0aW9uUXVldWUuYWN0aW9uID0gYWN0aW9uO1xufVxuZnVuY3Rpb24gcmVyZW5kZXJBY3Rpb25TdGF0ZShhY3Rpb24pIHtcbiAgdmFyIHN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGN1cnJlbnRTdGF0ZUhvb2sgPSBjdXJyZW50SG9vaztcbiAgaWYgKG51bGwgIT09IGN1cnJlbnRTdGF0ZUhvb2spXG4gICAgcmV0dXJuIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRTdGF0ZUhvb2ssIGFjdGlvbik7XG4gIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBzdGF0ZUhvb2sgPSBzdGF0ZUhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgY3VycmVudFN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgZGlzcGF0Y2ggPSBjdXJyZW50U3RhdGVIb29rLnF1ZXVlLmRpc3BhdGNoO1xuICBjdXJyZW50U3RhdGVIb29rLm1lbW9pemVkU3RhdGUgPSBhY3Rpb247XG4gIHJldHVybiBbc3RhdGVIb29rLCBkaXNwYXRjaCwgITFdO1xufVxuZnVuY3Rpb24gcHVzaEVmZmVjdCh0YWcsIGNyZWF0ZSwgaW5zdCwgZGVwcykge1xuICB0YWcgPSB7IHRhZzogdGFnLCBjcmVhdGU6IGNyZWF0ZSwgaW5zdDogaW5zdCwgZGVwczogZGVwcywgbmV4dDogbnVsbCB9O1xuICBjcmVhdGUgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlO1xuICBudWxsID09PSBjcmVhdGUgJiZcbiAgICAoKGNyZWF0ZSA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSksXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWUgPSBjcmVhdGUpKTtcbiAgaW5zdCA9IGNyZWF0ZS5sYXN0RWZmZWN0O1xuICBudWxsID09PSBpbnN0XG4gICAgPyAoY3JlYXRlLmxhc3RFZmZlY3QgPSB0YWcubmV4dCA9IHRhZylcbiAgICA6ICgoZGVwcyA9IGluc3QubmV4dCksXG4gICAgICAoaW5zdC5uZXh0ID0gdGFnKSxcbiAgICAgICh0YWcubmV4dCA9IGRlcHMpLFxuICAgICAgKGNyZWF0ZS5sYXN0RWZmZWN0ID0gdGFnKSk7XG4gIHJldHVybiB0YWc7XG59XG5mdW5jdGlvbiB1cGRhdGVSZWYoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gbW91bnRFZmZlY3RJbXBsKGZpYmVyRmxhZ3MsIGhvb2tGbGFncywgY3JlYXRlLCBkZXBzKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5mbGFncyB8PSBmaWJlckZsYWdzO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KFxuICAgIDEgfCBob29rRmxhZ3MsXG4gICAgY3JlYXRlLFxuICAgIHsgZGVzdHJveTogdm9pZCAwIH0sXG4gICAgdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHNcbiAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUVmZmVjdEltcGwoZmliZXJGbGFncywgaG9va0ZsYWdzLCBjcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgaW5zdCA9IGhvb2subWVtb2l6ZWRTdGF0ZS5pbnN0O1xuICBudWxsICE9PSBjdXJyZW50SG9vayAmJlxuICBudWxsICE9PSBkZXBzICYmXG4gIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLmRlcHMpXG4gICAgPyAoaG9vay5tZW1vaXplZFN0YXRlID0gcHVzaEVmZmVjdChob29rRmxhZ3MsIGNyZWF0ZSwgaW5zdCwgZGVwcykpXG4gICAgOiAoKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuZmxhZ3MgfD0gZmliZXJGbGFncyksXG4gICAgICAoaG9vay5tZW1vaXplZFN0YXRlID0gcHVzaEVmZmVjdCgxIHwgaG9va0ZsYWdzLCBjcmVhdGUsIGluc3QsIGRlcHMpKSk7XG59XG5mdW5jdGlvbiBtb3VudEVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgbW91bnRFZmZlY3RJbXBsKDgzOTA2NTYsIDgsIGNyZWF0ZSwgZGVwcyk7XG59XG5mdW5jdGlvbiB1cGRhdGVFZmZlY3QoY3JlYXRlLCBkZXBzKSB7XG4gIHVwZGF0ZUVmZmVjdEltcGwoMjA0OCwgOCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoNCwgMiwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoNCwgNCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QoY3JlYXRlLCByZWYpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZikge1xuICAgIGNyZWF0ZSA9IGNyZWF0ZSgpO1xuICAgIHZhciByZWZDbGVhbnVwID0gcmVmKGNyZWF0ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZkNsZWFudXAgPyByZWZDbGVhbnVwKCkgOiByZWYobnVsbCk7XG4gICAgfTtcbiAgfVxuICBpZiAobnVsbCAhPT0gcmVmICYmIHZvaWQgMCAhPT0gcmVmKVxuICAgIHJldHVybiAoXG4gICAgICAoY3JlYXRlID0gY3JlYXRlKCkpLFxuICAgICAgKHJlZi5jdXJyZW50ID0gY3JlYXRlKSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gIGRlcHMgPSBudWxsICE9PSBkZXBzICYmIHZvaWQgMCAhPT0gZGVwcyA/IGRlcHMuY29uY2F0KFtyZWZdKSA6IG51bGw7XG4gIHVwZGF0ZUVmZmVjdEltcGwoNCwgNCwgaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdC5iaW5kKG51bGwsIGNyZWF0ZSwgcmVmKSwgZGVwcyk7XG59XG5mdW5jdGlvbiBtb3VudERlYnVnVmFsdWUoKSB7fVxuZnVuY3Rpb24gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgcHJldlN0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZGVwcyAmJiBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgcHJldlN0YXRlWzFdKSlcbiAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBbY2FsbGJhY2ssIGRlcHNdO1xuICByZXR1cm4gY2FsbGJhY2s7XG59XG5mdW5jdGlvbiB1cGRhdGVNZW1vKG5leHRDcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgcHJldlN0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZGVwcyAmJiBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgcHJldlN0YXRlWzFdKSlcbiAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICBwcmV2U3RhdGUgPSBuZXh0Q3JlYXRlKCk7XG4gIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICB0cnkge1xuICAgICAgbmV4dENyZWF0ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMSk7XG4gICAgfVxuICB9XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtwcmV2U3RhdGUsIGRlcHNdO1xuICByZXR1cm4gcHJldlN0YXRlO1xufVxuZnVuY3Rpb24gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIGlmICh2b2lkIDAgPT09IGluaXRpYWxWYWx1ZSB8fCAwICE9PSAocmVuZGVyTGFuZXMgJiAxMDczNzQxODI0KSlcbiAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlKTtcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaW5pdGlhbFZhbHVlO1xuICBob29rID0gcmVxdWVzdERlZmVycmVkTGFuZSgpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmxhbmVzIHw9IGhvb2s7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBob29rO1xuICByZXR1cm4gaW5pdGlhbFZhbHVlO1xufVxuZnVuY3Rpb24gdXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgcHJldlZhbHVlLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIGlmIChvYmplY3RJcyh2YWx1ZSwgcHJldlZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICBpZiAobnVsbCAhPT0gY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvci5jdXJyZW50KVxuICAgIHJldHVybiAoXG4gICAgICAoaG9vayA9IG1vdW50RGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgdmFsdWUsIGluaXRpYWxWYWx1ZSkpLFxuICAgICAgb2JqZWN0SXMoaG9vaywgcHJldlZhbHVlKSB8fCAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSxcbiAgICAgIGhvb2tcbiAgICApO1xuICBpZiAoMCA9PT0gKHJlbmRlckxhbmVzICYgNDIpKVxuICAgIHJldHVybiAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSwgKGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlKTtcbiAgaG9vayA9IHJlcXVlc3REZWZlcnJlZExhbmUoKTtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcyB8PSBob29rO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gaG9vaztcbiAgcmV0dXJuIHByZXZWYWx1ZTtcbn1cbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvbihmaWJlciwgcXVldWUsIHBlbmRpbmdTdGF0ZSwgZmluaXNoZWRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID1cbiAgICAwICE9PSBwcmV2aW91c1ByaW9yaXR5ICYmIDggPiBwcmV2aW91c1ByaW9yaXR5ID8gcHJldmlvdXNQcmlvcml0eSA6IDg7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgY3VycmVudFRyYW5zaXRpb24gPSB7fTtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IGN1cnJlbnRUcmFuc2l0aW9uO1xuICBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZShmaWJlciwgITEsIHF1ZXVlLCBwZW5kaW5nU3RhdGUpO1xuICB0cnkge1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKCksXG4gICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlM7XG4gICAgbnVsbCAhPT0gb25TdGFydFRyYW5zaXRpb25GaW5pc2ggJiZcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKGN1cnJlbnRUcmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUudGhlblxuICAgICkge1xuICAgICAgdmFyIHRoZW5hYmxlRm9yRmluaXNoZWRTdGF0ZSA9IGNoYWluVGhlbmFibGVWYWx1ZShcbiAgICAgICAgcmV0dXJuVmFsdWUsXG4gICAgICAgIGZpbmlzaGVkU3RhdGVcbiAgICAgICk7XG4gICAgICBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBxdWV1ZSxcbiAgICAgICAgdGhlbmFibGVGb3JGaW5pc2hlZFN0YXRlLFxuICAgICAgICByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcilcbiAgICAgICk7XG4gICAgfSBlbHNlXG4gICAgICBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBxdWV1ZSxcbiAgICAgICAgZmluaXNoZWRTdGF0ZSxcbiAgICAgICAgcmVxdWVzdFVwZGF0ZUxhbmUoZmliZXIpXG4gICAgICApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgIGZpYmVyLFxuICAgICAgcXVldWUsXG4gICAgICB7IHRoZW46IGZ1bmN0aW9uICgpIHt9LCBzdGF0dXM6IFwicmVqZWN0ZWRcIiwgcmVhc29uOiBlcnJvciB9LFxuICAgICAgcmVxdWVzdFVwZGF0ZUxhbmUoKVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb24pO1xuICB9XG59XG5mdW5jdGlvbiBub29wJDIoKSB7fVxuZnVuY3Rpb24gc3RhcnRIb3N0VHJhbnNpdGlvbihmb3JtRmliZXIsIHBlbmRpbmdTdGF0ZSwgYWN0aW9uLCBmb3JtRGF0YSkge1xuICBpZiAoNSAhPT0gZm9ybUZpYmVyLnRhZykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzYpKTtcbiAgdmFyIHF1ZXVlID0gZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwoZm9ybUZpYmVyKS5xdWV1ZTtcbiAgc3RhcnRUcmFuc2l0aW9uKFxuICAgIGZvcm1GaWJlcixcbiAgICBxdWV1ZSxcbiAgICBwZW5kaW5nU3RhdGUsXG4gICAgc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBudWxsID09PSBhY3Rpb25cbiAgICAgID8gbm9vcCQyXG4gICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUZpYmVyKTtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGZvcm1EYXRhKTtcbiAgICAgICAgfVxuICApO1xufVxuZnVuY3Rpb24gZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwoZm9ybUZpYmVyKSB7XG4gIHZhciBleGlzdGluZ1N0YXRlSG9vayA9IGZvcm1GaWJlci5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZXhpc3RpbmdTdGF0ZUhvb2spIHJldHVybiBleGlzdGluZ1N0YXRlSG9vaztcbiAgZXhpc3RpbmdTdGF0ZUhvb2sgPSB7XG4gICAgbWVtb2l6ZWRTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBiYXNlU3RhdGU6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gICAgYmFzZVF1ZXVlOiBudWxsLFxuICAgIHF1ZXVlOiB7XG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgbGFuZXM6IDAsXG4gICAgICBkaXNwYXRjaDogbnVsbCxcbiAgICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGJhc2ljU3RhdGVSZWR1Y2VyLFxuICAgICAgbGFzdFJlbmRlcmVkU3RhdGU6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3RcbiAgICB9LFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgdmFyIGluaXRpYWxSZXNldFN0YXRlID0ge307XG4gIGV4aXN0aW5nU3RhdGVIb29rLm5leHQgPSB7XG4gICAgbWVtb2l6ZWRTdGF0ZTogaW5pdGlhbFJlc2V0U3RhdGUsXG4gICAgYmFzZVN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZSxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYmFzaWNTdGF0ZVJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFJlc2V0U3RhdGVcbiAgICB9LFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgZm9ybUZpYmVyLm1lbW9pemVkU3RhdGUgPSBleGlzdGluZ1N0YXRlSG9vaztcbiAgZm9ybUZpYmVyID0gZm9ybUZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gZm9ybUZpYmVyICYmIChmb3JtRmliZXIubWVtb2l6ZWRTdGF0ZSA9IGV4aXN0aW5nU3RhdGVIb29rKTtcbiAgcmV0dXJuIGV4aXN0aW5nU3RhdGVIb29rO1xufVxuZnVuY3Rpb24gcmVxdWVzdEZvcm1SZXNldCQxKGZvcm1GaWJlcikge1xuICB2YXIgcmVzZXRTdGF0ZVF1ZXVlID0gZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwoZm9ybUZpYmVyKS5uZXh0LnF1ZXVlO1xuICBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoZm9ybUZpYmVyLCByZXNldFN0YXRlUXVldWUsIHt9LCByZXF1ZXN0VXBkYXRlTGFuZSgpKTtcbn1cbmZ1bmN0aW9uIHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzKCkge1xuICByZXR1cm4gcmVhZENvbnRleHQoSG9zdFRyYW5zaXRpb25Db250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUlkKCkge1xuICByZXR1cm4gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZnJlc2goKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gcmVmcmVzaENhY2hlKGZpYmVyKSB7XG4gIGZvciAodmFyIHByb3ZpZGVyID0gZmliZXIucmV0dXJuOyBudWxsICE9PSBwcm92aWRlcjsgKSB7XG4gICAgc3dpdGNoIChwcm92aWRlci50YWcpIHtcbiAgICAgIGNhc2UgMjQ6XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgICAgICAgZmliZXIgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgICAgIHZhciByb290JDYzID0gZW5xdWV1ZVVwZGF0ZShwcm92aWRlciwgZmliZXIsIGxhbmUpO1xuICAgICAgICBudWxsICE9PSByb290JDYzICYmXG4gICAgICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290JDYzLCBwcm92aWRlciwgbGFuZSksXG4gICAgICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhyb290JDYzLCBwcm92aWRlciwgbGFuZSkpO1xuICAgICAgICBwcm92aWRlciA9IHsgY2FjaGU6IGNyZWF0ZUNhY2hlKCkgfTtcbiAgICAgICAgZmliZXIucGF5bG9hZCA9IHByb3ZpZGVyO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb3ZpZGVyID0gcHJvdmlkZXIucmV0dXJuO1xuICB9XG59XG5mdW5jdGlvbiBkaXNwYXRjaFJlZHVjZXJBY3Rpb24oZmliZXIsIHF1ZXVlLCBhY3Rpb24pIHtcbiAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICBhY3Rpb24gPSB7XG4gICAgbGFuZTogbGFuZSxcbiAgICByZXZlcnRMYW5lOiAwLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIGhhc0VhZ2VyU3RhdGU6ICExLFxuICAgIGVhZ2VyU3RhdGU6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKVxuICAgID8gZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlKHF1ZXVlLCBhY3Rpb24pXG4gICAgOiAoKGFjdGlvbiA9IGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSkpLFxuICAgICAgbnVsbCAhPT0gYWN0aW9uICYmXG4gICAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIoYWN0aW9uLCBmaWJlciwgbGFuZSksXG4gICAgICAgIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShhY3Rpb24sIHF1ZXVlLCBsYW5lKSkpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hTZXRTdGF0ZShmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoZmliZXIsIHF1ZXVlLCBhY3Rpb24sIGxhbmUpIHtcbiAgdmFyIHVwZGF0ZSA9IHtcbiAgICBsYW5lOiBsYW5lLFxuICAgIHJldmVydExhbmU6IDAsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlmIChpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSkgZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlKHF1ZXVlLCB1cGRhdGUpO1xuICBlbHNlIHtcbiAgICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgIGlmIChcbiAgICAgIDAgPT09IGZpYmVyLmxhbmVzICYmXG4gICAgICAobnVsbCA9PT0gYWx0ZXJuYXRlIHx8IDAgPT09IGFsdGVybmF0ZS5sYW5lcykgJiZcbiAgICAgICgoYWx0ZXJuYXRlID0gcXVldWUubGFzdFJlbmRlcmVkUmVkdWNlciksIG51bGwgIT09IGFsdGVybmF0ZSlcbiAgICApXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gcXVldWUubGFzdFJlbmRlcmVkU3RhdGUsXG4gICAgICAgICAgZWFnZXJTdGF0ZSA9IGFsdGVybmF0ZShjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgICAgIHVwZGF0ZS5oYXNFYWdlclN0YXRlID0gITA7XG4gICAgICAgIHVwZGF0ZS5lYWdlclN0YXRlID0gZWFnZXJTdGF0ZTtcbiAgICAgICAgaWYgKG9iamVjdElzKGVhZ2VyU3RhdGUsIGN1cnJlbnRTdGF0ZSkpXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGVucXVldWVVcGRhdGUkMShmaWJlciwgcXVldWUsIHVwZGF0ZSwgMCksXG4gICAgICAgICAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgJiYgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICB9XG4gICAgYWN0aW9uID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgICBpZiAobnVsbCAhPT0gYWN0aW9uKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGFjdGlvbiwgZmliZXIsIGxhbmUpLFxuICAgICAgICBlbnRhbmdsZVRyYW5zaXRpb25VcGRhdGUoYWN0aW9uLCBxdWV1ZSwgbGFuZSksXG4gICAgICAgICEwXG4gICAgICApO1xuICB9XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlKGZpYmVyLCB0aHJvd0lmRHVyaW5nUmVuZGVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gIGFjdGlvbiA9IHtcbiAgICBsYW5lOiAyLFxuICAgIHJldmVydExhbmU6IHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIGhhc0VhZ2VyU3RhdGU6ICExLFxuICAgIGVhZ2VyU3RhdGU6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIHtcbiAgICBpZiAodGhyb3dJZkR1cmluZ1JlbmRlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzkpKTtcbiAgfSBlbHNlXG4gICAgKHRocm93SWZEdXJpbmdSZW5kZXIgPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoXG4gICAgICBmaWJlcixcbiAgICAgIHF1ZXVlLFxuICAgICAgYWN0aW9uLFxuICAgICAgMlxuICAgICkpLFxuICAgICAgbnVsbCAhPT0gdGhyb3dJZkR1cmluZ1JlbmRlciAmJlxuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIodGhyb3dJZkR1cmluZ1JlbmRlciwgZmliZXIsIDIpO1xufVxuZnVuY3Rpb24gaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICByZXR1cm4gKFxuICAgIGZpYmVyID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxIHx8XG4gICAgKG51bGwgIT09IGFsdGVybmF0ZSAmJiBhbHRlcm5hdGUgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEpXG4gICk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSkge1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID1cbiAgICAhMDtcbiAgdmFyIHBlbmRpbmcgPSBxdWV1ZS5wZW5kaW5nO1xuICBudWxsID09PSBwZW5kaW5nXG4gICAgPyAodXBkYXRlLm5leHQgPSB1cGRhdGUpXG4gICAgOiAoKHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0KSwgKHBlbmRpbmcubmV4dCA9IHVwZGF0ZSkpO1xuICBxdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xufVxuZnVuY3Rpb24gZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKHJvb3QsIHF1ZXVlLCBsYW5lKSB7XG4gIGlmICgwICE9PSAobGFuZSAmIDQxOTQxNzYpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBxdWV1ZS5sYW5lcztcbiAgICBxdWV1ZUxhbmVzICY9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIGxhbmUgfD0gcXVldWVMYW5lcztcbiAgICBxdWV1ZS5sYW5lcyA9IGxhbmU7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbGFuZSk7XG4gIH1cbn1cbnZhciBDb250ZXh0T25seURpc3BhdGNoZXIgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlOiB1c2UsXG4gIHVzZUNhbGxiYWNrOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUNvbnRleHQ6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUltcGVyYXRpdmVIYW5kbGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlTGF5b3V0RWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUluc2VydGlvbkVmZmVjdDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VNZW1vOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVJlZHVjZXI6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlUmVmOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVN0YXRlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZURlYnVnVmFsdWU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRGVmZXJyZWRWYWx1ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VUcmFuc2l0aW9uOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUlkOiB0aHJvd0ludmFsaWRIb29rRXJyb3Jcbn07XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlQ2FjaGVSZWZyZXNoID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xuQ29udGV4dE9ubHlEaXNwYXRjaGVyLnVzZU1lbW9DYWNoZSA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VIb3N0VHJhbnNpdGlvblN0YXR1cyA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VGb3JtU3RhdGUgPSB0aHJvd0ludmFsaWRIb29rRXJyb3I7XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlQWN0aW9uU3RhdGUgPSB0aHJvd0ludmFsaWRIb29rRXJyb3I7XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlT3B0aW1pc3RpYyA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbnZhciBIb29rc0Rpc3BhdGNoZXJPbk1vdW50ID0ge1xuICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZTogdXNlLFxuICB1c2VDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrLCBkZXBzKSB7XG4gICAgbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlID0gW1xuICAgICAgY2FsbGJhY2ssXG4gICAgICB2b2lkIDAgPT09IGRlcHMgPyBudWxsIDogZGVwc1xuICAgIF07XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9LFxuICB1c2VDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlRWZmZWN0OiBtb3VudEVmZmVjdCxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogZnVuY3Rpb24gKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gICAgZGVwcyA9IG51bGwgIT09IGRlcHMgJiYgdm9pZCAwICE9PSBkZXBzID8gZGVwcy5jb25jYXQoW3JlZl0pIDogbnVsbDtcbiAgICBtb3VudEVmZmVjdEltcGwoXG4gICAgICA0MTk0MzA4LFxuICAgICAgNCxcbiAgICAgIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QuYmluZChudWxsLCBjcmVhdGUsIHJlZiksXG4gICAgICBkZXBzXG4gICAgKTtcbiAgfSxcbiAgdXNlTGF5b3V0RWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgcmV0dXJuIG1vdW50RWZmZWN0SW1wbCg0MTk0MzA4LCA0LCBjcmVhdGUsIGRlcHMpO1xuICB9LFxuICB1c2VJbnNlcnRpb25FZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICBtb3VudEVmZmVjdEltcGwoNCwgMiwgY3JlYXRlLCBkZXBzKTtcbiAgfSxcbiAgdXNlTWVtbzogZnVuY3Rpb24gKG5leHRDcmVhdGUsIGRlcHMpIHtcbiAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICAgIHZhciBuZXh0VmFsdWUgPSBuZXh0Q3JlYXRlKCk7XG4gICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMCk7XG4gICAgICB0cnkge1xuICAgICAgICBuZXh0Q3JlYXRlKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtuZXh0VmFsdWUsIGRlcHNdO1xuICAgIHJldHVybiBuZXh0VmFsdWU7XG4gIH0sXG4gIHVzZVJlZHVjZXI6IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIGlmICh2b2lkIDAgIT09IGluaXQpIHtcbiAgICAgIHZhciBpbml0aWFsU3RhdGUgPSBpbml0KGluaXRpYWxBcmcpO1xuICAgICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbml0KGluaXRpYWxBcmcpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpbml0aWFsU3RhdGUgPSBpbml0aWFsQXJnO1xuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IGhvb2suYmFzZVN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIHJlZHVjZXIgPSB7XG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgbGFuZXM6IDAsXG4gICAgICBkaXNwYXRjaDogbnVsbCxcbiAgICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IHJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gICAgfTtcbiAgICBob29rLnF1ZXVlID0gcmVkdWNlcjtcbiAgICByZWR1Y2VyID0gcmVkdWNlci5kaXNwYXRjaCA9IGRpc3BhdGNoUmVkdWNlckFjdGlvbi5iaW5kKFxuICAgICAgbnVsbCxcbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgICByZWR1Y2VyXG4gICAgKTtcbiAgICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgcmVkdWNlcl07XG4gIH0sXG4gIHVzZVJlZjogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICBpbml0aWFsVmFsdWUgPSB7IGN1cnJlbnQ6IGluaXRpYWxWYWx1ZSB9O1xuICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gaW5pdGlhbFZhbHVlKTtcbiAgfSxcbiAgdXNlU3RhdGU6IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICBpbml0aWFsU3RhdGUgPSBtb3VudFN0YXRlSW1wbChpbml0aWFsU3RhdGUpO1xuICAgIHZhciBxdWV1ZSA9IGluaXRpYWxTdGF0ZS5xdWV1ZSxcbiAgICAgIGRpc3BhdGNoID0gZGlzcGF0Y2hTZXRTdGF0ZS5iaW5kKG51bGwsIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsIHF1ZXVlKTtcbiAgICBxdWV1ZS5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuICAgIHJldHVybiBbaW5pdGlhbFN0YXRlLm1lbW9pemVkU3RhdGUsIGRpc3BhdGNoXTtcbiAgfSxcbiAgdXNlRGVidWdWYWx1ZTogbW91bnREZWJ1Z1ZhbHVlLFxuICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICByZXR1cm4gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKTtcbiAgfSxcbiAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZUhvb2sgPSBtb3VudFN0YXRlSW1wbCghMSk7XG4gICAgc3RhdGVIb29rID0gc3RhcnRUcmFuc2l0aW9uLmJpbmQoXG4gICAgICBudWxsLFxuICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAgIHN0YXRlSG9vay5xdWV1ZSxcbiAgICAgICEwLFxuICAgICAgITFcbiAgICApO1xuICAgIG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZSA9IHN0YXRlSG9vaztcbiAgICByZXR1cm4gWyExLCBzdGF0ZUhvb2tdO1xuICB9LFxuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogZnVuY3Rpb24gKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gICAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAgIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgaWYgKHZvaWQgMCA9PT0gZ2V0U2VydmVyU25hcHNob3QpXG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA3KSk7XG4gICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCA9IGdldFNlcnZlclNuYXBzaG90KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ5KSk7XG4gICAgICAwICE9PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA2MCkgfHxcbiAgICAgICAgcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgICB9XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gZ2V0U2VydmVyU25hcHNob3Q7XG4gICAgdmFyIGluc3QgPSB7IHZhbHVlOiBnZXRTZXJ2ZXJTbmFwc2hvdCwgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90IH07XG4gICAgaG9vay5xdWV1ZSA9IGluc3Q7XG4gICAgbW91bnRFZmZlY3Qoc3Vic2NyaWJlVG9TdG9yZS5iaW5kKG51bGwsIGZpYmVyLCBpbnN0LCBzdWJzY3JpYmUpLCBbXG4gICAgICBzdWJzY3JpYmVcbiAgICBdKTtcbiAgICBmaWJlci5mbGFncyB8PSAyMDQ4O1xuICAgIHB1c2hFZmZlY3QoXG4gICAgICA5LFxuICAgICAgdXBkYXRlU3RvcmVJbnN0YW5jZS5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBmaWJlcixcbiAgICAgICAgaW5zdCxcbiAgICAgICAgZ2V0U2VydmVyU25hcHNob3QsXG4gICAgICAgIGdldFNuYXBzaG90XG4gICAgICApLFxuICAgICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIHJldHVybiBnZXRTZXJ2ZXJTbmFwc2hvdDtcbiAgfSxcbiAgdXNlSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgICBpZGVudGlmaWVyUHJlZml4ID0gd29ya0luUHJvZ3Jlc3NSb290LmlkZW50aWZpZXJQcmVmaXg7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdHJlZUNvbnRleHRPdmVyZmxvdztcbiAgICAgIHZhciBpZFdpdGhMZWFkaW5nQml0ID0gdHJlZUNvbnRleHRJZDtcbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgIChcbiAgICAgICAgICBpZFdpdGhMZWFkaW5nQml0ICYgfigxIDw8ICgzMiAtIGNsejMyKGlkV2l0aExlYWRpbmdCaXQpIC0gMSkpXG4gICAgICAgICkudG9TdHJpbmcoMzIpICsgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgaWRlbnRpZmllclByZWZpeCA9XG4gICAgICAgIFwiOlwiICsgaWRlbnRpZmllclByZWZpeCArIFwiUlwiICsgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbG9jYWxJZENvdW50ZXIrKztcbiAgICAgIDAgPCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAgICAgKGlkZW50aWZpZXJQcmVmaXggKz0gXCJIXCIgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQudG9TdHJpbmcoMzIpKTtcbiAgICAgIGlkZW50aWZpZXJQcmVmaXggKz0gXCI6XCI7XG4gICAgfSBlbHNlXG4gICAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZ2xvYmFsQ2xpZW50SWRDb3VudGVyKyspLFxuICAgICAgICAoaWRlbnRpZmllclByZWZpeCA9XG4gICAgICAgICAgXCI6XCIgK1xuICAgICAgICAgIGlkZW50aWZpZXJQcmVmaXggK1xuICAgICAgICAgIFwiclwiICtcbiAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQudG9TdHJpbmcoMzIpICtcbiAgICAgICAgICBcIjpcIik7XG4gICAgcmV0dXJuIChob29rLm1lbW9pemVkU3RhdGUgPSBpZGVudGlmaWVyUHJlZml4KTtcbiAgfSxcbiAgdXNlQ2FjaGVSZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChtb3VudFdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGUgPSByZWZyZXNoQ2FjaGUuYmluZChcbiAgICAgIG51bGwsXG4gICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxXG4gICAgKSk7XG4gIH1cbn07XG5Ib29rc0Rpc3BhdGNoZXJPbk1vdW50LnVzZU1lbW9DYWNoZSA9IHVzZU1lbW9DYWNoZTtcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMgPSB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cztcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlRm9ybVN0YXRlID0gbW91bnRBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlQWN0aW9uU3RhdGUgPSBtb3VudEFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VPcHRpbWlzdGljID0gZnVuY3Rpb24gKHBhc3N0aHJvdWdoKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgdmFyIHF1ZXVlID0ge1xuICAgIHBlbmRpbmc6IG51bGwsXG4gICAgbGFuZXM6IDAsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogbnVsbFxuICB9O1xuICBob29rLnF1ZXVlID0gcXVldWU7XG4gIGhvb2sgPSBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZS5iaW5kKFxuICAgIG51bGwsXG4gICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAhMCxcbiAgICBxdWV1ZVxuICApO1xuICBxdWV1ZS5kaXNwYXRjaCA9IGhvb2s7XG4gIHJldHVybiBbcGFzc3Rocm91Z2gsIGhvb2tdO1xufTtcbnZhciBIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZSA9IHtcbiAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2U6IHVzZSxcbiAgdXNlQ2FsbGJhY2s6IHVwZGF0ZUNhbGxiYWNrLFxuICB1c2VDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlRWZmZWN0OiB1cGRhdGVFZmZlY3QsXG4gIHVzZUltcGVyYXRpdmVIYW5kbGU6IHVwZGF0ZUltcGVyYXRpdmVIYW5kbGUsXG4gIHVzZUluc2VydGlvbkVmZmVjdDogdXBkYXRlSW5zZXJ0aW9uRWZmZWN0LFxuICB1c2VMYXlvdXRFZmZlY3Q6IHVwZGF0ZUxheW91dEVmZmVjdCxcbiAgdXNlTWVtbzogdXBkYXRlTWVtbyxcbiAgdXNlUmVkdWNlcjogdXBkYXRlUmVkdWNlcixcbiAgdXNlUmVmOiB1cGRhdGVSZWYsXG4gIHVzZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpO1xuICB9LFxuICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICByZXR1cm4gdXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwoXG4gICAgICBob29rLFxuICAgICAgY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgIHZhbHVlLFxuICAgICAgaW5pdGlhbFZhbHVlXG4gICAgKTtcbiAgfSxcbiAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBib29sZWFuT3JUaGVuYWJsZSA9IHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdLFxuICAgICAgc3RhcnQgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xuICAgIHJldHVybiBbXG4gICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGJvb2xlYW5PclRoZW5hYmxlXG4gICAgICAgID8gYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgOiB1c2VUaGVuYWJsZShib29sZWFuT3JUaGVuYWJsZSksXG4gICAgICBzdGFydFxuICAgIF07XG4gIH0sXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgdXNlSWQ6IHVwZGF0ZUlkXG59O1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlQ2FjaGVSZWZyZXNoID0gdXBkYXRlUmVmcmVzaDtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZU1lbW9DYWNoZSA9IHVzZU1lbW9DYWNoZTtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzID0gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXM7XG5Ib29rc0Rpc3BhdGNoZXJPblVwZGF0ZS51c2VGb3JtU3RhdGUgPSB1cGRhdGVBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZUFjdGlvblN0YXRlID0gdXBkYXRlQWN0aW9uU3RhdGU7XG5Ib29rc0Rpc3BhdGNoZXJPblVwZGF0ZS51c2VPcHRpbWlzdGljID0gZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50SG9vaywgcGFzc3Rocm91Z2gsIHJlZHVjZXIpO1xufTtcbnZhciBIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyID0ge1xuICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZTogdXNlLFxuICB1c2VDYWxsYmFjazogdXBkYXRlQ2FsbGJhY2ssXG4gIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VFZmZlY3Q6IHVwZGF0ZUVmZmVjdCxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB1cGRhdGVJbnNlcnRpb25FZmZlY3QsXG4gIHVzZUxheW91dEVmZmVjdDogdXBkYXRlTGF5b3V0RWZmZWN0LFxuICB1c2VNZW1vOiB1cGRhdGVNZW1vLFxuICB1c2VSZWR1Y2VyOiByZXJlbmRlclJlZHVjZXIsXG4gIHVzZVJlZjogdXBkYXRlUmVmLFxuICB1c2VTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZXJlbmRlclJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpO1xuICB9LFxuICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICByZXR1cm4gbnVsbCA9PT0gY3VycmVudEhvb2tcbiAgICAgID8gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKVxuICAgICAgOiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgICAgICBob29rLFxuICAgICAgICAgIGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgaW5pdGlhbFZhbHVlXG4gICAgICAgICk7XG4gIH0sXG4gIHVzZVRyYW5zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYm9vbGVhbk9yVGhlbmFibGUgPSByZXJlbmRlclJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdLFxuICAgICAgc3RhcnQgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xuICAgIHJldHVybiBbXG4gICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGJvb2xlYW5PclRoZW5hYmxlXG4gICAgICAgID8gYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgOiB1c2VUaGVuYWJsZShib29sZWFuT3JUaGVuYWJsZSksXG4gICAgICBzdGFydFxuICAgIF07XG4gIH0sXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgdXNlSWQ6IHVwZGF0ZUlkXG59O1xuSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlci51c2VDYWNoZVJlZnJlc2ggPSB1cGRhdGVSZWZyZXNoO1xuSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlci51c2VNZW1vQ2FjaGUgPSB1c2VNZW1vQ2FjaGU7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzID0gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXM7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUZvcm1TdGF0ZSA9IHJlcmVuZGVyQWN0aW9uU3RhdGU7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUFjdGlvblN0YXRlID0gcmVyZW5kZXJBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlT3B0aW1pc3RpYyA9IGZ1bmN0aW9uIChwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBpZiAobnVsbCAhPT0gY3VycmVudEhvb2spXG4gICAgcmV0dXJuIHVwZGF0ZU9wdGltaXN0aWNJbXBsKGhvb2ssIGN1cnJlbnRIb29rLCBwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG4gIGhvb2suYmFzZVN0YXRlID0gcGFzc3Rocm91Z2g7XG4gIHJldHVybiBbcGFzc3Rocm91Z2gsIGhvb2sucXVldWUuZGlzcGF0Y2hdO1xufTtcbmZ1bmN0aW9uIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY3RvcixcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFxuICBuZXh0UHJvcHNcbikge1xuICBjdG9yID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgY3Rvcik7XG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9XG4gICAgbnVsbCA9PT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIHx8IHZvaWQgMCA9PT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXG4gICAgICA/IGN0b3JcbiAgICAgIDogYXNzaWduKHt9LCBjdG9yLCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAwID09PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcyAmJlxuICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpO1xufVxudmFyIGNsYXNzQ29tcG9uZW50VXBkYXRlciA9IHtcbiAgaXNNb3VudGVkOiBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIChjb21wb25lbnQgPSBjb21wb25lbnQuX3JlYWN0SW50ZXJuYWxzKVxuICAgICAgPyBnZXROZWFyZXN0TW91bnRlZEZpYmVyKGNvbXBvbmVudCkgPT09IGNvbXBvbmVudFxuICAgICAgOiAhMTtcbiAgfSxcbiAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAoaW5zdCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpLFxuICAgICAgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB2b2lkIDAgIT09IGNhbGxiYWNrICYmIG51bGwgIT09IGNhbGxiYWNrICYmICh1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjayk7XG4gICAgcGF5bG9hZCA9IGVucXVldWVVcGRhdGUoaW5zdCwgdXBkYXRlLCBsYW5lKTtcbiAgICBudWxsICE9PSBwYXlsb2FkICYmXG4gICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHBheWxvYWQsIGluc3QsIGxhbmUpLFxuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhwYXlsb2FkLCBpbnN0LCBsYW5lKSk7XG4gIH0sXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnRhZyA9IDE7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBwYXlsb2FkID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IHBheWxvYWQgJiZcbiAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIocGF5bG9hZCwgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHBheWxvYWQsIGluc3QsIGxhbmUpKTtcbiAgfSxcbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAoaW5zdCwgY2FsbGJhY2spIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpLFxuICAgICAgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgIHVwZGF0ZS50YWcgPSAyO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBjYWxsYmFjayA9IGVucXVldWVVcGRhdGUoaW5zdCwgdXBkYXRlLCBsYW5lKTtcbiAgICBudWxsICE9PSBjYWxsYmFjayAmJlxuICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihjYWxsYmFjaywgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKGNhbGxiYWNrLCBpbnN0LCBsYW5lKSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGN0b3IsXG4gIG9sZFByb3BzLFxuICBuZXdQcm9wcyxcbiAgb2xkU3RhdGUsXG4gIG5ld1N0YXRlLFxuICBuZXh0Q29udGV4dFxuKSB7XG4gIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd29ya0luUHJvZ3Jlc3Muc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gICAgPyB3b3JrSW5Qcm9ncmVzcy5zaG91bGRDb21wb25lbnRVcGRhdGUobmV3UHJvcHMsIG5ld1N0YXRlLCBuZXh0Q29udGV4dClcbiAgICA6IGN0b3IucHJvdG90eXBlICYmIGN0b3IucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50XG4gICAgICA/ICFzaGFsbG93RXF1YWwob2xkUHJvcHMsIG5ld1Byb3BzKSB8fCAhc2hhbGxvd0VxdWFsKG9sZFN0YXRlLCBuZXdTdGF0ZSlcbiAgICAgIDogITA7XG59XG5mdW5jdGlvbiBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGluc3RhbmNlLFxuICBuZXdQcm9wcyxcbiAgbmV4dENvbnRleHRcbikge1xuICB3b3JrSW5Qcm9ncmVzcyA9IGluc3RhbmNlLnN0YXRlO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAmJlxuICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBuZXh0Q29udGV4dCk7XG4gIGluc3RhbmNlLnN0YXRlICE9PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgIGNsYXNzQ29tcG9uZW50VXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGluc3RhbmNlLCBpbnN0YW5jZS5zdGF0ZSwgbnVsbCk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIGJhc2VQcm9wcykge1xuICB2YXIgbmV3UHJvcHMgPSBiYXNlUHJvcHM7XG4gIGlmIChcInJlZlwiIGluIGJhc2VQcm9wcykge1xuICAgIG5ld1Byb3BzID0ge307XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gYmFzZVByb3BzKVxuICAgICAgXCJyZWZcIiAhPT0gcHJvcE5hbWUgJiYgKG5ld1Byb3BzW3Byb3BOYW1lXSA9IGJhc2VQcm9wc1twcm9wTmFtZV0pO1xuICB9XG4gIGlmICgoQ29tcG9uZW50ID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcykpIHtcbiAgICBuZXdQcm9wcyA9PT0gYmFzZVByb3BzICYmIChuZXdQcm9wcyA9IGFzc2lnbih7fSwgbmV3UHJvcHMpKTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSQ2NyBpbiBDb21wb25lbnQpXG4gICAgICB2b2lkIDAgPT09IG5ld1Byb3BzW3Byb3BOYW1lJDY3XSAmJlxuICAgICAgICAobmV3UHJvcHNbcHJvcE5hbWUkNjddID0gQ29tcG9uZW50W3Byb3BOYW1lJDY3XSk7XG4gIH1cbiAgcmV0dXJuIG5ld1Byb3BzO1xufVxudmFyIHJlcG9ydEdsb2JhbEVycm9yID1cbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVwb3J0RXJyb3JcbiAgICA/IHJlcG9ydEVycm9yXG4gICAgOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB3aW5kb3cgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3aW5kb3cuRXJyb3JFdmVudFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkVycm9yRXZlbnQoXCJlcnJvclwiLCB7XG4gICAgICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6ICEwLFxuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVycm9yICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGVycm9yICYmXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcoZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgICAgICA6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIXdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBwcm9jZXNzICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJvY2Vzcy5lbWl0XG4gICAgICAgICkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdChcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9O1xuZnVuY3Rpb24gZGVmYXVsdE9uVW5jYXVnaHRFcnJvcihlcnJvcikge1xuICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG59XG5mdW5jdGlvbiBkZWZhdWx0T25DYXVnaHRFcnJvcihlcnJvcikge1xuICBjb25zb2xlLmVycm9yKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IoZXJyb3IpIHtcbiAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xufVxuZnVuY3Rpb24gbG9nVW5jYXVnaHRFcnJvcihyb290LCBlcnJvckluZm8pIHtcbiAgdHJ5IHtcbiAgICB2YXIgb25VbmNhdWdodEVycm9yID0gcm9vdC5vblVuY2F1Z2h0RXJyb3I7XG4gICAgb25VbmNhdWdodEVycm9yKGVycm9ySW5mby52YWx1ZSwgeyBjb21wb25lbnRTdGFjazogZXJyb3JJbmZvLnN0YWNrIH0pO1xuICB9IGNhdGNoIChlJDY4KSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlJDY4O1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBsb2dDYXVnaHRFcnJvcihyb290LCBib3VuZGFyeSwgZXJyb3JJbmZvKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9uQ2F1Z2h0RXJyb3IgPSByb290Lm9uQ2F1Z2h0RXJyb3I7XG4gICAgb25DYXVnaHRFcnJvcihlcnJvckluZm8udmFsdWUsIHtcbiAgICAgIGNvbXBvbmVudFN0YWNrOiBlcnJvckluZm8uc3RhY2ssXG4gICAgICBlcnJvckJvdW5kYXJ5OiAxID09PSBib3VuZGFyeS50YWcgPyBib3VuZGFyeS5zdGF0ZU5vZGUgOiBudWxsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUkNjkpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGUkNjk7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShyb290LCBlcnJvckluZm8sIGxhbmUpIHtcbiAgbGFuZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgbGFuZS50YWcgPSAzO1xuICBsYW5lLnBheWxvYWQgPSB7IGVsZW1lbnQ6IG51bGwgfTtcbiAgbGFuZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2dVbmNhdWdodEVycm9yKHJvb3QsIGVycm9ySW5mbyk7XG4gIH07XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZShsYW5lKSB7XG4gIGxhbmUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gIGxhbmUudGFnID0gMztcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZSh1cGRhdGUsIHJvb3QsIGZpYmVyLCBlcnJvckluZm8pIHtcbiAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9IGZpYmVyLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKSB7XG4gICAgdmFyIGVycm9yID0gZXJyb3JJbmZvLnZhbHVlO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICB1cGRhdGUuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDYXVnaHRFcnJvcihyb290LCBmaWJlciwgZXJyb3JJbmZvKTtcbiAgICB9O1xuICB9XG4gIHZhciBpbnN0ID0gZmliZXIuc3RhdGVOb2RlO1xuICBudWxsICE9PSBpbnN0ICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdC5jb21wb25lbnREaWRDYXRjaCAmJlxuICAgICh1cGRhdGUuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDYXVnaHRFcnJvcihyb290LCBmaWJlciwgZXJyb3JJbmZvKTtcbiAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAmJlxuICAgICAgICAobnVsbCA9PT0gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWRcbiAgICAgICAgICA/IChsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG5ldyBTZXQoW3RoaXNdKSlcbiAgICAgICAgICA6IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmFkZCh0aGlzKSk7XG4gICAgICB2YXIgc3RhY2sgPSBlcnJvckluZm8uc3RhY2s7XG4gICAgICB0aGlzLmNvbXBvbmVudERpZENhdGNoKGVycm9ySW5mby52YWx1ZSwge1xuICAgICAgICBjb21wb25lbnRTdGFjazogbnVsbCAhPT0gc3RhY2sgPyBzdGFjayA6IFwiXCJcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24oXG4gIHJvb3QsXG4gIHJldHVybkZpYmVyLFxuICBzb3VyY2VGaWJlcixcbiAgdmFsdWUsXG4gIHJvb3RSZW5kZXJMYW5lc1xuKSB7XG4gIHNvdXJjZUZpYmVyLmZsYWdzIHw9IDMyNzY4O1xuICBpZiAoXG4gICAgbnVsbCAhPT0gdmFsdWUgJiZcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgdmFsdWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZS50aGVuXG4gICkge1xuICAgIHJldHVybkZpYmVyID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IHJldHVybkZpYmVyICYmXG4gICAgICBwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIHNvdXJjZUZpYmVyLFxuICAgICAgICByb290UmVuZGVyTGFuZXMsXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIHNvdXJjZUZpYmVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICBpZiAobnVsbCAhPT0gc291cmNlRmliZXIpIHtcbiAgICAgIHN3aXRjaCAoc291cmNlRmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG51bGwgPT09IHNoZWxsQm91bmRhcnlcbiAgICAgICAgICAgICAgPyByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKClcbiAgICAgICAgICAgICAgOiBudWxsID09PSBzb3VyY2VGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgICAgICAwID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAzKSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyAmPSAtMjU3KSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgICAoc291cmNlRmliZXIubGFuZXMgPSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgdmFsdWUgPT09IG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZVxuICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci5mbGFncyB8PSAxNjM4NClcbiAgICAgICAgICAgICAgOiAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAgIG51bGwgPT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSA9IG5ldyBTZXQoW3ZhbHVlXSkpXG4gICAgICAgICAgICAgICAgICA6IHJldHVybkZpYmVyLmFkZCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIHZhbHVlID09PSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGVcbiAgICAgICAgICAgICAgPyAoc291cmNlRmliZXIuZmxhZ3MgfD0gMTYzODQpXG4gICAgICAgICAgICAgIDogKChyZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgICAgICAgICBudWxsID09PSByZXR1cm5GaWJlclxuICAgICAgICAgICAgICAgICAgPyAoKHJldHVybkZpYmVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25zOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIG1hcmtlckluc3RhbmNlczogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICByZXRyeVF1ZXVlOiBuZXcgU2V0KFt2YWx1ZV0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAoc291cmNlRmliZXIudXBkYXRlUXVldWUgPSByZXR1cm5GaWJlcikpXG4gICAgICAgICAgICAgICAgICA6ICgoc291cmNlRmliZXIgPSByZXR1cm5GaWJlci5yZXRyeVF1ZXVlKSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gc291cmNlRmliZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IChyZXR1cm5GaWJlci5yZXRyeVF1ZXVlID0gbmV3IFNldChbdmFsdWVdKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHNvdXJjZUZpYmVyLmFkZCh2YWx1ZSkpLFxuICAgICAgICAgICAgICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQzNSwgc291cmNlRmliZXIudGFnKSk7XG4gICAgfVxuICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKTtcbiAgICByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCk7XG4gICAgcmV0dXJuICExO1xuICB9XG4gIGlmIChpc0h5ZHJhdGluZylcbiAgICByZXR1cm4gKFxuICAgICAgKHJldHVybkZpYmVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICBudWxsICE9PSByZXR1cm5GaWJlclxuICAgICAgICA/ICgwID09PSAocmV0dXJuRmliZXIuZmxhZ3MgJiA2NTUzNikgJiYgKHJldHVybkZpYmVyLmZsYWdzIHw9IDI1NiksXG4gICAgICAgICAgKHJldHVybkZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocmV0dXJuRmliZXIubGFuZXMgPSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIHZhbHVlICE9PSBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbiAmJlxuICAgICAgICAgICAgKChyb290ID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MjIpLCB7IGNhdXNlOiB2YWx1ZSB9KSksXG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHJvb3QsIHNvdXJjZUZpYmVyKSkpKVxuICAgICAgICA6ICh2YWx1ZSAhPT0gSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gJiZcbiAgICAgICAgICAgICgocmV0dXJuRmliZXIgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyMyksIHtcbiAgICAgICAgICAgICAgY2F1c2U6IHZhbHVlXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKFxuICAgICAgICAgICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihyZXR1cm5GaWJlciwgc291cmNlRmliZXIpXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAocm9vdCA9IHJvb3QuY3VycmVudC5hbHRlcm5hdGUpLFxuICAgICAgICAgIChyb290LmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocm9vdFJlbmRlckxhbmVzICY9IC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChyb290LmxhbmVzIHw9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHZhbHVlID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZUZpYmVyKSksXG4gICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShcbiAgICAgICAgICAgIHJvb3Quc3RhdGVOb2RlLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICByb290UmVuZGVyTGFuZXNcbiAgICAgICAgICApKSxcbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUocm9vdCwgcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICA0ICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDIpKSxcbiAgICAgICExXG4gICAgKTtcbiAgdmFyIHdyYXBwZXJFcnJvciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTIwKSwgeyBjYXVzZTogdmFsdWUgfSk7XG4gIHdyYXBwZXJFcnJvciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHdyYXBwZXJFcnJvciwgc291cmNlRmliZXIpO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzXG4gICAgPyAod29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyA9IFt3cmFwcGVyRXJyb3JdKVxuICAgIDogd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycy5wdXNoKHdyYXBwZXJFcnJvcik7XG4gIDQgIT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAyKTtcbiAgaWYgKG51bGwgPT09IHJldHVybkZpYmVyKSByZXR1cm4gITA7XG4gIHZhbHVlID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZUZpYmVyKTtcbiAgc291cmNlRmliZXIgPSByZXR1cm5GaWJlcjtcbiAgZG8ge1xuICAgIHN3aXRjaCAoc291cmNlRmliZXIudGFnKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocm9vdCA9IHJvb3RSZW5kZXJMYW5lcyAmIC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChzb3VyY2VGaWJlci5sYW5lcyB8PSByb290KSxcbiAgICAgICAgICAocm9vdCA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShzb3VyY2VGaWJlci5zdGF0ZU5vZGUsIHZhbHVlLCByb290KSksXG4gICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHNvdXJjZUZpYmVyLCByb290KSxcbiAgICAgICAgICAhMVxuICAgICAgICApO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChyZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnR5cGUpLFxuICAgICAgICAgICh3cmFwcGVyRXJyb3IgPSBzb3VyY2VGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgIDAgPT09IChzb3VyY2VGaWJlci5mbGFncyAmIDEyOCkgJiZcbiAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5GaWJlci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgfHxcbiAgICAgICAgICAgICAgKG51bGwgIT09IHdyYXBwZXJFcnJvciAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdyYXBwZXJFcnJvci5jb21wb25lbnREaWRDYXRjaCAmJlxuICAgICAgICAgICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCB8fFxuICAgICAgICAgICAgICAgICAgIWxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmhhcyh3cmFwcGVyRXJyb3IpKSkpKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgICAocm9vdFJlbmRlckxhbmVzICY9IC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmxhbmVzIHw9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAocm9vdFJlbmRlckxhbmVzID0gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZShyb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgIGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKFxuICAgICAgICAgICAgICByb290UmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyLFxuICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZShzb3VyY2VGaWJlciwgcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICB9XG4gICAgc291cmNlRmliZXIgPSBzb3VyY2VGaWJlci5yZXR1cm47XG4gIH0gd2hpbGUgKG51bGwgIT09IHNvdXJjZUZpYmVyKTtcbiAgcmV0dXJuICExO1xufVxudmFyIFNlbGVjdGl2ZUh5ZHJhdGlvbkV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYxKSksXG4gIGRpZFJlY2VpdmVVcGRhdGUgPSAhMTtcbmZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKSB7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID1cbiAgICBudWxsID09PSBjdXJyZW50XG4gICAgICA/IG1vdW50Q2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIG51bGwsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpXG4gICAgICA6IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgbmV4dENoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICk7XG59XG5mdW5jdGlvbiB1cGRhdGVGb3J3YXJkUmVmKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgQ29tcG9uZW50ID0gQ29tcG9uZW50LnJlbmRlcjtcbiAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgaWYgKFwicmVmXCIgaW4gbmV4dFByb3BzKSB7XG4gICAgdmFyIHByb3BzV2l0aG91dFJlZiA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBuZXh0UHJvcHMpXG4gICAgICBcInJlZlwiICE9PSBrZXkgJiYgKHByb3BzV2l0aG91dFJlZltrZXldID0gbmV4dFByb3BzW2tleV0pO1xuICB9IGVsc2UgcHJvcHNXaXRob3V0UmVmID0gbmV4dFByb3BzO1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIG5leHRQcm9wcyA9IHJlbmRlcldpdGhIb29rcyhcbiAgICBjdXJyZW50LFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIENvbXBvbmVudCxcbiAgICBwcm9wc1dpdGhvdXRSZWYsXG4gICAgcmVmLFxuICAgIHJlbmRlckxhbmVzXG4gICk7XG4gIGtleSA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmICFkaWRSZWNlaXZlVXBkYXRlKVxuICAgIHJldHVybiAoXG4gICAgICBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSxcbiAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICk7XG4gIGlzSHlkcmF0aW5nICYmIGtleSAmJiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICB2YXIgdHlwZSA9IENvbXBvbmVudC50eXBlO1xuICAgIGlmIChcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUgJiZcbiAgICAgICFzaG91bGRDb25zdHJ1Y3QodHlwZSkgJiZcbiAgICAgIHZvaWQgMCA9PT0gdHlwZS5kZWZhdWx0UHJvcHMgJiZcbiAgICAgIG51bGwgPT09IENvbXBvbmVudC5jb21wYXJlXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLnRhZyA9IDE1KSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLnR5cGUgPSB0eXBlKSxcbiAgICAgICAgdXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgIENvbXBvbmVudC50eXBlLFxuICAgICAgbnVsbCxcbiAgICAgIG5leHRQcm9wcyxcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgd29ya0luUHJvZ3Jlc3MubW9kZSxcbiAgICAgIHJlbmRlckxhbmVzXG4gICAgKTtcbiAgICBjdXJyZW50LnJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgICBjdXJyZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICAgIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50KTtcbiAgfVxuICB0eXBlID0gY3VycmVudC5jaGlsZDtcbiAgaWYgKCFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykpIHtcbiAgICB2YXIgcHJldlByb3BzID0gdHlwZS5tZW1vaXplZFByb3BzO1xuICAgIENvbXBvbmVudCA9IENvbXBvbmVudC5jb21wYXJlO1xuICAgIENvbXBvbmVudCA9IG51bGwgIT09IENvbXBvbmVudCA/IENvbXBvbmVudCA6IHNoYWxsb3dFcXVhbDtcbiAgICBpZiAoQ29tcG9uZW50KHByZXZQcm9wcywgbmV4dFByb3BzKSAmJiBjdXJyZW50LnJlZiA9PT0gd29ya0luUHJvZ3Jlc3MucmVmKVxuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgfVxuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICBjdXJyZW50ID0gY3JlYXRlV29ya0luUHJvZ3Jlc3ModHlwZSwgbmV4dFByb3BzKTtcbiAgY3VycmVudC5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gIGN1cnJlbnQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBpZiAobnVsbCAhPT0gY3VycmVudCkge1xuICAgIHZhciBwcmV2UHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gICAgaWYgKFxuICAgICAgc2hhbGxvd0VxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKSAmJlxuICAgICAgY3VycmVudC5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZlxuICAgIClcbiAgICAgIGlmIChcbiAgICAgICAgKChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzID0gbmV4dFByb3BzID0gcHJldlByb3BzKSxcbiAgICAgICAgY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpKVxuICAgICAgKVxuICAgICAgICAwICE9PSAoY3VycmVudC5mbGFncyAmIDEzMTA3MikgJiYgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCk7XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gY3VycmVudC5sYW5lcyksXG4gICAgICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgICAgICk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICByZW5kZXJMYW5lc1xuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgIG5leHRDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbixcbiAgICBuZXh0SXNEZXRhY2hlZCA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMiksXG4gICAgcHJldlN0YXRlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICBpZiAoXCJoaWRkZW5cIiA9PT0gbmV4dFByb3BzLm1vZGUgfHwgbmV4dElzRGV0YWNoZWQpIHtcbiAgICBpZiAoMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSkge1xuICAgICAgbmV4dFByb3BzID1cbiAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzIDogcmVuZGVyTGFuZXM7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCkge1xuICAgICAgICBuZXh0Q2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQ7XG4gICAgICAgIGZvciAobmV4dElzRGV0YWNoZWQgPSAwOyBudWxsICE9PSBuZXh0Q2hpbGRyZW47IClcbiAgICAgICAgICAobmV4dElzRGV0YWNoZWQgPVxuICAgICAgICAgICAgbmV4dElzRGV0YWNoZWQgfCBuZXh0Q2hpbGRyZW4ubGFuZXMgfCBuZXh0Q2hpbGRyZW4uY2hpbGRMYW5lcyksXG4gICAgICAgICAgICAobmV4dENoaWxkcmVuID0gbmV4dENoaWxkcmVuLnNpYmxpbmcpO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gbmV4dElzRGV0YWNoZWQgJiB+bmV4dFByb3BzO1xuICAgICAgfSBlbHNlICh3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gMCksICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpO1xuICAgICAgcmV0dXJuIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikpXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHsgYmFzZUxhbmVzOiAwLCBjYWNoZVBvb2w6IG51bGwgfSksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBwdXNoVHJhbnNpdGlvbihcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmNhY2hlUG9vbCA6IG51bGxcbiAgICAgICAgICApLFxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGVcbiAgICAgICAgICA/IHB1c2hIaWRkZW5Db250ZXh0KHdvcmtJblByb2dyZXNzLCBwcmV2U3RhdGUpXG4gICAgICAgICAgOiByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCksXG4gICAgICAgIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSA1MzY4NzA5MTIpLFxuICAgICAgICBkZWZlckhpZGRlbk9mZnNjcmVlbkNvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIG51bGwgIT09IHByZXZTdGF0ZSA/IHByZXZTdGF0ZS5iYXNlTGFuZXMgfCByZW5kZXJMYW5lcyA6IHJlbmRlckxhbmVzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gIH0gZWxzZVxuICAgIG51bGwgIT09IHByZXZTdGF0ZVxuICAgICAgPyAocHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIHByZXZTdGF0ZS5jYWNoZVBvb2wpLFxuICAgICAgICBwdXNoSGlkZGVuQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcHJldlN0YXRlKSxcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSlcbiAgICAgIDogKG51bGwgIT09IGN1cnJlbnQgJiYgcHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIG51bGwpLFxuICAgICAgICByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCksXG4gICAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcykpO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dEJhc2VMYW5lcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcGVla0NhY2hlRnJvbVBvb2woKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICBudWxsID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgID8gbnVsbFxuICAgICAgOiB7IHBhcmVudDogQ2FjaGVDb250ZXh0Ll9jdXJyZW50VmFsdWUsIHBvb2w6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCB9O1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgIGJhc2VMYW5lczogbmV4dEJhc2VMYW5lcyxcbiAgICBjYWNoZVBvb2w6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICB9O1xuICBudWxsICE9PSBjdXJyZW50ICYmIHB1c2hUcmFuc2l0aW9uKHdvcmtJblByb2dyZXNzLCBudWxsKTtcbiAgcmV1c2VIaWRkZW5Db250ZXh0T25TdGFjaygpO1xuICBwdXNoT2Zmc2NyZWVuU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcywgITApO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgaWYgKG51bGwgPT09IHJlZilcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICBudWxsICE9PSBjdXJyZW50LnJlZiAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwOTc2NjQpO1xuICBlbHNlIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcmVmICYmIFwib2JqZWN0XCIgIT09IHR5cGVvZiByZWYpXG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI4NCkpO1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IGN1cnJlbnQucmVmICE9PSByZWYpXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDk3NjY0O1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgQ29tcG9uZW50ID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICB2b2lkIDAsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbiAgbmV4dFByb3BzID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYgbmV4dFByb3BzICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dFByb3BzLFxuICBDb21wb25lbnQsXG4gIHNlY29uZEFyZyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgbmV4dFByb3BzID0gcmVuZGVyV2l0aEhvb2tzQWdhaW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICBzZWNvbmRBcmdcbiAgKTtcbiAgZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCk7XG4gIENvbXBvbmVudCA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmICFkaWRSZWNlaXZlVXBkYXRlKVxuICAgIHJldHVybiAoXG4gICAgICBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSxcbiAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICk7XG4gIGlzSHlkcmF0aW5nICYmIENvbXBvbmVudCAmJiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gZW1wdHlDb250ZXh0T2JqZWN0LFxuICAgICAgY29udGV4dFR5cGUgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlICYmXG4gICAgICBudWxsICE9PSBjb250ZXh0VHlwZSAmJlxuICAgICAgKGNvbnRleHQgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSkpO1xuICAgIGNvbnRleHQgPSBuZXcgQ29tcG9uZW50KG5leHRQcm9wcywgY29udGV4dCk7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICBudWxsICE9PSBjb250ZXh0LnN0YXRlICYmIHZvaWQgMCAhPT0gY29udGV4dC5zdGF0ZSA/IGNvbnRleHQuc3RhdGUgOiBudWxsO1xuICAgIGNvbnRleHQudXBkYXRlciA9IGNsYXNzQ29tcG9uZW50VXBkYXRlcjtcbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjb250ZXh0O1xuICAgIGNvbnRleHQuX3JlYWN0SW50ZXJuYWxzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBjb250ZXh0LnByb3BzID0gbmV4dFByb3BzO1xuICAgIGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHQucmVmcyA9IHt9O1xuICAgIGluaXRpYWxpemVVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgY29udGV4dFR5cGUgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgY29udGV4dC5jb250ZXh0ID1cbiAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjb250ZXh0VHlwZSAmJiBudWxsICE9PSBjb250ZXh0VHlwZVxuICAgICAgICA/IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKVxuICAgICAgICA6IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBjb250ZXh0LnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dFR5cGUgJiZcbiAgICAgIChhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgY29udGV4dFR5cGUsXG4gICAgICAgIG5leHRQcm9wc1xuICAgICAgKSxcbiAgICAgIChjb250ZXh0LnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSkpO1xuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQpIHx8XG4gICAgICAoKGNvbnRleHRUeXBlID0gY29udGV4dC5zdGF0ZSksXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgY29udGV4dFR5cGUgIT09IGNvbnRleHQuc3RhdGUgJiZcbiAgICAgICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoY29udGV4dCwgY29udGV4dC5zdGF0ZSwgbnVsbCksXG4gICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpLFxuICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpLFxuICAgICAgKGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSk7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQzMDgpO1xuICAgIG5leHRQcm9wcyA9ICEwO1xuICB9IGVsc2UgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIHZhciB1bnJlc29sdmVkT2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLFxuICAgICAgb2xkUHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIHVucmVzb2x2ZWRPbGRQcm9wcyk7XG4gICAgY29udGV4dC5wcm9wcyA9IG9sZFByb3BzO1xuICAgIHZhciBvbGRDb250ZXh0ID0gY29udGV4dC5jb250ZXh0LFxuICAgICAgY29udGV4dFR5cGUkanNjb21wJDAgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgY29udGV4dFR5cGUgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlJGpzY29tcCQwICYmXG4gICAgICBudWxsICE9PSBjb250ZXh0VHlwZSRqc2NvbXAkMCAmJlxuICAgICAgKGNvbnRleHRUeXBlID0gcmVhZENvbnRleHQoY29udGV4dFR5cGUkanNjb21wJDApKTtcbiAgICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7XG4gICAgdW5yZXNvbHZlZE9sZFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzICE9PSB1bnJlc29sdmVkT2xkUHJvcHM7XG4gICAgY29udGV4dFR5cGUkanNjb21wJDAgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgfHxcbiAgICAgICgodW5yZXNvbHZlZE9sZFByb3BzIHx8IG9sZENvbnRleHQgIT09IGNvbnRleHRUeXBlKSAmJlxuICAgICAgICBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICBjb250ZXh0VHlwZVxuICAgICAgICApKTtcbiAgICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICAgIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5zdGF0ZSA9IG9sZFN0YXRlO1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgIG9sZENvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIHVucmVzb2x2ZWRPbGRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gb2xkQ29udGV4dCB8fCBoYXNGb3JjZVVwZGF0ZVxuICAgICAgPyAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICYmXG4gICAgICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHNcbiAgICAgICAgICApLFxuICAgICAgICAgIChvbGRDb250ZXh0ID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSkpLFxuICAgICAgICAob2xkUHJvcHMgPVxuICAgICAgICAgIGhhc0ZvcmNlVXBkYXRlIHx8XG4gICAgICAgICAgY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIG9sZFByb3BzLFxuICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgb2xkU3RhdGUsXG4gICAgICAgICAgICBvbGRDb250ZXh0LFxuICAgICAgICAgICAgY29udGV4dFR5cGVcbiAgICAgICAgICApKVxuICAgICAgICAgID8gKGNvbnRleHRUeXBlJGpzY29tcCQwIHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCkgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQoKSxcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCkpXG4gICAgICAgICAgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG9sZENvbnRleHQpKSxcbiAgICAgICAgKGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHMpLFxuICAgICAgICAoY29udGV4dC5zdGF0ZSA9IG9sZENvbnRleHQpLFxuICAgICAgICAoY29udGV4dC5jb250ZXh0ID0gY29udGV4dFR5cGUpLFxuICAgICAgICAobmV4dFByb3BzID0gb2xkUHJvcHMpKVxuICAgICAgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSxcbiAgICAgICAgKG5leHRQcm9wcyA9ICExKSk7XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICBjb250ZXh0VHlwZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgY29udGV4dFR5cGUkanNjb21wJDAgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIGNvbnRleHRUeXBlKTtcbiAgICBjb250ZXh0LnByb3BzID0gY29udGV4dFR5cGUkanNjb21wJDA7XG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIG9sZFN0YXRlID0gY29udGV4dC5jb250ZXh0O1xuICAgIG9sZENvbnRleHQgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgb2xkUHJvcHMgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9sZENvbnRleHQgJiZcbiAgICAgIG51bGwgIT09IG9sZENvbnRleHQgJiZcbiAgICAgIChvbGRQcm9wcyA9IHJlYWRDb250ZXh0KG9sZENvbnRleHQpKTtcbiAgICB1bnJlc29sdmVkT2xkUHJvcHMgPSBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAgIChvbGRDb250ZXh0ID1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVucmVzb2x2ZWRPbGRQcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSkgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgfHxcbiAgICAgICgoY29udGV4dFR5cGUgIT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fCBvbGRTdGF0ZSAhPT0gb2xkUHJvcHMpICYmXG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIG9sZFByb3BzXG4gICAgICAgICkpO1xuICAgIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gICAgb2xkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHQuc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpO1xuICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKTtcbiAgICB2YXIgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHRUeXBlICE9PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICBvbGRTdGF0ZSAhPT0gbmV3U3RhdGUgfHxcbiAgICBoYXNGb3JjZVVwZGF0ZSB8fFxuICAgIChudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICBudWxsICE9PSBjdXJyZW50LmRlcGVuZGVuY2llcyAmJlxuICAgICAgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQuZGVwZW5kZW5jaWVzKSlcbiAgICAgID8gKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVucmVzb2x2ZWRPbGRQcm9wcyAmJlxuICAgICAgICAgIChhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgdW5yZXNvbHZlZE9sZFByb3BzLFxuICAgICAgICAgICAgbmV4dFByb3BzXG4gICAgICAgICAgKSxcbiAgICAgICAgICAobmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSksXG4gICAgICAgIChjb250ZXh0VHlwZSRqc2NvbXAkMCA9XG4gICAgICAgICAgaGFzRm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgY29udGV4dFR5cGUkanNjb21wJDAsXG4gICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgICApIHx8XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQuZGVwZW5kZW5jaWVzICYmXG4gICAgICAgICAgICBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudC5kZXBlbmRlbmNpZXMpKSlcbiAgICAgICAgICA/IChvbGRDb250ZXh0IHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlKSB8fFxuICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV3U3RhdGUsIG9sZFByb3BzKSxcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSAmJlxuICAgICAgICAgICAgICAgIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBuZXdTdGF0ZSxcbiAgICAgICAgICAgICAgICAgIG9sZFByb3BzXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSlcbiAgICAgICAgICA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSB8fFxuICAgICAgICAgICAgICAoY29udGV4dFR5cGUgPT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAmJlxuICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHxcbiAgICAgICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTAyNCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlKSksXG4gICAgICAgIChjb250ZXh0LnByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgKGNvbnRleHQuc3RhdGUgPSBuZXdTdGF0ZSksXG4gICAgICAgIChjb250ZXh0LmNvbnRleHQgPSBvbGRQcm9wcyksXG4gICAgICAgIChuZXh0UHJvcHMgPSBjb250ZXh0VHlwZSRqc2NvbXAkMCkpXG4gICAgICA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSB8fFxuICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgKG5leHRQcm9wcyA9ICExKSk7XG4gIH1cbiAgY29udGV4dCA9IG5leHRQcm9wcztcbiAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIG5leHRQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gIGNvbnRleHQgfHwgbmV4dFByb3BzXG4gICAgPyAoKGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpLFxuICAgICAgKENvbXBvbmVudCA9XG4gICAgICAgIG5leHRQcm9wcyAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiBjb250ZXh0LnJlbmRlcigpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxKSxcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgbmV4dFByb3BzXG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICkpKVxuICAgICAgICA6IHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gY29udGV4dC5zdGF0ZSksXG4gICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSlcbiAgICA6IChjdXJyZW50ID0gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApKTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiBtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIG5leHRDaGlsZHJlbixcbiAgcmVuZGVyTGFuZXNcbikge1xuICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDI1NjtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG52YXIgU1VTUEVOREVEX01BUktFUiA9IHsgZGVoeWRyYXRlZDogbnVsbCwgdHJlZUNvbnRleHQ6IG51bGwsIHJldHJ5TGFuZTogMCB9O1xuZnVuY3Rpb24gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSB7XG4gIHJldHVybiB7IGJhc2VMYW5lczogcmVuZGVyTGFuZXMsIGNhY2hlUG9vbDogZ2V0U3VzcGVuZGVkQ2FjaGUoKSB9O1xufVxuZnVuY3Rpb24gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gIGN1cnJlbnQsXG4gIHByaW1hcnlUcmVlRGlkRGVmZXIsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgY3VycmVudCA9IG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LmNoaWxkTGFuZXMgJiB+cmVuZGVyTGFuZXMgOiAwO1xuICBwcmltYXJ5VHJlZURpZERlZmVyICYmIChjdXJyZW50IHw9IHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lKTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICBzaG93RmFsbGJhY2sgPSAhMSxcbiAgICBkaWRTdXNwZW5kID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSxcbiAgICBKU0NvbXBpbGVyX3RlbXA7XG4gIChKU0NvbXBpbGVyX3RlbXAgPSBkaWRTdXNwZW5kKSB8fFxuICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBudWxsID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyAhMVxuICAgICAgICA6IDAgIT09IChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQgJiAyKSk7XG4gIEpTQ29tcGlsZXJfdGVtcCAmJiAoKHNob3dGYWxsYmFjayA9ICEwKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xMjkpKTtcbiAgSlNDb21waWxlcl90ZW1wID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMzIpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMzM7XG4gIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICBzaG93RmFsbGJhY2tcbiAgICAgICAgPyBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgIDogcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICB2YXIgbmV4dEluc3RhbmNlID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSxcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDA7XG4gICAgICAgIGlmICgoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gbmV4dEluc3RhbmNlKSkge1xuICAgICAgICAgIGM6IHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IG5leHRJbnN0YW5jZTtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZSA9IHJvb3RPclNpbmdsZXRvbkNvbnRleHQ7XG4gICAgICAgICAgICAgIDggIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5ub2RlVHlwZTtcblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICghbmV4dEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG51bGwgIT09IG5leHRJbnN0YW5jZVxuICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgZGVoeWRyYXRlZDogbmV4dEluc3RhbmNlLFxuICAgICAgICAgICAgICAgIHRyZWVDb250ZXh0OlxuICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gdHJlZUNvbnRleHRQcm92aWRlclxuICAgICAgICAgICAgICAgICAgICA/IHsgaWQ6IHRyZWVDb250ZXh0SWQsIG92ZXJmbG93OiB0cmVlQ29udGV4dE92ZXJmbG93IH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgIHJldHJ5TGFuZTogNTM2ODcwOTEyXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuc3RhdGVOb2RlID0gbmV4dEluc3RhbmNlKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCksXG4gICAgICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9ICEwKSlcbiAgICAgICAgICAgIDogKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9ICExKTtcbiAgICAgICAgfVxuICAgICAgICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIG5leHRJbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgIT09IG5leHRJbnN0YW5jZSAmJlxuICAgICAgICAoKG5leHRJbnN0YW5jZSA9IG5leHRJbnN0YW5jZS5kZWh5ZHJhdGVkKSwgbnVsbCAhPT0gbmV4dEluc3RhbmNlKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIFwiJCFcIiA9PT0gbmV4dEluc3RhbmNlLmRhdGFcbiAgICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLmxhbmVzID0gMTYpXG4gICAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDUzNjg3MDkxMiksXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gICAgbmV4dEluc3RhbmNlID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgIG5leHRQcm9wcyA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICBpZiAoc2hvd0ZhbGxiYWNrKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLm1vZGUpLFxuICAgICAgICAobmV4dEluc3RhbmNlID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgICAgICAgIHsgbW9kZTogXCJoaWRkZW5cIiwgY2hpbGRyZW46IG5leHRJbnN0YW5jZSB9LFxuICAgICAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICApKSxcbiAgICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApKSxcbiAgICAgICAgKG5leHRJbnN0YW5jZS5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChuZXh0UHJvcHMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobmV4dEluc3RhbmNlLnNpYmxpbmcgPSBuZXh0UHJvcHMpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrLm1lbW9pemVkU3RhdGUgPSBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpKSxcbiAgICAgICAgKHNob3dGYWxsYmFjay5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gU1VTUEVOREVEX01BUktFUiksXG4gICAgICAgIG5leHRQcm9wc1xuICAgICAgKTtcbiAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIHJldHVybiBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBuZXh0SW5zdGFuY2UpO1xuICB9XG4gIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKFxuICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCAmJlxuICAgICgobmV4dEluc3RhbmNlID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLmRlaHlkcmF0ZWQpLFxuICAgIG51bGwgIT09IG5leHRJbnN0YW5jZSlcbiAgKSB7XG4gICAgaWYgKGRpZFN1c3BlbmQpXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NlxuICAgICAgICA/IChwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMjU3KSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSkpXG4gICAgICAgIDogbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgID8gKHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gbnVsbCkpXG4gICAgICAgICAgOiAocmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2sgPSBuZXh0UHJvcHMuZmFsbGJhY2spLFxuICAgICAgICAgICAgKG5leHRJbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLm1vZGUpLFxuICAgICAgICAgICAgKG5leHRQcm9wcyA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICAgICAgICAgICAgeyBtb2RlOiBcInZpc2libGVcIiwgY2hpbGRyZW46IG5leHRQcm9wcy5jaGlsZHJlbiB9LFxuICAgICAgICAgICAgICBuZXh0SW5zdGFuY2VcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjayA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZSxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjay5mbGFncyB8PSAyKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjay5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAobmV4dFByb3BzLnNpYmxpbmcgPSBzaG93RmFsbGJhY2spLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgY3VycmVudC5jaGlsZCxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5tZW1vaXplZFN0YXRlID1cbiAgICAgICAgICAgICAgbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAobmV4dFByb3BzLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gc2hvd0ZhbGxiYWNrKSk7XG4gICAgZWxzZSBpZiAoXG4gICAgICAocHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgIFwiJCFcIiA9PT0gbmV4dEluc3RhbmNlLmRhdGEpXG4gICAgKSB7XG4gICAgICBKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICBuZXh0SW5zdGFuY2UubmV4dFNpYmxpbmcgJiYgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG4gICAgICBpZiAoSlNDb21waWxlcl90ZW1wKSB2YXIgZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wLmRnc3Q7XG4gICAgICBKU0NvbXBpbGVyX3RlbXAgPSBkaWdlc3Q7XG4gICAgICBuZXh0UHJvcHMgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQxOSkpO1xuICAgICAgbmV4dFByb3BzLnN0YWNrID0gXCJcIjtcbiAgICAgIG5leHRQcm9wcy5kaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXA7XG4gICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKHsgdmFsdWU6IG5leHRQcm9wcywgc291cmNlOiBudWxsLCBzdGFjazogbnVsbCB9KTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKGRpZFJlY2VpdmVVcGRhdGUgfHxcbiAgICAgICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzLCAhMSksXG4gICAgICAoSlNDb21waWxlcl90ZW1wID0gMCAhPT0gKHJlbmRlckxhbmVzICYgY3VycmVudC5jaGlsZExhbmVzKSksXG4gICAgICBkaWRSZWNlaXZlVXBkYXRlIHx8IEpTQ29tcGlsZXJfdGVtcClcbiAgICApIHtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IHdvcmtJblByb2dyZXNzUm9vdDtcbiAgICAgIGlmIChudWxsICE9PSBKU0NvbXBpbGVyX3RlbXApIHtcbiAgICAgICAgbmV4dFByb3BzID0gcmVuZGVyTGFuZXMgJiAtcmVuZGVyTGFuZXM7XG4gICAgICAgIGlmICgwICE9PSAobmV4dFByb3BzICYgNDIpKSBuZXh0UHJvcHMgPSAxO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgc3dpdGNoIChuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgIG5leHRQcm9wcyA9IDQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gMTY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMjg6XG4gICAgICAgICAgICBjYXNlIDI1NjpcbiAgICAgICAgICAgIGNhc2UgNTEyOlxuICAgICAgICAgICAgY2FzZSAxMDI0OlxuICAgICAgICAgICAgY2FzZSAyMDQ4OlxuICAgICAgICAgICAgY2FzZSA0MDk2OlxuICAgICAgICAgICAgY2FzZSA4MTkyOlxuICAgICAgICAgICAgY2FzZSAxNjM4NDpcbiAgICAgICAgICAgIGNhc2UgMzI3Njg6XG4gICAgICAgICAgICBjYXNlIDY1NTM2OlxuICAgICAgICAgICAgY2FzZSAxMzEwNzI6XG4gICAgICAgICAgICBjYXNlIDI2MjE0NDpcbiAgICAgICAgICAgIGNhc2UgNTI0Mjg4OlxuICAgICAgICAgICAgY2FzZSAxMDQ4NTc2OlxuICAgICAgICAgICAgY2FzZSAyMDk3MTUyOlxuICAgICAgICAgICAgY2FzZSA0MTk0MzA0OlxuICAgICAgICAgICAgY2FzZSA4Mzg4NjA4OlxuICAgICAgICAgICAgY2FzZSAxNjc3NzIxNjpcbiAgICAgICAgICAgIGNhc2UgMzM1NTQ0MzI6XG4gICAgICAgICAgICAgIG5leHRQcm9wcyA9IDY0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjY4NDM1NDU2OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAxMzQyMTc3Mjg7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIG5leHRQcm9wcyA9XG4gICAgICAgICAgMCAhPT0gKG5leHRQcm9wcyAmIChKU0NvbXBpbGVyX3RlbXAuc3VzcGVuZGVkTGFuZXMgfCByZW5kZXJMYW5lcykpXG4gICAgICAgICAgICA/IDBcbiAgICAgICAgICAgIDogbmV4dFByb3BzO1xuICAgICAgICBpZiAoMCAhPT0gbmV4dFByb3BzICYmIG5leHRQcm9wcyAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHJ5TGFuZSlcbiAgICAgICAgICB0aHJvdyAoXG4gICAgICAgICAgICAoKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXRyeUxhbmUgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGN1cnJlbnQsIG5leHRQcm9wcyksXG4gICAgICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIoSlNDb21waWxlcl90ZW1wLCBjdXJyZW50LCBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBcIiQ/XCIgPT09IG5leHRJbnN0YW5jZS5kYXRhIHx8IHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIFwiJD9cIiA9PT0gbmV4dEluc3RhbmNlLmRhdGFcbiAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gcmV0cnlEZWh5ZHJhdGVkU3VzcGVuc2VCb3VuZGFyeS5iaW5kKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGN1cnJlbnRcbiAgICAgICAgICApKSxcbiAgICAgICAgICAobmV4dEluc3RhbmNlLl9yZWFjdFJldHJ5ID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpKVxuICAgICAgICA6ICgoY3VycmVudCA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC50cmVlQ29udGV4dCksXG4gICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgIG5leHRJbnN0YW5jZS5uZXh0U2libGluZ1xuICAgICAgICAgICkpLFxuICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAoaXNIeWRyYXRpbmcgPSAhMCksXG4gICAgICAgICAgKGh5ZHJhdGlvbkVycm9ycyA9IG51bGwpLFxuICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgICgoaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dElkKSxcbiAgICAgICAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0T3ZlcmZsb3cpLFxuICAgICAgICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRQcm92aWRlciksXG4gICAgICAgICAgICAodHJlZUNvbnRleHRJZCA9IGN1cnJlbnQuaWQpLFxuICAgICAgICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBjdXJyZW50Lm92ZXJmbG93KSxcbiAgICAgICAgICAgICh0cmVlQ29udGV4dFByb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3MpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICApKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDA5NikpO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgfVxuICBpZiAoc2hvd0ZhbGxiYWNrKVxuICAgIHJldHVybiAoXG4gICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgKHNob3dGYWxsYmFjayA9IG5leHRQcm9wcy5mYWxsYmFjayksXG4gICAgICAobmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3VycmVudC5jaGlsZCksXG4gICAgICAoZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnNpYmxpbmcpLFxuICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCwge1xuICAgICAgICBtb2RlOiBcImhpZGRlblwiLFxuICAgICAgICBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuXG4gICAgICB9KSksXG4gICAgICAobmV4dFByb3BzLnN1YnRyZWVGbGFncyA9XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5zdWJ0cmVlRmxhZ3MgJiAzMTQ1NzI4MCksXG4gICAgICBudWxsICE9PSBkaWdlc3RcbiAgICAgICAgPyAoc2hvd0ZhbGxiYWNrID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZGlnZXN0LCBzaG93RmFsbGJhY2spKVxuICAgICAgICA6ICgoc2hvd0ZhbGxiYWNrID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAoc2hvd0ZhbGxiYWNrLmZsYWdzIHw9IDIpKSxcbiAgICAgIChzaG93RmFsbGJhY2sucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAobmV4dFByb3BzLnNpYmxpbmcgPSBzaG93RmFsbGJhY2spLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dFByb3BzKSxcbiAgICAgIChuZXh0UHJvcHMgPSBzaG93RmFsbGJhY2spLFxuICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgIChuZXh0SW5zdGFuY2UgPSBjdXJyZW50LmNoaWxkLm1lbW9pemVkU3RhdGUpLFxuICAgICAgbnVsbCA9PT0gbmV4dEluc3RhbmNlXG4gICAgICAgID8gKG5leHRJbnN0YW5jZSA9IG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpXG4gICAgICAgIDogKChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBuZXh0SW5zdGFuY2UuY2FjaGVQb29sKSxcbiAgICAgICAgICBudWxsICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDBcbiAgICAgICAgICAgID8gKChkaWdlc3QgPSBDYWNoZUNvbnRleHQuX2N1cnJlbnRWYWx1ZSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5wYXJlbnQgIT09IGRpZ2VzdFxuICAgICAgICAgICAgICAgICAgPyB7IHBhcmVudDogZGlnZXN0LCBwb29sOiBkaWdlc3QgfVxuICAgICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApKVxuICAgICAgICAgICAgOiAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gZ2V0U3VzcGVuZGVkQ2FjaGUoKSksXG4gICAgICAgICAgKG5leHRJbnN0YW5jZSA9IHtcbiAgICAgICAgICAgIGJhc2VMYW5lczogbmV4dEluc3RhbmNlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgY2FjaGVQb29sOiBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDBcbiAgICAgICAgICB9KSksXG4gICAgICAoc2hvd0ZhbGxiYWNrLm1lbW9pemVkU3RhdGUgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgKHNob3dGYWxsYmFjay5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgIG5leHRQcm9wc1xuICAgICk7XG4gIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gIHJlbmRlckxhbmVzID0gY3VycmVudC5jaGlsZDtcbiAgY3VycmVudCA9IHJlbmRlckxhbmVzLnNpYmxpbmc7XG4gIHJlbmRlckxhbmVzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MocmVuZGVyTGFuZXMsIHtcbiAgICBtb2RlOiBcInZpc2libGVcIixcbiAgICBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuXG4gIH0pO1xuICByZW5kZXJMYW5lcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmVuZGVyTGFuZXMuc2libGluZyA9IG51bGw7XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKEpTQ29tcGlsZXJfdGVtcCA9IHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyksXG4gICAgbnVsbCA9PT0gSlNDb21waWxlcl90ZW1wXG4gICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gW2N1cnJlbnRdKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE2KSlcbiAgICAgIDogSlNDb21waWxlcl90ZW1wLnB1c2goY3VycmVudCkpO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgcmV0dXJuIHJlbmRlckxhbmVzO1xufVxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbih3b3JrSW5Qcm9ncmVzcywgcHJpbWFyeUNoaWxkcmVuKSB7XG4gIHByaW1hcnlDaGlsZHJlbiA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICB7IG1vZGU6IFwidmlzaWJsZVwiLCBjaGlsZHJlbjogcHJpbWFyeUNoaWxkcmVuIH0sXG4gICAgd29ya0luUHJvZ3Jlc3MubW9kZVxuICApO1xuICBwcmltYXJ5Q2hpbGRyZW4ucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBwcmltYXJ5Q2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKG9mZnNjcmVlblByb3BzLCBtb2RlKSB7XG4gIHJldHVybiBjcmVhdGVGaWJlckZyb21PZmZzY3JlZW4ob2Zmc2NyZWVuUHJvcHMsIG1vZGUsIDAsIG51bGwpO1xufVxuZnVuY3Rpb24gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBjdXJyZW50LmNoaWxkLCBudWxsLCByZW5kZXJMYW5lcyk7XG4gIGN1cnJlbnQgPSBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlblxuICApO1xuICBjdXJyZW50LmZsYWdzIHw9IDI7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlcihmaWJlciwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCkge1xuICBmaWJlci5sYW5lcyB8PSByZW5kZXJMYW5lcztcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICBzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoKGZpYmVyLnJldHVybiwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCk7XG59XG5mdW5jdGlvbiBpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUoXG4gIHdvcmtJblByb2dyZXNzLFxuICBpc0JhY2t3YXJkcyxcbiAgdGFpbCxcbiAgbGFzdENvbnRlbnRSb3csXG4gIHRhaWxNb2RlXG4pIHtcbiAgdmFyIHJlbmRlclN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgbnVsbCA9PT0gcmVuZGVyU3RhdGVcbiAgICA/ICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgICAgICBpc0JhY2t3YXJkczogaXNCYWNrd2FyZHMsXG4gICAgICAgIHJlbmRlcmluZzogbnVsbCxcbiAgICAgICAgcmVuZGVyaW5nU3RhcnRUaW1lOiAwLFxuICAgICAgICBsYXN0OiBsYXN0Q29udGVudFJvdyxcbiAgICAgICAgdGFpbDogdGFpbCxcbiAgICAgICAgdGFpbE1vZGU6IHRhaWxNb2RlXG4gICAgICB9KVxuICAgIDogKChyZW5kZXJTdGF0ZS5pc0JhY2t3YXJkcyA9IGlzQmFja3dhcmRzKSxcbiAgICAgIChyZW5kZXJTdGF0ZS5yZW5kZXJpbmcgPSBudWxsKSxcbiAgICAgIChyZW5kZXJTdGF0ZS5yZW5kZXJpbmdTdGFydFRpbWUgPSAwKSxcbiAgICAgIChyZW5kZXJTdGF0ZS5sYXN0ID0gbGFzdENvbnRlbnRSb3cpLFxuICAgICAgKHJlbmRlclN0YXRlLnRhaWwgPSB0YWlsKSxcbiAgICAgIChyZW5kZXJTdGF0ZS50YWlsTW9kZSA9IHRhaWxNb2RlKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVTdXNwZW5zZUxpc3RDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgcmV2ZWFsT3JkZXIgPSBuZXh0UHJvcHMucmV2ZWFsT3JkZXIsXG4gICAgdGFpbE1vZGUgPSBuZXh0UHJvcHMudGFpbDtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcy5jaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICBuZXh0UHJvcHMgPSBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIGlmICgwICE9PSAobmV4dFByb3BzICYgMikpXG4gICAgKG5leHRQcm9wcyA9IChuZXh0UHJvcHMgJiAxKSB8IDIpLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KTtcbiAgZWxzZSB7XG4gICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpKVxuICAgICAgYTogZm9yIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7IG51bGwgIT09IGN1cnJlbnQ7ICkge1xuICAgICAgICBpZiAoMTMgPT09IGN1cnJlbnQudGFnKVxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgICAgc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKGN1cnJlbnQsIHJlbmRlckxhbmVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGVsc2UgaWYgKDE5ID09PSBjdXJyZW50LnRhZylcbiAgICAgICAgICBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoY3VycmVudCwgcmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgZWxzZSBpZiAobnVsbCAhPT0gY3VycmVudC5jaGlsZCkge1xuICAgICAgICAgIGN1cnJlbnQuY2hpbGQucmV0dXJuID0gY3VycmVudDtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5jaGlsZDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gd29ya0luUHJvZ3Jlc3MpIGJyZWFrIGE7XG4gICAgICAgIGZvciAoOyBudWxsID09PSBjdXJyZW50LnNpYmxpbmc7ICkge1xuICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50LnJldHVybiB8fCBjdXJyZW50LnJldHVybiA9PT0gd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50LnNpYmxpbmcucmV0dXJuID0gY3VycmVudC5yZXR1cm47XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmc7XG4gICAgICB9XG4gICAgbmV4dFByb3BzICY9IDE7XG4gIH1cbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBuZXh0UHJvcHMpO1xuICBzd2l0Y2ggKHJldmVhbE9yZGVyKSB7XG4gICAgY2FzZSBcImZvcndhcmRzXCI6XG4gICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgZm9yIChyZXZlYWxPcmRlciA9IG51bGw7IG51bGwgIT09IHJlbmRlckxhbmVzOyApXG4gICAgICAgIChjdXJyZW50ID0gcmVuZGVyTGFuZXMuYWx0ZXJuYXRlKSxcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICBudWxsID09PSBmaW5kRmlyc3RTdXNwZW5kZWQoY3VycmVudCkgJiZcbiAgICAgICAgICAgIChyZXZlYWxPcmRlciA9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nKTtcbiAgICAgIHJlbmRlckxhbmVzID0gcmV2ZWFsT3JkZXI7XG4gICAgICBudWxsID09PSByZW5kZXJMYW5lc1xuICAgICAgICA/ICgocmV2ZWFsT3JkZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpKVxuICAgICAgICA6ICgocmV2ZWFsT3JkZXIgPSByZW5kZXJMYW5lcy5zaWJsaW5nKSwgKHJlbmRlckxhbmVzLnNpYmxpbmcgPSBudWxsKSk7XG4gICAgICBpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUoXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAhMSxcbiAgICAgICAgcmV2ZWFsT3JkZXIsXG4gICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICB0YWlsTW9kZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJiYWNrd2FyZHNcIjpcbiAgICAgIHJlbmRlckxhbmVzID0gbnVsbDtcbiAgICAgIHJldmVhbE9yZGVyID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBmb3IgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbDsgbnVsbCAhPT0gcmV2ZWFsT3JkZXI7ICkge1xuICAgICAgICBjdXJyZW50ID0gcmV2ZWFsT3JkZXIuYWx0ZXJuYXRlO1xuICAgICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsID09PSBmaW5kRmlyc3RTdXNwZW5kZWQoY3VycmVudCkpIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJldmVhbE9yZGVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSByZXZlYWxPcmRlci5zaWJsaW5nO1xuICAgICAgICByZXZlYWxPcmRlci5zaWJsaW5nID0gcmVuZGVyTGFuZXM7XG4gICAgICAgIHJlbmRlckxhbmVzID0gcmV2ZWFsT3JkZXI7XG4gICAgICAgIHJldmVhbE9yZGVyID0gY3VycmVudDtcbiAgICAgIH1cbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICEwLFxuICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGFpbE1vZGVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidG9nZXRoZXJcIjpcbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgITEsIG51bGwsIG51bGwsIHZvaWQgMCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgbnVsbCAhPT0gY3VycmVudCAmJiAod29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID0gY3VycmVudC5kZXBlbmRlbmNpZXMpO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gd29ya0luUHJvZ3Jlc3MubGFuZXM7XG4gIGlmICgwID09PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKSlcbiAgICBpZiAobnVsbCAhPT0gY3VycmVudCkge1xuICAgICAgaWYgKFxuICAgICAgICAocHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAhMVxuICAgICAgICApLFxuICAgICAgICAwID09PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKSlcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHJldHVybiBudWxsO1xuICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZCAhPT0gY3VycmVudC5jaGlsZClcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1MykpO1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpIHtcbiAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgcmVuZGVyTGFuZXMgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBjdXJyZW50LnBlbmRpbmdQcm9wcyk7XG4gICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZW5kZXJMYW5lcztcbiAgICBmb3IgKHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzOyBudWxsICE9PSBjdXJyZW50LnNpYmxpbmc7IClcbiAgICAgIChjdXJyZW50ID0gY3VycmVudC5zaWJsaW5nKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyA9XG4gICAgICAgICAgY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudCwgY3VycmVudC5wZW5kaW5nUHJvcHMpKSxcbiAgICAgICAgKHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKTtcbiAgICByZW5kZXJMYW5lcy5zaWJsaW5nID0gbnVsbDtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiBjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykge1xuICBpZiAoMCAhPT0gKGN1cnJlbnQubGFuZXMgJiByZW5kZXJMYW5lcykpIHJldHVybiAhMDtcbiAgY3VycmVudCA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzO1xuICByZXR1cm4gbnVsbCAhPT0gY3VycmVudCAmJiBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudCkgPyAhMCA6ICExO1xufVxuZnVuY3Rpb24gYXR0ZW1wdEVhcmx5QmFpbG91dElmTm9TY2hlZHVsZWRVcGRhdGUoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSAzOlxuICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgICBwdXNoUHJvdmlkZXIoXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLnZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHZhciBzdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gc3RhdGUpIHtcbiAgICAgICAgaWYgKG51bGwgIT09IHN0YXRlLmRlaHlkcmF0ZWQpXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApO1xuICAgICAgICBpZiAoMCAhPT0gKHJlbmRlckxhbmVzICYgd29ya0luUHJvZ3Jlc3MuY2hpbGQuY2hpbGRMYW5lcykpXG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGN1cnJlbnQgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LnNpYmxpbmcgOiBudWxsO1xuICAgICAgfVxuICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICB2YXIgZGlkU3VzcGVuZEJlZm9yZSA9IDAgIT09IChjdXJyZW50LmZsYWdzICYgMTI4KTtcbiAgICAgIHN0YXRlID0gMCAhPT0gKHJlbmRlckxhbmVzICYgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyk7XG4gICAgICBzdGF0ZSB8fFxuICAgICAgICAocHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAhMVxuICAgICAgICApLFxuICAgICAgICAoc3RhdGUgPSAwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKSkpO1xuICAgICAgaWYgKGRpZFN1c3BlbmRCZWZvcmUpIHtcbiAgICAgICAgaWYgKHN0YXRlKVxuICAgICAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUxpc3RDb21wb25lbnQoXG4gICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICk7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyODtcbiAgICAgIH1cbiAgICAgIGRpZFN1c3BlbmRCZWZvcmUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gZGlkU3VzcGVuZEJlZm9yZSAmJlxuICAgICAgICAoKGRpZFN1c3BlbmRCZWZvcmUucmVuZGVyaW5nID0gbnVsbCksXG4gICAgICAgIChkaWRTdXNwZW5kQmVmb3JlLnRhaWwgPSBudWxsKSxcbiAgICAgICAgKGRpZFN1c3BlbmRCZWZvcmUubGFzdEVmZmVjdCA9IG51bGwpKTtcbiAgICAgIHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgICAgIGlmIChzdGF0ZSkgYnJlYWs7XG4gICAgICBlbHNlIHJldHVybiBudWxsO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDApLFxuICAgICAgICB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICAgKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gIH1cbiAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbn1cbmZ1bmN0aW9uIGJlZ2luV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQpXG4gICAgaWYgKGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKVxuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwO1xuICAgIGVsc2Uge1xuICAgICAgaWYgKFxuICAgICAgICAhY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpICYmXG4gICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOClcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgICAgICBhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZShcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9IDAgIT09IChjdXJyZW50LmZsYWdzICYgMTMxMDcyKSA/ICEwIDogITE7XG4gICAgfVxuICBlbHNlXG4gICAgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMSksXG4gICAgICBpc0h5ZHJhdGluZyAmJlxuICAgICAgICAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMDQ4NTc2KSAmJlxuICAgICAgICBwdXNoVHJlZUlkKHdvcmtJblByb2dyZXNzLCB0cmVlRm9ya0NvdW50LCB3b3JrSW5Qcm9ncmVzcy5pbmRleCk7XG4gIHdvcmtJblByb2dyZXNzLmxhbmVzID0gMDtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE2OlxuICAgICAgYToge1xuICAgICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlLFxuICAgICAgICAgIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuICAgICAgICBsYXp5Q29tcG9uZW50ID0gaW5pdChsYXp5Q29tcG9uZW50Ll9wYXlsb2FkKTtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSA9IGxhenlDb21wb25lbnQ7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBsYXp5Q29tcG9uZW50KVxuICAgICAgICAgIHNob3VsZENvbnN0cnVjdChsYXp5Q29tcG9uZW50KVxuICAgICAgICAgICAgPyAoKGN1cnJlbnQgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhsYXp5Q29tcG9uZW50LCBjdXJyZW50KSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy50YWcgPSAxKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdXBkYXRlQ2xhc3NDb21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKSkpXG4gICAgICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3MudGFnID0gMCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICkpKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gbGF6eUNvbXBvbmVudCAmJiBudWxsICE9PSBsYXp5Q29tcG9uZW50KVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoKGluaXQgPSBsYXp5Q29tcG9uZW50LiQkdHlwZW9mKSwgaW5pdCA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSAxMTtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVGb3J3YXJkUmVmKFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluaXQgPT09IFJFQUNUX01FTU9fVFlQRSkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSAxNDtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPVxuICAgICAgICAgICAgZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGxhenlDb21wb25lbnQpIHx8IGxhenlDb21wb25lbnQ7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMDYsIHdvcmtJblByb2dyZXNzLCBcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZSksXG4gICAgICAgIChpbml0ID0gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoXG4gICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHNcbiAgICAgICAgKSksXG4gICAgICAgIHVwZGF0ZUNsYXNzQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICBpbml0LFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgY2FzZSAzOlxuICAgICAgYToge1xuICAgICAgICBwdXNoSG9zdENvbnRhaW5lcihcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICApO1xuICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzODcpKTtcbiAgICAgICAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICAgICAgaW5pdCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBpbml0LmVsZW1lbnQ7XG4gICAgICAgIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgbnVsbCwgcmVuZGVyTGFuZXMpO1xuICAgICAgICB2YXIgbmV4dFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgbmV4dFByb3BzID0gbmV4dFN0YXRlLmNhY2hlO1xuICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgbmV4dFByb3BzKTtcbiAgICAgICAgbmV4dFByb3BzICE9PSBpbml0LmNhY2hlICYmXG4gICAgICAgICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIFtDYWNoZUNvbnRleHRdLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAhMFxuICAgICAgICAgICk7XG4gICAgICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKTtcbiAgICAgICAgbmV4dFByb3BzID0gbmV4dFN0YXRlLmVsZW1lbnQ7XG4gICAgICAgIGlmIChpbml0LmlzRGVoeWRyYXRlZClcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoKGluaXQgPSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgaXNEZWh5ZHJhdGVkOiAhMSxcbiAgICAgICAgICAgICAgY2FjaGU6IG5leHRTdGF0ZS5jYWNoZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuYmFzZVN0YXRlID0gaW5pdCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGluaXQpLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTYpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXh0UHJvcHMgIT09IGxhenlDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihcbiAgICAgICAgICAgICAgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MjQpKSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGxhenlDb21wb25lbnQpO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSBtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGlzSHlkcmF0aW5nID0gITAsXG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uRXJyb3JzID0gbnVsbCxcbiAgICAgICAgICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITAsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXMgPSBtb3VudENoaWxkRmliZXJzKFxuICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzO1xuXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIChyZW5kZXJMYW5lcy5mbGFncyA9IChyZW5kZXJMYW5lcy5mbGFncyAmIC0zKSB8IDQwOTYpLFxuICAgICAgICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICAgICAgaWYgKG5leHRQcm9wcyA9PT0gbGF6eUNvbXBvbmVudCkge1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIH1cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgICBjYXNlIDI2OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/IChyZW5kZXJMYW5lcyA9IGdldFJlc291cmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gcmVuZGVyTGFuZXMpXG4gICAgICAgICAgICA6IGlzSHlkcmF0aW5nIHx8XG4gICAgICAgICAgICAgICgocmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy50eXBlKSxcbiAgICAgICAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudCA9IGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihcbiAgICAgICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgICAgICkuY3JlYXRlRWxlbWVudChyZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKGxhenlDb21wb25lbnRbaW50ZXJuYWxQcm9wc0tleV0gPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMobGF6eUNvbXBvbmVudCwgcmVuZGVyTGFuZXMsIGN1cnJlbnQpLFxuICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGxhenlDb21wb25lbnQpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbGF6eUNvbXBvbmVudCkpXG4gICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGdldFJlc291cmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgICApKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI3OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJlxuICAgICAgICAgIGlzSHlkcmF0aW5nICYmXG4gICAgICAgICAgKChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID1cbiAgICAgICAgICAgIHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZShcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMCksXG4gICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQuZmlyc3RDaGlsZFxuICAgICAgICAgICkpKSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50IHx8IGlzSHlkcmF0aW5nXG4gICAgICAgICAgPyByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgNTpcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50ICYmIGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICgoaW5pdCA9IGxhenlDb21wb25lbnQgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSlcbiAgICAgICAgICAobGF6eUNvbXBvbmVudCA9IGNhbkh5ZHJhdGVJbnN0YW5jZShcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dFxuICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCAhPT0gbGF6eUNvbXBvbmVudFxuICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAocm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICExKSxcbiAgICAgICAgICAgICAgICAoaW5pdCA9ICEwKSlcbiAgICAgICAgICAgICAgOiAoaW5pdCA9ICExKTtcbiAgICAgICAgaW5pdCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGluaXQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgbmV4dFN0YXRlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IG51bGw7XG4gICAgICBsYXp5Q29tcG9uZW50ID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoaW5pdCwgbmV4dFByb3BzKVxuICAgICAgICA/IChsYXp5Q29tcG9uZW50ID0gbnVsbClcbiAgICAgICAgOiBudWxsICE9PSBuZXh0U3RhdGUgJiZcbiAgICAgICAgICBzaG91bGRTZXRUZXh0Q29udGVudChpbml0LCBuZXh0U3RhdGUpICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDMyKTtcbiAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKChpbml0ID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgVHJhbnNpdGlvbkF3YXJlSG9zdENvbXBvbmVudCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSksXG4gICAgICAgIChIb3N0VHJhbnNpdGlvbkNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IGluaXQpKTtcbiAgICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzKTtcbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICBjYXNlIDY6XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudCAmJiBpc0h5ZHJhdGluZykge1xuICAgICAgICBpZiAoKGN1cnJlbnQgPSByZW5kZXJMYW5lcyA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpKVxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UoXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHRcbiAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgKGN1cnJlbnQgPSAhMCkpXG4gICAgICAgICAgICAgIDogKGN1cnJlbnQgPSAhMSk7XG4gICAgICAgIGN1cnJlbnQgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwdXNoSG9zdENvbnRhaW5lcihcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICApLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgOiByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDExOlxuICAgICAgcmV0dXJuIHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpLFxuICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnR5cGUsIGxhenlDb21wb25lbnQudmFsdWUpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGxhenlDb21wb25lbnQuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGluaXQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlLl9jb250ZXh0KSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChpbml0ID0gcmVhZENvbnRleHQoaW5pdCkpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IGxhenlDb21wb25lbnQoaW5pdCkpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBsYXp5Q29tcG9uZW50LCByZW5kZXJMYW5lcyksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTQ6XG4gICAgICByZXR1cm4gdXBkYXRlTWVtb0NvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxNTpcbiAgICAgIHJldHVybiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXR1cm4gdXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSByZWFkQ29udGV4dChDYWNoZUNvbnRleHQpKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKChpbml0ID0gcGVla0NhY2hlRnJvbVBvb2woKSksXG4gICAgICAgICAgICBudWxsID09PSBpbml0ICYmXG4gICAgICAgICAgICAgICgoaW5pdCA9IHdvcmtJblByb2dyZXNzUm9vdCksXG4gICAgICAgICAgICAgIChuZXh0UHJvcHMgPSBjcmVhdGVDYWNoZSgpKSxcbiAgICAgICAgICAgICAgKGluaXQucG9vbGVkQ2FjaGUgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgICBuZXh0UHJvcHMucmVmQ291bnQrKyxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gbmV4dFByb3BzICYmIChpbml0LnBvb2xlZENhY2hlTGFuZXMgfD0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgICAoaW5pdCA9IG5leHRQcm9wcykpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgICAgICAgIHBhcmVudDogbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgY2FjaGU6IGluaXRcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBpbml0KSlcbiAgICAgICAgICA6ICgwICE9PSAoY3VycmVudC5sYW5lcyAmIHJlbmRlckxhbmVzKSAmJlxuICAgICAgICAgICAgICAoY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbnVsbCwgcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCkpLFxuICAgICAgICAgICAgKGluaXQgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgICAgICAgKG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICAgICAgaW5pdC5wYXJlbnQgIT09IGxhenlDb21wb25lbnRcbiAgICAgICAgICAgICAgPyAoKGluaXQgPSB7IHBhcmVudDogbGF6eUNvbXBvbmVudCwgY2FjaGU6IGxhenlDb21wb25lbnQgfSksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBpbml0KSxcbiAgICAgICAgICAgICAgICAwID09PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcyAmJlxuICAgICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPVxuICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPVxuICAgICAgICAgICAgICAgICAgICAgIGluaXQpLFxuICAgICAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBsYXp5Q29tcG9uZW50KSlcbiAgICAgICAgICAgICAgOiAoKGxhenlDb21wb25lbnQgPSBuZXh0UHJvcHMuY2FjaGUpLFxuICAgICAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50ICE9PSBpbml0LmNhY2hlICYmXG4gICAgICAgICAgICAgICAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgIFtDYWNoZUNvbnRleHRdLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgICAgICAgITBcbiAgICAgICAgICAgICAgICAgICkpKSxcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAyOTpcbiAgICAgIHRocm93IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgfVxuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1Niwgd29ya0luUHJvZ3Jlc3MudGFnKSk7XG59XG52YXIgdmFsdWVDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbCxcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbmZ1bmN0aW9uIHB1c2hQcm92aWRlcihwcm92aWRlckZpYmVyLCBjb250ZXh0LCBuZXh0VmFsdWUpIHtcbiAgcHVzaCh2YWx1ZUN1cnNvciwgY29udGV4dC5fY3VycmVudFZhbHVlKTtcbiAgY29udGV4dC5fY3VycmVudFZhbHVlID0gbmV4dFZhbHVlO1xufVxuZnVuY3Rpb24gcG9wUHJvdmlkZXIoY29udGV4dCkge1xuICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSB2YWx1ZUN1cnNvci5jdXJyZW50O1xuICBwb3AodmFsdWVDdXJzb3IpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChwYXJlbnQsIHJlbmRlckxhbmVzLCBwcm9wYWdhdGlvblJvb3QpIHtcbiAgZm9yICg7IG51bGwgIT09IHBhcmVudDsgKSB7XG4gICAgdmFyIGFsdGVybmF0ZSA9IHBhcmVudC5hbHRlcm5hdGU7XG4gICAgKHBhcmVudC5jaGlsZExhbmVzICYgcmVuZGVyTGFuZXMpICE9PSByZW5kZXJMYW5lc1xuICAgICAgPyAoKHBhcmVudC5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSByZW5kZXJMYW5lcykpXG4gICAgICA6IG51bGwgIT09IGFsdGVybmF0ZSAmJlxuICAgICAgICAoYWx0ZXJuYXRlLmNoaWxkTGFuZXMgJiByZW5kZXJMYW5lcykgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gICAgaWYgKHBhcmVudCA9PT0gcHJvcGFnYXRpb25Sb290KSBicmVhaztcbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG59XG5mdW5jdGlvbiBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGNvbnRleHRzLFxuICByZW5kZXJMYW5lcyxcbiAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4pIHtcbiAgdmFyIGZpYmVyID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIG51bGwgIT09IGZpYmVyICYmIChmaWJlci5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyk7XG4gIGZvciAoOyBudWxsICE9PSBmaWJlcjsgKSB7XG4gICAgdmFyIGxpc3QgPSBmaWJlci5kZXBlbmRlbmNpZXM7XG4gICAgaWYgKG51bGwgIT09IGxpc3QpIHtcbiAgICAgIHZhciBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICAgIGxpc3QgPSBsaXN0LmZpcnN0Q29udGV4dDtcbiAgICAgIGE6IGZvciAoOyBudWxsICE9PSBsaXN0OyApIHtcbiAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSBsaXN0O1xuICAgICAgICBsaXN0ID0gZmliZXI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGV4dHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgaWYgKGRlcGVuZGVuY3kuY29udGV4dCA9PT0gY29udGV4dHNbaV0pIHtcbiAgICAgICAgICAgIGxpc3QubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICBkZXBlbmRlbmN5ID0gbGlzdC5hbHRlcm5hdGU7XG4gICAgICAgICAgICBudWxsICE9PSBkZXBlbmRlbmN5ICYmIChkZXBlbmRlbmN5LmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICAgICAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoXG4gICAgICAgICAgICAgIGxpc3QucmV0dXJuLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUgfHwgKG5leHRGaWJlciA9IG51bGwpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgIGxpc3QgPSBkZXBlbmRlbmN5Lm5leHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgxOCA9PT0gZmliZXIudGFnKSB7XG4gICAgICBuZXh0RmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgICBpZiAobnVsbCA9PT0gbmV4dEZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0MSkpO1xuICAgICAgbmV4dEZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICAgICAgbGlzdCA9IG5leHRGaWJlci5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSBsaXN0ICYmIChsaXN0LmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgobmV4dEZpYmVyLCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICB9IGVsc2UgbmV4dEZpYmVyID0gZmliZXIuY2hpbGQ7XG4gICAgaWYgKG51bGwgIT09IG5leHRGaWJlcikgbmV4dEZpYmVyLnJldHVybiA9IGZpYmVyO1xuICAgIGVsc2VcbiAgICAgIGZvciAobmV4dEZpYmVyID0gZmliZXI7IG51bGwgIT09IG5leHRGaWJlcjsgKSB7XG4gICAgICAgIGlmIChuZXh0RmliZXIgPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmaWJlciA9IG5leHRGaWJlci5zaWJsaW5nO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmliZXIpIHtcbiAgICAgICAgICBmaWJlci5yZXR1cm4gPSBuZXh0RmliZXIucmV0dXJuO1xuICAgICAgICAgIG5leHRGaWJlciA9IGZpYmVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRGaWJlciA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICB9XG4gICAgZmliZXIgPSBuZXh0RmliZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgcmVuZGVyTGFuZXMsXG4gIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZVxuKSB7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBmb3IgKFxuICAgIHZhciBwYXJlbnQgPSB3b3JrSW5Qcm9ncmVzcywgaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQgPSAhMTtcbiAgICBudWxsICE9PSBwYXJlbnQ7XG5cbiAgKSB7XG4gICAgaWYgKCFpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dClcbiAgICAgIGlmICgwICE9PSAocGFyZW50LmZsYWdzICYgNTI0Mjg4KSkgaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQgPSAhMDtcbiAgICAgIGVsc2UgaWYgKDAgIT09IChwYXJlbnQuZmxhZ3MgJiAyNjIxNDQpKSBicmVhaztcbiAgICBpZiAoMTAgPT09IHBhcmVudC50YWcpIHtcbiAgICAgIHZhciBjdXJyZW50UGFyZW50ID0gcGFyZW50LmFsdGVybmF0ZTtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50UGFyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgY3VycmVudFBhcmVudCA9IGN1cnJlbnRQYXJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gcGFyZW50LnR5cGU7XG4gICAgICAgIG9iamVjdElzKHBhcmVudC5wZW5kaW5nUHJvcHMudmFsdWUsIGN1cnJlbnRQYXJlbnQudmFsdWUpIHx8XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LnB1c2goY29udGV4dCkgOiAoY3VycmVudCA9IFtjb250ZXh0XSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyZW50ID09PSBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICBjdXJyZW50UGFyZW50Lm1lbW9pemVkU3RhdGUubWVtb2l6ZWRTdGF0ZSAhPT1cbiAgICAgICAgcGFyZW50Lm1lbW9pemVkU3RhdGUubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAobnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gY3VycmVudC5wdXNoKEhvc3RUcmFuc2l0aW9uQ29udGV4dClcbiAgICAgICAgICA6IChjdXJyZW50ID0gW0hvc3RUcmFuc2l0aW9uQ29udGV4dF0pKTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgfVxuICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIGN1cnJlbnQsXG4gICAgICByZW5kZXJMYW5lcyxcbiAgICAgIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZVxuICAgICk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDI2MjE0NDtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50RGVwZW5kZW5jaWVzKSB7XG4gIGZvciAoXG4gICAgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMuZmlyc3RDb250ZXh0O1xuICAgIG51bGwgIT09IGN1cnJlbnREZXBlbmRlbmNpZXM7XG5cbiAgKSB7XG4gICAgaWYgKFxuICAgICAgIW9iamVjdElzKFxuICAgICAgICBjdXJyZW50RGVwZW5kZW5jaWVzLmNvbnRleHQuX2N1cnJlbnRWYWx1ZSxcbiAgICAgICAgY3VycmVudERlcGVuZGVuY2llcy5tZW1vaXplZFZhbHVlXG4gICAgICApXG4gICAgKVxuICAgICAgcmV0dXJuICEwO1xuICAgIGN1cnJlbnREZXBlbmRlbmNpZXMgPSBjdXJyZW50RGVwZW5kZW5jaWVzLm5leHQ7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXM7XG4gIG51bGwgIT09IHdvcmtJblByb2dyZXNzICYmICh3b3JrSW5Qcm9ncmVzcy5maXJzdENvbnRleHQgPSBudWxsKTtcbn1cbmZ1bmN0aW9uIHJlYWRDb250ZXh0KGNvbnRleHQpIHtcbiAgcmV0dXJuIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY3VycmVudGx5UmVuZGVyaW5nRmliZXIsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihjb25zdW1lciwgY29udGV4dCkge1xuICBudWxsID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciAmJiBwcmVwYXJlVG9SZWFkQ29udGV4dChjb25zdW1lcik7XG4gIHJldHVybiByZWFkQ29udGV4dEZvckNvbnN1bWVyKGNvbnN1bWVyLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY29uc3VtZXIsIGNvbnRleHQpIHtcbiAgdmFyIHZhbHVlID0gY29udGV4dC5fY3VycmVudFZhbHVlO1xuICBjb250ZXh0ID0geyBjb250ZXh0OiBjb250ZXh0LCBtZW1vaXplZFZhbHVlOiB2YWx1ZSwgbmV4dDogbnVsbCB9O1xuICBpZiAobnVsbCA9PT0gbGFzdENvbnRleHREZXBlbmRlbmN5KSB7XG4gICAgaWYgKG51bGwgPT09IGNvbnN1bWVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwOCkpO1xuICAgIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGNvbnRleHQ7XG4gICAgY29uc3VtZXIuZGVwZW5kZW5jaWVzID0geyBsYW5lczogMCwgZmlyc3RDb250ZXh0OiBjb250ZXh0IH07XG4gICAgY29uc3VtZXIuZmxhZ3MgfD0gNTI0Mjg4O1xuICB9IGVsc2UgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbGFzdENvbnRleHREZXBlbmRlbmN5Lm5leHQgPSBjb250ZXh0O1xuICByZXR1cm4gdmFsdWU7XG59XG52YXIgaGFzRm9yY2VVcGRhdGUgPSAhMTtcbmZ1bmN0aW9uIGluaXRpYWxpemVVcGRhdGVRdWV1ZShmaWJlcikge1xuICBmaWJlci51cGRhdGVRdWV1ZSA9IHtcbiAgICBiYXNlU3RhdGU6IGZpYmVyLm1lbW9pemVkU3RhdGUsXG4gICAgZmlyc3RCYXNlVXBkYXRlOiBudWxsLFxuICAgIGxhc3RCYXNlVXBkYXRlOiBudWxsLFxuICAgIHNoYXJlZDogeyBwZW5kaW5nOiBudWxsLCBsYW5lczogMCwgaGlkZGVuQ2FsbGJhY2tzOiBudWxsIH0sXG4gICAgY2FsbGJhY2tzOiBudWxsXG4gIH07XG59XG5mdW5jdGlvbiBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gIGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9PT0gY3VycmVudCAmJlxuICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IHtcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudC5iYXNlU3RhdGUsXG4gICAgICBmaXJzdEJhc2VVcGRhdGU6IGN1cnJlbnQuZmlyc3RCYXNlVXBkYXRlLFxuICAgICAgbGFzdEJhc2VVcGRhdGU6IGN1cnJlbnQubGFzdEJhc2VVcGRhdGUsXG4gICAgICBzaGFyZWQ6IGN1cnJlbnQuc2hhcmVkLFxuICAgICAgY2FsbGJhY2tzOiBudWxsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVVcGRhdGUobGFuZSkge1xuICByZXR1cm4geyBsYW5lOiBsYW5lLCB0YWc6IDAsIHBheWxvYWQ6IG51bGwsIGNhbGxiYWNrOiBudWxsLCBuZXh0OiBudWxsIH07XG59XG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGZpYmVyLCB1cGRhdGUsIGxhbmUpIHtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gZmliZXIudXBkYXRlUXVldWU7XG4gIGlmIChudWxsID09PSB1cGRhdGVRdWV1ZSkgcmV0dXJuIG51bGw7XG4gIHVwZGF0ZVF1ZXVlID0gdXBkYXRlUXVldWUuc2hhcmVkO1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSkge1xuICAgIHZhciBwZW5kaW5nID0gdXBkYXRlUXVldWUucGVuZGluZztcbiAgICBudWxsID09PSBwZW5kaW5nXG4gICAgICA/ICh1cGRhdGUubmV4dCA9IHVwZGF0ZSlcbiAgICAgIDogKCh1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dCksIChwZW5kaW5nLm5leHQgPSB1cGRhdGUpKTtcbiAgICB1cGRhdGVRdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xuICAgIHVwZGF0ZSA9IGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xuICAgIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KGZpYmVyLCBudWxsLCBsYW5lKTtcbiAgICByZXR1cm4gdXBkYXRlO1xuICB9XG4gIGVucXVldWVVcGRhdGUkMShmaWJlciwgdXBkYXRlUXVldWUsIHVwZGF0ZSwgbGFuZSk7XG4gIHJldHVybiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIGVudGFuZ2xlVHJhbnNpdGlvbnMocm9vdCwgZmliZXIsIGxhbmUpIHtcbiAgZmliZXIgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgIT09IGZpYmVyICYmICgoZmliZXIgPSBmaWJlci5zaGFyZWQpLCAwICE9PSAobGFuZSAmIDQxOTQxNzYpKSkge1xuICAgIHZhciBxdWV1ZUxhbmVzID0gZmliZXIubGFuZXM7XG4gICAgcXVldWVMYW5lcyAmPSByb290LnBlbmRpbmdMYW5lcztcbiAgICBsYW5lIHw9IHF1ZXVlTGFuZXM7XG4gICAgZmliZXIubGFuZXMgPSBsYW5lO1xuICAgIG1hcmtSb290RW50YW5nbGVkKHJvb3QsIGxhbmUpO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIGNhcHR1cmVkVXBkYXRlKSB7XG4gIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLFxuICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gIGlmIChcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgKChjdXJyZW50ID0gY3VycmVudC51cGRhdGVRdWV1ZSksIHF1ZXVlID09PSBjdXJyZW50KVxuICApIHtcbiAgICB2YXIgbmV3Rmlyc3QgPSBudWxsLFxuICAgICAgbmV3TGFzdCA9IG51bGw7XG4gICAgcXVldWUgPSBxdWV1ZS5maXJzdEJhc2VVcGRhdGU7XG4gICAgaWYgKG51bGwgIT09IHF1ZXVlKSB7XG4gICAgICBkbyB7XG4gICAgICAgIHZhciBjbG9uZSA9IHtcbiAgICAgICAgICBsYW5lOiBxdWV1ZS5sYW5lLFxuICAgICAgICAgIHRhZzogcXVldWUudGFnLFxuICAgICAgICAgIHBheWxvYWQ6IHF1ZXVlLnBheWxvYWQsXG4gICAgICAgICAgY2FsbGJhY2s6IG51bGwsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBudWxsID09PSBuZXdMYXN0XG4gICAgICAgICAgPyAobmV3Rmlyc3QgPSBuZXdMYXN0ID0gY2xvbmUpXG4gICAgICAgICAgOiAobmV3TGFzdCA9IG5ld0xhc3QubmV4dCA9IGNsb25lKTtcbiAgICAgICAgcXVldWUgPSBxdWV1ZS5uZXh0O1xuICAgICAgfSB3aGlsZSAobnVsbCAhPT0gcXVldWUpO1xuICAgICAgbnVsbCA9PT0gbmV3TGFzdFxuICAgICAgICA/IChuZXdGaXJzdCA9IG5ld0xhc3QgPSBjYXB0dXJlZFVwZGF0ZSlcbiAgICAgICAgOiAobmV3TGFzdCA9IG5ld0xhc3QubmV4dCA9IGNhcHR1cmVkVXBkYXRlKTtcbiAgICB9IGVsc2UgbmV3Rmlyc3QgPSBuZXdMYXN0ID0gY2FwdHVyZWRVcGRhdGU7XG4gICAgcXVldWUgPSB7XG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnQuYmFzZVN0YXRlLFxuICAgICAgZmlyc3RCYXNlVXBkYXRlOiBuZXdGaXJzdCxcbiAgICAgIGxhc3RCYXNlVXBkYXRlOiBuZXdMYXN0LFxuICAgICAgc2hhcmVkOiBjdXJyZW50LnNoYXJlZCxcbiAgICAgIGNhbGxiYWNrczogY3VycmVudC5jYWxsYmFja3NcbiAgICB9O1xuICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gcXVldWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdvcmtJblByb2dyZXNzID0gcXVldWUubGFzdEJhc2VVcGRhdGU7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzXG4gICAgPyAocXVldWUuZmlyc3RCYXNlVXBkYXRlID0gY2FwdHVyZWRVcGRhdGUpXG4gICAgOiAod29ya0luUHJvZ3Jlc3MubmV4dCA9IGNhcHR1cmVkVXBkYXRlKTtcbiAgcXVldWUubGFzdEJhc2VVcGRhdGUgPSBjYXB0dXJlZFVwZGF0ZTtcbn1cbnZhciBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITE7XG5mdW5jdGlvbiBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCkge1xuICBpZiAoZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbikge1xuICAgIHZhciBlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZTtcbiAgICBpZiAobnVsbCAhPT0gZW50YW5nbGVkQWN0aW9uVGhlbmFibGUpIHRocm93IGVudGFuZ2xlZEFjdGlvblRoZW5hYmxlO1xuICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzVXBkYXRlUXVldWUoXG4gIHdvcmtJblByb2dyZXNzJGpzY29tcCQwLFxuICBwcm9wcyxcbiAgaW5zdGFuY2UkanNjb21wJDAsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiA9ICExO1xuICB2YXIgcXVldWUgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC51cGRhdGVRdWV1ZTtcbiAgaGFzRm9yY2VVcGRhdGUgPSAhMTtcbiAgdmFyIGZpcnN0QmFzZVVwZGF0ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZSxcbiAgICBsYXN0QmFzZVVwZGF0ZSA9IHF1ZXVlLmxhc3RCYXNlVXBkYXRlLFxuICAgIHBlbmRpbmdRdWV1ZSA9IHF1ZXVlLnNoYXJlZC5wZW5kaW5nO1xuICBpZiAobnVsbCAhPT0gcGVuZGluZ1F1ZXVlKSB7XG4gICAgcXVldWUuc2hhcmVkLnBlbmRpbmcgPSBudWxsO1xuICAgIHZhciBsYXN0UGVuZGluZ1VwZGF0ZSA9IHBlbmRpbmdRdWV1ZSxcbiAgICAgIGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlLm5leHQ7XG4gICAgbGFzdFBlbmRpbmdVcGRhdGUubmV4dCA9IG51bGw7XG4gICAgbnVsbCA9PT0gbGFzdEJhc2VVcGRhdGVcbiAgICAgID8gKGZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZSlcbiAgICAgIDogKGxhc3RCYXNlVXBkYXRlLm5leHQgPSBmaXJzdFBlbmRpbmdVcGRhdGUpO1xuICAgIGxhc3RCYXNlVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGU7XG4gICAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5hbHRlcm5hdGU7XG4gICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgKChjdXJyZW50ID0gY3VycmVudC51cGRhdGVRdWV1ZSksXG4gICAgICAocGVuZGluZ1F1ZXVlID0gY3VycmVudC5sYXN0QmFzZVVwZGF0ZSksXG4gICAgICBwZW5kaW5nUXVldWUgIT09IGxhc3RCYXNlVXBkYXRlICYmXG4gICAgICAgIChudWxsID09PSBwZW5kaW5nUXVldWVcbiAgICAgICAgICA/IChjdXJyZW50LmZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZSlcbiAgICAgICAgICA6IChwZW5kaW5nUXVldWUubmV4dCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSksXG4gICAgICAgIChjdXJyZW50Lmxhc3RCYXNlVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUpKSk7XG4gIH1cbiAgaWYgKG51bGwgIT09IGZpcnN0QmFzZVVwZGF0ZSkge1xuICAgIHZhciBuZXdTdGF0ZSA9IHF1ZXVlLmJhc2VTdGF0ZTtcbiAgICBsYXN0QmFzZVVwZGF0ZSA9IDA7XG4gICAgY3VycmVudCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlID0gbnVsbDtcbiAgICBwZW5kaW5nUXVldWUgPSBmaXJzdEJhc2VVcGRhdGU7XG4gICAgZG8ge1xuICAgICAgdmFyIHVwZGF0ZUxhbmUgPSBwZW5kaW5nUXVldWUubGFuZSAmIC01MzY4NzA5MTMsXG4gICAgICAgIGlzSGlkZGVuVXBkYXRlID0gdXBkYXRlTGFuZSAhPT0gcGVuZGluZ1F1ZXVlLmxhbmU7XG4gICAgICBpZiAoXG4gICAgICAgIGlzSGlkZGVuVXBkYXRlXG4gICAgICAgICAgPyAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgICAgIDogKHJlbmRlckxhbmVzICYgdXBkYXRlTGFuZSkgPT09IHVwZGF0ZUxhbmVcbiAgICAgICkge1xuICAgICAgICAwICE9PSB1cGRhdGVMYW5lICYmXG4gICAgICAgICAgdXBkYXRlTGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAoZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiA9ICEwKTtcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC5uZXh0ID1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbGFuZTogMCxcbiAgICAgICAgICAgICAgdGFnOiBwZW5kaW5nUXVldWUudGFnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiBwZW5kaW5nUXVldWUucGF5bG9hZCxcbiAgICAgICAgICAgICAgY2FsbGJhY2s6IG51bGwsXG4gICAgICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBhOiB7XG4gICAgICAgICAgdmFyIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MkanNjb21wJDAsXG4gICAgICAgICAgICB1cGRhdGUgPSBwZW5kaW5nUXVldWU7XG4gICAgICAgICAgdXBkYXRlTGFuZSA9IHByb3BzO1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlJGpzY29tcCQwO1xuICAgICAgICAgIHN3aXRjaCAodXBkYXRlLnRhZykge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLmNhbGwoaW5zdGFuY2UsIG5ld1N0YXRlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzID0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgLTY1NTM3KSB8IDEyODtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1cGRhdGUucGF5bG9hZDtcbiAgICAgICAgICAgICAgdXBkYXRlTGFuZSA9XG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAgID8gd29ya0luUHJvZ3Jlc3MuY2FsbChpbnN0YW5jZSwgbmV3U3RhdGUsIHVwZGF0ZUxhbmUpXG4gICAgICAgICAgICAgICAgICA6IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdXBkYXRlTGFuZSB8fCB2b2lkIDAgPT09IHVwZGF0ZUxhbmUpIGJyZWFrIGE7XG4gICAgICAgICAgICAgIG5ld1N0YXRlID0gYXNzaWduKHt9LCBuZXdTdGF0ZSwgdXBkYXRlTGFuZSk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIGhhc0ZvcmNlVXBkYXRlID0gITA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUxhbmUgPSBwZW5kaW5nUXVldWUuY2FsbGJhY2s7XG4gICAgICAgIG51bGwgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAgICAgICAoKHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmZsYWdzIHw9IDY0KSxcbiAgICAgICAgICBpc0hpZGRlblVwZGF0ZSAmJiAod29ya0luUHJvZ3Jlc3MkanNjb21wJDAuZmxhZ3MgfD0gODE5MiksXG4gICAgICAgICAgKGlzSGlkZGVuVXBkYXRlID0gcXVldWUuY2FsbGJhY2tzKSxcbiAgICAgICAgICBudWxsID09PSBpc0hpZGRlblVwZGF0ZVxuICAgICAgICAgICAgPyAocXVldWUuY2FsbGJhY2tzID0gW3VwZGF0ZUxhbmVdKVxuICAgICAgICAgICAgOiBpc0hpZGRlblVwZGF0ZS5wdXNoKHVwZGF0ZUxhbmUpKTtcbiAgICAgIH0gZWxzZVxuICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSB7XG4gICAgICAgICAgbGFuZTogdXBkYXRlTGFuZSxcbiAgICAgICAgICB0YWc6IHBlbmRpbmdRdWV1ZS50YWcsXG4gICAgICAgICAgcGF5bG9hZDogcGVuZGluZ1F1ZXVlLnBheWxvYWQsXG4gICAgICAgICAgY2FsbGJhY2s6IHBlbmRpbmdRdWV1ZS5jYWxsYmFjayxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH0pLFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICAgID8gKChmaXJzdFBlbmRpbmdVcGRhdGUgPSBjdXJyZW50ID0gaXNIaWRkZW5VcGRhdGUpLFxuICAgICAgICAgICAgICAobGFzdFBlbmRpbmdVcGRhdGUgPSBuZXdTdGF0ZSkpXG4gICAgICAgICAgICA6IChjdXJyZW50ID0gY3VycmVudC5uZXh0ID0gaXNIaWRkZW5VcGRhdGUpLFxuICAgICAgICAgIChsYXN0QmFzZVVwZGF0ZSB8PSB1cGRhdGVMYW5lKTtcbiAgICAgIHBlbmRpbmdRdWV1ZSA9IHBlbmRpbmdRdWV1ZS5uZXh0O1xuICAgICAgaWYgKG51bGwgPT09IHBlbmRpbmdRdWV1ZSlcbiAgICAgICAgaWYgKCgocGVuZGluZ1F1ZXVlID0gcXVldWUuc2hhcmVkLnBlbmRpbmcpLCBudWxsID09PSBwZW5kaW5nUXVldWUpKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgKGlzSGlkZGVuVXBkYXRlID0gcGVuZGluZ1F1ZXVlKSxcbiAgICAgICAgICAgIChwZW5kaW5nUXVldWUgPSBpc0hpZGRlblVwZGF0ZS5uZXh0KSxcbiAgICAgICAgICAgIChpc0hpZGRlblVwZGF0ZS5uZXh0ID0gbnVsbCksXG4gICAgICAgICAgICAocXVldWUubGFzdEJhc2VVcGRhdGUgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgICAocXVldWUuc2hhcmVkLnBlbmRpbmcgPSBudWxsKTtcbiAgICB9IHdoaWxlICgxKTtcbiAgICBudWxsID09PSBjdXJyZW50ICYmIChsYXN0UGVuZGluZ1VwZGF0ZSA9IG5ld1N0YXRlKTtcbiAgICBxdWV1ZS5iYXNlU3RhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZTtcbiAgICBxdWV1ZS5maXJzdEJhc2VVcGRhdGUgPSBmaXJzdFBlbmRpbmdVcGRhdGU7XG4gICAgcXVldWUubGFzdEJhc2VVcGRhdGUgPSBjdXJyZW50O1xuICAgIG51bGwgPT09IGZpcnN0QmFzZVVwZGF0ZSAmJiAocXVldWUuc2hhcmVkLmxhbmVzID0gMCk7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IGxhc3RCYXNlVXBkYXRlO1xuICAgIHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmxhbmVzID0gbGFzdEJhc2VVcGRhdGU7XG4gICAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICB9XG59XG5mdW5jdGlvbiBjYWxsQ2FsbGJhY2soY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNhbGxiYWNrKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTkxLCBjYWxsYmFjaykpO1xuICBjYWxsYmFjay5jYWxsKGNvbnRleHQpO1xufVxuZnVuY3Rpb24gY29tbWl0Q2FsbGJhY2tzKHVwZGF0ZVF1ZXVlLCBjb250ZXh0KSB7XG4gIHZhciBjYWxsYmFja3MgPSB1cGRhdGVRdWV1ZS5jYWxsYmFja3M7XG4gIGlmIChudWxsICE9PSBjYWxsYmFja3MpXG4gICAgZm9yIChcbiAgICAgIHVwZGF0ZVF1ZXVlLmNhbGxiYWNrcyA9IG51bGwsIHVwZGF0ZVF1ZXVlID0gMDtcbiAgICAgIHVwZGF0ZVF1ZXVlIDwgY2FsbGJhY2tzLmxlbmd0aDtcbiAgICAgIHVwZGF0ZVF1ZXVlKytcbiAgICApXG4gICAgICBjYWxsQ2FsbGJhY2soY2FsbGJhY2tzW3VwZGF0ZVF1ZXVlXSwgY29udGV4dCk7XG59XG5mdW5jdGlvbiBjb21taXRIb29rRWZmZWN0TGlzdE1vdW50KGZsYWdzLCBmaW5pc2hlZFdvcmspIHtcbiAgdHJ5IHtcbiAgICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUsXG4gICAgICBsYXN0RWZmZWN0ID0gbnVsbCAhPT0gdXBkYXRlUXVldWUgPyB1cGRhdGVRdWV1ZS5sYXN0RWZmZWN0IDogbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gbGFzdEVmZmVjdCkge1xuICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgICAgdXBkYXRlUXVldWUgPSBmaXJzdEVmZmVjdDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCh1cGRhdGVRdWV1ZS50YWcgJiBmbGFncykgPT09IGZsYWdzKSB7XG4gICAgICAgICAgbGFzdEVmZmVjdCA9IHZvaWQgMDtcbiAgICAgICAgICB2YXIgY3JlYXRlID0gdXBkYXRlUXVldWUuY3JlYXRlLFxuICAgICAgICAgICAgaW5zdCA9IHVwZGF0ZVF1ZXVlLmluc3Q7XG4gICAgICAgICAgbGFzdEVmZmVjdCA9IGNyZWF0ZSgpO1xuICAgICAgICAgIGluc3QuZGVzdHJveSA9IGxhc3RFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5uZXh0O1xuICAgICAgfSB3aGlsZSAodXBkYXRlUXVldWUgIT09IGZpcnN0RWZmZWN0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudChcbiAgZmxhZ3MsXG4gIGZpbmlzaGVkV29yayxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciRqc2NvbXAkMFxuKSB7XG4gIHRyeSB7XG4gICAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlLFxuICAgICAgbGFzdEVmZmVjdCA9IG51bGwgIT09IHVwZGF0ZVF1ZXVlID8gdXBkYXRlUXVldWUubGFzdEVmZmVjdCA6IG51bGw7XG4gICAgaWYgKG51bGwgIT09IGxhc3RFZmZlY3QpIHtcbiAgICAgIHZhciBmaXJzdEVmZmVjdCA9IGxhc3RFZmZlY3QubmV4dDtcbiAgICAgIHVwZGF0ZVF1ZXVlID0gZmlyc3RFZmZlY3Q7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgodXBkYXRlUXVldWUudGFnICYgZmxhZ3MpID09PSBmbGFncykge1xuICAgICAgICAgIHZhciBpbnN0ID0gdXBkYXRlUXVldWUuaW5zdCxcbiAgICAgICAgICAgIGRlc3Ryb3kgPSBpbnN0LmRlc3Ryb3k7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZGVzdHJveSkge1xuICAgICAgICAgICAgaW5zdC5kZXN0cm95ID0gdm9pZCAwO1xuICAgICAgICAgICAgbGFzdEVmZmVjdCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgIHZhciBuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gbmVhcmVzdE1vdW50ZWRBbmNlc3RvciRqc2NvbXAkMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICAgIGxhc3RFZmZlY3QsXG4gICAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlICh1cGRhdGVRdWV1ZSAhPT0gZmlyc3RFZmZlY3QpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKSB7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgIT09IHVwZGF0ZVF1ZXVlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICB0cnkge1xuICAgICAgY29tbWl0Q2FsbGJhY2tzKHVwZGF0ZVF1ZXVlLCBpbnN0YW5jZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICBjdXJyZW50LFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICBpbnN0YW5jZVxuKSB7XG4gIGluc3RhbmNlLnByb3BzID0gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoXG4gICAgY3VycmVudC50eXBlLFxuICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wc1xuICApO1xuICBpbnN0YW5jZS5zdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgdHJ5IHtcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5QXR0YWNoUmVmKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcmVmID0gY3VycmVudC5yZWY7XG4gICAgaWYgKG51bGwgIT09IHJlZikge1xuICAgICAgdmFyIGluc3RhbmNlID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICBzd2l0Y2ggKGN1cnJlbnQudGFnKSB7XG4gICAgICAgIGNhc2UgMjY6XG4gICAgICAgIGNhc2UgMjc6XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICB2YXIgaW5zdGFuY2VUb1VzZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGluc3RhbmNlVG9Vc2UgPSBpbnN0YW5jZTtcbiAgICAgIH1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZlxuICAgICAgICA/IChjdXJyZW50LnJlZkNsZWFudXAgPSByZWYoaW5zdGFuY2VUb1VzZSkpXG4gICAgICAgIDogKHJlZi5jdXJyZW50ID0gaW5zdGFuY2VUb1VzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgdmFyIHJlZiA9IGN1cnJlbnQucmVmLFxuICAgIHJlZkNsZWFudXAgPSBjdXJyZW50LnJlZkNsZWFudXA7XG4gIGlmIChudWxsICE9PSByZWYpXG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZkNsZWFudXApXG4gICAgICB0cnkge1xuICAgICAgICByZWZDbGVhbnVwKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoY3VycmVudC5yZWZDbGVhbnVwID0gbnVsbCksXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LmFsdGVybmF0ZSksXG4gICAgICAgICAgbnVsbCAhPSBjdXJyZW50ICYmIChjdXJyZW50LnJlZkNsZWFudXAgPSBudWxsKTtcbiAgICAgIH1cbiAgICBlbHNlIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWYpXG4gICAgICB0cnkge1xuICAgICAgICByZWYobnVsbCk7XG4gICAgICB9IGNhdGNoIChlcnJvciQxMTIpIHtcbiAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IkMTEyKTtcbiAgICAgIH1cbiAgICBlbHNlIHJlZi5jdXJyZW50ID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZSxcbiAgICBwcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgdHJ5IHtcbiAgICBhOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIHByb3BzLmF1dG9Gb2N1cyAmJiBpbnN0YW5jZS5mb2N1cygpO1xuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICBwcm9wcy5zcmNcbiAgICAgICAgICA/IChpbnN0YW5jZS5zcmMgPSBwcm9wcy5zcmMpXG4gICAgICAgICAgOiBwcm9wcy5zcmNTZXQgJiYgKGluc3RhbmNlLnNyY3NldCA9IHByb3BzLnNyY1NldCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRIb3N0VXBkYXRlKGZpbmlzaGVkV29yaywgbmV3UHJvcHMsIG9sZFByb3BzKSB7XG4gIHRyeSB7XG4gICAgdmFyIGRvbUVsZW1lbnQgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgZmluaXNoZWRXb3JrLnR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcyk7XG4gICAgZG9tRWxlbWVudFtpbnRlcm5hbFByb3BzS2V5XSA9IG5ld1Byb3BzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBpc0hvc3RQYXJlbnQoZmliZXIpIHtcbiAgcmV0dXJuIChcbiAgICA1ID09PSBmaWJlci50YWcgfHxcbiAgICAzID09PSBmaWJlci50YWcgfHxcbiAgICAyNiA9PT0gZmliZXIudGFnIHx8XG4gICAgMjcgPT09IGZpYmVyLnRhZyB8fFxuICAgIDQgPT09IGZpYmVyLnRhZ1xuICApO1xufVxuZnVuY3Rpb24gZ2V0SG9zdFNpYmxpbmcoZmliZXIpIHtcbiAgYTogZm9yICg7Oykge1xuICAgIGZvciAoOyBudWxsID09PSBmaWJlci5zaWJsaW5nOyApIHtcbiAgICAgIGlmIChudWxsID09PSBmaWJlci5yZXR1cm4gfHwgaXNIb3N0UGFyZW50KGZpYmVyLnJldHVybikpIHJldHVybiBudWxsO1xuICAgICAgZmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgfVxuICAgIGZpYmVyLnNpYmxpbmcucmV0dXJuID0gZmliZXIucmV0dXJuO1xuICAgIGZvciAoXG4gICAgICBmaWJlciA9IGZpYmVyLnNpYmxpbmc7XG4gICAgICA1ICE9PSBmaWJlci50YWcgJiZcbiAgICAgIDYgIT09IGZpYmVyLnRhZyAmJlxuICAgICAgMjcgIT09IGZpYmVyLnRhZyAmJlxuICAgICAgMTggIT09IGZpYmVyLnRhZztcblxuICAgICkge1xuICAgICAgaWYgKGZpYmVyLmZsYWdzICYgMikgY29udGludWUgYTtcbiAgICAgIGlmIChudWxsID09PSBmaWJlci5jaGlsZCB8fCA0ID09PSBmaWJlci50YWcpIGNvbnRpbnVlIGE7XG4gICAgICBlbHNlIChmaWJlci5jaGlsZC5yZXR1cm4gPSBmaWJlciksIChmaWJlciA9IGZpYmVyLmNoaWxkKTtcbiAgICB9XG4gICAgaWYgKCEoZmliZXIuZmxhZ3MgJiAyKSkgcmV0dXJuIGZpYmVyLnN0YXRlTm9kZTtcbiAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgNiA9PT0gdGFnKVxuICAgIChub2RlID0gbm9kZS5zdGF0ZU5vZGUpLFxuICAgICAgYmVmb3JlXG4gICAgICAgID8gOCA9PT0gcGFyZW50Lm5vZGVUeXBlXG4gICAgICAgICAgPyBwYXJlbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgYmVmb3JlKVxuICAgICAgICAgIDogcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpXG4gICAgICAgIDogKDggPT09IHBhcmVudC5ub2RlVHlwZVxuICAgICAgICAgICAgPyAoKGJlZm9yZSA9IHBhcmVudC5wYXJlbnROb2RlKSwgYmVmb3JlLmluc2VydEJlZm9yZShub2RlLCBwYXJlbnQpKVxuICAgICAgICAgICAgOiAoKGJlZm9yZSA9IHBhcmVudCksIGJlZm9yZS5hcHBlbmRDaGlsZChub2RlKSksXG4gICAgICAgICAgKHBhcmVudCA9IHBhcmVudC5fcmVhY3RSb290Q29udGFpbmVyKSxcbiAgICAgICAgICAobnVsbCAhPT0gcGFyZW50ICYmIHZvaWQgMCAhPT0gcGFyZW50KSB8fFxuICAgICAgICAgICAgbnVsbCAhPT0gYmVmb3JlLm9uY2xpY2sgfHxcbiAgICAgICAgICAgIChiZWZvcmUub25jbGljayA9IG5vb3AkMSkpO1xuICBlbHNlIGlmICg0ICE9PSB0YWcgJiYgMjcgIT09IHRhZyAmJiAoKG5vZGUgPSBub2RlLmNoaWxkKSwgbnVsbCAhPT0gbm9kZSkpXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpLFxuICAgICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgICAgbnVsbCAhPT0gbm9kZTtcblxuICAgIClcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpLFxuICAgICAgICAobm9kZSA9IG5vZGUuc2libGluZyk7XG59XG5mdW5jdGlvbiBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUobm9kZSwgYmVmb3JlLCBwYXJlbnQpIHtcbiAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDYgPT09IHRhZylcbiAgICAobm9kZSA9IG5vZGUuc3RhdGVOb2RlKSxcbiAgICAgIGJlZm9yZSA/IHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgYmVmb3JlKSA6IHBhcmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgZWxzZSBpZiAoNCAhPT0gdGFnICYmIDI3ICE9PSB0YWcgJiYgKChub2RlID0gbm9kZS5jaGlsZCksIG51bGwgIT09IG5vZGUpKVxuICAgIGZvciAoXG4gICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUobm9kZSwgYmVmb3JlLCBwYXJlbnQpLCBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgICAgbnVsbCAhPT0gbm9kZTtcblxuICAgIClcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCksIChub2RlID0gbm9kZS5zaWJsaW5nKTtcbn1cbnZhciBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSAhMSxcbiAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9ICExLFxuICBuZWVkc0Zvcm1SZXNldCA9ICExLFxuICBQb3NzaWJseVdlYWtTZXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBXZWFrU2V0ID8gV2Vha1NldCA6IFNldCxcbiAgbmV4dEVmZmVjdCA9IG51bGwsXG4gIHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1ciA9ICExO1xuZnVuY3Rpb24gY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpcnN0Q2hpbGQpIHtcbiAgcm9vdCA9IHJvb3QuY29udGFpbmVySW5mbztcbiAgZXZlbnRzRW5hYmxlZCA9IF9lbmFibGVkO1xuICByb290ID0gZ2V0QWN0aXZlRWxlbWVudERlZXAocm9vdCk7XG4gIGlmIChoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocm9vdCkpIHtcbiAgICBpZiAoXCJzZWxlY3Rpb25TdGFydFwiIGluIHJvb3QpXG4gICAgICB2YXIgSlNDb21waWxlcl90ZW1wID0ge1xuICAgICAgICBzdGFydDogcm9vdC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgZW5kOiByb290LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICBlbHNlXG4gICAgICBhOiB7XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgICAgKChKU0NvbXBpbGVyX3RlbXAgPSByb290Lm93bmVyRG9jdW1lbnQpICYmXG4gICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZGVmYXVsdFZpZXcpIHx8XG4gICAgICAgICAgd2luZG93O1xuICAgICAgICB2YXIgc2VsZWN0aW9uID1cbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZ2V0U2VsZWN0aW9uICYmIEpTQ29tcGlsZXJfdGVtcC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgaWYgKHNlbGVjdGlvbiAmJiAwICE9PSBzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICAgICAgICAgIHZhciBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgZm9jdXNOb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5ub2RlVHlwZSwgZm9jdXNOb2RlLm5vZGVUeXBlO1xuICAgICAgICAgIH0gY2F0Y2ggKGUkMjApIHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IG51bGw7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbGVuZ3RoID0gMCxcbiAgICAgICAgICAgIHN0YXJ0ID0gLTEsXG4gICAgICAgICAgICBlbmQgPSAtMSxcbiAgICAgICAgICAgIGluZGV4V2l0aGluQW5jaG9yID0gMCxcbiAgICAgICAgICAgIGluZGV4V2l0aGluRm9jdXMgPSAwLFxuICAgICAgICAgICAgbm9kZSA9IHJvb3QsXG4gICAgICAgICAgICBwYXJlbnROb2RlID0gbnVsbDtcbiAgICAgICAgICBiOiBmb3IgKDs7KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuZXh0OyA7ICkge1xuICAgICAgICAgICAgICBub2RlICE9PSBKU0NvbXBpbGVyX3RlbXAgfHxcbiAgICAgICAgICAgICAgICAoMCAhPT0gYW5jaG9yT2Zmc2V0ICYmIDMgIT09IG5vZGUubm9kZVR5cGUpIHx8XG4gICAgICAgICAgICAgICAgKHN0YXJ0ID0gbGVuZ3RoICsgYW5jaG9yT2Zmc2V0KTtcbiAgICAgICAgICAgICAgbm9kZSAhPT0gZm9jdXNOb2RlIHx8XG4gICAgICAgICAgICAgICAgKDAgIT09IHNlbGVjdGlvbiAmJiAzICE9PSBub2RlLm5vZGVUeXBlKSB8fFxuICAgICAgICAgICAgICAgIChlbmQgPSBsZW5ndGggKyBzZWxlY3Rpb24pO1xuICAgICAgICAgICAgICAzID09PSBub2RlLm5vZGVUeXBlICYmIChsZW5ndGggKz0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgPT09IChuZXh0ID0gbm9kZS5maXJzdENoaWxkKSkgYnJlYWs7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IHJvb3QpIGJyZWFrIGI7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICAgICsraW5kZXhXaXRoaW5BbmNob3IgPT09IGFuY2hvck9mZnNldCAmJlxuICAgICAgICAgICAgICAgIChzdGFydCA9IGxlbmd0aCk7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPT09IGZvY3VzTm9kZSAmJlxuICAgICAgICAgICAgICAgICsraW5kZXhXaXRoaW5Gb2N1cyA9PT0gc2VsZWN0aW9uICYmXG4gICAgICAgICAgICAgICAgKGVuZCA9IGxlbmd0aCk7XG4gICAgICAgICAgICAgIGlmIChudWxsICE9PSAobmV4dCA9IG5vZGUubmV4dFNpYmxpbmcpKSBicmVhaztcbiAgICAgICAgICAgICAgbm9kZSA9IHBhcmVudE5vZGU7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgICAgIC0xID09PSBzdGFydCB8fCAtMSA9PT0gZW5kID8gbnVsbCA6IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgICAgICB9IGVsc2UgSlNDb21waWxlcl90ZW1wID0gbnVsbDtcbiAgICAgIH1cbiAgICBKU0NvbXBpbGVyX3RlbXAgPSBKU0NvbXBpbGVyX3RlbXAgfHwgeyBzdGFydDogMCwgZW5kOiAwIH07XG4gIH0gZWxzZSBKU0NvbXBpbGVyX3RlbXAgPSBudWxsO1xuICBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IHsgZm9jdXNlZEVsZW06IHJvb3QsIHNlbGVjdGlvblJhbmdlOiBKU0NvbXBpbGVyX3RlbXAgfTtcbiAgX2VuYWJsZWQgPSAhMTtcbiAgZm9yIChuZXh0RWZmZWN0ID0gZmlyc3RDaGlsZDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKVxuICAgIGlmIChcbiAgICAgICgoZmlyc3RDaGlsZCA9IG5leHRFZmZlY3QpLFxuICAgICAgKHJvb3QgPSBmaXJzdENoaWxkLmNoaWxkKSxcbiAgICAgIDAgIT09IChmaXJzdENoaWxkLnN1YnRyZWVGbGFncyAmIDEwMjgpICYmIG51bGwgIT09IHJvb3QpXG4gICAgKVxuICAgICAgKHJvb3QucmV0dXJuID0gZmlyc3RDaGlsZCksIChuZXh0RWZmZWN0ID0gcm9vdCk7XG4gICAgZWxzZVxuICAgICAgZm9yICg7IG51bGwgIT09IG5leHRFZmZlY3Q7ICkge1xuICAgICAgICBmaXJzdENoaWxkID0gbmV4dEVmZmVjdDtcbiAgICAgICAgZm9jdXNOb2RlID0gZmlyc3RDaGlsZC5hbHRlcm5hdGU7XG4gICAgICAgIHJvb3QgPSBmaXJzdENoaWxkLmZsYWdzO1xuICAgICAgICBzd2l0Y2ggKGZpcnN0Q2hpbGQudGFnKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkgJiYgbnVsbCAhPT0gZm9jdXNOb2RlKSB7XG4gICAgICAgICAgICAgIHJvb3QgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IGZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgIGFuY2hvck9mZnNldCA9IGZvY3VzTm9kZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICBmb2N1c05vZGUgPSBmb2N1c05vZGUubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgICAgc2VsZWN0aW9uID0gSlNDb21waWxlcl90ZW1wLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzb2x2ZWRQcmV2UHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC50eXBlLFxuICAgICAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLmVsZW1lbnRUeXBlID09PSBKU0NvbXBpbGVyX3RlbXAudHlwZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcm9vdCA9IHNlbGVjdGlvbi5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgICAgICAgICAgICAgIHJlc29sdmVkUHJldlByb3BzLFxuICAgICAgICAgICAgICAgICAgZm9jdXNOb2RlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUgPSByb290O1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLnJldHVybixcbiAgICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkpXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKHJvb3QgPSBmaXJzdENoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxcbiAgICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wID0gcm9vdC5ub2RlVHlwZSksXG4gICAgICAgICAgICAgICAgOSA9PT0gSlNDb21waWxlcl90ZW1wKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY2xlYXJDb250YWluZXJTcGFyaW5nbHkocm9vdCk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKDEgPT09IEpTQ29tcGlsZXJfdGVtcClcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHJvb3Qubm9kZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJIRUFEXCI6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiSFRNTFwiOlxuICAgICAgICAgICAgICAgICAgY2FzZSBcIkJPRFlcIjpcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJDb250YWluZXJTcGFyaW5nbHkocm9vdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcm9vdC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdCA9IGZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgaWYgKG51bGwgIT09IHJvb3QpIHtcbiAgICAgICAgICByb290LnJldHVybiA9IGZpcnN0Q2hpbGQucmV0dXJuO1xuICAgICAgICAgIG5leHRFZmZlY3QgPSByb290O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRFZmZlY3QgPSBmaXJzdENoaWxkLnJldHVybjtcbiAgICAgIH1cbiAgcmVzb2x2ZWRQcmV2UHJvcHMgPSBzaG91bGRGaXJlQWZ0ZXJBY3RpdmVJbnN0YW5jZUJsdXI7XG4gIHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1ciA9ICExO1xuICByZXR1cm4gcmVzb2x2ZWRQcmV2UHJvcHM7XG59XG5mdW5jdGlvbiBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKGZpbmlzaGVkUm9vdCwgY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRIb29rRWZmZWN0TGlzdE1vdW50KDUsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KVxuICAgICAgICBpZiAoKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSwgbnVsbCA9PT0gY3VycmVudCkpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2UHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay50eXBlLFxuICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkVXBkYXRlKFxuICAgICAgICAgICAgICBwcmV2UHJvcHMsXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvciQxMTEpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5yZXR1cm4sXG4gICAgICAgICAgICAgIGVycm9yJDExMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGZsYWdzICYgNjQgJiYgY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgNjQgJiYgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksIG51bGwgIT09IGZsYWdzKSkge1xuICAgICAgICBmaW5pc2hlZFJvb3QgPSBudWxsO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmluaXNoZWRXb3JrLmNoaWxkKVxuICAgICAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLmNoaWxkLnRhZykge1xuICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5jaGlsZC5zdGF0ZU5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbW1pdENhbGxiYWNrcyhmbGFncywgZmluaXNoZWRSb290KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBudWxsID09PSBjdXJyZW50ICYmIGZsYWdzICYgNCAmJiBjb21taXRIb3N0TW91bnQoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDQgJiYgY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIHByZXZQcm9wcyA9XG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlIHx8IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgIGlmICghcHJldlByb3BzKSB7XG4gICAgICAgIGN1cnJlbnQgPVxuICAgICAgICAgIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgfHxcbiAgICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgICB2YXIgcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbixcbiAgICAgICAgICBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZQcm9wcztcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBjdXJyZW50KSAmJiAhcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW5cbiAgICAgICAgICA/IHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDg3NzIpXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgIH1cbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChcIm1hbnVhbFwiID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcy5tb2RlXG4gICAgICAgICAgPyBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKVxuICAgICAgICAgIDogc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybikpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmXG4gICAgKChmaWJlci5hbHRlcm5hdGUgPSBudWxsKSwgZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoYWx0ZXJuYXRlKSk7XG4gIGZpYmVyLmNoaWxkID0gbnVsbDtcbiAgZmliZXIuZGVsZXRpb25zID0gbnVsbDtcbiAgZmliZXIuc2libGluZyA9IG51bGw7XG4gIDUgPT09IGZpYmVyLnRhZyAmJlxuICAgICgoYWx0ZXJuYXRlID0gZmliZXIuc3RhdGVOb2RlKSxcbiAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgZGV0YWNoRGVsZXRlZEluc3RhbmNlKGFsdGVybmF0ZSkpO1xuICBmaWJlci5zdGF0ZU5vZGUgPSBudWxsO1xuICBmaWJlci5yZXR1cm4gPSBudWxsO1xuICBmaWJlci5kZXBlbmRlbmNpZXMgPSBudWxsO1xuICBmaWJlci5tZW1vaXplZFByb3BzID0gbnVsbDtcbiAgZmliZXIubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIGZpYmVyLnBlbmRpbmdQcm9wcyA9IG51bGw7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IG51bGw7XG4gIGZpYmVyLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbn1cbnZhciBob3N0UGFyZW50ID0gbnVsbCxcbiAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICBmaW5pc2hlZFJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIHBhcmVudFxuKSB7XG4gIGZvciAocGFyZW50ID0gcGFyZW50LmNoaWxkOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkUm9vdCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgcGFyZW50KSxcbiAgICAgIChwYXJlbnQgPSBwYXJlbnQuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKFxuICBmaW5pc2hlZFJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIGRlbGV0ZWRGaWJlclxuKSB7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJVbm1vdW50KVxuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclVubW91bnQocmVuZGVyZXJJRCwgZGVsZXRlZEZpYmVyKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIHN3aXRjaCAoZGVsZXRlZEZpYmVyLnRhZykge1xuICAgIGNhc2UgMjY6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBkZWxldGVkRmliZXIubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/IGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlLmNvdW50LS1cbiAgICAgICAgOiBkZWxldGVkRmliZXIuc3RhdGVOb2RlICYmXG4gICAgICAgICAgKChkZWxldGVkRmliZXIgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlKSxcbiAgICAgICAgICBkZWxldGVkRmliZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgdmFyIHByZXZIb3N0UGFyZW50ID0gaG9zdFBhcmVudCxcbiAgICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBkZWxldGVkRmliZXIgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlO1xuICAgICAgZm9yIChcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciA9IGRlbGV0ZWRGaWJlci5hdHRyaWJ1dGVzO1xuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLmxlbmd0aDtcblxuICAgICAgKVxuICAgICAgICBkZWxldGVkRmliZXIucmVtb3ZlQXR0cmlidXRlTm9kZShuZWFyZXN0TW91bnRlZEFuY2VzdG9yWzBdKTtcbiAgICAgIGRldGFjaERlbGV0ZWRJbnN0YW5jZShkZWxldGVkRmliZXIpO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgY2FzZSA2OlxuICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnQ7XG4gICAgICB2YXIgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciQxMTkgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBob3N0UGFyZW50ID0gbnVsbDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyJDExOTtcbiAgICAgIGlmIChudWxsICE9PSBob3N0UGFyZW50KVxuICAgICAgICBpZiAoaG9zdFBhcmVudElzQ29udGFpbmVyKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAoZmluaXNoZWRSb290ID0gaG9zdFBhcmVudCksXG4gICAgICAgICAgICAgIChwcmV2SG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgICAgICA4ID09PSBmaW5pc2hlZFJvb3Qubm9kZVR5cGVcbiAgICAgICAgICAgICAgICA/IGZpbmlzaGVkUm9vdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHByZXZIb3N0UGFyZW50KVxuICAgICAgICAgICAgICAgIDogZmluaXNoZWRSb290LnJlbW92ZUNoaWxkKHByZXZIb3N0UGFyZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhvc3RQYXJlbnQucmVtb3ZlQ2hpbGQoZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICBkZWxldGVkRmliZXIsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTg6XG4gICAgICBudWxsICE9PSBob3N0UGFyZW50ICYmXG4gICAgICAgIChob3N0UGFyZW50SXNDb250YWluZXJcbiAgICAgICAgICA/ICgobmVhcmVzdE1vdW50ZWRBbmNlc3RvciA9IGhvc3RQYXJlbnQpLFxuICAgICAgICAgICAgKGRlbGV0ZWRGaWJlciA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgICAgOCA9PT0gbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci5ub2RlVHlwZVxuICAgICAgICAgICAgICA/IGNsZWFyU3VzcGVuc2VCb3VuZGFyeShcbiAgICAgICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IucGFyZW50Tm9kZSxcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgOiAxID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAgICAgY2xlYXJTdXNwZW5zZUJvdW5kYXJ5KG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGRlbGV0ZWRGaWJlciksXG4gICAgICAgICAgICByZXRyeUlmQmxvY2tlZE9uKG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpKVxuICAgICAgICAgIDogY2xlYXJTdXNwZW5zZUJvdW5kYXJ5KGhvc3RQYXJlbnQsIGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHByZXZIb3N0UGFyZW50ID0gaG9zdFBhcmVudDtcbiAgICAgIHByZXZIb3N0UGFyZW50SXNDb250YWluZXIgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBob3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITA7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGhvc3RQYXJlbnQgPSBwcmV2SG9zdFBhcmVudDtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE0OlxuICAgIGNhc2UgMTU6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCgyLCBkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoNCwgZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAoc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciksXG4gICAgICAgIChwcmV2SG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcmV2SG9zdFBhcmVudC5jb21wb25lbnRXaWxsVW5tb3VudCAmJlxuICAgICAgICAgIHNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudChcbiAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICBwcmV2SG9zdFBhcmVudFxuICAgICAgICAgICkpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIxOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPVxuICAgICAgICAocHJldkhvc3RQYXJlbnQgPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuKSB8fFxuICAgICAgICBudWxsICE9PSBkZWxldGVkRmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yaykge1xuICBpZiAoXG4gICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUpLFxuICAgIG51bGwgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QubWVtb2l6ZWRTdGF0ZSksXG4gICAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QuZGVoeWRyYXRlZCksIG51bGwgIT09IGZpbmlzaGVkUm9vdCkpKVxuICApXG4gICAgdHJ5IHtcbiAgICAgIHJldHJ5SWZCbG9ja2VkT24oZmluaXNoZWRSb290KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UmV0cnlDYWNoZShmaW5pc2hlZFdvcmspIHtcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAxMzpcbiAgICBjYXNlIDE5OlxuICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCA9PT0gcmV0cnlDYWNoZSAmJlxuICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgPSBuZXcgUG9zc2libHlXZWFrU2V0KCkpO1xuICAgICAgcmV0dXJuIHJldHJ5Q2FjaGU7XG4gICAgY2FzZSAyMjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSxcbiAgICAgICAgKHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuX3JldHJ5Q2FjaGUpLFxuICAgICAgICBudWxsID09PSByZXRyeUNhY2hlICYmXG4gICAgICAgICAgKHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuX3JldHJ5Q2FjaGUgPSBuZXcgUG9zc2libHlXZWFrU2V0KCkpLFxuICAgICAgICByZXRyeUNhY2hlXG4gICAgICApO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQzNSwgZmluaXNoZWRXb3JrLnRhZykpO1xuICB9XG59XG5mdW5jdGlvbiBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgd2FrZWFibGVzKSB7XG4gIHZhciByZXRyeUNhY2hlID0gZ2V0UmV0cnlDYWNoZShmaW5pc2hlZFdvcmspO1xuICB3YWtlYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAod2FrZWFibGUpIHtcbiAgICB2YXIgcmV0cnkgPSByZXNvbHZlUmV0cnlXYWtlYWJsZS5iaW5kKG51bGwsIGZpbmlzaGVkV29yaywgd2FrZWFibGUpO1xuICAgIHJldHJ5Q2FjaGUuaGFzKHdha2VhYmxlKSB8fFxuICAgICAgKHJldHJ5Q2FjaGUuYWRkKHdha2VhYmxlKSwgd2FrZWFibGUudGhlbihyZXRyeSwgcmV0cnkpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QkanNjb21wJDAsIHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmIChudWxsICE9PSBkZWxldGlvbnMpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZFRvRGVsZXRlID0gZGVsZXRpb25zW2ldLFxuICAgICAgICByb290ID0gcm9vdCRqc2NvbXAkMCxcbiAgICAgICAgcmV0dXJuRmliZXIgPSBwYXJlbnRGaWJlcixcbiAgICAgICAgcGFyZW50ID0gcmV0dXJuRmliZXI7XG4gICAgICBhOiBmb3IgKDsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICAgICAgc3dpdGNoIChwYXJlbnQudGFnKSB7XG4gICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBob3N0UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBob3N0UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITA7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsID09PSBob3N0UGFyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MCkpO1xuICAgICAgY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihyb290LCByZXR1cm5GaWJlciwgY2hpbGRUb0RlbGV0ZSk7XG4gICAgICBob3N0UGFyZW50ID0gbnVsbDtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgcm9vdCA9IGNoaWxkVG9EZWxldGUuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gcm9vdCAmJiAocm9vdC5yZXR1cm4gPSBudWxsKTtcbiAgICAgIGNoaWxkVG9EZWxldGUucmV0dXJuID0gbnVsbDtcbiAgICB9XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMzg3OClcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKHBhcmVudEZpYmVyLCByb290JGpzY29tcCQwKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG52YXIgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBudWxsO1xuZnVuY3Rpb24gY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmssIHJvb3QpIHtcbiAgdmFyIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE0OlxuICAgIGNhc2UgMTU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDMsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiksXG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoMywgZmluaXNoZWRXb3JrKSxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDUsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybikpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuICYmXG4gICAgICAgICgoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrICYmXG4gICAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgICAoKGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyksXG4gICAgICAgICAgICAoZmluaXNoZWRXb3JrLnNoYXJlZC5oaWRkZW5DYWxsYmFja3MgPVxuICAgICAgICAgICAgICBudWxsID09PSBjdXJyZW50ID8gZmxhZ3MgOiBjdXJyZW50LmNvbmNhdChmbGFncykpKSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICAgIHZhciBob2lzdGFibGVSb290ID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgaWYgKGZsYWdzICYgNCkge1xuICAgICAgICB2YXIgY3VycmVudFJlc291cmNlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KVxuICAgICAgICAgIGlmIChudWxsID09PSBmbGFncylcbiAgICAgICAgICAgIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSB7XG4gICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay50eXBlO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICAgICAgICAgICAgYjogc3dpdGNoIChmbGFncykge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9XG4gICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRpdGxlXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgIWN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2VbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UubmFtZXNwYWNlVVJJIHx8XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KGZsYWdzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmhlYWQuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcImhlYWQgPiB0aXRsZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoY3VycmVudFJlc291cmNlLCBmbGFncywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBmbGFncyA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXliZU5vZGVzID0gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKFxuICAgICAgICAgICAgICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHJlZlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3RcbiAgICAgICAgICAgICAgICAgICAgKS5nZXQoZmxhZ3MgKyAoY3VycmVudC5ocmVmIHx8IFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heWJlTm9kZXMpXG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXliZU5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IG1heWJlTm9kZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmhyZWYgPyBudWxsIDogY3VycmVudC5ocmVmKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnJlbCA/IG51bGwgOiBjdXJyZW50LnJlbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnRpdGxlID8gbnVsbCA6IGN1cnJlbnQudGl0bGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5jcm9zc09yaWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmNyb3NzT3JpZ2luKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXliZU5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KGZsYWdzKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoY3VycmVudFJlc291cmNlLCBmbGFncywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5hcHBlbmRDaGlsZChjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAobWF5YmVOb2RlcyA9IGdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZShcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWV0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290XG4gICAgICAgICAgICAgICAgICAgICAgKS5nZXQoZmxhZ3MgKyAoY3VycmVudC5jb250ZW50IHx8IFwiXCIpKSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXliZU5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IG1heWJlTm9kZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiICsgY3VycmVudC5jb250ZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5uYW1lID8gbnVsbCA6IGN1cnJlbnQubmFtZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQucHJvcGVydHkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcImh0dHAtZXF1aXZcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50Lmh0dHBFcXVpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50Lmh0dHBFcXVpdikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY2hhcnNldFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuY2hhclNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmNoYXJTZXQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjgsIGZsYWdzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgZmxhZ3MgPSBjdXJyZW50UmVzb3VyY2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IGZsYWdzO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIG1vdW50SG9pc3RhYmxlKFxuICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgPSBhY3F1aXJlUmVzb3VyY2UoXG4gICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSAhPT0gZmxhZ3NcbiAgICAgICAgICAgID8gKG51bGwgPT09IGN1cnJlbnRSZXNvdXJjZVxuICAgICAgICAgICAgICAgID8gbnVsbCAhPT0gY3VycmVudC5zdGF0ZU5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICgoY3VycmVudCA9IGN1cnJlbnQuc3RhdGVOb2RlKSxcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KSlcbiAgICAgICAgICAgICAgICA6IGN1cnJlbnRSZXNvdXJjZS5jb3VudC0tLFxuICAgICAgICAgICAgICBudWxsID09PSBmbGFnc1xuICAgICAgICAgICAgICAgID8gbW91bnRIb2lzdGFibGUoXG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay50eXBlLFxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBhY3F1aXJlUmVzb3VyY2UoXG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgIDogbnVsbCA9PT0gZmxhZ3MgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgICBjb21taXRIb3N0VXBkYXRlKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICBpZiAoZmxhZ3MgJiA0ICYmIG51bGwgPT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUpIHtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAodmFyIG5vZGUgPSBob2lzdGFibGVSb290LmZpcnN0Q2hpbGQ7IG5vZGU7ICkge1xuICAgICAgICAgICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZyxcbiAgICAgICAgICAgICAgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lO1xuICAgICAgICAgICAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgICAgICAgXCJIRUFEXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIFwiQk9EWVwiID09PSBub2RlTmFtZSB8fFxuICAgICAgICAgICAgICBcIlNDUklQVFwiID09PSBub2RlTmFtZSB8fFxuICAgICAgICAgICAgICBcIlNUWUxFXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIChcIkxJTktcIiA9PT0gbm9kZU5hbWUgJiZcbiAgICAgICAgICAgICAgICBcInN0eWxlc2hlZXRcIiA9PT0gbm9kZS5yZWwudG9Mb3dlckNhc2UoKSkgfHxcbiAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHZhciB0eXBlID0gZmluaXNoZWRXb3JrLnR5cGUsIGF0dHJpYnV0ZXMgPSBob2lzdGFibGVSb290LmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmxlbmd0aDtcblxuICAgICAgICAgIClcbiAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyaWJ1dGVzWzBdKTtcbiAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhob2lzdGFibGVSb290LCB0eXBlLCBjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgIGhvaXN0YWJsZVJvb3RbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBmaW5pc2hlZFdvcms7XG4gICAgICAgICAgaG9pc3RhYmxlUm9vdFtpbnRlcm5hbFByb3BzS2V5XSA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBpZiAoZmluaXNoZWRXb3JrLmZsYWdzICYgMzIpIHtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoaG9pc3RhYmxlUm9vdCwgXCJcIik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICBudWxsICE9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgJiZcbiAgICAgICAgKChob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMpLFxuICAgICAgICBjb21taXRIb3N0VXBkYXRlKFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBob2lzdGFibGVSb290LFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50Lm1lbW9pemVkUHJvcHMgOiBob2lzdGFibGVSb290XG4gICAgICAgICkpO1xuICAgICAgZmxhZ3MgJiAxMDI0ICYmIChuZWVkc0Zvcm1SZXNldCA9ICEwKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgNCkge1xuICAgICAgICBpZiAobnVsbCA9PT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MikpO1xuICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICBjdXJyZW50ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjdXJyZW50Lm5vZGVWYWx1ZSA9IGZsYWdzO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB0YWdDYWNoZXMgPSBudWxsO1xuICAgICAgaG9pc3RhYmxlUm9vdCA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KHJvb3QuY29udGFpbmVySW5mbyk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGhvaXN0YWJsZVJvb3Q7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQgJiYgbnVsbCAhPT0gY3VycmVudCAmJiBjdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24ocm9vdC5jb250YWluZXJJbmZvKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgbmVlZHNGb3JtUmVzZXQgJiZcbiAgICAgICAgKChuZWVkc0Zvcm1SZXNldCA9ICExKSwgcmVjdXJzaXZlbHlSZXNldEZvcm1zKGZpbmlzaGVkV29yaykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgZmxhZ3MgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChcbiAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICApO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGZsYWdzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmluaXNoZWRXb3JrLmNoaWxkLmZsYWdzICYgODE5MiAmJlxuICAgICAgICAobnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpICE9PVxuICAgICAgICAgIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgJiZcbiAgICAgICAgKGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgPSBub3coKSk7XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgZmxhZ3MpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBub2RlID0gbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICBuZXh0Tm9kZSA9IG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgbm9kZU5hbWUgPSBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICB0eXBlID0gb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IG5vZGVOYW1lIHx8IG5vZGU7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gdHlwZSB8fCBuZXh0Tm9kZTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSB0eXBlO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gbm9kZU5hbWU7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIHJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgcm9vdC5fY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgIHJvb3QuX3Zpc2liaWxpdHkgJj0gLTM7XG4gICAgICByb290Ll92aXNpYmlsaXR5IHw9IHJvb3QuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMjtcbiAgICAgIGlmIChcbiAgICAgICAgZmxhZ3MgJiA4MTkyICYmXG4gICAgICAgICgocm9vdC5fdmlzaWJpbGl0eSA9IG5vZGVcbiAgICAgICAgICA/IHJvb3QuX3Zpc2liaWxpdHkgJiAtMlxuICAgICAgICAgIDogcm9vdC5fdmlzaWJpbGl0eSB8IDEpLFxuICAgICAgICBub2RlICYmXG4gICAgICAgICAgKChyb290ID0gb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIHx8IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4pLFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICAgIG5leHROb2RlIHx8XG4gICAgICAgICAgICByb290IHx8XG4gICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspKSxcbiAgICAgICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMgfHxcbiAgICAgICAgICBcIm1hbnVhbFwiICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcy5tb2RlKVxuICAgICAgKVxuICAgICAgICBhOiBmb3IgKGN1cnJlbnQgPSBudWxsLCByb290ID0gZmluaXNoZWRXb3JrOyA7ICkge1xuICAgICAgICAgIGlmICg1ID09PSByb290LnRhZyB8fCAyNiA9PT0gcm9vdC50YWcgfHwgMjcgPT09IHJvb3QudGFnKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGN1cnJlbnQgPSByb290O1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICgoKGhvaXN0YWJsZVJvb3QgPSBuZXh0Tm9kZS5zdGF0ZU5vZGUpLCBub2RlKSlcbiAgICAgICAgICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LnN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY3VycmVudFJlc291cmNlLnNldFByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgPyBjdXJyZW50UmVzb3VyY2Uuc2V0UHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzcGxheVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbXBvcnRhbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGN1cnJlbnRSZXNvdXJjZS5kaXNwbGF5ID0gXCJub25lXCIpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbWF5YmVOb2RlcyA9IG5leHROb2RlLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICAgIGkgPSBuZXh0Tm9kZS5tZW1vaXplZFByb3BzLnN0eWxlO1xuICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGkgJiYgbnVsbCAhPT0gaSAmJiBpLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKVxuICAgICAgICAgICAgICAgICAgICAgID8gaS5kaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgbWF5YmVOb2Rlcy5zdHlsZS5kaXNwbGF5ID1cbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PSBkaXNwbGF5IHx8IFwiYm9vbGVhblwiID09PSB0eXBlb2YgZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICAgID8gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgIDogKFwiXCIgKyBkaXNwbGF5KS50cmltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKG5leHROb2RlLCBuZXh0Tm9kZS5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoNiA9PT0gcm9vdC50YWcpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5leHROb2RlID0gcm9vdDtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBuZXh0Tm9kZS5zdGF0ZU5vZGUubm9kZVZhbHVlID0gbm9kZVxuICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICA6IG5leHROb2RlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IobmV4dE5vZGUsIG5leHROb2RlLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICgoMjIgIT09IHJvb3QudGFnICYmIDIzICE9PSByb290LnRhZykgfHxcbiAgICAgICAgICAgICAgbnVsbCA9PT0gcm9vdC5tZW1vaXplZFN0YXRlIHx8XG4gICAgICAgICAgICAgIHJvb3QgPT09IGZpbmlzaGVkV29yaykgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHJvb3QuY2hpbGRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJvb3QuY2hpbGQucmV0dXJuID0gcm9vdDtcbiAgICAgICAgICAgIHJvb3QgPSByb290LmNoaWxkO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyb290ID09PSBmaW5pc2hlZFdvcmspIGJyZWFrIGE7XG4gICAgICAgICAgZm9yICg7IG51bGwgPT09IHJvb3Quc2libGluZzsgKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gcm9vdC5yZXR1cm4gfHwgcm9vdC5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykgYnJlYWsgYTtcbiAgICAgICAgICAgIGN1cnJlbnQgPT09IHJvb3QgJiYgKGN1cnJlbnQgPSBudWxsKTtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9PT0gcm9vdCAmJiAoY3VycmVudCA9IG51bGwpO1xuICAgICAgICAgIHJvb3Quc2libGluZy5yZXR1cm4gPSByb290LnJldHVybjtcbiAgICAgICAgICByb290ID0gcm9vdC5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChjdXJyZW50ID0gZmxhZ3MucmV0cnlRdWV1ZSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgKChmbGFncy5yZXRyeVF1ZXVlID0gbnVsbCksXG4gICAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgY3VycmVudCkpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgZmxhZ3MpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIxOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKSxcbiAgICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBpZiAoZmxhZ3MgJiAyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgyNyAhPT0gZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICBhOiB7XG4gICAgICAgICAgZm9yICh2YXIgcGFyZW50ID0gZmluaXNoZWRXb3JrLnJldHVybjsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICAgICAgICAgIGlmIChpc0hvc3RQYXJlbnQocGFyZW50KSkge1xuICAgICAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcGFyZW50O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjApKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50YWcpIHtcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgdmFyIHBhcmVudCRqc2NvbXAkMCA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5zdGF0ZU5vZGUsXG4gICAgICAgICAgICAgIGJlZm9yZSA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUoZmluaXNoZWRXb3JrLCBiZWZvcmUsIHBhcmVudCRqc2NvbXAkMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICB2YXIgcGFyZW50JDExMyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuZmxhZ3MgJiAzMiAmJlxuICAgICAgICAgICAgICAoc2V0VGV4dENvbnRlbnQocGFyZW50JDExMywgXCJcIiksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuZmxhZ3MgJj0gLTMzKSk7XG4gICAgICAgICAgICB2YXIgYmVmb3JlJDExNCA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUoZmluaXNoZWRXb3JrLCBiZWZvcmUkMTE0LCBwYXJlbnQkMTEzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB2YXIgcGFyZW50JDExNSA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxcbiAgICAgICAgICAgICAgYmVmb3JlJDExNiA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGJlZm9yZSQxMTYsXG4gICAgICAgICAgICAgIHBhcmVudCQxMTVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG4gICAgZmluaXNoZWRXb3JrLmZsYWdzICY9IC0zO1xuICB9XG4gIGZsYWdzICYgNDA5NiAmJiAoZmluaXNoZWRXb3JrLmZsYWdzICY9IC00MDk3KTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyhwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNClcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICAgIHZhciBmaWJlciA9IHBhcmVudEZpYmVyO1xuICAgICAgcmVjdXJzaXZlbHlSZXNldEZvcm1zKGZpYmVyKTtcbiAgICAgIDUgPT09IGZpYmVyLnRhZyAmJiBmaWJlci5mbGFncyAmIDEwMjQgJiYgZmliZXIuc3RhdGVOb2RlLnJlc2V0KCk7XG4gICAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMocm9vdCwgcGFyZW50RmliZXIpIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDg3NzIpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBwYXJlbnRGaWJlci5hbHRlcm5hdGUsIHBhcmVudEZpYmVyKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhwYXJlbnRGaWJlcikge1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXI7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNDpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnJldHVybixcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSAyNzpcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgcGFyZW50RmliZXIsXG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbikge1xuICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzID1cbiAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmIDAgIT09IChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiA4NzcyKTtcbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBwYXJlbnRGaWJlci5hbHRlcm5hdGUsXG4gICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gICAgICBmaW5pc2hlZFdvcmsgPSBwYXJlbnRGaWJlcixcbiAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoNCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZmluaXNoZWRSb290LmNvbXBvbmVudERpZE1vdW50KVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgY3VycmVudC5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gICAgICAgIGlmIChudWxsICE9PSBmaW5pc2hlZFJvb3QpIHtcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGhpZGRlbkNhbGxiYWNrcyA9IGZpbmlzaGVkUm9vdC5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGhpZGRlbkNhbGxiYWNrcylcbiAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3Quc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyA9IG51bGwsIGZpbmlzaGVkUm9vdCA9IDA7XG4gICAgICAgICAgICAgICAgZmluaXNoZWRSb290IDwgaGlkZGVuQ2FsbGJhY2tzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QrK1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY2FsbENhbGxiYWNrKGhpZGRlbkNhbGxiYWNrc1tmaW5pc2hlZFJvb3RdLCBpbnN0YW5jZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDY0ICYmXG4gICAgICAgICAgY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNjpcbiAgICAgIGNhc2UgMjc6XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgICAgY29tbWl0SG9zdE1vdW50KGZpbmlzaGVkV29yayk7XG4gICAgICAgIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTI6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMzpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAgIGNvbW1pdFN1c3BlbnNlSHlkcmF0aW9uQ2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICAgKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICB9XG4gICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKGN1cnJlbnQsIGZpbmlzaGVkV29yaykge1xuICB2YXIgcHJldmlvdXNDYWNoZSA9IG51bGw7XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgKHByZXZpb3VzQ2FjaGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICBjdXJyZW50ID0gbnVsbDtcbiAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAoY3VycmVudCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgY3VycmVudCAhPT0gcHJldmlvdXNDYWNoZSAmJlxuICAgIChudWxsICE9IGN1cnJlbnQgJiYgY3VycmVudC5yZWZDb3VudCsrLFxuICAgIG51bGwgIT0gcHJldmlvdXNDYWNoZSAmJiByZWxlYXNlQ2FjaGUocHJldmlvdXNDYWNoZSkpO1xufVxuZnVuY3Rpb24gY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBudWxsICE9PSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlICYmXG4gICAgKGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICBmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZTtcbiAgZmluaXNoZWRXb3JrICE9PSBjdXJyZW50ICYmXG4gICAgKGZpbmlzaGVkV29yay5yZWZDb3VudCsrLCBudWxsICE9IGN1cnJlbnQgJiYgcmVsZWFzZUNhY2hlKGN1cnJlbnQpKTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICByb290LFxuICBwYXJlbnRGaWJlcixcbiAgY29tbWl0dGVkTGFuZXMsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4pIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHBhcmVudEZpYmVyLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgZmluaXNoZWRSb290LFxuICBmaW5pc2hlZFdvcmssXG4gIGNvbW1pdHRlZExhbmVzLFxuICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoOSwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICgoZmluaXNoZWRSb290ID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlLmNhY2hlKSxcbiAgICAgICAgKGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlKSxcbiAgICAgICAgZmluaXNoZWRXb3JrICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgICAoZmluaXNoZWRXb3JrLnJlZkNvdW50KyssXG4gICAgICAgICAgbnVsbCAhPSBmaW5pc2hlZFJvb3QgJiYgcmVsZWFzZUNhY2hlKGZpbmlzaGVkUm9vdCkpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICBpZiAoZmxhZ3MgJiAyMDQ4KSB7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgX2ZpbmlzaGVkV29yayRtZW1vaXplMiA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgaWQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUyLmlkLFxuICAgICAgICAgICAgb25Qb3N0Q29tbWl0ID0gX2ZpbmlzaGVkV29yayRtZW1vaXplMi5vblBvc3RDb21taXQ7XG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygb25Qb3N0Q29tbWl0ICYmXG4gICAgICAgICAgICBvblBvc3RDb21taXQoXG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlID8gXCJtb3VudFwiIDogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LnBhc3NpdmVFZmZlY3REdXJhdGlvbixcbiAgICAgICAgICAgICAgLTBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZVxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIzOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIF9maW5pc2hlZFdvcmskbWVtb2l6ZTIgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyBfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5ICYgNFxuICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yaylcbiAgICAgICAgOiBfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5ICYgNFxuICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICgoX2ZpbmlzaGVkV29yayRtZW1vaXplMi5fdmlzaWJpbGl0eSB8PSA0KSxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxMDI1NilcbiAgICAgICAgICAgICkpO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKTtcbiAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICBjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdChmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgcGFyZW50RmliZXIsXG4gIGNvbW1pdHRlZExhbmVzJGpzY29tcCQwLFxuICBjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCxcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuKSB7XG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgPVxuICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiYgMCAhPT0gKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KTtcbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgdmFyIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgY29tbWl0dGVkTGFuZXMgPSBjb21taXR0ZWRMYW5lcyRqc2NvbXAkMCxcbiAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zID0gY29tbWl0dGVkVHJhbnNpdGlvbnMkanNjb21wJDAsXG4gICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICBjYXNlIDE1OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoOCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyBpbnN0YW5jZS5fdmlzaWJpbGl0eSAmIDRcbiAgICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICA6ICgoaW5zdGFuY2UuX3Zpc2liaWxpdHkgfD0gNCksXG4gICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgICAgICkpO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlclxuKSB7XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMDI1NilcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICAgIHZhciBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gICAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgICBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgICB9XG59XG52YXIgc3VzcGVuc2V5Q29tbWl0RmxhZyA9IDgxOTI7XG5mdW5jdGlvbiByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQocGFyZW50RmliZXIpIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIHN1c3BlbnNleUNvbW1pdEZsYWcpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIocGFyZW50RmliZXIpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyKGZpYmVyKSB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBmaWJlci5mbGFncyAmIHN1c3BlbnNleUNvbW1pdEZsYWcgJiZcbiAgICAgICAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICBzdXNwZW5kUmVzb3VyY2UoXG4gICAgICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgICBmaWJlci5tZW1vaXplZFByb3BzXG4gICAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgNDpcbiAgICAgIHZhciBwcmV2aW91c0hvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChmaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpO1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBwcmV2aW91c0hvaXN0YWJsZVJvb3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgbnVsbCA9PT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoKHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IGZpYmVyLmFsdGVybmF0ZSksXG4gICAgICAgIG51bGwgIT09IHByZXZpb3VzSG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICBudWxsICE9PSBwcmV2aW91c0hvaXN0YWJsZVJvb3QubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgID8gKChwcmV2aW91c0hvaXN0YWJsZVJvb3QgPSBzdXNwZW5zZXlDb21taXRGbGFnKSxcbiAgICAgICAgICAgIChzdXNwZW5zZXlDb21taXRGbGFnID0gMTY3NzcyMTYpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKSxcbiAgICAgICAgICAgIChzdXNwZW5zZXlDb21taXRGbGFnID0gcHJldmlvdXNIb2lzdGFibGVSb290KSlcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcikpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGFjaEFsdGVybmF0ZVNpYmxpbmdzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBwcmV2aW91c0ZpYmVyID0gcGFyZW50RmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoXG4gICAgbnVsbCAhPT0gcHJldmlvdXNGaWJlciAmJlxuICAgICgocGFyZW50RmliZXIgPSBwcmV2aW91c0ZpYmVyLmNoaWxkKSwgbnVsbCAhPT0gcGFyZW50RmliZXIpXG4gICkge1xuICAgIHByZXZpb3VzRmliZXIuY2hpbGQgPSBudWxsO1xuICAgIGRvXG4gICAgICAocHJldmlvdXNGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpLFxuICAgICAgICAocGFyZW50RmliZXIuc2libGluZyA9IG51bGwpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwcmV2aW91c0ZpYmVyKTtcbiAgICB3aGlsZSAobnVsbCAhPT0gcGFyZW50RmliZXIpO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmICgwICE9PSAocGFyZW50RmliZXIuZmxhZ3MgJiAxNikpIHtcbiAgICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG4gICAgICAgIG5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICAgICAgICAgIGNoaWxkVG9EZWxldGUsXG4gICAgICAgICAgcGFyZW50RmliZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyhwYXJlbnRGaWJlcik7XG4gIH1cbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlcihwYXJlbnRGaWJlciksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKGZpbmlzaGVkV29yaykge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmluaXNoZWRXb3JrLmZsYWdzICYgMjA0OCAmJlxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoOSwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICBpbnN0YW5jZS5fdmlzaWJpbGl0eSAmIDQgJiZcbiAgICAgIChudWxsID09PSBmaW5pc2hlZFdvcmsucmV0dXJuIHx8IDEzICE9PSBmaW5pc2hlZFdvcmsucmV0dXJuLnRhZylcbiAgICAgICAgPyAoKGluc3RhbmNlLl92aXNpYmlsaXR5ICY9IC01KSxcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGZpbmlzaGVkV29yaykpXG4gICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2Nvbm5lY3RQYXNzaXZlRWZmZWN0cyhwYXJlbnRGaWJlcikge1xuICB2YXIgZGVsZXRpb25zID0gcGFyZW50RmliZXIuZGVsZXRpb25zO1xuICBpZiAoMCAhPT0gKHBhcmVudEZpYmVyLmZsYWdzICYgMTYpKSB7XG4gICAgaWYgKG51bGwgIT09IGRlbGV0aW9ucylcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVsZXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZFRvRGVsZXRlID0gZGVsZXRpb25zW2ldO1xuICAgICAgICBuZXh0RWZmZWN0ID0gY2hpbGRUb0RlbGV0ZTtcbiAgICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbihcbiAgICAgICAgICBjaGlsZFRvRGVsZXRlLFxuICAgICAgICAgIHBhcmVudEZpYmVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MocGFyZW50RmliZXIpO1xuICB9XG4gIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyO1xuICAgIHN3aXRjaCAoZGVsZXRpb25zLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg4LCBkZWxldGlvbnMsIGRlbGV0aW9ucy5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGRlbGV0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgaSA9IGRlbGV0aW9ucy5zdGF0ZU5vZGU7XG4gICAgICAgIGkuX3Zpc2liaWxpdHkgJiA0ICYmXG4gICAgICAgICAgKChpLl92aXNpYmlsaXR5ICY9IC01KSxcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGRlbGV0aW9ucykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKTtcbiAgICB9XG4gICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICBkZWxldGVkU3VidHJlZVJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3Jcbikge1xuICBmb3IgKDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDtcbiAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg4LCBmaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMzpcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2xcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGNhY2hlID0gZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbDtcbiAgICAgICAgICBudWxsICE9IGNhY2hlICYmIGNhY2hlLnJlZkNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI0OlxuICAgICAgICByZWxlYXNlQ2FjaGUoZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgfVxuICAgIGNhY2hlID0gZmliZXIuY2hpbGQ7XG4gICAgaWYgKG51bGwgIT09IGNhY2hlKSAoY2FjaGUucmV0dXJuID0gZmliZXIpLCAobmV4dEVmZmVjdCA9IGNhY2hlKTtcbiAgICBlbHNlXG4gICAgICBhOiBmb3IgKGZpYmVyID0gZGVsZXRlZFN1YnRyZWVSb290OyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICAgICAgY2FjaGUgPSBuZXh0RWZmZWN0O1xuICAgICAgICB2YXIgc2libGluZyA9IGNhY2hlLnNpYmxpbmcsXG4gICAgICAgICAgcmV0dXJuRmliZXIgPSBjYWNoZS5yZXR1cm47XG4gICAgICAgIGRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzKGNhY2hlKTtcbiAgICAgICAgaWYgKGNhY2hlID09PSBmaWJlcikge1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bGwgIT09IHNpYmxpbmcpIHtcbiAgICAgICAgICBzaWJsaW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBzaWJsaW5nO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEVmZmVjdCA9IHJldHVybkZpYmVyO1xuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5rZXkgPSBrZXk7XG4gIHRoaXMuc2libGluZyA9XG4gICAgdGhpcy5jaGlsZCA9XG4gICAgdGhpcy5yZXR1cm4gPVxuICAgIHRoaXMuc3RhdGVOb2RlID1cbiAgICB0aGlzLnR5cGUgPVxuICAgIHRoaXMuZWxlbWVudFR5cGUgPVxuICAgICAgbnVsbDtcbiAgdGhpcy5pbmRleCA9IDA7XG4gIHRoaXMucmVmQ2xlYW51cCA9IHRoaXMucmVmID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHM7XG4gIHRoaXMuZGVwZW5kZW5jaWVzID1cbiAgICB0aGlzLm1lbW9pemVkU3RhdGUgPVxuICAgIHRoaXMudXBkYXRlUXVldWUgPVxuICAgIHRoaXMubWVtb2l6ZWRQcm9wcyA9XG4gICAgICBudWxsO1xuICB0aGlzLm1vZGUgPSBtb2RlO1xuICB0aGlzLnN1YnRyZWVGbGFncyA9IHRoaXMuZmxhZ3MgPSAwO1xuICB0aGlzLmRlbGV0aW9ucyA9IG51bGw7XG4gIHRoaXMuY2hpbGRMYW5lcyA9IHRoaXMubGFuZXMgPSAwO1xuICB0aGlzLmFsdGVybmF0ZSA9IG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckltcGxDbGFzcyh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIHJldHVybiBuZXcgRmliZXJOb2RlKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xufVxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkge1xuICBDb21wb25lbnQgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISghQ29tcG9uZW50IHx8ICFDb21wb25lbnQuaXNSZWFjdENvbXBvbmVudCk7XG59XG5mdW5jdGlvbiBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBwZW5kaW5nUHJvcHMpIHtcbiAgdmFyIHdvcmtJblByb2dyZXNzID0gY3VycmVudC5hbHRlcm5hdGU7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzXG4gICAgPyAoKHdvcmtJblByb2dyZXNzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgICAgIGN1cnJlbnQudGFnLFxuICAgICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICAgIGN1cnJlbnQua2V5LFxuICAgICAgICBjdXJyZW50Lm1vZGVcbiAgICAgICkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID0gY3VycmVudC5lbGVtZW50VHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudC5zdGF0ZU5vZGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IGN1cnJlbnQpLFxuICAgICAgKGN1cnJlbnQuYWx0ZXJuYXRlID0gd29ya0luUHJvZ3Jlc3MpKVxuICAgIDogKCh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnR5cGUgPSBjdXJyZW50LnR5cGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbCkpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IGN1cnJlbnQuZmxhZ3MgJiAzMTQ1NzI4MDtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQ7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgcGVuZGluZ1Byb3BzID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9XG4gICAgbnVsbCA9PT0gcGVuZGluZ1Byb3BzXG4gICAgICA/IG51bGxcbiAgICAgIDogeyBsYW5lczogcGVuZGluZ1Byb3BzLmxhbmVzLCBmaXJzdENvbnRleHQ6IHBlbmRpbmdQcm9wcy5maXJzdENvbnRleHQgfTtcbiAgd29ya0luUHJvZ3Jlc3Muc2libGluZyA9IGN1cnJlbnQuc2libGluZztcbiAgd29ya0luUHJvZ3Jlc3MuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSBjdXJyZW50LnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmQ2xlYW51cCA9IGN1cnJlbnQucmVmQ2xlYW51cDtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xufVxuZnVuY3Rpb24gcmVzZXRXb3JrSW5Qcm9ncmVzcyh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gMzE0NTcyODI7XG4gIHZhciBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuICBudWxsID09PSBjdXJyZW50XG4gICAgPyAoKHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHJlbmRlckxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBudWxsKSlcbiAgICA6ICgod29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAocmVuZGVyTGFuZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID1cbiAgICAgICAgbnVsbCA9PT0gcmVuZGVyTGFuZXNcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgbGFuZXM6IHJlbmRlckxhbmVzLmxhbmVzLFxuICAgICAgICAgICAgICBmaXJzdENvbnRleHQ6IHJlbmRlckxhbmVzLmZpcnN0Q29udGV4dFxuICAgICAgICAgICAgfSkpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gIHR5cGUsXG4gIGtleSxcbiAgcGVuZGluZ1Byb3BzLFxuICBvd25lcixcbiAgbW9kZSxcbiAgbGFuZXNcbikge1xuICB2YXIgZmliZXJUYWcgPSAwO1xuICBvd25lciA9IHR5cGU7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlKSBzaG91bGRDb25zdHJ1Y3QodHlwZSkgJiYgKGZpYmVyVGFnID0gMSk7XG4gIGVsc2UgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKVxuICAgIGZpYmVyVGFnID0gaXNIb3N0SG9pc3RhYmxlVHlwZShcbiAgICAgIHR5cGUsXG4gICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudFxuICAgIClcbiAgICAgID8gMjZcbiAgICAgIDogXCJodG1sXCIgPT09IHR5cGUgfHwgXCJoZWFkXCIgPT09IHR5cGUgfHwgXCJib2R5XCIgPT09IHR5cGVcbiAgICAgICAgPyAyN1xuICAgICAgICA6IDU7XG4gIGVsc2VcbiAgICBhOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KHBlbmRpbmdQcm9wcy5jaGlsZHJlbiwgbW9kZSwgbGFuZXMsIGtleSk7XG4gICAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICAgIGZpYmVyVGFnID0gODtcbiAgICAgICAgbW9kZSB8PSAyNDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxMiwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUgfCAyKSksXG4gICAgICAgICAgKHR5cGUuZWxlbWVudFR5cGUgPSBSRUFDVF9QUk9GSUxFUl9UWVBFKSxcbiAgICAgICAgICAodHlwZS5sYW5lcyA9IGxhbmVzKSxcbiAgICAgICAgICB0eXBlXG4gICAgICAgICk7XG4gICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxMywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh0eXBlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMTksIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSksXG4gICAgICAgICAgKHR5cGUuZWxlbWVudFR5cGUgPSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfT0ZGU0NSRUVOX1RZUEU6XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlckZyb21PZmZzY3JlZW4ocGVuZGluZ1Byb3BzLCBtb2RlLCBsYW5lcywga2V5KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSAmJiBudWxsICE9PSB0eXBlKVxuICAgICAgICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlNVTUVSX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gOTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxMTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDE0O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTY7XG4gICAgICAgICAgICAgIG93bmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgIGZpYmVyVGFnID0gMjk7XG4gICAgICAgIHBlbmRpbmdQcm9wcyA9IEVycm9yKFxuICAgICAgICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTMwLCBudWxsID09PSB0eXBlID8gXCJudWxsXCIgOiB0eXBlb2YgdHlwZSwgXCJcIilcbiAgICAgICAgKTtcbiAgICAgICAgb3duZXIgPSBudWxsO1xuICAgIH1cbiAga2V5ID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoZmliZXJUYWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAga2V5LmVsZW1lbnRUeXBlID0gdHlwZTtcbiAga2V5LnR5cGUgPSBvd25lcjtcbiAga2V5LmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21GcmFnbWVudChlbGVtZW50cywgbW9kZSwgbGFuZXMsIGtleSkge1xuICBlbGVtZW50cyA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDcsIGVsZW1lbnRzLCBrZXksIG1vZGUpO1xuICBlbGVtZW50cy5sYW5lcyA9IGxhbmVzO1xuICByZXR1cm4gZWxlbWVudHM7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21PZmZzY3JlZW4ocGVuZGluZ1Byb3BzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIHBlbmRpbmdQcm9wcyA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDIyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG4gIHBlbmRpbmdQcm9wcy5lbGVtZW50VHlwZSA9IFJFQUNUX09GRlNDUkVFTl9UWVBFO1xuICBwZW5kaW5nUHJvcHMubGFuZXMgPSBsYW5lcztcbiAgdmFyIHByaW1hcnlDaGlsZEluc3RhbmNlID0ge1xuICAgIF92aXNpYmlsaXR5OiAxLFxuICAgIF9wZW5kaW5nVmlzaWJpbGl0eTogMSxcbiAgICBfcGVuZGluZ01hcmtlcnM6IG51bGwsXG4gICAgX3JldHJ5Q2FjaGU6IG51bGwsXG4gICAgX3RyYW5zaXRpb25zOiBudWxsLFxuICAgIF9jdXJyZW50OiBudWxsLFxuICAgIGRldGFjaDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGZpYmVyID0gcHJpbWFyeUNoaWxkSW5zdGFuY2UuX2N1cnJlbnQ7XG4gICAgICBpZiAobnVsbCA9PT0gZmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDU2KSk7XG4gICAgICBpZiAoMCA9PT0gKHByaW1hcnlDaGlsZEluc3RhbmNlLl9wZW5kaW5nVmlzaWJpbGl0eSAmIDIpKSB7XG4gICAgICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCAyKTtcbiAgICAgICAgbnVsbCAhPT0gcm9vdCAmJlxuICAgICAgICAgICgocHJpbWFyeUNoaWxkSW5zdGFuY2UuX3BlbmRpbmdWaXNpYmlsaXR5IHw9IDIpLFxuICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMikpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXR0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZmliZXIgPSBwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fY3VycmVudDtcbiAgICAgIGlmIChudWxsID09PSBmaWJlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTYpKTtcbiAgICAgIGlmICgwICE9PSAocHJpbWFyeUNoaWxkSW5zdGFuY2UuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMikpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICAgICAgICBudWxsICE9PSByb290ICYmXG4gICAgICAgICAgKChwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fcGVuZGluZ1Zpc2liaWxpdHkgJj0gLTMpLFxuICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMikpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcGVuZGluZ1Byb3BzLnN0YXRlTm9kZSA9IHByaW1hcnlDaGlsZEluc3RhbmNlO1xuICByZXR1cm4gcGVuZGluZ1Byb3BzO1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tVGV4dChjb250ZW50LCBtb2RlLCBsYW5lcykge1xuICBjb250ZW50ID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoNiwgY29udGVudCwgbnVsbCwgbW9kZSk7XG4gIGNvbnRlbnQubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCBtb2RlLCBsYW5lcykge1xuICBtb2RlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgNCxcbiAgICBudWxsICE9PSBwb3J0YWwuY2hpbGRyZW4gPyBwb3J0YWwuY2hpbGRyZW4gOiBbXSxcbiAgICBwb3J0YWwua2V5LFxuICAgIG1vZGVcbiAgKTtcbiAgbW9kZS5sYW5lcyA9IGxhbmVzO1xuICBtb2RlLnN0YXRlTm9kZSA9IHtcbiAgICBjb250YWluZXJJbmZvOiBwb3J0YWwuY29udGFpbmVySW5mbyxcbiAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsXG4gICAgaW1wbGVtZW50YXRpb246IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICB9O1xuICByZXR1cm4gbW9kZTtcbn1cbmZ1bmN0aW9uIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpIHtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDtcbn1cbmZ1bmN0aW9uIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVzb3VyY2UpIHtcbiAgaWYgKFwic3R5bGVzaGVldFwiICE9PSByZXNvdXJjZS50eXBlIHx8IDAgIT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNCkpXG4gICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3O1xuICBlbHNlIGlmICgoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE2Nzc3MjE2KSwgIXByZWxvYWRSZXNvdXJjZShyZXNvdXJjZSkpKSB7XG4gICAgcmVzb3VyY2UgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50O1xuICAgIGlmIChcbiAgICAgIG51bGwgIT09IHJlc291cmNlICYmXG4gICAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNDE5NDE3NikgPT09XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgICA/IG51bGwgIT09IHNoZWxsQm91bmRhcnlcbiAgICAgICAgOiAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNjI5MTQ1NjApICE9PVxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikpIHx8XG4gICAgICAgICAgcmVzb3VyY2UgIT09IHNoZWxsQm91bmRhcnkpXG4gICAgKVxuICAgICAgdGhyb3cgKFxuICAgICAgICAoKHN1c3BlbmRlZFRoZW5hYmxlID0gbm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlKSxcbiAgICAgICAgU3VzcGVuc2V5Q29tbWl0RXhjZXB0aW9uKVxuICAgICAgKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyO1xuICB9XG59XG5mdW5jdGlvbiBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCByZXRyeVF1ZXVlKSB7XG4gIG51bGwgIT09IHJldHJ5UXVldWUgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDE2Mzg0ICYmXG4gICAgKChyZXRyeVF1ZXVlID1cbiAgICAgIDIyICE9PSB3b3JrSW5Qcm9ncmVzcy50YWcgPyBjbGFpbU5leHRSZXRyeUxhbmUoKSA6IDUzNjg3MDkxMiksXG4gICAgKHdvcmtJblByb2dyZXNzLmxhbmVzIHw9IHJldHJ5UXVldWUpLFxuICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgfD0gcmV0cnlRdWV1ZSkpO1xufVxuZnVuY3Rpb24gY3V0T2ZmVGFpbElmTmVlZGVkKHJlbmRlclN0YXRlLCBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2spIHtcbiAgaWYgKCFpc0h5ZHJhdGluZylcbiAgICBzd2l0Y2ggKHJlbmRlclN0YXRlLnRhaWxNb2RlKSB7XG4gICAgICBjYXNlIFwiaGlkZGVuXCI6XG4gICAgICAgIGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayA9IHJlbmRlclN0YXRlLnRhaWw7XG4gICAgICAgIGZvciAodmFyIGxhc3RUYWlsTm9kZSA9IG51bGw7IG51bGwgIT09IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjazsgKVxuICAgICAgICAgIG51bGwgIT09IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjay5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgIChsYXN0VGFpbE5vZGUgPSBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2spLFxuICAgICAgICAgICAgKGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayA9IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjay5zaWJsaW5nKTtcbiAgICAgICAgbnVsbCA9PT0gbGFzdFRhaWxOb2RlXG4gICAgICAgICAgPyAocmVuZGVyU3RhdGUudGFpbCA9IG51bGwpXG4gICAgICAgICAgOiAobGFzdFRhaWxOb2RlLnNpYmxpbmcgPSBudWxsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY29sbGFwc2VkXCI6XG4gICAgICAgIGxhc3RUYWlsTm9kZSA9IHJlbmRlclN0YXRlLnRhaWw7XG4gICAgICAgIGZvciAodmFyIGxhc3RUYWlsTm9kZSQxMzEgPSBudWxsOyBudWxsICE9PSBsYXN0VGFpbE5vZGU7IClcbiAgICAgICAgICBudWxsICE9PSBsYXN0VGFpbE5vZGUuYWx0ZXJuYXRlICYmIChsYXN0VGFpbE5vZGUkMTMxID0gbGFzdFRhaWxOb2RlKSxcbiAgICAgICAgICAgIChsYXN0VGFpbE5vZGUgPSBsYXN0VGFpbE5vZGUuc2libGluZyk7XG4gICAgICAgIG51bGwgPT09IGxhc3RUYWlsTm9kZSQxMzFcbiAgICAgICAgICA/IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayB8fCBudWxsID09PSByZW5kZXJTdGF0ZS50YWlsXG4gICAgICAgICAgICA/IChyZW5kZXJTdGF0ZS50YWlsID0gbnVsbClcbiAgICAgICAgICAgIDogKHJlbmRlclN0YXRlLnRhaWwuc2libGluZyA9IG51bGwpXG4gICAgICAgICAgOiAobGFzdFRhaWxOb2RlJDEzMS5zaWJsaW5nID0gbnVsbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gYnViYmxlUHJvcGVydGllcyhjb21wbGV0ZWRXb3JrKSB7XG4gIHZhciBkaWRCYWlsb3V0ID1cbiAgICAgIG51bGwgIT09IGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlICYmXG4gICAgICBjb21wbGV0ZWRXb3JrLmFsdGVybmF0ZS5jaGlsZCA9PT0gY29tcGxldGVkV29yay5jaGlsZCxcbiAgICBuZXdDaGlsZExhbmVzID0gMCxcbiAgICBzdWJ0cmVlRmxhZ3MgPSAwO1xuICBpZiAoZGlkQmFpbG91dClcbiAgICBmb3IgKHZhciBjaGlsZCQxMzIgPSBjb21wbGV0ZWRXb3JrLmNoaWxkOyBudWxsICE9PSBjaGlsZCQxMzI7IClcbiAgICAgIChuZXdDaGlsZExhbmVzIHw9IGNoaWxkJDEzMi5sYW5lcyB8IGNoaWxkJDEzMi5jaGlsZExhbmVzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMzIuc3VidHJlZUZsYWdzICYgMzE0NTcyODApLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDEzMi5mbGFncyAmIDMxNDU3MjgwKSxcbiAgICAgICAgKGNoaWxkJDEzMi5yZXR1cm4gPSBjb21wbGV0ZWRXb3JrKSxcbiAgICAgICAgKGNoaWxkJDEzMiA9IGNoaWxkJDEzMi5zaWJsaW5nKTtcbiAgZWxzZVxuICAgIGZvciAoY2hpbGQkMTMyID0gY29tcGxldGVkV29yay5jaGlsZDsgbnVsbCAhPT0gY2hpbGQkMTMyOyApXG4gICAgICAobmV3Q2hpbGRMYW5lcyB8PSBjaGlsZCQxMzIubGFuZXMgfCBjaGlsZCQxMzIuY2hpbGRMYW5lcyksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTMyLnN1YnRyZWVGbGFncyksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTMyLmZsYWdzKSxcbiAgICAgICAgKGNoaWxkJDEzMi5yZXR1cm4gPSBjb21wbGV0ZWRXb3JrKSxcbiAgICAgICAgKGNoaWxkJDEzMiA9IGNoaWxkJDEzMi5zaWJsaW5nKTtcbiAgY29tcGxldGVkV29yay5zdWJ0cmVlRmxhZ3MgfD0gc3VidHJlZUZsYWdzO1xuICBjb21wbGV0ZWRXb3JrLmNoaWxkTGFuZXMgPSBuZXdDaGlsZExhbmVzO1xuICByZXR1cm4gZGlkQmFpbG91dDtcbn1cbmZ1bmN0aW9uIGNvbXBsZXRlV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICBwb3BUcmVlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSAxNjpcbiAgICBjYXNlIDE1OlxuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgNzpcbiAgICBjYXNlIDg6XG4gICAgY2FzZSAxMjpcbiAgICBjYXNlIDk6XG4gICAgY2FzZSAxNDpcbiAgICAgIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgY2FzZSAzOlxuICAgICAgcmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICBuZXdQcm9wcyA9IG51bGw7XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmIChuZXdQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlICE9PSBuZXdQcm9wcyAmJlxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA0OCk7XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgcmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQgJiZcbiAgICAgICAgKChyZW5kZXJMYW5lcy5jb250ZXh0ID0gcmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQpLFxuICAgICAgICAocmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQgPSBudWxsKSk7XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudCB8fCBudWxsID09PSBjdXJyZW50LmNoaWxkKVxuICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA/IG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgICAoY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCAmJlxuICAgICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTYpKSB8fFxuICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgICAgIG51bGwgIT09IGh5ZHJhdGlvbkVycm9ycyAmJlxuICAgICAgICAgICAgICAocXVldWVSZWNvdmVyYWJsZUVycm9ycyhoeWRyYXRpb25FcnJvcnMpLFxuICAgICAgICAgICAgICAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCkpKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAobWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICBudWxsICE9PSByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICA/IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpKVxuICAgICAgICAgIDogcmVuZGVyTGFuZXNcbiAgICAgICAgICAgID8gcmVuZGVyTGFuZXMgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgICAgICA/IChtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpXG4gICAgICAgICAgICA6IChjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjc6XG4gICAgICBwb3BIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZW5kZXJMYW5lcyA9IHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICB2YXIgdHlwZSA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSlcbiAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzICE9PSBuZXdQcm9wcyAmJiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTY2KSk7XG4gICAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA/IHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSByZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UodHlwZSwgbmV3UHJvcHMsIHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudCksXG4gICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSk7XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNTpcbiAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpXG4gICAgICAgICAgcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHR5cGUgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoXG4gICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc3dpdGNoIChyZW5kZXJMYW5lcykge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50LmlubmVySFRNTCA9IFwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCI7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5yZW1vdmVDaGlsZChjdXJyZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdQcm9wcy5pc1xuICAgICAgICAgICAgICAgICAgICAgID8gdHlwZS5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIHsgaXM6IG5ld1Byb3BzLmlzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgICAgICAgICAgICAgICBuZXdQcm9wcy5tdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICA/IChjdXJyZW50Lm11bHRpcGxlID0gITApXG4gICAgICAgICAgICAgICAgICAgIDogbmV3UHJvcHMuc2l6ZSAmJiAoY3VycmVudC5zaXplID0gbmV3UHJvcHMuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdQcm9wcy5pc1xuICAgICAgICAgICAgICAgICAgICAgID8gdHlwZS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzLCB7IGlzOiBuZXdQcm9wcy5pcyB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogdHlwZS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgY3VycmVudFtpbnRlcm5hbFByb3BzS2V5XSA9IG5ld1Byb3BzO1xuICAgICAgICAgIGE6IGZvciAodHlwZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSB0eXBlOyApIHtcbiAgICAgICAgICAgIGlmICg1ID09PSB0eXBlLnRhZyB8fCA2ID09PSB0eXBlLnRhZylcbiAgICAgICAgICAgICAgY3VycmVudC5hcHBlbmRDaGlsZCh0eXBlLnN0YXRlTm9kZSk7XG4gICAgICAgICAgICBlbHNlIGlmICg0ICE9PSB0eXBlLnRhZyAmJiAyNyAhPT0gdHlwZS50YWcgJiYgbnVsbCAhPT0gdHlwZS5jaGlsZCkge1xuICAgICAgICAgICAgICB0eXBlLmNoaWxkLnJldHVybiA9IHR5cGU7XG4gICAgICAgICAgICAgIHR5cGUgPSB0eXBlLmNoaWxkO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgICAgIGZvciAoOyBudWxsID09PSB0eXBlLnNpYmxpbmc7ICkge1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdHlwZS5yZXR1cm4gfHwgdHlwZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIHR5cGUgPSB0eXBlLnJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGUuc2libGluZy5yZXR1cm4gPSB0eXBlLnJldHVybjtcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlLnNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgYTogc3dpdGNoIChcbiAgICAgICAgICAgIChzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50LCByZW5kZXJMYW5lcywgbmV3UHJvcHMpLCByZW5kZXJMYW5lcylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSAhIW5ld1Byb3BzLmF1dG9Gb2N1cztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgXCJpbWdcIjpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICEwO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICExO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNztcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNjpcbiAgICAgIGlmIChjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChcInN0cmluZ1wiICE9PSB0eXBlb2YgbmV3UHJvcHMgJiYgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTY2KSk7XG4gICAgICAgIGN1cnJlbnQgPSByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50O1xuICAgICAgICBpZiAocG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgbmV3UHJvcHMgPSBudWxsO1xuICAgICAgICAgIHR5cGUgPSBoeWRyYXRpb25QYXJlbnRGaWJlcjtcbiAgICAgICAgICBpZiAobnVsbCAhPT0gdHlwZSlcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZS50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIG5ld1Byb3BzID0gdHlwZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgIGN1cnJlbnQubm9kZVZhbHVlID09PSByZW5kZXJMYW5lcyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IG5ld1Byb3BzICYmICEwID09PSBuZXdQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcpIHx8XG4gICAgICAgICAgICBjaGVja0ZvclVubWF0Y2hlZFRleHQoY3VycmVudC5ub2RlVmFsdWUsIHJlbmRlckxhbmVzKVxuICAgICAgICAgICAgICA/ICEwXG4gICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgY3VycmVudCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAoY3VycmVudCA9XG4gICAgICAgICAgICBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoY3VycmVudCkuY3JlYXRlVGV4dE5vZGUoXG4gICAgICAgICAgICAgIG5ld1Byb3BzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChjdXJyZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgIChudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICkge1xuICAgICAgICB0eXBlID0gcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBpZiAobnVsbCAhPT0gbmV3UHJvcHMgJiYgbnVsbCAhPT0gbmV3UHJvcHMuZGVoeWRyYXRlZCkge1xuICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE4KSk7XG4gICAgICAgICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgIHR5cGUgPSBudWxsICE9PSB0eXBlID8gdHlwZS5kZWh5ZHJhdGVkIDogbnVsbDtcbiAgICAgICAgICAgIGlmICghdHlwZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTcpKTtcbiAgICAgICAgICAgIHR5cGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSxcbiAgICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB0eXBlID0gITE7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIG51bGwgIT09IGh5ZHJhdGlvbkVycm9ycyAmJlxuICAgICAgICAgICAgKHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMoaHlkcmF0aW9uRXJyb3JzKSwgKGh5ZHJhdGlvbkVycm9ycyA9IG51bGwpKSxcbiAgICAgICAgICAgICh0eXBlID0gITApO1xuICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTYpXG4gICAgICAgICAgICByZXR1cm4gcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSwgd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGlmICgwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpKVxuICAgICAgICByZXR1cm4gKHdvcmtJblByb2dyZXNzLmxhbmVzID0gcmVuZGVyTGFuZXMpLCB3b3JrSW5Qcm9ncmVzcztcbiAgICAgIHJlbmRlckxhbmVzID0gbnVsbCAhPT0gbmV3UHJvcHM7XG4gICAgICBjdXJyZW50ID0gbnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAocmVuZGVyTGFuZXMpIHtcbiAgICAgICAgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgdHlwZSA9IG51bGw7XG4gICAgICAgIG51bGwgIT09IG5ld1Byb3BzLmFsdGVybmF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IG5ld1Byb3BzLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKHR5cGUgPSBuZXdQcm9wcy5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCk7XG4gICAgICAgIHZhciBjYWNoZSQxNDQgPSBudWxsO1xuICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAoY2FjaGUkMTQ0ID0gbmV3UHJvcHMubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCk7XG4gICAgICAgIGNhY2hlJDE0NCAhPT0gdHlwZSAmJiAobmV3UHJvcHMuZmxhZ3MgfD0gMjA0OCk7XG4gICAgICB9XG4gICAgICByZW5kZXJMYW5lcyAhPT0gY3VycmVudCAmJlxuICAgICAgICByZW5kZXJMYW5lcyAmJlxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQuZmxhZ3MgfD0gODE5Mik7XG4gICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSk7XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJlxuICAgICAgICAgIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxcbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLnR5cGUpLCBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpO1xuICAgICAgdHlwZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCA9PT0gdHlwZSkgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgICAgbmV3UHJvcHMgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpO1xuICAgICAgY2FjaGUkMTQ0ID0gdHlwZS5yZW5kZXJpbmc7XG4gICAgICBpZiAobnVsbCA9PT0gY2FjaGUkMTQ0KVxuICAgICAgICBpZiAobmV3UHJvcHMpIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIDAgIT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgfHxcbiAgICAgICAgICAgIChudWxsICE9PSBjdXJyZW50ICYmIDAgIT09IChjdXJyZW50LmZsYWdzICYgMTI4KSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBmb3IgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gY3VycmVudDsgKSB7XG4gICAgICAgICAgICAgIGNhY2hlJDE0NCA9IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGNhY2hlJDE0NCkge1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyODtcbiAgICAgICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITEpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjYWNoZSQxNDQudXBkYXRlUXVldWU7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDA7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHJlbmRlckxhbmVzO1xuICAgICAgICAgICAgICAgIGZvciAocmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gcmVuZGVyTGFuZXM7IClcbiAgICAgICAgICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3MocmVuZGVyTGFuZXMsIGN1cnJlbnQpLFxuICAgICAgICAgICAgICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nKTtcbiAgICAgICAgICAgICAgICBwdXNoKFxuICAgICAgICAgICAgICAgICAgc3VzcGVuc2VTdGFja0N1cnNvcixcbiAgICAgICAgICAgICAgICAgIChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQgJiAxKSB8IDJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5zaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIG51bGwgIT09IHR5cGUudGFpbCAmJlxuICAgICAgICAgICAgbm93KCkgPiB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lICYmXG4gICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICAobmV3UHJvcHMgPSAhMCksXG4gICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITEpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gNDE5NDMwNCkpO1xuICAgICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFuZXdQcm9wcylcbiAgICAgICAgICBpZiAoKChjdXJyZW50ID0gZmluZEZpcnN0U3VzcGVuZGVkKGNhY2hlJDE0NCkpLCBudWxsICE9PSBjdXJyZW50KSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICAgIChuZXdQcm9wcyA9ICEwKSxcbiAgICAgICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudCksXG4gICAgICAgICAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQpLFxuICAgICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITApLFxuICAgICAgICAgICAgICBudWxsID09PSB0eXBlLnRhaWwgJiZcbiAgICAgICAgICAgICAgICBcImhpZGRlblwiID09PSB0eXBlLnRhaWxNb2RlICYmXG4gICAgICAgICAgICAgICAgIWNhY2hlJDE0NC5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgICAgICAhaXNIeWRyYXRpbmcpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIDIgKiBub3coKSAtIHR5cGUucmVuZGVyaW5nU3RhcnRUaW1lID5cbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSAmJlxuICAgICAgICAgICAgICA1MzY4NzA5MTIgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICAgKG5ld1Byb3BzID0gITApLFxuICAgICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITEpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA0MTk0MzA0KSk7XG4gICAgICAgIHR5cGUuaXNCYWNrd2FyZHNcbiAgICAgICAgICA/ICgoY2FjaGUkMTQ0LnNpYmxpbmcgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjYWNoZSQxNDQpKVxuICAgICAgICAgIDogKChjdXJyZW50ID0gdHlwZS5sYXN0KSxcbiAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnRcbiAgICAgICAgICAgICAgPyAoY3VycmVudC5zaWJsaW5nID0gY2FjaGUkMTQ0KVxuICAgICAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGNhY2hlJDE0NCksXG4gICAgICAgICAgICAodHlwZS5sYXN0ID0gY2FjaGUkMTQ0KSk7XG4gICAgICB9XG4gICAgICBpZiAobnVsbCAhPT0gdHlwZS50YWlsKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHR5cGUudGFpbCksXG4gICAgICAgICAgKHR5cGUucmVuZGVyaW5nID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICh0eXBlLnRhaWwgPSB3b3JrSW5Qcm9ncmVzcy5zaWJsaW5nKSxcbiAgICAgICAgICAodHlwZS5yZW5kZXJpbmdTdGFydFRpbWUgPSBub3coKSksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLnNpYmxpbmcgPSBudWxsKSxcbiAgICAgICAgICAoY3VycmVudCA9IHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICAgICAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBuZXdQcm9wcyA/IChjdXJyZW50ICYgMSkgfCAyIDogY3VycmVudCAmIDEpLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzXG4gICAgICAgICk7XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIHBvcEhpZGRlbkNvbnRleHQoKSxcbiAgICAgICAgKG5ld1Byb3BzID0gbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnRcbiAgICAgICAgICA/IChudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpICE9PSBuZXdQcm9wcyAmJlxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTIpXG4gICAgICAgICAgOiBuZXdQcm9wcyAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MiksXG4gICAgICAgIG5ld1Byb3BzXG4gICAgICAgICAgPyAwICE9PSAocmVuZGVyTGFuZXMgJiA1MzY4NzA5MTIpICYmXG4gICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpICYmXG4gICAgICAgICAgICAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdWJ0cmVlRmxhZ3MgJiA2ICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyKSlcbiAgICAgICAgICA6IGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAocmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMucmV0cnlRdWV1ZSksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IG51bGwpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCksXG4gICAgICAgIChuZXdQcm9wcyA9IG51bGwpLFxuICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAobmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKSxcbiAgICAgICAgbmV3UHJvcHMgIT09IHJlbmRlckxhbmVzICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHJlbmRlckxhbmVzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgKHJlbmRlckxhbmVzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZS5jYWNoZSAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA0OCksXG4gICAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksXG4gICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjU6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1Niwgd29ya0luUHJvZ3Jlc3MudGFnKSk7XG59XG5mdW5jdGlvbiB1bndpbmRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzKSxcbiAgICAgICAgY3VycmVudCAmIDY1NTM2XG4gICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzID0gKGN1cnJlbnQgJiAtNjU1MzcpIHwgMTI4KSwgd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksXG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoKSxcbiAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyksXG4gICAgICAgIDAgIT09IChjdXJyZW50ICYgNjU1MzYpICYmIDAgPT09IChjdXJyZW50ICYgMTI4KVxuICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgMjc6XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5kZWh5ZHJhdGVkKSB7XG4gICAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDApKTtcbiAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzO1xuICAgICAgcmV0dXJuIGN1cnJlbnQgJiA2NTUzNlxuICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgOiBudWxsO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpLCBudWxsO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBwb3BIb3N0Q29udGFpbmVyKCksIG51bGw7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiBwb3BQcm92aWRlcih3b3JrSW5Qcm9ncmVzcy50eXBlKSwgbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBwb3BIaWRkZW5Db250ZXh0KCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSksXG4gICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3MpLFxuICAgICAgICBjdXJyZW50ICYgNjU1MzZcbiAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJldHVybiBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpLCBudWxsO1xuICAgIGNhc2UgMjU6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIHVud2luZEludGVycnVwdGVkV29yayhjdXJyZW50LCBpbnRlcnJ1cHRlZFdvcmspIHtcbiAgcG9wVHJlZUNvbnRleHQoaW50ZXJydXB0ZWRXb3JrKTtcbiAgc3dpdGNoIChpbnRlcnJ1cHRlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAzOlxuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgICAgIHBvcEhvc3RDb250YWluZXIoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICBwb3BIb3N0Q29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHBvcChzdXNwZW5zZVN0YWNrQ3Vyc29yKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgICBwb3BQcm92aWRlcihpbnRlcnJ1cHRlZFdvcmsudHlwZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgIHBvcEhpZGRlbkNvbnRleHQoKTtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI0OlxuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgfVxufVxudmFyIERlZmF1bHRBc3luY0Rpc3BhdGNoZXIgPSB7XG4gICAgZ2V0Q2FjaGVGb3JUeXBlOiBmdW5jdGlvbiAocmVzb3VyY2VUeXBlKSB7XG4gICAgICB2YXIgY2FjaGUgPSByZWFkQ29udGV4dChDYWNoZUNvbnRleHQpLFxuICAgICAgICBjYWNoZUZvclR5cGUgPSBjYWNoZS5kYXRhLmdldChyZXNvdXJjZVR5cGUpO1xuICAgICAgdm9pZCAwID09PSBjYWNoZUZvclR5cGUgJiZcbiAgICAgICAgKChjYWNoZUZvclR5cGUgPSByZXNvdXJjZVR5cGUoKSksXG4gICAgICAgIGNhY2hlLmRhdGEuc2V0KHJlc291cmNlVHlwZSwgY2FjaGVGb3JUeXBlKSk7XG4gICAgICByZXR1cm4gY2FjaGVGb3JUeXBlO1xuICAgIH1cbiAgfSxcbiAgUG9zc2libHlXZWFrTWFwID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgV2Vha01hcCA/IFdlYWtNYXAgOiBNYXAsXG4gIGV4ZWN1dGlvbkNvbnRleHQgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzcyA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzID0gITEsXG4gIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gITEsXG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciA9ICExLFxuICBlbnRhbmdsZWRSZW5kZXJMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlID0gITEsXG4gIGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lID0gSW5maW5pdHksXG4gIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMgPSBudWxsLFxuICBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG51bGwsXG4gIHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzID0gITEsXG4gIHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzID0gbnVsbCxcbiAgcGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgPSAwLFxuICBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNSZW1haW5pbmdMYW5lcyA9IDAsXG4gIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSBudWxsLFxuICBuZXN0ZWRVcGRhdGVDb3VudCA9IDAsXG4gIHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IG51bGw7XG5mdW5jdGlvbiByZXF1ZXN0VXBkYXRlTGFuZSgpIHtcbiAgaWYgKDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgMikgJiYgMCAhPT0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMpXG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgLXdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzO1xuICBpZiAobnVsbCAhPT0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCkge1xuICAgIHZhciBhY3Rpb25TY29wZUxhbmUgPSBjdXJyZW50RW50YW5nbGVkTGFuZTtcbiAgICByZXR1cm4gMCAhPT0gYWN0aW9uU2NvcGVMYW5lID8gYWN0aW9uU2NvcGVMYW5lIDogcmVxdWVzdFRyYW5zaXRpb25MYW5lKCk7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVVcGRhdGVQcmlvcml0eSgpO1xufVxuZnVuY3Rpb24gcmVxdWVzdERlZmVycmVkTGFuZSgpIHtcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUgJiZcbiAgICAod29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUgPVxuICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSB8fCBpc0h5ZHJhdGluZ1xuICAgICAgICA/IGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKClcbiAgICAgICAgOiA1MzY4NzA5MTIpO1xuICB2YXIgc3VzcGVuc2VIYW5kbGVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgbnVsbCAhPT0gc3VzcGVuc2VIYW5kbGVyICYmIChzdXNwZW5zZUhhbmRsZXIuZmxhZ3MgfD0gMzIpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmU7XG59XG5mdW5jdGlvbiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIGxhbmUpIHtcbiAgaWYgKFxuICAgIChyb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgJiYgMiA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHx8XG4gICAgbnVsbCAhPT0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0XG4gIClcbiAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290LCAwKSxcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICByb290LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICExXG4gICAgICApO1xuICBtYXJrUm9vdFVwZGF0ZWQkMShyb290LCBsYW5lKTtcbiAgaWYgKDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgMikgfHwgcm9vdCAhPT0gd29ya0luUHJvZ3Jlc3NSb290KVxuICAgIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJlxuICAgICAgKDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgMikgJiZcbiAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIHw9IGxhbmUpLFxuICAgICAgNCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgICByb290LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICExXG4gICAgICAgICkpLFxuICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3Qocm9vdCRqc2NvbXAkMCwgbGFuZXMsIGZvcmNlU3luYykge1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjcpKTtcbiAgdmFyIHNob3VsZFRpbWVTbGljZSA9XG4gICAgICAoIWZvcmNlU3luYyAmJlxuICAgICAgICAwID09PSAobGFuZXMgJiA2MCkgJiZcbiAgICAgICAgMCA9PT0gKGxhbmVzICYgcm9vdCRqc2NvbXAkMC5leHBpcmVkTGFuZXMpKSB8fFxuICAgICAgY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290JGpzY29tcCQwLCBsYW5lcyksXG4gICAgZXhpdFN0YXR1cyA9IHNob3VsZFRpbWVTbGljZVxuICAgICAgPyByZW5kZXJSb290Q29uY3VycmVudChyb290JGpzY29tcCQwLCBsYW5lcylcbiAgICAgIDogcmVuZGVyUm9vdFN5bmMocm9vdCRqc2NvbXAkMCwgbGFuZXMsICEwKSxcbiAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gc2hvdWxkVGltZVNsaWNlO1xuICBkbyB7XG4gICAgaWYgKDAgPT09IGV4aXRTdGF0dXMpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nICYmXG4gICAgICAgICFzaG91bGRUaW1lU2xpY2UgJiZcbiAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCRqc2NvbXAkMCwgbGFuZXMsIDAsICExKTtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoNiA9PT0gZXhpdFN0YXR1cylcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICByb290JGpzY29tcCQwLFxuICAgICAgICBsYW5lcyxcbiAgICAgICAgMCxcbiAgICAgICAgIXdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgKTtcbiAgICBlbHNlIHtcbiAgICAgIGZvcmNlU3luYyA9IHJvb3QkanNjb21wJDAuY3VycmVudC5hbHRlcm5hdGU7XG4gICAgICBpZiAoXG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgJiZcbiAgICAgICAgIWlzUmVuZGVyQ29uc2lzdGVudFdpdGhFeHRlcm5hbFN0b3Jlcyhmb3JjZVN5bmMpXG4gICAgICApIHtcbiAgICAgICAgZXhpdFN0YXR1cyA9IHJlbmRlclJvb3RTeW5jKHJvb3QkanNjb21wJDAsIGxhbmVzLCAhMSk7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSAhMTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoMiA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gbGFuZXM7XG4gICAgICAgIGlmIChyb290JGpzY29tcCQwLmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzICYgcmVuZGVyV2FzQ29uY3VycmVudClcbiAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gMDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSByb290JGpzY29tcCQwLnBlbmRpbmdMYW5lcyAmIC01MzY4NzA5MTMpLFxuICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgIDAgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgICAgID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgICAgID8gNTM2ODcwOTEyXG4gICAgICAgICAgICAgICAgICA6IDApO1xuICAgICAgICBpZiAoMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB7XG4gICAgICAgICAgbGFuZXMgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICAgICAgYToge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSByb290JGpzY29tcCQwO1xuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnM7XG4gICAgICAgICAgICB2YXIgd2FzUm9vdERlaHlkcmF0ZWQgPSByb290LmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQ7XG4gICAgICAgICAgICB3YXNSb290RGVoeWRyYXRlZCAmJlxuICAgICAgICAgICAgICAocHJlcGFyZUZyZXNoU3RhY2socm9vdCwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KS5mbGFncyB8PSAyNTYpO1xuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcmVuZGVyUm9vdFN5bmMoXG4gICAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCxcbiAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoMiAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgJiZcbiAgICAgICAgICAgICAgICAhd2FzUm9vdERlaHlkcmF0ZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcm9vdC5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyB8PSByZW5kZXJXYXNDb25jdXJyZW50O1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIHw9XG4gICAgICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50O1xuICAgICAgICAgICAgICAgIGV4aXRTdGF0dXMgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IGV4aXRTdGF0dXM7XG4gICAgICAgICAgICAgIG51bGwgIT09IHJlbmRlcldhc0NvbmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICBxdWV1ZVJlY292ZXJhYmxlRXJyb3JzKHJlbmRlcldhc0NvbmN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9ICExO1xuICAgICAgICAgIGlmICgyICE9PSBleGl0U3RhdHVzKSBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKDEgPT09IGV4aXRTdGF0dXMpIHtcbiAgICAgICAgcHJlcGFyZUZyZXNoU3RhY2socm9vdCRqc2NvbXAkMCwgMCk7XG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkKHJvb3QkanNjb21wJDAsIGxhbmVzLCAwLCAhMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYToge1xuICAgICAgICBzaG91bGRUaW1lU2xpY2UgPSByb290JGpzY29tcCQwO1xuICAgICAgICBzd2l0Y2ggKGV4aXRTdGF0dXMpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDUpKTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBpZiAoKGxhbmVzICYgNDE5NDE3NikgPT09IGxhbmVzKSB7XG4gICAgICAgICAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzI5KSk7XG4gICAgICAgIH1cbiAgICAgICAgc2hvdWxkVGltZVNsaWNlLmZpbmlzaGVkV29yayA9IGZvcmNlU3luYztcbiAgICAgICAgc2hvdWxkVGltZVNsaWNlLmZpbmlzaGVkTGFuZXMgPSBsYW5lcztcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChsYW5lcyAmIDYyOTE0NTYwKSA9PT0gbGFuZXMgJiZcbiAgICAgICAgICAoKHJlbmRlcldhc0NvbmN1cnJlbnQgPSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lICsgMzAwIC0gbm93KCkpLFxuICAgICAgICAgIDEwIDwgcmVuZGVyV2FzQ29uY3VycmVudClcbiAgICAgICAgKSB7XG4gICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgIXdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKDAgIT09IGdldE5leHRMYW5lcyhzaG91bGRUaW1lU2xpY2UsIDApKSBicmVhayBhO1xuICAgICAgICAgIHNob3VsZFRpbWVTbGljZS50aW1lb3V0SGFuZGxlID0gc2NoZWR1bGVUaW1lb3V0KFxuICAgICAgICAgICAgY29tbWl0Um9vdFdoZW5SZWFkeS5iaW5kKFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgICAgIGZvcmNlU3luYyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUsXG4gICAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICAtMCxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0Um9vdFdoZW5SZWFkeShcbiAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgZm9yY2VTeW5jLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSxcbiAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgLTAsXG4gICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBicmVhaztcbiAgfSB3aGlsZSAoMSk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290JGpzY29tcCQwKTtcbn1cbmZ1bmN0aW9uIHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMoZXJyb3JzKSB7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzXG4gICAgPyAod29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSBlcnJvcnMpXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycy5wdXNoLmFwcGx5KFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgZXJyb3JzXG4gICAgICApO1xufVxuZnVuY3Rpb24gY29tbWl0Um9vdFdoZW5SZWFkeShcbiAgcm9vdCxcbiAgZmluaXNoZWRXb3JrLFxuICByZWNvdmVyYWJsZUVycm9ycyxcbiAgdHJhbnNpdGlvbnMsXG4gIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSxcbiAgbGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gIGRpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyxcbiAgc3VzcGVuZGVkQ29tbWl0UmVhc29uLFxuICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gIGNvbXBsZXRlZFJlbmRlckVuZFRpbWVcbikge1xuICB2YXIgc3VidHJlZUZsYWdzID0gZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncztcbiAgaWYgKHN1YnRyZWVGbGFncyAmIDgxOTIgfHwgMTY3ODU0MDggPT09IChzdWJ0cmVlRmxhZ3MgJiAxNjc4NTQwOCkpXG4gICAgaWYgKFxuICAgICAgKChzdXNwZW5kZWRTdGF0ZSA9IHsgc3R5bGVzaGVldHM6IG51bGwsIGNvdW50OiAwLCB1bnN1c3BlbmQ6IG5vb3AgfSksXG4gICAgICBhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlcihmaW5pc2hlZFdvcmspLFxuICAgICAgKGZpbmlzaGVkV29yayA9IHdhaXRGb3JDb21taXRUb0JlUmVhZHkoKSksXG4gICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmspXG4gICAgKSB7XG4gICAgICByb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBmaW5pc2hlZFdvcmsoXG4gICAgICAgIGNvbW1pdFJvb3QuYmluZChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgICAgdHJhbnNpdGlvbnMsXG4gICAgICAgICAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICAgICAgICAgIHNwYXduZWRMYW5lLFxuICAgICAgICAgIHVwZGF0ZWRMYW5lcyxcbiAgICAgICAgICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lLFxuICAgICAgICAgIGNvbXBsZXRlZFJlbmRlckVuZFRpbWVcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkKHJvb3QsIGxhbmVzLCBzcGF3bmVkTGFuZSwgIWRpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICBjb21taXRSb290KFxuICAgIHJvb3QsXG4gICAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgdHJhbnNpdGlvbnMsXG4gICAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICAgIHNwYXduZWRMYW5lLFxuICAgIHVwZGF0ZWRMYW5lcyxcbiAgICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgIHN1c3BlbmRlZENvbW1pdFJlYXNvbixcbiAgICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gICAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuICApO1xufVxuZnVuY3Rpb24gaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZpbmlzaGVkV29yaykge1xuICBmb3IgKHZhciBub2RlID0gZmluaXNoZWRXb3JrOyA7ICkge1xuICAgIHZhciB0YWcgPSBub2RlLnRhZztcbiAgICBpZiAoXG4gICAgICAoMCA9PT0gdGFnIHx8IDExID09PSB0YWcgfHwgMTUgPT09IHRhZykgJiZcbiAgICAgIG5vZGUuZmxhZ3MgJiAxNjM4NCAmJlxuICAgICAgKCh0YWcgPSBub2RlLnVwZGF0ZVF1ZXVlKSxcbiAgICAgIG51bGwgIT09IHRhZyAmJiAoKHRhZyA9IHRhZy5zdG9yZXMpLCBudWxsICE9PSB0YWcpKVxuICAgIClcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVjayA9IHRhZ1tpXSxcbiAgICAgICAgICBnZXRTbmFwc2hvdCA9IGNoZWNrLmdldFNuYXBzaG90O1xuICAgICAgICBjaGVjayA9IGNoZWNrLnZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghb2JqZWN0SXMoZ2V0U25hcHNob3QoKSwgY2hlY2spKSByZXR1cm4gITE7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgdGFnID0gbm9kZS5jaGlsZDtcbiAgICBpZiAobm9kZS5zdWJ0cmVlRmxhZ3MgJiAxNjM4NCAmJiBudWxsICE9PSB0YWcpXG4gICAgICAodGFnLnJldHVybiA9IG5vZGUpLCAobm9kZSA9IHRhZyk7XG4gICAgZWxzZSB7XG4gICAgICBpZiAobm9kZSA9PT0gZmluaXNoZWRXb3JrKSBicmVhaztcbiAgICAgIGZvciAoOyBudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgICBpZiAobnVsbCA9PT0gbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykgcmV0dXJuICEwO1xuICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFN1c3BlbmRlZChcbiAgcm9vdCxcbiAgc3VzcGVuZGVkTGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICBkaWRBdHRlbXB0RW50aXJlVHJlZVxuKSB7XG4gIHN1c3BlbmRlZExhbmVzICY9IH53b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcztcbiAgc3VzcGVuZGVkTGFuZXMgJj0gfndvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzO1xuICByb290LnN1c3BlbmRlZExhbmVzIHw9IHN1c3BlbmRlZExhbmVzO1xuICByb290LnBpbmdlZExhbmVzICY9IH5zdXNwZW5kZWRMYW5lcztcbiAgZGlkQXR0ZW1wdEVudGlyZVRyZWUgJiYgKHJvb3Qud2FybUxhbmVzIHw9IHN1c3BlbmRlZExhbmVzKTtcbiAgZGlkQXR0ZW1wdEVudGlyZVRyZWUgPSByb290LmV4cGlyYXRpb25UaW1lcztcbiAgZm9yICh2YXIgbGFuZXMgPSBzdXNwZW5kZWRMYW5lczsgMCA8IGxhbmVzOyApIHtcbiAgICB2YXIgaW5kZXgkNiA9IDMxIC0gY2x6MzIobGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNjtcbiAgICBkaWRBdHRlbXB0RW50aXJlVHJlZVtpbmRleCQ2XSA9IC0xO1xuICAgIGxhbmVzICY9IH5sYW5lO1xuICB9XG4gIDAgIT09IHNwYXduZWRMYW5lICYmXG4gICAgbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIHN1c3BlbmRlZExhbmVzKTtcbn1cbmZ1bmN0aW9uIGZsdXNoU3luY1dvcmskMSgpIHtcbiAgcmV0dXJuIDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgNilcbiAgICA/IChmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSksICExKVxuICAgIDogITA7XG59XG5mdW5jdGlvbiByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKSB7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgIGlmICgwID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbilcbiAgICAgIHZhciBpbnRlcnJ1cHRlZFdvcmsgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm47XG4gICAgZWxzZVxuICAgICAgKGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbCksXG4gICAgICAgIHJlc2V0SG9va3NPblVud2luZChpbnRlcnJ1cHRlZFdvcmspLFxuICAgICAgICAodGhlbmFibGVTdGF0ZSQxID0gbnVsbCksXG4gICAgICAgICh0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMCksXG4gICAgICAgIChpbnRlcnJ1cHRlZFdvcmsgPSB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgZm9yICg7IG51bGwgIT09IGludGVycnVwdGVkV29yazsgKVxuICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrKGludGVycnVwdGVkV29yay5hbHRlcm5hdGUsIGludGVycnVwdGVkV29yayksXG4gICAgICAgIChpbnRlcnJ1cHRlZFdvcmsgPSBpbnRlcnJ1cHRlZFdvcmsucmV0dXJuKTtcbiAgICB3b3JrSW5Qcm9ncmVzcyA9IG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGxhbmVzKSB7XG4gIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgcm9vdC5maW5pc2hlZExhbmVzID0gMDtcbiAgdmFyIHRpbWVvdXRIYW5kbGUgPSByb290LnRpbWVvdXRIYW5kbGU7XG4gIC0xICE9PSB0aW1lb3V0SGFuZGxlICYmXG4gICAgKChyb290LnRpbWVvdXRIYW5kbGUgPSAtMSksIGNhbmNlbFRpbWVvdXQodGltZW91dEhhbmRsZSkpO1xuICB0aW1lb3V0SGFuZGxlID0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0O1xuICBudWxsICE9PSB0aW1lb3V0SGFuZGxlICYmXG4gICAgKChyb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBudWxsKSwgdGltZW91dEhhbmRsZSgpKTtcbiAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IHJvb3Q7XG4gIHdvcmtJblByb2dyZXNzID0gdGltZW91dEhhbmRsZSA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKHJvb3QuY3VycmVudCwgbnVsbCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gbGFuZXM7XG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9ICExO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgbGFuZXMpO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMTtcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID1cbiAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID1cbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPVxuICAgICAgMDtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID1cbiAgICBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlID0gITE7XG4gIDAgIT09IChsYW5lcyAmIDgpICYmIChsYW5lcyB8PSBsYW5lcyAmIDMyKTtcbiAgdmFyIGFsbEVudGFuZ2xlZExhbmVzID0gcm9vdC5lbnRhbmdsZWRMYW5lcztcbiAgaWYgKDAgIT09IGFsbEVudGFuZ2xlZExhbmVzKVxuICAgIGZvciAoXG4gICAgICByb290ID0gcm9vdC5lbnRhbmdsZW1lbnRzLCBhbGxFbnRhbmdsZWRMYW5lcyAmPSBsYW5lcztcbiAgICAgIDAgPCBhbGxFbnRhbmdsZWRMYW5lcztcblxuICAgICkge1xuICAgICAgdmFyIGluZGV4JDQgPSAzMSAtIGNsejMyKGFsbEVudGFuZ2xlZExhbmVzKSxcbiAgICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNDtcbiAgICAgIGxhbmVzIHw9IHJvb3RbaW5kZXgkNF07XG4gICAgICBhbGxFbnRhbmdsZWRMYW5lcyAmPSB+bGFuZTtcbiAgICB9XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gbGFuZXM7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHRpbWVvdXRIYW5kbGU7XG59XG5mdW5jdGlvbiBoYW5kbGVUaHJvdyhyb290LCB0aHJvd25WYWx1ZSkge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgdGhyb3duVmFsdWUgPT09IFN1c3BlbnNlRXhjZXB0aW9uXG4gICAgPyAoKHRocm93blZhbHVlID0gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAzKSlcbiAgICA6IHRocm93blZhbHVlID09PSBTdXNwZW5zZXlDb21taXRFeGNlcHRpb25cbiAgICAgID8gKCh0aHJvd25WYWx1ZSA9IGdldFN1c3BlbmRlZFRoZW5hYmxlKCkpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA0KSlcbiAgICAgIDogKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID1cbiAgICAgICAgICB0aHJvd25WYWx1ZSA9PT0gU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uXG4gICAgICAgICAgICA/IDhcbiAgICAgICAgICAgIDogbnVsbCAhPT0gdGhyb3duVmFsdWUgJiZcbiAgICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgdGhyb3duVmFsdWUgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0aHJvd25WYWx1ZS50aGVuXG4gICAgICAgICAgICAgID8gNlxuICAgICAgICAgICAgICA6IDEpO1xuICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gdGhyb3duVmFsdWU7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzICYmXG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMSksXG4gICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgIHJvb3QsXG4gICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICkpO1xufVxuZnVuY3Rpb24gcHVzaERpc3BhdGNoZXIoKSB7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkg7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG4gIHJldHVybiBudWxsID09PSBwcmV2RGlzcGF0Y2hlciA/IENvbnRleHRPbmx5RGlzcGF0Y2hlciA6IHByZXZEaXNwYXRjaGVyO1xufVxuZnVuY3Rpb24gcHVzaEFzeW5jRGlzcGF0Y2hlcigpIHtcbiAgdmFyIHByZXZBc3luY0Rpc3BhdGNoZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5BO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gRGVmYXVsdEFzeW5jRGlzcGF0Y2hlcjtcbiAgcmV0dXJuIHByZXZBc3luY0Rpc3BhdGNoZXI7XG59XG5mdW5jdGlvbiByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCkge1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNDtcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzIHx8XG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDQxOTQxNzYpICE9PVxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiZcbiAgICAgIG51bGwgIT09IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpIHx8XG4gICAgKHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gITApO1xuICAoMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyAmIDEzNDIxNzcyNykgJiZcbiAgICAwID09PSAod29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgJiAxMzQyMTc3MjcpKSB8fFxuICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCB8fFxuICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290LFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMsXG4gICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICExXG4gICAgKTtcbn1cbmZ1bmN0aW9uIHJlbmRlclJvb3RTeW5jKHJvb3QsIGxhbmVzLCBzaG91bGRZaWVsZEZvclByZXJlbmRlcmluZykge1xuICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICBleGVjdXRpb25Db250ZXh0IHw9IDI7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IHB1c2hEaXNwYXRjaGVyKCksXG4gICAgcHJldkFzeW5jRGlzcGF0Y2hlciA9IHB1c2hBc3luY0Rpc3BhdGNoZXIoKTtcbiAgaWYgKHdvcmtJblByb2dyZXNzUm9vdCAhPT0gcm9vdCB8fCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAhPT0gbGFuZXMpXG4gICAgKHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMgPSBudWxsKSwgcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpO1xuICBsYW5lcyA9ICExO1xuICB2YXIgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG4gIGE6IGRvXG4gICAgdHJ5IHtcbiAgICAgIGlmICgwICE9PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiAmJiBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICB2YXIgdW5pdE9mV29yayA9IHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHRocm93blZhbHVlID0gd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZTtcbiAgICAgICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikge1xuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjaygpO1xuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDY7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgbnVsbCA9PT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCAmJiAobGFuZXMgPSAhMCk7XG4gICAgICAgICAgICB2YXIgcmVhc29uID0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb247XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgdW5pdE9mV29yaywgdGhyb3duVmFsdWUsIHJlYXNvbik7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nICYmXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgKHJlYXNvbiA9IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCksXG4gICAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgdW5pdE9mV29yaywgdGhyb3duVmFsdWUsIHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdvcmtMb29wU3luYygpO1xuICAgICAgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSQxNjQpIHtcbiAgICAgIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlJDE2NCk7XG4gICAgfVxuICB3aGlsZSAoMSk7XG4gIGxhbmVzICYmIHJvb3Quc2hlbGxTdXNwZW5kQ291bnRlcisrO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IHByZXZEaXNwYXRjaGVyO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwpLFxuICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDApLFxuICAgIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKSk7XG4gIHJldHVybiBleGl0U3RhdHVzO1xufVxuZnVuY3Rpb24gd29ya0xvb3BTeW5jKCkge1xuICBmb3IgKDsgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3M7ICkgcGVyZm9ybVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gcmVuZGVyUm9vdENvbmN1cnJlbnQocm9vdCwgbGFuZXMpIHtcbiAgdmFyIHByZXZFeGVjdXRpb25Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dDtcbiAgZXhlY3V0aW9uQ29udGV4dCB8PSAyO1xuICB2YXIgcHJldkRpc3BhdGNoZXIgPSBwdXNoRGlzcGF0Y2hlcigpLFxuICAgIHByZXZBc3luY0Rpc3BhdGNoZXIgPSBwdXNoQXN5bmNEaXNwYXRjaGVyKCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdCAhPT0gcm9vdCB8fCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAhPT0gbGFuZXNcbiAgICA/ICgod29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBub3coKSArIDUwMCksXG4gICAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcykpXG4gICAgOiAod29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKFxuICAgICAgICByb290LFxuICAgICAgICBsYW5lc1xuICAgICAgKSk7XG4gIGE6IGRvXG4gICAgdHJ5IHtcbiAgICAgIGlmICgwICE9PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiAmJiBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICBsYW5lcyA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICB2YXIgdGhyb3duVmFsdWUgPSB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlO1xuICAgICAgICBiOiBzd2l0Y2ggKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBpZiAoaXNUaGVuYWJsZVJlc29sdmVkKHRocm93blZhbHVlKSkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKGxhbmVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgMiA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gJiZcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPT09IHJvb3QgJiZcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA3KTtcbiAgICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRocm93blZhbHVlLnRoZW4obGFuZXMsIGxhbmVzKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA3O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDU7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlzVGhlbmFibGVSZXNvbHZlZCh0aHJvd25WYWx1ZSlcbiAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgICByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKGxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgNykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgdmFyIHJlc291cmNlID0gbnVsbDtcbiAgICAgICAgICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgcmVzb3VyY2UgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgICAgdmFyIGhvc3RGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZSA/IHByZWxvYWRSZXNvdXJjZShyZXNvdXJjZSkgOiAxKSB7XG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gaG9zdEZpYmVyLnNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gc2libGluZykgd29ya0luUHJvZ3Jlc3MgPSBzaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5GaWJlciA9IGhvc3RGaWJlci5yZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVVbml0T2ZXb3JrKHJldHVybkZpYmVyKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCA1KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDYpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNjtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdvcmtMb29wQ29uY3VycmVudCgpO1xuICAgICAgYnJlYWs7XG4gICAgfSBjYXRjaCAodGhyb3duVmFsdWUkMTY2KSB7XG4gICAgICBoYW5kbGVUaHJvdyhyb290LCB0aHJvd25WYWx1ZSQxNjYpO1xuICAgIH1cbiAgd2hpbGUgKDEpO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBwcmV2RGlzcGF0Y2hlcjtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuQSA9IHByZXZBc3luY0Rpc3BhdGNoZXI7XG4gIGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dDtcbiAgaWYgKG51bGwgIT09IHdvcmtJblByb2dyZXNzKSByZXR1cm4gMDtcbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwO1xuICBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzO1xufVxuZnVuY3Rpb24gd29ya0xvb3BDb25jdXJyZW50KCkge1xuICBmb3IgKDsgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MgJiYgIXNob3VsZFlpZWxkKCk7IClcbiAgICBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiBwZXJmb3JtVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBuZXh0ID0gYmVnaW5Xb3JrKHVuaXRPZldvcmsuYWx0ZXJuYXRlLCB1bml0T2ZXb3JrLCBlbnRhbmdsZWRSZW5kZXJMYW5lcyk7XG4gIHVuaXRPZldvcmsubWVtb2l6ZWRQcm9wcyA9IHVuaXRPZldvcmsucGVuZGluZ1Byb3BzO1xuICBudWxsID09PSBuZXh0ID8gY29tcGxldGVVbml0T2ZXb3JrKHVuaXRPZldvcmspIDogKHdvcmtJblByb2dyZXNzID0gbmV4dCk7XG59XG5mdW5jdGlvbiByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKHVuaXRPZldvcmspIHtcbiAgdmFyIG5leHQgPSB1bml0T2ZXb3JrO1xuICB2YXIgY3VycmVudCA9IG5leHQuYWx0ZXJuYXRlO1xuICBzd2l0Y2ggKG5leHQudGFnKSB7XG4gICAgY2FzZSAxNTpcbiAgICBjYXNlIDA6XG4gICAgICBuZXh0ID0gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIG5leHQucGVuZGluZ1Byb3BzLFxuICAgICAgICBuZXh0LnR5cGUsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExOlxuICAgICAgbmV4dCA9IHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICBuZXh0LFxuICAgICAgICBuZXh0LnBlbmRpbmdQcm9wcyxcbiAgICAgICAgbmV4dC50eXBlLnJlbmRlcixcbiAgICAgICAgbmV4dC5yZWYsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgcmVzZXRIb29rc09uVW53aW5kKG5leHQpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoY3VycmVudCwgbmV4dCksXG4gICAgICAgIChuZXh0ID0gd29ya0luUHJvZ3Jlc3MgPVxuICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3MobmV4dCwgZW50YW5nbGVkUmVuZGVyTGFuZXMpKSxcbiAgICAgICAgKG5leHQgPSBiZWdpbldvcmsoY3VycmVudCwgbmV4dCwgZW50YW5nbGVkUmVuZGVyTGFuZXMpKTtcbiAgfVxuICB1bml0T2ZXb3JrLm1lbW9pemVkUHJvcHMgPSB1bml0T2ZXb3JrLnBlbmRpbmdQcm9wcztcbiAgbnVsbCA9PT0gbmV4dCA/IGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSA6ICh3b3JrSW5Qcm9ncmVzcyA9IG5leHQpO1xufVxuZnVuY3Rpb24gdGhyb3dBbmRVbndpbmRXb3JrTG9vcChcbiAgcm9vdCxcbiAgdW5pdE9mV29yayxcbiAgdGhyb3duVmFsdWUsXG4gIHN1c3BlbmRlZFJlYXNvblxuKSB7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgcmVzZXRIb29rc09uVW53aW5kKHVuaXRPZldvcmspO1xuICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMDtcbiAgdmFyIHJldHVybkZpYmVyID0gdW5pdE9mV29yay5yZXR1cm47XG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgdGhyb3dFeGNlcHRpb24oXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICB1bml0T2ZXb3JrLFxuICAgICAgICB0aHJvd25WYWx1ZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxO1xuICAgICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodGhyb3duVmFsdWUsIHJvb3QuY3VycmVudClcbiAgICAgICk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChudWxsICE9PSByZXR1cm5GaWJlcikgdGhyb3cgKCh3b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyKSwgZXJyb3IpO1xuICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxO1xuICAgIGxvZ1VuY2F1Z2h0RXJyb3IoXG4gICAgICByb290LFxuICAgICAgY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodGhyb3duVmFsdWUsIHJvb3QuY3VycmVudClcbiAgICApO1xuICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHVuaXRPZldvcmsuZmxhZ3MgJiAzMjc2OCkge1xuICAgIGlmIChpc0h5ZHJhdGluZyB8fCAxID09PSBzdXNwZW5kZWRSZWFzb24pIHJvb3QgPSAhMDtcbiAgICBlbHNlIGlmIChcbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nIHx8XG4gICAgICAwICE9PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA1MzY4NzA5MTIpXG4gICAgKVxuICAgICAgcm9vdCA9ICExO1xuICAgIGVsc2UgaWYgKFxuICAgICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgPSByb290ID0gITApLFxuICAgICAgMiA9PT0gc3VzcGVuZGVkUmVhc29uIHx8IDMgPT09IHN1c3BlbmRlZFJlYXNvbiB8fCA2ID09PSBzdXNwZW5kZWRSZWFzb24pXG4gICAgKVxuICAgICAgKHN1c3BlbmRlZFJlYXNvbiA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgICBudWxsICE9PSBzdXNwZW5kZWRSZWFzb24gJiZcbiAgICAgICAgICAxMyA9PT0gc3VzcGVuZGVkUmVhc29uLnRhZyAmJlxuICAgICAgICAgIChzdXNwZW5kZWRSZWFzb24uZmxhZ3MgfD0gMTYzODQpO1xuICAgIHVud2luZFVuaXRPZldvcmsodW5pdE9mV29yaywgcm9vdCk7XG4gIH0gZWxzZSBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yayk7XG59XG5mdW5jdGlvbiBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgY29tcGxldGVkV29yayA9IHVuaXRPZldvcms7XG4gIGRvIHtcbiAgICBpZiAoMCAhPT0gKGNvbXBsZXRlZFdvcmsuZmxhZ3MgJiAzMjc2OCkpIHtcbiAgICAgIHVud2luZFVuaXRPZldvcmsoXG4gICAgICAgIGNvbXBsZXRlZFdvcmssXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdW5pdE9mV29yayA9IGNvbXBsZXRlZFdvcmsucmV0dXJuO1xuICAgIHZhciBuZXh0ID0gY29tcGxldGVXb3JrKFxuICAgICAgY29tcGxldGVkV29yay5hbHRlcm5hdGUsXG4gICAgICBjb21wbGV0ZWRXb3JrLFxuICAgICAgZW50YW5nbGVkUmVuZGVyTGFuZXNcbiAgICApO1xuICAgIGlmIChudWxsICE9PSBuZXh0KSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbXBsZXRlZFdvcmsgPSBjb21wbGV0ZWRXb3JrLnNpYmxpbmc7XG4gICAgaWYgKG51bGwgIT09IGNvbXBsZXRlZFdvcmspIHtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gY29tcGxldGVkV29yaztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcbiAgfSB3aGlsZSAobnVsbCAhPT0gY29tcGxldGVkV29yayk7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA1KTtcbn1cbmZ1bmN0aW9uIHVud2luZFVuaXRPZldvcmsodW5pdE9mV29yaywgc2tpcFNpYmxpbmdzKSB7XG4gIGRvIHtcbiAgICB2YXIgbmV4dCA9IHVud2luZFdvcmsodW5pdE9mV29yay5hbHRlcm5hdGUsIHVuaXRPZldvcmspO1xuICAgIGlmIChudWxsICE9PSBuZXh0KSB7XG4gICAgICBuZXh0LmZsYWdzICY9IDMyNzY3O1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBuZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXh0ID0gdW5pdE9mV29yay5yZXR1cm47XG4gICAgbnVsbCAhPT0gbmV4dCAmJlxuICAgICAgKChuZXh0LmZsYWdzIHw9IDMyNzY4KSwgKG5leHQuc3VidHJlZUZsYWdzID0gMCksIChuZXh0LmRlbGV0aW9ucyA9IG51bGwpKTtcbiAgICBpZiAoXG4gICAgICAhc2tpcFNpYmxpbmdzICYmXG4gICAgICAoKHVuaXRPZldvcmsgPSB1bml0T2ZXb3JrLnNpYmxpbmcpLCBudWxsICE9PSB1bml0T2ZXb3JrKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1bml0T2ZXb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IHVuaXRPZldvcmsgPSBuZXh0O1xuICB9IHdoaWxlIChudWxsICE9PSB1bml0T2ZXb3JrKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDY7XG4gIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdFJvb3QoXG4gIHJvb3QsXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICBzcGF3bmVkTGFuZSxcbiAgdXBkYXRlZExhbmVzLFxuICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICBzdXNwZW5kZWRDb21taXRSZWFzb24sXG4gIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgcHJldmlvdXNVcGRhdGVMYW5lUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMiksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGwpLFxuICAgICAgY29tbWl0Um9vdEltcGwoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICB0cmFuc2l0aW9ucyxcbiAgICAgICAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICAgICAgICBwcmV2aW91c1VwZGF0ZUxhbmVQcmlvcml0eSxcbiAgICAgICAgc3Bhd25lZExhbmUsXG4gICAgICAgIHVwZGF0ZWRMYW5lcyxcbiAgICAgICAgc3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgc3VzcGVuZGVkQ29tbWl0UmVhc29uLFxuICAgICAgICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gICAgICAgIGNvbXBsZXRlZFJlbmRlckVuZFRpbWVcbiAgICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbiksXG4gICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5KTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0Um9vdEltcGwoXG4gIHJvb3QsXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICByZW5kZXJQcmlvcml0eUxldmVsLFxuICBzcGF3bmVkTGFuZSxcbiAgdXBkYXRlZExhbmVzLFxuICBzdXNwZW5kZWRSZXRyeUxhbmVzXG4pIHtcbiAgZG8gZmx1c2hQYXNzaXZlRWZmZWN0cygpO1xuICB3aGlsZSAobnVsbCAhPT0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMpO1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjcpKTtcbiAgdmFyIGZpbmlzaGVkV29yayA9IHJvb3QuZmluaXNoZWRXb3JrO1xuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgPSByb290LmZpbmlzaGVkTGFuZXM7XG4gIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmspIHJldHVybiBudWxsO1xuICByb290LmZpbmlzaGVkV29yayA9IG51bGw7XG4gIHJvb3QuZmluaXNoZWRMYW5lcyA9IDA7XG4gIGlmIChmaW5pc2hlZFdvcmsgPT09IHJvb3QuY3VycmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNzcpKTtcbiAgcm9vdC5jYWxsYmFja05vZGUgPSBudWxsO1xuICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSAwO1xuICByb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBudWxsO1xuICB2YXIgcmVtYWluaW5nTGFuZXMgPSBmaW5pc2hlZFdvcmsubGFuZXMgfCBmaW5pc2hlZFdvcmsuY2hpbGRMYW5lcztcbiAgcmVtYWluaW5nTGFuZXMgfD0gY29uY3VycmVudGx5VXBkYXRlZExhbmVzO1xuICBtYXJrUm9vdEZpbmlzaGVkKFxuICAgIHJvb3QsXG4gICAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICAgIHJlbWFpbmluZ0xhbmVzLFxuICAgIHNwYXduZWRMYW5lLFxuICAgIHVwZGF0ZWRMYW5lcyxcbiAgICBzdXNwZW5kZWRSZXRyeUxhbmVzXG4gICk7XG4gIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJlxuICAgICgod29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsKSxcbiAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwKSk7XG4gICgwID09PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KSAmJlxuICAgIDAgPT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAxMDI1NikpIHx8XG4gICAgcm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgfHxcbiAgICAoKHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzID0gITApLFxuICAgIChwZW5kaW5nUGFzc2l2ZUVmZmVjdHNSZW1haW5pbmdMYW5lcyA9IHJlbWFpbmluZ0xhbmVzKSxcbiAgICAocGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zKSxcbiAgICBzY2hlZHVsZUNhbGxiYWNrJDEoTm9ybWFsUHJpb3JpdHkkMSwgZnVuY3Rpb24gKCkge1xuICAgICAgZmx1c2hQYXNzaXZlRWZmZWN0cyghMCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KSk7XG4gIHRyYW5zaXRpb25zID0gMCAhPT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDE1OTkwKTtcbiAgMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxNTk5MCkgfHwgdHJhbnNpdGlvbnNcbiAgICA/ICgodHJhbnNpdGlvbnMgPSBSZWFjdFNoYXJlZEludGVybmFscy5UKSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksXG4gICAgICAoc3Bhd25lZExhbmUgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wKSxcbiAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMiksXG4gICAgICAodXBkYXRlZExhbmVzID0gZXhlY3V0aW9uQ29udGV4dCksXG4gICAgICAoZXhlY3V0aW9uQ29udGV4dCB8PSA0KSxcbiAgICAgIGNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspLFxuICAgICAgY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmssIHJvb3QpLFxuICAgICAgcmVzdG9yZVNlbGVjdGlvbihzZWxlY3Rpb25JbmZvcm1hdGlvbiwgcm9vdC5jb250YWluZXJJbmZvKSxcbiAgICAgIChfZW5hYmxlZCA9ICEhZXZlbnRzRW5hYmxlZCksXG4gICAgICAoc2VsZWN0aW9uSW5mb3JtYXRpb24gPSBldmVudHNFbmFibGVkID0gbnVsbCksXG4gICAgICAocm9vdC5jdXJyZW50ID0gZmluaXNoZWRXb3JrKSxcbiAgICAgIGNvbW1pdExheW91dEVmZmVjdE9uRmliZXIocm9vdCwgZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKSxcbiAgICAgIHJlcXVlc3RQYWludCgpLFxuICAgICAgKGV4ZWN1dGlvbkNvbnRleHQgPSB1cGRhdGVkTGFuZXMpLFxuICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBzcGF3bmVkTGFuZSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHRyYW5zaXRpb25zKSlcbiAgICA6IChyb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcmspO1xuICByb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0c1xuICAgID8gKChyb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cyA9ICExKSxcbiAgICAgIChyb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyA9IHJvb3QpLFxuICAgICAgKHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzID0gZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlKSlcbiAgICA6IHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCwgcmVtYWluaW5nTGFuZXMpO1xuICByZW1haW5pbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAwID09PSByZW1haW5pbmdMYW5lcyAmJiAobGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPSBudWxsKTtcbiAgb25Db21taXRSb290KGZpbmlzaGVkV29yay5zdGF0ZU5vZGUsIHJlbmRlclByaW9yaXR5TGV2ZWwpO1xuICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG4gIGlmIChudWxsICE9PSByZWNvdmVyYWJsZUVycm9ycylcbiAgICBmb3IgKFxuICAgICAgcmVuZGVyUHJpb3JpdHlMZXZlbCA9IHJvb3Qub25SZWNvdmVyYWJsZUVycm9yLCBmaW5pc2hlZFdvcmsgPSAwO1xuICAgICAgZmluaXNoZWRXb3JrIDwgcmVjb3ZlcmFibGVFcnJvcnMubGVuZ3RoO1xuICAgICAgZmluaXNoZWRXb3JrKytcbiAgICApXG4gICAgICAocmVtYWluaW5nTGFuZXMgPSByZWNvdmVyYWJsZUVycm9yc1tmaW5pc2hlZFdvcmtdKSxcbiAgICAgICAgcmVuZGVyUHJpb3JpdHlMZXZlbChyZW1haW5pbmdMYW5lcy52YWx1ZSwge1xuICAgICAgICAgIGNvbXBvbmVudFN0YWNrOiByZW1haW5pbmdMYW5lcy5zdGFja1xuICAgICAgICB9KTtcbiAgMCAhPT0gKHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzICYgMykgJiYgZmx1c2hQYXNzaXZlRWZmZWN0cygpO1xuICByZW1haW5pbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAwICE9PSAoZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlICYgNDE5NDIxOCkgJiYgMCAhPT0gKHJlbWFpbmluZ0xhbmVzICYgNDIpXG4gICAgPyByb290ID09PSByb290V2l0aE5lc3RlZFVwZGF0ZXNcbiAgICAgID8gbmVzdGVkVXBkYXRlQ291bnQrK1xuICAgICAgOiAoKG5lc3RlZFVwZGF0ZUNvdW50ID0gMCksIChyb290V2l0aE5lc3RlZFVwZGF0ZXMgPSByb290KSlcbiAgICA6IChuZXN0ZWRVcGRhdGVDb3VudCA9IDApO1xuICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290LCByZW1haW5pbmdMYW5lcykge1xuICAwID09PSAocm9vdC5wb29sZWRDYWNoZUxhbmVzICY9IHJlbWFpbmluZ0xhbmVzKSAmJlxuICAgICgocmVtYWluaW5nTGFuZXMgPSByb290LnBvb2xlZENhY2hlKSxcbiAgICBudWxsICE9IHJlbWFpbmluZ0xhbmVzICYmXG4gICAgICAoKHJvb3QucG9vbGVkQ2FjaGUgPSBudWxsKSwgcmVsZWFzZUNhY2hlKHJlbWFpbmluZ0xhbmVzKSkpO1xufVxuZnVuY3Rpb24gZmx1c2hQYXNzaXZlRWZmZWN0cygpIHtcbiAgaWYgKG51bGwgIT09IHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzKSB7XG4gICAgdmFyIHJvb3QkMTcwID0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMsXG4gICAgICByZW1haW5pbmdMYW5lcyA9IHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzO1xuICAgIHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gMDtcbiAgICB2YXIgcmVuZGVyUHJpb3JpdHkgPSBsYW5lc1RvRXZlbnRQcmlvcml0eShwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyksXG4gICAgICBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgICBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgICB0cnkge1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDMyID4gcmVuZGVyUHJpb3JpdHkgPyAzMiA6IHJlbmRlclByaW9yaXR5O1xuICAgICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gICAgICBpZiAobnVsbCA9PT0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMpXG4gICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICAgIGVsc2Uge1xuICAgICAgICByZW5kZXJQcmlvcml0eSA9IHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnM7XG4gICAgICAgIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSBudWxsO1xuICAgICAgICB2YXIgcm9vdCA9IHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzLFxuICAgICAgICAgIGxhbmVzID0gcGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXM7XG4gICAgICAgIHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzID0gbnVsbDtcbiAgICAgICAgcGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgPSAwO1xuICAgICAgICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMzMSkpO1xuICAgICAgICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICAgICAgICBleGVjdXRpb25Db250ZXh0IHw9IDQ7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlcihyb290LmN1cnJlbnQpO1xuICAgICAgICBjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyKHJvb3QsIHJvb3QuY3VycmVudCwgbGFuZXMsIHJlbmRlclByaW9yaXR5KTtcbiAgICAgICAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICAgICAgICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBpbmplY3RlZEhvb2sgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2sub25Qb3N0Q29tbWl0RmliZXJSb290XG4gICAgICAgIClcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW5qZWN0ZWRIb29rLm9uUG9zdENvbW1pdEZpYmVyUm9vdChyZW5kZXJlcklELCByb290KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICEwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbiksXG4gICAgICAgIHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCQxNzAsIHJlbWFpbmluZ0xhbmVzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3JPblJvb3Qocm9vdEZpYmVyLCBzb3VyY2VGaWJlciwgZXJyb3IpIHtcbiAgc291cmNlRmliZXIgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihlcnJvciwgc291cmNlRmliZXIpO1xuICBzb3VyY2VGaWJlciA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShyb290RmliZXIuc3RhdGVOb2RlLCBzb3VyY2VGaWJlciwgMik7XG4gIHJvb3RGaWJlciA9IGVucXVldWVVcGRhdGUocm9vdEZpYmVyLCBzb3VyY2VGaWJlciwgMik7XG4gIG51bGwgIT09IHJvb3RGaWJlciAmJlxuICAgIChtYXJrUm9vdFVwZGF0ZWQkMShyb290RmliZXIsIDIpLCBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdEZpYmVyKSk7XG59XG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihzb3VyY2VGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpIHtcbiAgaWYgKDMgPT09IHNvdXJjZUZpYmVyLnRhZylcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChzb3VyY2VGaWJlciwgc291cmNlRmliZXIsIGVycm9yKTtcbiAgZWxzZVxuICAgIGZvciAoOyBudWxsICE9PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yOyApIHtcbiAgICAgIGlmICgzID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnRhZykge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChcbiAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgIHNvdXJjZUZpYmVyLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIGlmICgxID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnRhZykge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT1cbiAgICAgICAgICAgIHR5cGVvZiBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIHx8XG4gICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZENhdGNoICYmXG4gICAgICAgICAgICAobnVsbCA9PT0gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgfHxcbiAgICAgICAgICAgICAgIWxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmhhcyhpbnN0YW5jZSkpKVxuICAgICAgICApIHtcbiAgICAgICAgICBzb3VyY2VGaWJlciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBzb3VyY2VGaWJlcik7XG4gICAgICAgICAgZXJyb3IgPSBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKDIpO1xuICAgICAgICAgIGluc3RhbmNlID0gZW5xdWV1ZVVwZGF0ZShuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvciwgMik7XG4gICAgICAgICAgbnVsbCAhPT0gaW5zdGFuY2UgJiZcbiAgICAgICAgICAgIChpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZShcbiAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICBzb3VyY2VGaWJlclxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG1hcmtSb290VXBkYXRlZCQxKGluc3RhbmNlLCAyKSxcbiAgICAgICAgICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChpbnN0YW5jZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci5yZXR1cm47XG4gICAgfVxufVxuZnVuY3Rpb24gYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHdha2VhYmxlLCBsYW5lcykge1xuICB2YXIgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGU7XG4gIGlmIChudWxsID09PSBwaW5nQ2FjaGUpIHtcbiAgICBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtNYXAoKTtcbiAgICB2YXIgdGhyZWFkSURzID0gbmV3IFNldCgpO1xuICAgIHBpbmdDYWNoZS5zZXQod2FrZWFibGUsIHRocmVhZElEcyk7XG4gIH0gZWxzZVxuICAgICh0aHJlYWRJRHMgPSBwaW5nQ2FjaGUuZ2V0KHdha2VhYmxlKSksXG4gICAgICB2b2lkIDAgPT09IHRocmVhZElEcyAmJlxuICAgICAgICAoKHRocmVhZElEcyA9IG5ldyBTZXQoKSksIHBpbmdDYWNoZS5zZXQod2FrZWFibGUsIHRocmVhZElEcykpO1xuICB0aHJlYWRJRHMuaGFzKGxhbmVzKSB8fFxuICAgICgod29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyID0gITApLFxuICAgIHRocmVhZElEcy5hZGQobGFuZXMpLFxuICAgIChyb290ID0gcGluZ1N1c3BlbmRlZFJvb3QuYmluZChudWxsLCByb290LCB3YWtlYWJsZSwgbGFuZXMpKSxcbiAgICB3YWtlYWJsZS50aGVuKHJvb3QsIHJvb3QpKTtcbn1cbmZ1bmN0aW9uIHBpbmdTdXNwZW5kZWRSb290KHJvb3QsIHdha2VhYmxlLCBwaW5nZWRMYW5lcykge1xuICB2YXIgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGU7XG4gIG51bGwgIT09IHBpbmdDYWNoZSAmJiBwaW5nQ2FjaGUuZGVsZXRlKHdha2VhYmxlKTtcbiAgcm9vdC5waW5nZWRMYW5lcyB8PSByb290LnN1c3BlbmRlZExhbmVzICYgcGluZ2VkTGFuZXM7XG4gIHJvb3Qud2FybUxhbmVzICY9IH5waW5nZWRMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NSb290ID09PSByb290ICYmXG4gICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgcGluZ2VkTGFuZXMpID09PSBwaW5nZWRMYW5lcyAmJlxuICAgICg0ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzIHx8XG4gICAgKDMgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDYyOTE0NTYwKSA9PT1cbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiZcbiAgICAgIDMwMCA+IG5vdygpIC0gZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSlcbiAgICAgID8gMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSAmJiBwcmVwYXJlRnJlc2hTdGFjayhyb290LCAwKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgfD0gcGluZ2VkTGFuZXMpLFxuICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9PT0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiZcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPSAwKSk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbn1cbmZ1bmN0aW9uIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpIHtcbiAgMCA9PT0gcmV0cnlMYW5lICYmIChyZXRyeUxhbmUgPSBjbGFpbU5leHRSZXRyeUxhbmUoKSk7XG4gIGJvdW5kYXJ5RmliZXIgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoYm91bmRhcnlGaWJlciwgcmV0cnlMYW5lKTtcbiAgbnVsbCAhPT0gYm91bmRhcnlGaWJlciAmJlxuICAgIChtYXJrUm9vdFVwZGF0ZWQkMShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpLFxuICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChib3VuZGFyeUZpYmVyKSk7XG59XG5mdW5jdGlvbiByZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIpIHtcbiAgdmFyIHN1c3BlbnNlU3RhdGUgPSBib3VuZGFyeUZpYmVyLm1lbW9pemVkU3RhdGUsXG4gICAgcmV0cnlMYW5lID0gMDtcbiAgbnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSAmJiAocmV0cnlMYW5lID0gc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUpO1xuICByZXRyeVRpbWVkT3V0Qm91bmRhcnkoYm91bmRhcnlGaWJlciwgcmV0cnlMYW5lKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVSZXRyeVdha2VhYmxlKGJvdW5kYXJ5RmliZXIsIHdha2VhYmxlKSB7XG4gIHZhciByZXRyeUxhbmUgPSAwO1xuICBzd2l0Y2ggKGJvdW5kYXJ5RmliZXIudGFnKSB7XG4gICAgY2FzZSAxMzpcbiAgICAgIHZhciByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGU7XG4gICAgICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIG51bGwgIT09IHN1c3BlbnNlU3RhdGUgJiYgKHJldHJ5TGFuZSA9IHN1c3BlbnNlU3RhdGUucmV0cnlMYW5lKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0cnlDYWNoZSA9IGJvdW5kYXJ5RmliZXIuc3RhdGVOb2RlLl9yZXRyeUNhY2hlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE0KSk7XG4gIH1cbiAgbnVsbCAhPT0gcmV0cnlDYWNoZSAmJiByZXRyeUNhY2hlLmRlbGV0ZSh3YWtlYWJsZSk7XG4gIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVDYWxsYmFjayQxKHByaW9yaXR5TGV2ZWwsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBzY2hlZHVsZUNhbGxiYWNrJDMocHJpb3JpdHlMZXZlbCwgY2FsbGJhY2spO1xufVxudmFyIGZpcnN0U2NoZWR1bGVkUm9vdCA9IG51bGwsXG4gIGxhc3RTY2hlZHVsZWRSb290ID0gbnVsbCxcbiAgZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMSxcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITEsXG4gIGlzRmx1c2hpbmdXb3JrID0gITEsXG4gIGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lID0gMDtcbmZ1bmN0aW9uIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KSB7XG4gIHJvb3QgIT09IGxhc3RTY2hlZHVsZWRSb290ICYmXG4gICAgbnVsbCA9PT0gcm9vdC5uZXh0ICYmXG4gICAgKG51bGwgPT09IGxhc3RTY2hlZHVsZWRSb290XG4gICAgICA/IChmaXJzdFNjaGVkdWxlZFJvb3QgPSBsYXN0U2NoZWR1bGVkUm9vdCA9IHJvb3QpXG4gICAgICA6IChsYXN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290Lm5leHQgPSByb290KSk7XG4gIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yayA9ICEwO1xuICBkaWRTY2hlZHVsZU1pY3JvdGFzayB8fFxuICAgICgoZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMCksXG4gICAgc2NoZWR1bGVJbW1lZGlhdGVUYXNrKHByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzaykpO1xufVxuZnVuY3Rpb24gZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgb25seUxlZ2FjeSkge1xuICBpZiAoIWlzRmx1c2hpbmdXb3JrICYmIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yaykge1xuICAgIGlzRmx1c2hpbmdXb3JrID0gITA7XG4gICAgZG8ge1xuICAgICAgdmFyIGRpZFBlcmZvcm1Tb21lV29yayA9ICExO1xuICAgICAgZm9yICh2YXIgcm9vdCQxNzIgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7IG51bGwgIT09IHJvb3QkMTcyOyApIHtcbiAgICAgICAgaWYgKCFvbmx5TGVnYWN5KVxuICAgICAgICAgIGlmICgwICE9PSBzeW5jVHJhbnNpdGlvbkxhbmVzKSB7XG4gICAgICAgICAgICB2YXIgcGVuZGluZ0xhbmVzID0gcm9vdCQxNzIucGVuZGluZ0xhbmVzO1xuICAgICAgICAgICAgaWYgKDAgPT09IHBlbmRpbmdMYW5lcykgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IDA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHN1c3BlbmRlZExhbmVzID0gcm9vdCQxNzIuc3VzcGVuZGVkTGFuZXMsXG4gICAgICAgICAgICAgICAgcGluZ2VkTGFuZXMgPSByb290JDE3Mi5waW5nZWRMYW5lcztcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICAoMSA8PCAoMzEgLSBjbHozMig0MiB8IHN5bmNUcmFuc2l0aW9uTGFuZXMpICsgMSkpIC0gMTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICY9XG4gICAgICAgICAgICAgICAgcGVuZGluZ0xhbmVzICYgfihzdXNwZW5kZWRMYW5lcyAmIH5waW5nZWRMYW5lcyk7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYgMjAxMzI2Njc3XG4gICAgICAgICAgICAgICAgICA/IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAyMDEzMjY2NzcpIHwgMVxuICAgICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgfCAyXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDAgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgICAgICAgICAgICAoKGRpZFBlcmZvcm1Tb21lV29yayA9ICEwKSxcbiAgICAgICAgICAgICAgcGVyZm9ybVN5bmNXb3JrT25Sb290KHJvb3QkMTcyLCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnZXROZXh0TGFuZXMoXG4gICAgICAgICAgICAgICAgcm9vdCQxNzIsXG4gICAgICAgICAgICAgICAgcm9vdCQxNzIgPT09IHdvcmtJblByb2dyZXNzUm9vdCA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA6IDBcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIDAgPT09IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAzKSB8fFxuICAgICAgICAgICAgICAgIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCQxNzIsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgfHxcbiAgICAgICAgICAgICAgICAoKGRpZFBlcmZvcm1Tb21lV29yayA9ICEwKSxcbiAgICAgICAgICAgICAgICBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCQxNzIsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xuICAgICAgICByb290JDE3MiA9IHJvb3QkMTcyLm5leHQ7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoZGlkUGVyZm9ybVNvbWVXb3JrKTtcbiAgICBpc0ZsdXNoaW5nV29yayA9ICExO1xuICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzUm9vdFNjaGVkdWxlSW5NaWNyb3Rhc2soKSB7XG4gIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yayA9IGRpZFNjaGVkdWxlTWljcm90YXNrID0gITE7XG4gIHZhciBzeW5jVHJhbnNpdGlvbkxhbmVzID0gMDtcbiAgMCAhPT0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgJiZcbiAgICAoc2hvdWxkQXR0ZW1wdEVhZ2VyVHJhbnNpdGlvbigpICYmXG4gICAgICAoc3luY1RyYW5zaXRpb25MYW5lcyA9IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lKSxcbiAgICAoY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSAwKSk7XG4gIGZvciAoXG4gICAgdmFyIGN1cnJlbnRUaW1lID0gbm93KCksIHByZXYgPSBudWxsLCByb290ID0gZmlyc3RTY2hlZHVsZWRSb290O1xuICAgIG51bGwgIT09IHJvb3Q7XG5cbiAgKSB7XG4gICAgdmFyIG5leHQgPSByb290Lm5leHQsXG4gICAgICBuZXh0TGFuZXMgPSBzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrKHJvb3QsIGN1cnJlbnRUaW1lKTtcbiAgICBpZiAoMCA9PT0gbmV4dExhbmVzKVxuICAgICAgKHJvb3QubmV4dCA9IG51bGwpLFxuICAgICAgICBudWxsID09PSBwcmV2ID8gKGZpcnN0U2NoZWR1bGVkUm9vdCA9IG5leHQpIDogKHByZXYubmV4dCA9IG5leHQpLFxuICAgICAgICBudWxsID09PSBuZXh0ICYmIChsYXN0U2NoZWR1bGVkUm9vdCA9IHByZXYpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgKChwcmV2ID0gcm9vdCksIDAgIT09IHN5bmNUcmFuc2l0aW9uTGFuZXMgfHwgMCAhPT0gKG5leHRMYW5lcyAmIDMpKVxuICAgIClcbiAgICAgIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yayA9ICEwO1xuICAgIHJvb3QgPSBuZXh0O1xuICB9XG4gIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKHN5bmNUcmFuc2l0aW9uTGFuZXMsICExKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2socm9vdCwgY3VycmVudFRpbWUpIHtcbiAgZm9yIChcbiAgICB2YXIgc3VzcGVuZGVkTGFuZXMgPSByb290LnN1c3BlbmRlZExhbmVzLFxuICAgICAgcGluZ2VkTGFuZXMgPSByb290LnBpbmdlZExhbmVzLFxuICAgICAgZXhwaXJhdGlvblRpbWVzID0gcm9vdC5leHBpcmF0aW9uVGltZXMsXG4gICAgICBsYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzICYgLTYyOTE0NTYxO1xuICAgIDAgPCBsYW5lcztcblxuICApIHtcbiAgICB2YXIgaW5kZXgkNSA9IDMxIC0gY2x6MzIobGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNSxcbiAgICAgIGV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWVzW2luZGV4JDVdO1xuICAgIGlmICgtMSA9PT0gZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIGlmICgwID09PSAobGFuZSAmIHN1c3BlbmRlZExhbmVzKSB8fCAwICE9PSAobGFuZSAmIHBpbmdlZExhbmVzKSlcbiAgICAgICAgZXhwaXJhdGlvblRpbWVzW2luZGV4JDVdID0gY29tcHV0ZUV4cGlyYXRpb25UaW1lKGxhbmUsIGN1cnJlbnRUaW1lKTtcbiAgICB9IGVsc2UgZXhwaXJhdGlvblRpbWUgPD0gY3VycmVudFRpbWUgJiYgKHJvb3QuZXhwaXJlZExhbmVzIHw9IGxhbmUpO1xuICAgIGxhbmVzICY9IH5sYW5lO1xuICB9XG4gIGN1cnJlbnRUaW1lID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICBzdXNwZW5kZWRMYW5lcyA9IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzO1xuICBzdXNwZW5kZWRMYW5lcyA9IGdldE5leHRMYW5lcyhcbiAgICByb290LFxuICAgIHJvb3QgPT09IGN1cnJlbnRUaW1lID8gc3VzcGVuZGVkTGFuZXMgOiAwXG4gICk7XG4gIHBpbmdlZExhbmVzID0gcm9vdC5jYWxsYmFja05vZGU7XG4gIGlmIChcbiAgICAwID09PSBzdXNwZW5kZWRMYW5lcyB8fFxuICAgIChyb290ID09PSBjdXJyZW50VGltZSAmJiAyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikgfHxcbiAgICBudWxsICE9PSByb290LmNhbmNlbFBlbmRpbmdDb21taXRcbiAgKVxuICAgIHJldHVybiAoXG4gICAgICBudWxsICE9PSBwaW5nZWRMYW5lcyAmJlxuICAgICAgICBudWxsICE9PSBwaW5nZWRMYW5lcyAmJlxuICAgICAgICBjYW5jZWxDYWxsYmFjayQxKHBpbmdlZExhbmVzKSxcbiAgICAgIChyb290LmNhbGxiYWNrTm9kZSA9IG51bGwpLFxuICAgICAgKHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDApXG4gICAgKTtcbiAgaWYgKFxuICAgIDAgPT09IChzdXNwZW5kZWRMYW5lcyAmIDMpIHx8XG4gICAgY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCBzdXNwZW5kZWRMYW5lcylcbiAgKSB7XG4gICAgY3VycmVudFRpbWUgPSBzdXNwZW5kZWRMYW5lcyAmIC1zdXNwZW5kZWRMYW5lcztcbiAgICBpZiAoY3VycmVudFRpbWUgPT09IHJvb3QuY2FsbGJhY2tQcmlvcml0eSkgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpO1xuICAgIHN3aXRjaCAobGFuZXNUb0V2ZW50UHJpb3JpdHkoc3VzcGVuZGVkTGFuZXMpKSB7XG4gICAgICBjYXNlIDI6XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gVXNlckJsb2NraW5nUHJpb3JpdHk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzMjpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBOb3JtYWxQcmlvcml0eSQxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjY4NDM1NDU2OlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IElkbGVQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IE5vcm1hbFByaW9yaXR5JDE7XG4gICAgfVxuICAgIHBpbmdlZExhbmVzID0gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrLmJpbmQobnVsbCwgcm9vdCk7XG4gICAgc3VzcGVuZGVkTGFuZXMgPSBzY2hlZHVsZUNhbGxiYWNrJDMoc3VzcGVuZGVkTGFuZXMsIHBpbmdlZExhbmVzKTtcbiAgICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSBjdXJyZW50VGltZTtcbiAgICByb290LmNhbGxiYWNrTm9kZSA9IHN1c3BlbmRlZExhbmVzO1xuICAgIHJldHVybiBjdXJyZW50VGltZTtcbiAgfVxuICBudWxsICE9PSBwaW5nZWRMYW5lcyAmJiBudWxsICE9PSBwaW5nZWRMYW5lcyAmJiBjYW5jZWxDYWxsYmFjayQxKHBpbmdlZExhbmVzKTtcbiAgcm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMjtcbiAgcm9vdC5jYWxsYmFja05vZGUgPSBudWxsO1xuICByZXR1cm4gMjtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Xb3JrT25Sb290VmlhU2NoZWR1bGVyVGFzayhyb290LCBkaWRUaW1lb3V0KSB7XG4gIHZhciBvcmlnaW5hbENhbGxiYWNrTm9kZSA9IHJvb3QuY2FsbGJhY2tOb2RlO1xuICBpZiAoZmx1c2hQYXNzaXZlRWZmZWN0cygpICYmIHJvb3QuY2FsbGJhY2tOb2RlICE9PSBvcmlnaW5hbENhbGxiYWNrTm9kZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgdmFyIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ID8gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgOiAwXG4gICk7XG4gIGlmICgwID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCkgcmV0dXJuIG51bGw7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwLCBkaWRUaW1lb3V0KTtcbiAgc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBub3coKSk7XG4gIHJldHVybiBudWxsICE9IHJvb3QuY2FsbGJhY2tOb2RlICYmIHJvb3QuY2FsbGJhY2tOb2RlID09PSBvcmlnaW5hbENhbGxiYWNrTm9kZVxuICAgID8gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrLmJpbmQobnVsbCwgcm9vdClcbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCwgbGFuZXMpIHtcbiAgaWYgKGZsdXNoUGFzc2l2ZUVmZmVjdHMoKSkgcmV0dXJuIG51bGw7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIGxhbmVzLCAhMCk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUltbWVkaWF0ZVRhc2soY2IpIHtcbiAgc2NoZWR1bGVNaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgNilcbiAgICAgID8gc2NoZWR1bGVDYWxsYmFjayQzKEltbWVkaWF0ZVByaW9yaXR5LCBjYilcbiAgICAgIDogY2IoKTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKSB7XG4gIDAgPT09IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lICYmXG4gICAgKGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lID0gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKSk7XG4gIHJldHVybiBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZTtcbn1cbmZ1bmN0aW9uIGNvZXJjZUZvcm1BY3Rpb25Qcm9wKGFjdGlvblByb3ApIHtcbiAgcmV0dXJuIG51bGwgPT0gYWN0aW9uUHJvcCB8fFxuICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wIHx8XG4gICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wXG4gICAgPyBudWxsXG4gICAgOiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wXG4gICAgICA/IGFjdGlvblByb3BcbiAgICAgIDogc2FuaXRpemVVUkwoXCJcIiArIGFjdGlvblByb3ApO1xufVxuZnVuY3Rpb24gY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyKGZvcm0sIHN1Ym1pdHRlcikge1xuICB2YXIgdGVtcCA9IHN1Ym1pdHRlci5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgdGVtcC5uYW1lID0gc3VibWl0dGVyLm5hbWU7XG4gIHRlbXAudmFsdWUgPSBzdWJtaXR0ZXIudmFsdWU7XG4gIGZvcm0uaWQgJiYgdGVtcC5zZXRBdHRyaWJ1dGUoXCJmb3JtXCIsIGZvcm0uaWQpO1xuICBzdWJtaXR0ZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGVtcCwgc3VibWl0dGVyKTtcbiAgZm9ybSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcbiAgdGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRlbXApO1xuICByZXR1cm4gZm9ybTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudHMkMShcbiAgZGlzcGF0Y2hRdWV1ZSxcbiAgZG9tRXZlbnROYW1lLFxuICBtYXliZVRhcmdldEluc3QsXG4gIG5hdGl2ZUV2ZW50LFxuICBuYXRpdmVFdmVudFRhcmdldFxuKSB7XG4gIGlmIChcbiAgICBcInN1Ym1pdFwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICBtYXliZVRhcmdldEluc3QgJiZcbiAgICBtYXliZVRhcmdldEluc3Quc3RhdGVOb2RlID09PSBuYXRpdmVFdmVudFRhcmdldFxuICApIHtcbiAgICB2YXIgYWN0aW9uID0gY29lcmNlRm9ybUFjdGlvblByb3AoXG4gICAgICAgIChuYXRpdmVFdmVudFRhcmdldFtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKS5hY3Rpb25cbiAgICAgICksXG4gICAgICBzdWJtaXR0ZXIgPSBuYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgc3VibWl0dGVyICYmXG4gICAgICAoKGRvbUV2ZW50TmFtZSA9IChkb21FdmVudE5hbWUgPSBzdWJtaXR0ZXJbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbClcbiAgICAgICAgPyBjb2VyY2VGb3JtQWN0aW9uUHJvcChkb21FdmVudE5hbWUuZm9ybUFjdGlvbilcbiAgICAgICAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybUFjdGlvblwiKSksXG4gICAgICBudWxsICE9PSBkb21FdmVudE5hbWUgJiYgKChhY3Rpb24gPSBkb21FdmVudE5hbWUpLCAoc3VibWl0dGVyID0gbnVsbCkpKTtcbiAgICB2YXIgZXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBcImFjdGlvblwiLFxuICAgICAgXCJhY3Rpb25cIixcbiAgICAgIG51bGwsXG4gICAgICBuYXRpdmVFdmVudCxcbiAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgKTtcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goe1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICBsaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKDAgIT09IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gc3VibWl0dGVyXG4gICAgICAgICAgICAgICAgICA/IGNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlcihuYXRpdmVFdmVudFRhcmdldCwgc3VibWl0dGVyKVxuICAgICAgICAgICAgICAgICAgOiBuZXcgRm9ybURhdGEobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgICAgICBtYXliZVRhcmdldEluc3QsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmc6ICEwLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBuYXRpdmVFdmVudFRhcmdldC5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvbiAmJlxuICAgICAgICAgICAgICAgIChldmVudC5wcmV2ZW50RGVmYXVsdCgpLFxuICAgICAgICAgICAgICAgIChmb3JtRGF0YSA9IHN1Ym1pdHRlclxuICAgICAgICAgICAgICAgICAgPyBjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIobmF0aXZlRXZlbnRUYXJnZXQsIHN1Ym1pdHRlcilcbiAgICAgICAgICAgICAgICAgIDogbmV3IEZvcm1EYXRhKG5hdGl2ZUV2ZW50VGFyZ2V0KSksXG4gICAgICAgICAgICAgICAgc3RhcnRIb3N0VHJhbnNpdGlvbihcbiAgICAgICAgICAgICAgICAgIG1heWJlVGFyZ2V0SW5zdCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VycmVudFRhcmdldDogbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pO1xuICB9XG59XG5mb3IgKFxuICB2YXIgaSRqc2NvbXAkaW5saW5lXzE0MzkgPSAwO1xuICBpJGpzY29tcCRpbmxpbmVfMTQzOSA8IHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzLmxlbmd0aDtcbiAgaSRqc2NvbXAkaW5saW5lXzE0MzkrK1xuKSB7XG4gIHZhciBldmVudE5hbWUkanNjb21wJGlubGluZV8xNDQwID1cbiAgICAgIHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzW2kkanNjb21wJGlubGluZV8xNDM5XSxcbiAgICBkb21FdmVudE5hbWUkanNjb21wJGlubGluZV8xNDQxID1cbiAgICAgIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDAudG9Mb3dlckNhc2UoKSxcbiAgICBjYXBpdGFsaXplZEV2ZW50JGpzY29tcCRpbmxpbmVfMTQ0MiA9XG4gICAgICBldmVudE5hbWUkanNjb21wJGlubGluZV8xNDQwWzBdLnRvVXBwZXJDYXNlKCkgK1xuICAgICAgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTQ0MC5zbGljZSgxKTtcbiAgcmVnaXN0ZXJTaW1wbGVFdmVudChcbiAgICBkb21FdmVudE5hbWUkanNjb21wJGlubGluZV8xNDQxLFxuICAgIFwib25cIiArIGNhcGl0YWxpemVkRXZlbnQkanNjb21wJGlubGluZV8xNDQyXG4gICk7XG59XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9FTkQsIFwib25BbmltYXRpb25FbmRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9JVEVSQVRJT04sIFwib25BbmltYXRpb25JdGVyYXRpb25cIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9TVEFSVCwgXCJvbkFuaW1hdGlvblN0YXJ0XCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImRibGNsaWNrXCIsIFwib25Eb3VibGVDbGlja1wiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoXCJmb2N1c2luXCIsIFwib25Gb2N1c1wiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoXCJmb2N1c291dFwiLCBcIm9uQmx1clwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9SVU4sIFwib25UcmFuc2l0aW9uUnVuXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX1NUQVJULCBcIm9uVHJhbnNpdGlvblN0YXJ0XCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX0NBTkNFTCwgXCJvblRyYW5zaXRpb25DYW5jZWxcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fRU5ELCBcIm9uVHJhbnNpdGlvbkVuZFwiKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvbk1vdXNlRW50ZXJcIiwgW1wibW91c2VvdXRcIiwgXCJtb3VzZW92ZXJcIl0pO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uTW91c2VMZWF2ZVwiLCBbXCJtb3VzZW91dFwiLCBcIm1vdXNlb3ZlclwiXSk7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Qb2ludGVyRW50ZXJcIiwgW1wicG9pbnRlcm91dFwiLCBcInBvaW50ZXJvdmVyXCJdKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvblBvaW50ZXJMZWF2ZVwiLCBbXCJwb2ludGVyb3V0XCIsIFwicG9pbnRlcm92ZXJcIl0pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ2hhbmdlXCIsXG4gIFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIilcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25TZWxlY3RcIixcbiAgXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcbiAgICBcIiBcIlxuICApXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFwib25CZWZvcmVJbnB1dFwiLCBbXG4gIFwiY29tcG9zaXRpb25lbmRcIixcbiAgXCJrZXlwcmVzc1wiLFxuICBcInRleHRJbnB1dFwiLFxuICBcInBhc3RlXCJcbl0pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25FbmRcIixcbiAgXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbiAgXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcbiAgXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKVxuKTtcbnZhciBtZWRpYUV2ZW50VHlwZXMgPVxuICAgIFwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKSxcbiAgbm9uRGVsZWdhdGVkRXZlbnRzID0gbmV3IFNldChcbiAgICBcImJlZm9yZXRvZ2dsZSBjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCBzY3JvbGxlbmQgdG9nZ2xlXCJcbiAgICAgIC5zcGxpdChcIiBcIilcbiAgICAgIC5jb25jYXQobWVkaWFFdmVudFR5cGVzKVxuICApO1xuZnVuY3Rpb24gcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgZXZlbnRTeXN0ZW1GbGFncykge1xuICBldmVudFN5c3RlbUZsYWdzID0gMCAhPT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiA0KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9kaXNwYXRjaFF1ZXVlJGkgPSBkaXNwYXRjaFF1ZXVlW2ldLFxuICAgICAgZXZlbnQgPSBfZGlzcGF0Y2hRdWV1ZSRpLmV2ZW50O1xuICAgIF9kaXNwYXRjaFF1ZXVlJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpLmxpc3RlbmVycztcbiAgICBhOiB7XG4gICAgICB2YXIgcHJldmlvdXNJbnN0YW5jZSA9IHZvaWQgMDtcbiAgICAgIGlmIChldmVudFN5c3RlbUZsYWdzKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBpJGpzY29tcCQwID0gX2Rpc3BhdGNoUXVldWUkaS5sZW5ndGggLSAxO1xuICAgICAgICAgIDAgPD0gaSRqc2NvbXAkMDtcbiAgICAgICAgICBpJGpzY29tcCQwLS1cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoUXVldWUkaVtpJGpzY29tcCQwXSxcbiAgICAgICAgICAgIGluc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuaW5zdGFuY2UsXG4gICAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuY3VycmVudFRhcmdldDtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmxpc3RlbmVyO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSAhPT0gcHJldmlvdXNJbnN0YW5jZSAmJiBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UoZXZlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIGkkanNjb21wJDAgPSAwO1xuICAgICAgICAgIGkkanNjb21wJDAgPCBfZGlzcGF0Y2hRdWV1ZSRpLmxlbmd0aDtcbiAgICAgICAgICBpJGpzY29tcCQwKytcbiAgICAgICAgKSB7XG4gICAgICAgICAgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpW2kkanNjb21wJDBdO1xuICAgICAgICAgIGluc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuaW5zdGFuY2U7XG4gICAgICAgICAgY3VycmVudFRhcmdldCA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5saXN0ZW5lcjtcbiAgICAgICAgICBpZiAoaW5zdGFuY2UgIT09IHByZXZpb3VzSW5zdGFuY2UgJiYgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpO1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmV2aW91c0luc3RhbmNlKGV2ZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRFbGVtZW50KSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0YXJnZXRFbGVtZW50W2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV07XG4gIHZvaWQgMCA9PT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmXG4gICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHRhcmdldEVsZW1lbnRbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XSA9XG4gICAgICBuZXcgU2V0KCkpO1xuICB2YXIgbGlzdGVuZXJTZXRLZXkgPSBkb21FdmVudE5hbWUgKyBcIl9fYnViYmxlXCI7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5oYXMobGlzdGVuZXJTZXRLZXkpIHx8XG4gICAgKGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKHRhcmdldEVsZW1lbnQsIGRvbUV2ZW50TmFtZSwgMiwgITEpLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5hZGQobGlzdGVuZXJTZXRLZXkpKTtcbn1cbmZ1bmN0aW9uIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyLCB0YXJnZXQpIHtcbiAgdmFyIGV2ZW50U3lzdGVtRmxhZ3MgPSAwO1xuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyICYmIChldmVudFN5c3RlbUZsYWdzIHw9IDQpO1xuICBhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcihcbiAgICB0YXJnZXQsXG4gICAgZG9tRXZlbnROYW1lLFxuICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lclxuICApO1xufVxudmFyIGxpc3RlbmluZ01hcmtlciA9IFwiX3JlYWN0TGlzdGVuaW5nXCIgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcbmZ1bmN0aW9uIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKHJvb3RDb250YWluZXJFbGVtZW50KSB7XG4gIGlmICghcm9vdENvbnRhaW5lckVsZW1lbnRbbGlzdGVuaW5nTWFya2VyXSkge1xuICAgIHJvb3RDb250YWluZXJFbGVtZW50W2xpc3RlbmluZ01hcmtlcl0gPSAhMDtcbiAgICBhbGxOYXRpdmVFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZG9tRXZlbnROYW1lKSB7XG4gICAgICBcInNlbGVjdGlvbmNoYW5nZVwiICE9PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgKG5vbkRlbGVnYXRlZEV2ZW50cy5oYXMoZG9tRXZlbnROYW1lKSB8fFxuICAgICAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCAhMSwgcm9vdENvbnRhaW5lckVsZW1lbnQpLFxuICAgICAgICBsaXN0ZW5Ub05hdGl2ZUV2ZW50KGRvbUV2ZW50TmFtZSwgITAsIHJvb3RDb250YWluZXJFbGVtZW50KSk7XG4gICAgfSk7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPVxuICAgICAgOSA9PT0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGVcbiAgICAgICAgPyByb290Q29udGFpbmVyRWxlbWVudFxuICAgICAgICA6IHJvb3RDb250YWluZXJFbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudCB8fFxuICAgICAgb3duZXJEb2N1bWVudFtsaXN0ZW5pbmdNYXJrZXJdIHx8XG4gICAgICAoKG93bmVyRG9jdW1lbnRbbGlzdGVuaW5nTWFya2VyXSA9ICEwKSxcbiAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgITEsIG93bmVyRG9jdW1lbnQpKTtcbiAgfVxufVxuZnVuY3Rpb24gYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIoXG4gIHRhcmdldENvbnRhaW5lcixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4pIHtcbiAgc3dpdGNoIChnZXRFdmVudFByaW9yaXR5KGRvbUV2ZW50TmFtZSkpIHtcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hEaXNjcmV0ZUV2ZW50O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hFdmVudDtcbiAgfVxuICBldmVudFN5c3RlbUZsYWdzID0gbGlzdGVuZXJXcmFwcGVyLmJpbmQoXG4gICAgbnVsbCxcbiAgICBkb21FdmVudE5hbWUsXG4gICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICB0YXJnZXRDb250YWluZXJcbiAgKTtcbiAgbGlzdGVuZXJXcmFwcGVyID0gdm9pZCAwO1xuICAhcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgfHxcbiAgICAoXCJ0b3VjaHN0YXJ0XCIgIT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgXCJ0b3VjaG1vdmVcIiAhPT0gZG9tRXZlbnROYW1lICYmXG4gICAgICBcIndoZWVsXCIgIT09IGRvbUV2ZW50TmFtZSkgfHxcbiAgICAobGlzdGVuZXJXcmFwcGVyID0gITApO1xuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4gICAgPyB2b2lkIDAgIT09IGxpc3RlbmVyV3JhcHBlclxuICAgICAgPyB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHtcbiAgICAgICAgICBjYXB0dXJlOiAhMCxcbiAgICAgICAgICBwYXNzaXZlOiBsaXN0ZW5lcldyYXBwZXJcbiAgICAgICAgfSlcbiAgICAgIDogdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCAhMClcbiAgICA6IHZvaWQgMCAhPT0gbGlzdGVuZXJXcmFwcGVyXG4gICAgICA/IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywge1xuICAgICAgICAgIHBhc3NpdmU6IGxpc3RlbmVyV3JhcHBlclxuICAgICAgICB9KVxuICAgICAgOiB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsICExKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbShcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBuYXRpdmVFdmVudCxcbiAgdGFyZ2V0SW5zdCRqc2NvbXAkMCxcbiAgdGFyZ2V0Q29udGFpbmVyXG4pIHtcbiAgdmFyIGFuY2VzdG9ySW5zdCA9IHRhcmdldEluc3QkanNjb21wJDA7XG4gIGlmIChcbiAgICAwID09PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDEpICYmXG4gICAgMCA9PT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiAyKSAmJlxuICAgIG51bGwgIT09IHRhcmdldEluc3QkanNjb21wJDBcbiAgKVxuICAgIGE6IGZvciAoOzspIHtcbiAgICAgIGlmIChudWxsID09PSB0YXJnZXRJbnN0JGpzY29tcCQwKSByZXR1cm47XG4gICAgICB2YXIgbm9kZVRhZyA9IHRhcmdldEluc3QkanNjb21wJDAudGFnO1xuICAgICAgaWYgKDMgPT09IG5vZGVUYWcgfHwgNCA9PT0gbm9kZVRhZykge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvbnRhaW5lciA9PT0gdGFyZ2V0Q29udGFpbmVyIHx8XG4gICAgICAgICAgKDggPT09IGNvbnRhaW5lci5ub2RlVHlwZSAmJiBjb250YWluZXIucGFyZW50Tm9kZSA9PT0gdGFyZ2V0Q29udGFpbmVyKVxuICAgICAgICApXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmICg0ID09PSBub2RlVGFnKVxuICAgICAgICAgIGZvciAobm9kZVRhZyA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuOyBudWxsICE9PSBub2RlVGFnOyApIHtcbiAgICAgICAgICAgIHZhciBncmFuZFRhZyA9IG5vZGVUYWcudGFnO1xuICAgICAgICAgICAgaWYgKDMgPT09IGdyYW5kVGFnIHx8IDQgPT09IGdyYW5kVGFnKVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKChncmFuZFRhZyA9IG5vZGVUYWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICAgICAgICAgIGdyYW5kVGFnID09PSB0YXJnZXRDb250YWluZXIgfHxcbiAgICAgICAgICAgICAgICAgICg4ID09PSBncmFuZFRhZy5ub2RlVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICBncmFuZFRhZy5wYXJlbnROb2RlID09PSB0YXJnZXRDb250YWluZXIpKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbm9kZVRhZyA9IG5vZGVUYWcucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgZm9yICg7IG51bGwgIT09IGNvbnRhaW5lcjsgKSB7XG4gICAgICAgICAgbm9kZVRhZyA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKGNvbnRhaW5lcik7XG4gICAgICAgICAgaWYgKG51bGwgPT09IG5vZGVUYWcpIHJldHVybjtcbiAgICAgICAgICBncmFuZFRhZyA9IG5vZGVUYWcudGFnO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIDUgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICA2ID09PSBncmFuZFRhZyB8fFxuICAgICAgICAgICAgMjYgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICAyNyA9PT0gZ3JhbmRUYWdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRhcmdldEluc3QkanNjb21wJDAgPSBhbmNlc3Rvckluc3QgPSBub2RlVGFnO1xuICAgICAgICAgICAgY29udGludWUgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRhcmdldEluc3QkanNjb21wJDAgPSB0YXJnZXRJbnN0JGpzY29tcCQwLnJldHVybjtcbiAgICB9XG4gIGJhdGNoZWRVcGRhdGVzJDEoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0YXJnZXRJbnN0ID0gYW5jZXN0b3JJbnN0LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCksXG4gICAgICBkaXNwYXRjaFF1ZXVlID0gW107XG4gICAgYToge1xuICAgICAgdmFyIHJlYWN0TmFtZSA9IHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzLmdldChkb21FdmVudE5hbWUpO1xuICAgICAgaWYgKHZvaWQgMCAhPT0gcmVhY3ROYW1lKSB7XG4gICAgICAgIHZhciBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNFdmVudCxcbiAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IGRvbUV2ZW50TmFtZTtcbiAgICAgICAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgICAgICAgIGlmICgwID09PSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSkgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJrZXl1cFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IFwiZm9jdXNcIjtcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gXCJibHVyXCI7XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImJlZm9yZWJsdXJcIjpcbiAgICAgICAgICBjYXNlIFwiYWZ0ZXJibHVyXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImNsaWNrXCI6XG4gICAgICAgICAgICBpZiAoMiA9PT0gbmF0aXZlRXZlbnQuYnV0dG9uKSBicmVhayBhO1xuICAgICAgICAgIGNhc2UgXCJhdXhjbGlja1wiOlxuICAgICAgICAgIGNhc2UgXCJkYmxjbGlja1wiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICBjYXNlIFwibW91c2Vtb3ZlXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNldXBcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImRyYWdcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ2VuZFwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ2V4aXRcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdvdmVyXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgICAgICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwidG91Y2hjYW5jZWxcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2htb3ZlXCI6XG4gICAgICAgICAgY2FzZSBcInRvdWNoc3RhcnRcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1RvdWNoRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIEFOSU1BVElPTl9FTkQ6XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fSVRFUkFUSU9OOlxuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX1NUQVJUOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFRSQU5TSVRJT05fRU5EOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVHJhbnNpdGlvbkV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInNjcm9sbFwiOlxuICAgICAgICAgIGNhc2UgXCJzY3JvbGxlbmRcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwid2hlZWxcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY29weVwiOlxuICAgICAgICAgIGNhc2UgXCJjdXRcIjpcbiAgICAgICAgICBjYXNlIFwicGFzdGVcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyY2FuY2VsXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJkb3duXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJtb3ZlXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJvdXRcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm92ZXJcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcnVwXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwidG9nZ2xlXCI6XG4gICAgICAgICAgY2FzZSBcImJlZm9yZXRvZ2dsZVwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVG9nZ2xlRXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluQ2FwdHVyZVBoYXNlID0gMCAhPT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiA0KSxcbiAgICAgICAgICBhY2N1bXVsYXRlVGFyZ2V0T25seSA9XG4gICAgICAgICAgICAhaW5DYXB0dXJlUGhhc2UgJiZcbiAgICAgICAgICAgIChcInNjcm9sbFwiID09PSBkb21FdmVudE5hbWUgfHwgXCJzY3JvbGxlbmRcIiA9PT0gZG9tRXZlbnROYW1lKSxcbiAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IGluQ2FwdHVyZVBoYXNlXG4gICAgICAgICAgICA/IG51bGwgIT09IHJlYWN0TmFtZVxuICAgICAgICAgICAgICA/IHJlYWN0TmFtZSArIFwiQ2FwdHVyZVwiXG4gICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgOiByZWFjdE5hbWU7XG4gICAgICAgIGluQ2FwdHVyZVBoYXNlID0gW107XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gdGFyZ2V0SW5zdCwgbGFzdEhvc3RDb21wb25lbnQ7XG4gICAgICAgICAgbnVsbCAhPT0gaW5zdGFuY2U7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIF9pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gX2luc3RhbmNlLnN0YXRlTm9kZTtcbiAgICAgICAgICBfaW5zdGFuY2UgPSBfaW5zdGFuY2UudGFnO1xuICAgICAgICAgICg1ICE9PSBfaW5zdGFuY2UgJiYgMjYgIT09IF9pbnN0YW5jZSAmJiAyNyAhPT0gX2luc3RhbmNlKSB8fFxuICAgICAgICAgICAgbnVsbCA9PT0gbGFzdEhvc3RDb21wb25lbnQgfHxcbiAgICAgICAgICAgIG51bGwgPT09IHJlYWN0RXZlbnROYW1lIHx8XG4gICAgICAgICAgICAoKF9pbnN0YW5jZSA9IGdldExpc3RlbmVyKGluc3RhbmNlLCByZWFjdEV2ZW50TmFtZSkpLFxuICAgICAgICAgICAgbnVsbCAhPSBfaW5zdGFuY2UgJiZcbiAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UucHVzaChcbiAgICAgICAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKGluc3RhbmNlLCBfaW5zdGFuY2UsIGxhc3RIb3N0Q29tcG9uZW50KVxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICBpZiAoYWNjdW11bGF0ZVRhcmdldE9ubHkpIGJyZWFrO1xuICAgICAgICAgIGluc3RhbmNlID0gaW5zdGFuY2UucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIDAgPCBpbkNhcHR1cmVQaGFzZS5sZW5ndGggJiZcbiAgICAgICAgICAoKHJlYWN0TmFtZSA9IG5ldyBTeW50aGV0aWNFdmVudEN0b3IoXG4gICAgICAgICAgICByZWFjdE5hbWUsXG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgKSksXG4gICAgICAgICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IHJlYWN0TmFtZSwgbGlzdGVuZXJzOiBpbkNhcHR1cmVQaGFzZSB9KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgwID09PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDcpKSB7XG4gICAgICBhOiB7XG4gICAgICAgIHJlYWN0TmFtZSA9XG4gICAgICAgICAgXCJtb3VzZW92ZXJcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm92ZXJcIiA9PT0gZG9tRXZlbnROYW1lO1xuICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPVxuICAgICAgICAgIFwibW91c2VvdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm91dFwiID09PSBkb21FdmVudE5hbWU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZWFjdE5hbWUgJiZcbiAgICAgICAgICBuYXRpdmVFdmVudCAhPT0gY3VycmVudFJlcGxheWluZ0V2ZW50ICYmXG4gICAgICAgICAgKHJlYWN0RXZlbnRUeXBlID1cbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQuZnJvbUVsZW1lbnQpICYmXG4gICAgICAgICAgKGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHJlYWN0RXZlbnRUeXBlKSB8fFxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0pXG4gICAgICAgIClcbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yIHx8IHJlYWN0TmFtZSkge1xuICAgICAgICAgIHJlYWN0TmFtZSA9XG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICAgID8gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgOiAocmVhY3ROYW1lID0gbmF0aXZlRXZlbnRUYXJnZXQub3duZXJEb2N1bWVudClcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZS5kZWZhdWx0VmlldyB8fCByZWFjdE5hbWUucGFyZW50V2luZG93XG4gICAgICAgICAgICAgICAgOiB3aW5kb3c7XG4gICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3Rvcikge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoKHJlYWN0RXZlbnRUeXBlID1cbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudCksXG4gICAgICAgICAgICAgIChTeW50aGV0aWNFdmVudEN0b3IgPSB0YXJnZXRJbnN0KSxcbiAgICAgICAgICAgICAgKHJlYWN0RXZlbnRUeXBlID0gcmVhY3RFdmVudFR5cGVcbiAgICAgICAgICAgICAgICA/IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHJlYWN0RXZlbnRUeXBlKVxuICAgICAgICAgICAgICAgIDogbnVsbCksXG4gICAgICAgICAgICAgIG51bGwgIT09IHJlYWN0RXZlbnRUeXBlICYmXG4gICAgICAgICAgICAgICAgKChhY2N1bXVsYXRlVGFyZ2V0T25seSA9XG4gICAgICAgICAgICAgICAgICBnZXROZWFyZXN0TW91bnRlZEZpYmVyKHJlYWN0RXZlbnRUeXBlKSksXG4gICAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlID0gcmVhY3RFdmVudFR5cGUudGFnKSxcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSAhPT0gYWNjdW11bGF0ZVRhcmdldE9ubHkgfHxcbiAgICAgICAgICAgICAgICAgICg1ICE9PSBpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgICAgICAgICAyNyAhPT0gaW5DYXB0dXJlUGhhc2UgJiZcbiAgICAgICAgICAgICAgICAgICAgNiAhPT0gaW5DYXB0dXJlUGhhc2UpKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSAoU3ludGhldGljRXZlbnRDdG9yID0gbnVsbCksIChyZWFjdEV2ZW50VHlwZSA9IHRhcmdldEluc3QpO1xuICAgICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IgIT09IHJlYWN0RXZlbnRUeXBlKSB7XG4gICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgICAgICBfaW5zdGFuY2UgPSBcIm9uTW91c2VMZWF2ZVwiO1xuICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSBcIm9uTW91c2VFbnRlclwiO1xuICAgICAgICAgICAgaW5zdGFuY2UgPSBcIm1vdXNlXCI7XG4gICAgICAgICAgICBpZiAoXCJwb2ludGVyb3V0XCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInBvaW50ZXJvdmVyXCIgPT09IGRvbUV2ZW50TmFtZSlcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljUG9pbnRlckV2ZW50KSxcbiAgICAgICAgICAgICAgICAoX2luc3RhbmNlID0gXCJvblBvaW50ZXJMZWF2ZVwiKSxcbiAgICAgICAgICAgICAgICAocmVhY3RFdmVudE5hbWUgPSBcIm9uUG9pbnRlckVudGVyXCIpLFxuICAgICAgICAgICAgICAgIChpbnN0YW5jZSA9IFwicG9pbnRlclwiKTtcbiAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICAgbnVsbCA9PSBTeW50aGV0aWNFdmVudEN0b3JcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZVxuICAgICAgICAgICAgICAgIDogZ2V0Tm9kZUZyb21JbnN0YW5jZShTeW50aGV0aWNFdmVudEN0b3IpO1xuICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPVxuICAgICAgICAgICAgICBudWxsID09IHJlYWN0RXZlbnRUeXBlXG4gICAgICAgICAgICAgICAgPyByZWFjdE5hbWVcbiAgICAgICAgICAgICAgICA6IGdldE5vZGVGcm9tSW5zdGFuY2UocmVhY3RFdmVudFR5cGUpO1xuICAgICAgICAgICAgcmVhY3ROYW1lID0gbmV3IGluQ2FwdHVyZVBoYXNlKFxuICAgICAgICAgICAgICBfaW5zdGFuY2UsXG4gICAgICAgICAgICAgIGluc3RhbmNlICsgXCJsZWF2ZVwiLFxuICAgICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlYWN0TmFtZS50YXJnZXQgPSBhY2N1bXVsYXRlVGFyZ2V0T25seTtcbiAgICAgICAgICAgIHJlYWN0TmFtZS5yZWxhdGVkVGFyZ2V0ID0gbGFzdEhvc3RDb21wb25lbnQ7XG4gICAgICAgICAgICBfaW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobmF0aXZlRXZlbnRUYXJnZXQpID09PSB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgICAgICgoaW5DYXB0dXJlUGhhc2UgPSBuZXcgaW5DYXB0dXJlUGhhc2UoXG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgKyBcImVudGVyXCIsXG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUsXG4gICAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZS50YXJnZXQgPSBsYXN0SG9zdENvbXBvbmVudCksXG4gICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZS5yZWxhdGVkVGFyZ2V0ID0gYWNjdW11bGF0ZVRhcmdldE9ubHkpLFxuICAgICAgICAgICAgICAoX2luc3RhbmNlID0gaW5DYXB0dXJlUGhhc2UpKTtcbiAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID0gX2luc3RhbmNlO1xuICAgICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3RvciAmJiByZWFjdEV2ZW50VHlwZSlcbiAgICAgICAgICAgICAgYjoge1xuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljRXZlbnRDdG9yO1xuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gcmVhY3RFdmVudFR5cGU7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9IGluQ2FwdHVyZVBoYXNlO1xuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9IGdldFBhcmVudChsYXN0SG9zdENvbXBvbmVudClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBpbnN0YW5jZSsrO1xuICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgX2luc3RhbmNlID0gcmVhY3RFdmVudE5hbWU7XG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UgPSBnZXRQYXJlbnQoX2luc3RhbmNlKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50Kys7XG4gICAgICAgICAgICAgICAgZm9yICg7IDAgPCBpbnN0YW5jZSAtIGxhc3RIb3N0Q29tcG9uZW50OyApXG4gICAgICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSBnZXRQYXJlbnQoaW5DYXB0dXJlUGhhc2UpKSwgaW5zdGFuY2UtLTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgMCA8IGxhc3RIb3N0Q29tcG9uZW50IC0gaW5zdGFuY2U7IClcbiAgICAgICAgICAgICAgICAgIChyZWFjdEV2ZW50TmFtZSA9IGdldFBhcmVudChyZWFjdEV2ZW50TmFtZSkpLFxuICAgICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudC0tO1xuICAgICAgICAgICAgICAgIGZvciAoOyBpbnN0YW5jZS0tOyApIHtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPT09IHJlYWN0RXZlbnROYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgIChudWxsICE9PSByZWFjdEV2ZW50TmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID09PSByZWFjdEV2ZW50TmFtZS5hbHRlcm5hdGUpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9IGdldFBhcmVudChpbkNhcHR1cmVQaGFzZSk7XG4gICAgICAgICAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IGdldFBhcmVudChyZWFjdEV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpbkNhcHR1cmVQaGFzZSA9IG51bGw7XG4gICAgICAgICAgICBudWxsICE9PSBTeW50aGV0aWNFdmVudEN0b3IgJiZcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICAgICAgICAgIHJlYWN0TmFtZSxcbiAgICAgICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IsXG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UsXG4gICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG51bGwgIT09IHJlYWN0RXZlbnRUeXBlICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGFjY3VtdWxhdGVUYXJnZXRPbmx5ICYmXG4gICAgICAgICAgICAgIGFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQoXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgICAgICAgICBhY2N1bXVsYXRlVGFyZ2V0T25seSxcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSxcbiAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYToge1xuICAgICAgICByZWFjdE5hbWUgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID1cbiAgICAgICAgICByZWFjdE5hbWUubm9kZU5hbWUgJiYgcmVhY3ROYW1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcInNlbGVjdFwiID09PSBTeW50aGV0aWNFdmVudEN0b3IgfHxcbiAgICAgICAgICAoXCJpbnB1dFwiID09PSBTeW50aGV0aWNFdmVudEN0b3IgJiYgXCJmaWxlXCIgPT09IHJlYWN0TmFtZS50eXBlKVxuICAgICAgICApXG4gICAgICAgICAgdmFyIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50O1xuICAgICAgICBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQocmVhY3ROYW1lKSlcbiAgICAgICAgICBpZiAoaXNJbnB1dEV2ZW50U3VwcG9ydGVkKVxuICAgICAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50O1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsO1xuICAgICAgICAgICAgdmFyIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAoU3ludGhldGljRXZlbnRDdG9yID0gcmVhY3ROYW1lLm5vZGVOYW1lKSxcbiAgICAgICAgICAgICFTeW50aGV0aWNFdmVudEN0b3IgfHxcbiAgICAgICAgICAgIFwiaW5wdXRcIiAhPT0gU3ludGhldGljRXZlbnRDdG9yLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIChcImNoZWNrYm94XCIgIT09IHJlYWN0TmFtZS50eXBlICYmIFwicmFkaW9cIiAhPT0gcmVhY3ROYW1lLnR5cGUpXG4gICAgICAgICAgICAgID8gdGFyZ2V0SW5zdCAmJlxuICAgICAgICAgICAgICAgIGlzQ3VzdG9tRWxlbWVudCh0YXJnZXRJbnN0LmVsZW1lbnRUeXBlKSAmJlxuICAgICAgICAgICAgICAgIChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudClcbiAgICAgICAgICAgICAgOiAoZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyAmJlxuICAgICAgICAgIChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGdW5jKGRvbUV2ZW50TmFtZSwgdGFyZ2V0SW5zdCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudChcbiAgICAgICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jICYmIGhhbmRsZUV2ZW50RnVuYyhkb21FdmVudE5hbWUsIHJlYWN0TmFtZSwgdGFyZ2V0SW5zdCk7XG4gICAgICAgIFwiZm9jdXNvdXRcIiA9PT0gZG9tRXZlbnROYW1lICYmXG4gICAgICAgICAgdGFyZ2V0SW5zdCAmJlxuICAgICAgICAgIFwibnVtYmVyXCIgPT09IHJlYWN0TmFtZS50eXBlICYmXG4gICAgICAgICAgbnVsbCAhPSB0YXJnZXRJbnN0Lm1lbW9pemVkUHJvcHMudmFsdWUgJiZcbiAgICAgICAgICBzZXREZWZhdWx0VmFsdWUocmVhY3ROYW1lLCBcIm51bWJlclwiLCByZWFjdE5hbWUudmFsdWUpO1xuICAgICAgfVxuICAgICAgaGFuZGxlRXZlbnRGdW5jID0gdGFyZ2V0SW5zdCA/IGdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCkgOiB3aW5kb3c7XG4gICAgICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgICAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGlzVGV4dElucHV0RWxlbWVudChoYW5kbGVFdmVudEZ1bmMpIHx8XG4gICAgICAgICAgICBcInRydWVcIiA9PT0gaGFuZGxlRXZlbnRGdW5jLmNvbnRlbnRFZGl0YWJsZVxuICAgICAgICAgIClcbiAgICAgICAgICAgIChhY3RpdmVFbGVtZW50ID0gaGFuZGxlRXZlbnRGdW5jKSxcbiAgICAgICAgICAgICAgKGFjdGl2ZUVsZW1lbnRJbnN0ID0gdGFyZ2V0SW5zdCksXG4gICAgICAgICAgICAgIChsYXN0U2VsZWN0aW9uID0gbnVsbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBhY3RpdmVFbGVtZW50SW5zdCA9IGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibW91c2Vkb3duXCI6XG4gICAgICAgICAgbW91c2VEb3duID0gITA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJjb250ZXh0bWVudVwiOlxuICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICBjYXNlIFwiZHJhZ2VuZFwiOlxuICAgICAgICAgIG1vdXNlRG93biA9ICExO1xuICAgICAgICAgIGNvbnN0cnVjdFNlbGVjdEV2ZW50KGRpc3BhdGNoUXVldWUsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpcbiAgICAgICAgICBpZiAoc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50KSBicmVhaztcbiAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgY2FzZSBcImtleXVwXCI6XG4gICAgICAgICAgY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIHZhciBmYWxsYmFja0RhdGE7XG4gICAgICBpZiAoY2FuVXNlQ29tcG9zaXRpb25FdmVudClcbiAgICAgICAgYjoge1xuICAgICAgICAgIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOlxuICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uU3RhcnRcIjtcbiAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgICAgICAgICBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25FbmRcIjtcbiAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxuICAgICAgICAgICAgICBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25VcGRhdGVcIjtcbiAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXZlbnRUeXBlID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICBlbHNlXG4gICAgICAgIGlzQ29tcG9zaW5nXG4gICAgICAgICAgPyBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkgJiZcbiAgICAgICAgICAgIChldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25FbmRcIilcbiAgICAgICAgICA6IFwia2V5ZG93blwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgICAgIDIyOSA9PT0gbmF0aXZlRXZlbnQua2V5Q29kZSAmJlxuICAgICAgICAgICAgKGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvblN0YXJ0XCIpO1xuICAgICAgZXZlbnRUeXBlICYmXG4gICAgICAgICh1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSAmJlxuICAgICAgICAgIFwia29cIiAhPT0gbmF0aXZlRXZlbnQubG9jYWxlICYmXG4gICAgICAgICAgKGlzQ29tcG9zaW5nIHx8IFwib25Db21wb3NpdGlvblN0YXJ0XCIgIT09IGV2ZW50VHlwZVxuICAgICAgICAgICAgPyBcIm9uQ29tcG9zaXRpb25FbmRcIiA9PT0gZXZlbnRUeXBlICYmXG4gICAgICAgICAgICAgIGlzQ29tcG9zaW5nICYmXG4gICAgICAgICAgICAgIChmYWxsYmFja0RhdGEgPSBnZXREYXRhKCkpXG4gICAgICAgICAgICA6ICgocm9vdCA9IG5hdGl2ZUV2ZW50VGFyZ2V0KSxcbiAgICAgICAgICAgICAgKHN0YXJ0VGV4dCA9IFwidmFsdWVcIiBpbiByb290ID8gcm9vdC52YWx1ZSA6IHJvb3QudGV4dENvbnRlbnQpLFxuICAgICAgICAgICAgICAoaXNDb21wb3NpbmcgPSAhMCkpKSxcbiAgICAgICAgKGhhbmRsZUV2ZW50RnVuYyA9IGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRJbnN0LCBldmVudFR5cGUpKSxcbiAgICAgICAgMCA8IGhhbmRsZUV2ZW50RnVuYy5sZW5ndGggJiZcbiAgICAgICAgICAoKGV2ZW50VHlwZSA9IG5ldyBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50KFxuICAgICAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApKSxcbiAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogZXZlbnRUeXBlLCBsaXN0ZW5lcnM6IGhhbmRsZUV2ZW50RnVuYyB9KSxcbiAgICAgICAgICBmYWxsYmFja0RhdGFcbiAgICAgICAgICAgID8gKGV2ZW50VHlwZS5kYXRhID0gZmFsbGJhY2tEYXRhKVxuICAgICAgICAgICAgOiAoKGZhbGxiYWNrRGF0YSA9IGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpKSxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmFsbGJhY2tEYXRhICYmIChldmVudFR5cGUuZGF0YSA9IGZhbGxiYWNrRGF0YSkpKSk7XG4gICAgICBpZiAoXG4gICAgICAgIChmYWxsYmFja0RhdGEgPSBjYW5Vc2VUZXh0SW5wdXRFdmVudFxuICAgICAgICAgID8gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyhkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KVxuICAgICAgICAgIDogZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpKVxuICAgICAgKVxuICAgICAgICAoZXZlbnRUeXBlID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKHRhcmdldEluc3QsIFwib25CZWZvcmVJbnB1dFwiKSksXG4gICAgICAgICAgMCA8IGV2ZW50VHlwZS5sZW5ndGggJiZcbiAgICAgICAgICAgICgoaGFuZGxlRXZlbnRGdW5jID0gbmV3IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgICAgICAgIFwib25CZWZvcmVJbnB1dFwiLFxuICAgICAgICAgICAgICBcImJlZm9yZWlucHV0XCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICBldmVudDogaGFuZGxlRXZlbnRGdW5jLFxuICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGV2ZW50VHlwZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoaGFuZGxlRXZlbnRGdW5jLmRhdGEgPSBmYWxsYmFja0RhdGEpKTtcbiAgICAgIGV4dHJhY3RFdmVudHMkMShcbiAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICB0YXJnZXRJbnN0LFxuICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICk7XG4gICAgfVxuICAgIHByb2Nlc3NEaXNwYXRjaFF1ZXVlKGRpc3BhdGNoUXVldWUsIGV2ZW50U3lzdGVtRmxhZ3MpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIoaW5zdGFuY2UsIGxpc3RlbmVyLCBjdXJyZW50VGFyZ2V0KSB7XG4gIHJldHVybiB7XG4gICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICBjdXJyZW50VGFyZ2V0OiBjdXJyZW50VGFyZ2V0XG4gIH07XG59XG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0RmliZXIsIHJlYWN0TmFtZSkge1xuICBmb3IgKFxuICAgIHZhciBjYXB0dXJlTmFtZSA9IHJlYWN0TmFtZSArIFwiQ2FwdHVyZVwiLCBsaXN0ZW5lcnMgPSBbXTtcbiAgICBudWxsICE9PSB0YXJnZXRGaWJlcjtcblxuICApIHtcbiAgICB2YXIgX2luc3RhbmNlMiA9IHRhcmdldEZpYmVyLFxuICAgICAgc3RhdGVOb2RlID0gX2luc3RhbmNlMi5zdGF0ZU5vZGU7XG4gICAgX2luc3RhbmNlMiA9IF9pbnN0YW5jZTIudGFnO1xuICAgICg1ICE9PSBfaW5zdGFuY2UyICYmIDI2ICE9PSBfaW5zdGFuY2UyICYmIDI3ICE9PSBfaW5zdGFuY2UyKSB8fFxuICAgICAgbnVsbCA9PT0gc3RhdGVOb2RlIHx8XG4gICAgICAoKF9pbnN0YW5jZTIgPSBnZXRMaXN0ZW5lcih0YXJnZXRGaWJlciwgY2FwdHVyZU5hbWUpKSxcbiAgICAgIG51bGwgIT0gX2luc3RhbmNlMiAmJlxuICAgICAgICBsaXN0ZW5lcnMudW5zaGlmdChcbiAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKHRhcmdldEZpYmVyLCBfaW5zdGFuY2UyLCBzdGF0ZU5vZGUpXG4gICAgICAgICksXG4gICAgICAoX2luc3RhbmNlMiA9IGdldExpc3RlbmVyKHRhcmdldEZpYmVyLCByZWFjdE5hbWUpKSxcbiAgICAgIG51bGwgIT0gX2luc3RhbmNlMiAmJlxuICAgICAgICBsaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKHRhcmdldEZpYmVyLCBfaW5zdGFuY2UyLCBzdGF0ZU5vZGUpXG4gICAgICAgICkpO1xuICAgIHRhcmdldEZpYmVyID0gdGFyZ2V0RmliZXIucmV0dXJuO1xuICB9XG4gIHJldHVybiBsaXN0ZW5lcnM7XG59XG5mdW5jdGlvbiBnZXRQYXJlbnQoaW5zdCkge1xuICBpZiAobnVsbCA9PT0gaW5zdCkgcmV0dXJuIG51bGw7XG4gIGRvIGluc3QgPSBpbnN0LnJldHVybjtcbiAgd2hpbGUgKGluc3QgJiYgNSAhPT0gaW5zdC50YWcgJiYgMjcgIT09IGluc3QudGFnKTtcbiAgcmV0dXJuIGluc3QgPyBpbnN0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGV2ZW50LFxuICB0YXJnZXQsXG4gIGNvbW1vbixcbiAgaW5DYXB0dXJlUGhhc2Vcbikge1xuICBmb3IgKFxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuX3JlYWN0TmFtZSwgbGlzdGVuZXJzID0gW107XG4gICAgbnVsbCAhPT0gdGFyZ2V0ICYmIHRhcmdldCAhPT0gY29tbW9uO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UzID0gdGFyZ2V0LFxuICAgICAgYWx0ZXJuYXRlID0gX2luc3RhbmNlMy5hbHRlcm5hdGUsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UzLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UzID0gX2luc3RhbmNlMy50YWc7XG4gICAgaWYgKG51bGwgIT09IGFsdGVybmF0ZSAmJiBhbHRlcm5hdGUgPT09IGNvbW1vbikgYnJlYWs7XG4gICAgKDUgIT09IF9pbnN0YW5jZTMgJiYgMjYgIT09IF9pbnN0YW5jZTMgJiYgMjcgIT09IF9pbnN0YW5jZTMpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoYWx0ZXJuYXRlID0gc3RhdGVOb2RlKSxcbiAgICAgIGluQ2FwdHVyZVBoYXNlXG4gICAgICAgID8gKChzdGF0ZU5vZGUgPSBnZXRMaXN0ZW5lcih0YXJnZXQsIHJlZ2lzdHJhdGlvbk5hbWUpKSxcbiAgICAgICAgICBudWxsICE9IHN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgbGlzdGVuZXJzLnVuc2hpZnQoXG4gICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0LCBzdGF0ZU5vZGUsIGFsdGVybmF0ZSlcbiAgICAgICAgICAgICkpXG4gICAgICAgIDogaW5DYXB0dXJlUGhhc2UgfHxcbiAgICAgICAgICAoKHN0YXRlTm9kZSA9IGdldExpc3RlbmVyKHRhcmdldCwgcmVnaXN0cmF0aW9uTmFtZSkpLFxuICAgICAgICAgIG51bGwgIT0gc3RhdGVOb2RlICYmXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXQsIHN0YXRlTm9kZSwgYWx0ZXJuYXRlKVxuICAgICAgICAgICAgKSkpO1xuICAgIHRhcmdldCA9IHRhcmdldC5yZXR1cm47XG4gIH1cbiAgMCAhPT0gbGlzdGVuZXJzLmxlbmd0aCAmJlxuICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudCwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMgfSk7XG59XG52YXIgTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYID0gL1xcclxcbj8vZyxcbiAgTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYID0gL1xcdTAwMDB8XFx1RkZGRC9nO1xuZnVuY3Rpb24gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKG1hcmt1cCkge1xuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHR5cGVvZiBtYXJrdXAgPyBtYXJrdXAgOiBcIlwiICsgbWFya3VwKVxuICAgIC5yZXBsYWNlKE5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCwgXCJcXG5cIilcbiAgICAucmVwbGFjZShOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVgsIFwiXCIpO1xufVxuZnVuY3Rpb24gY2hlY2tGb3JVbm1hdGNoZWRUZXh0KHNlcnZlclRleHQsIGNsaWVudFRleHQpIHtcbiAgY2xpZW50VGV4dCA9IG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShjbGllbnRUZXh0KTtcbiAgcmV0dXJuIG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShzZXJ2ZXJUZXh0KSA9PT0gY2xpZW50VGV4dCA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBub29wJDEoKSB7fVxuZnVuY3Rpb24gc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGtleSwgdmFsdWUsIHByb3BzLCBwcmV2VmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IFwiYm9keVwiID09PSB0YWcgfHxcbiAgICAgICAgICAoXCJ0ZXh0YXJlYVwiID09PSB0YWcgJiYgXCJcIiA9PT0gdmFsdWUpIHx8XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgdmFsdWUpXG4gICAgICAgIDogKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcImJpZ2ludFwiID09PSB0eXBlb2YgdmFsdWUpICYmXG4gICAgICAgICAgXCJib2R5XCIgIT09IHRhZyAmJlxuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIFwiXCIgKyB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2xhc3NOYW1lXCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwiY2xhc3NcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRhYkluZGV4XCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwidGFiaW5kZXhcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRpclwiOlxuICAgIGNhc2UgXCJyb2xlXCI6XG4gICAgY2FzZSBcInZpZXdCb3hcIjpcbiAgICBjYXNlIFwid2lkdGhcIjpcbiAgICBjYXNlIFwiaGVpZ2h0XCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCB2YWx1ZSwgcHJldlZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkYXRhXCI6XG4gICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdGFnKSB7XG4gICAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJkYXRhXCIsIHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBcInNyY1wiOlxuICAgIGNhc2UgXCJocmVmXCI6XG4gICAgICBpZiAoXCJcIiA9PT0gdmFsdWUgJiYgKFwiYVwiICE9PSB0YWcgfHwgXCJocmVmXCIgIT09IGtleSkpIHtcbiAgICAgICAgZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImFjdGlvblwiOlxuICAgIGNhc2UgXCJmb3JtQWN0aW9uXCI6XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIFwiamF2YXNjcmlwdDp0aHJvdyBuZXcgRXJyb3IoJ0EgUmVhY3QgZm9ybSB3YXMgdW5leHBlY3RlZGx5IHN1Ym1pdHRlZC4gSWYgeW91IGNhbGxlZCBmb3JtLnN1Ym1pdCgpIG1hbnVhbGx5LCBjb25zaWRlciB1c2luZyBmb3JtLnJlcXVlc3RTdWJtaXQoKSBpbnN0ZWFkLiBJZiB5b3VcXFxcJ3JlIHRyeWluZyB0byB1c2UgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgaW4gYSBzdWJtaXQgZXZlbnQgaGFuZGxlciwgY29uc2lkZXIgYWxzbyBjYWxsaW5nIGV2ZW50LnByZXZlbnREZWZhdWx0KCkuJylcIlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZVxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcmV2VmFsdWUgJiZcbiAgICAgICAgICAoXCJmb3JtQWN0aW9uXCIgPT09IGtleVxuICAgICAgICAgICAgPyAoXCJpbnB1dFwiICE9PSB0YWcgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJuYW1lXCIsIHByb3BzLm5hbWUsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBcImZvcm1FbmNUeXBlXCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybU1ldGhvZFwiLFxuICAgICAgICAgICAgICAgIHByb3BzLmZvcm1NZXRob2QsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybVRhcmdldFwiLFxuICAgICAgICAgICAgICAgIHByb3BzLmZvcm1UYXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgOiAoc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwiZW5jVHlwZVwiLCBwcm9wcy5lbmNUeXBlLCBwcm9wcywgbnVsbCksXG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcIm1ldGhvZFwiLCBwcm9wcy5tZXRob2QsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwidGFyZ2V0XCIsIHByb3BzLnRhcmdldCwgcHJvcHMsIG51bGwpKSk7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgKGRvbUVsZW1lbnQub25jbGljayA9IG5vb3AkMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25TY3JvbGxcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbEVuZFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsZW5kXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICBpZiAobnVsbCAhPSB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdHlwZW9mIHZhbHVlIHx8ICEoXCJfX2h0bWxcIiBpbiB2YWx1ZSkpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MSkpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5fX2h0bWw7XG4gICAgICAgIGlmIChudWxsICE9IGtleSkge1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BzLmNoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYwKSk7XG4gICAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgZG9tRWxlbWVudC5tdWx0aXBsZSA9XG4gICAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdXRlZFwiOlxuICAgICAgZG9tRWxlbWVudC5tdXRlZCA9XG4gICAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIjpcbiAgICBjYXNlIFwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCI6XG4gICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgIGNhc2UgXCJpbm5lckhUTUxcIjpcbiAgICBjYXNlIFwicmVmXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYXV0b0ZvY3VzXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtIcmVmXCI6XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInhsaW5rOmhyZWZcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAga2V5ID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlTlMoXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmhyZWZcIixcbiAgICAgICAga2V5XG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvbnRlbnRFZGl0YWJsZVwiOlxuICAgIGNhc2UgXCJzcGVsbENoZWNrXCI6XG4gICAgY2FzZSBcImRyYWdnYWJsZVwiOlxuICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgIGNhc2UgXCJhdXRvUmV2ZXJzZVwiOlxuICAgIGNhc2UgXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCI6XG4gICAgY2FzZSBcImZvY3VzYWJsZVwiOlxuICAgIGNhc2UgXCJwcmVzZXJ2ZUFscGhhXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIiArIHZhbHVlKVxuICAgICAgICA6IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5lcnRcIjpcbiAgICBjYXNlIFwiYWxsb3dGdWxsU2NyZWVuXCI6XG4gICAgY2FzZSBcImFzeW5jXCI6XG4gICAgY2FzZSBcImF1dG9QbGF5XCI6XG4gICAgY2FzZSBcImNvbnRyb2xzXCI6XG4gICAgY2FzZSBcImRlZmF1bHRcIjpcbiAgICBjYXNlIFwiZGVmZXJcIjpcbiAgICBjYXNlIFwiZGlzYWJsZWRcIjpcbiAgICBjYXNlIFwiZGlzYWJsZVBpY3R1cmVJblBpY3R1cmVcIjpcbiAgICBjYXNlIFwiZGlzYWJsZVJlbW90ZVBsYXliYWNrXCI6XG4gICAgY2FzZSBcImZvcm1Ob1ZhbGlkYXRlXCI6XG4gICAgY2FzZSBcImhpZGRlblwiOlxuICAgIGNhc2UgXCJsb29wXCI6XG4gICAgY2FzZSBcIm5vTW9kdWxlXCI6XG4gICAgY2FzZSBcIm5vVmFsaWRhdGVcIjpcbiAgICBjYXNlIFwib3BlblwiOlxuICAgIGNhc2UgXCJwbGF5c0lubGluZVwiOlxuICAgIGNhc2UgXCJyZWFkT25seVwiOlxuICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxuICAgIGNhc2UgXCJyZXZlcnNlZFwiOlxuICAgIGNhc2UgXCJzY29wZWRcIjpcbiAgICBjYXNlIFwic2VhbWxlc3NcIjpcbiAgICBjYXNlIFwiaXRlbVNjb3BlXCI6XG4gICAgICB2YWx1ZSAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYXB0dXJlXCI6XG4gICAgY2FzZSBcImRvd25sb2FkXCI6XG4gICAgICAhMCA9PT0gdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgIDogITEgIT09IHZhbHVlICYmXG4gICAgICAgICAgICBudWxsICE9IHZhbHVlICYmXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjb2xzXCI6XG4gICAgY2FzZSBcInJvd3NcIjpcbiAgICBjYXNlIFwic2l6ZVwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICAhaXNOYU4odmFsdWUpICYmXG4gICAgICAxIDw9IHZhbHVlXG4gICAgICAgID8gZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSlcbiAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJvd1NwYW5cIjpcbiAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgIGlzTmFOKHZhbHVlKVxuICAgICAgICA/IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSlcbiAgICAgICAgOiBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb3BvdmVyXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiYmVmb3JldG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIHNldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwicG9wb3ZlclwiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtBY3R1YXRlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmFjdHVhdGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtBcmNyb2xlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmFyY3JvbGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtSb2xlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnJvbGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtTaG93XCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnNob3dcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtUaXRsZVwiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgICAgXCJ4bGluazp0aXRsZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1R5cGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6dHlwZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bWxCYXNlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOmJhc2VcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieG1sTGFuZ1wiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICAgICAgICBcInhtbDpsYW5nXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhtbFNwYWNlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOnNwYWNlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlzXCI6XG4gICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBcImlzXCIsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbm5lclRleHRcIjpcbiAgICBjYXNlIFwidGV4dENvbnRlbnRcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXG4gICAgICAgICEoMiA8IGtleS5sZW5ndGgpIHx8XG4gICAgICAgIChcIm9cIiAhPT0ga2V5WzBdICYmIFwiT1wiICE9PSBrZXlbMF0pIHx8XG4gICAgICAgIChcIm5cIiAhPT0ga2V5WzFdICYmIFwiTlwiICE9PSBrZXlbMV0pXG4gICAgICApXG4gICAgICAgIChrZXkgPSBhbGlhc2VzLmdldChrZXkpIHx8IGtleSksXG4gICAgICAgICAgc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoZG9tRWxlbWVudCwgdGFnLCBrZXksIHZhbHVlLCBwcm9wcywgcHJldlZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCB2YWx1ZSwgcHJldlZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgaWYgKG51bGwgIT0gdmFsdWUpIHtcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgIT09IHR5cGVvZiB2YWx1ZSB8fCAhKFwiX19odG1sXCIgaW4gdmFsdWUpKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjEpKTtcbiAgICAgICAga2V5ID0gdmFsdWUuX19odG1sO1xuICAgICAgICBpZiAobnVsbCAhPSBrZXkpIHtcbiAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wcy5jaGlsZHJlbikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MCkpO1xuICAgICAgICAgIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIHZhbHVlKVxuICAgICAgICA6IChcIm51bWJlclwiID09PSB0eXBlb2YgdmFsdWUgfHwgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIHZhbHVlKSAmJlxuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIFwiXCIgKyB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25TY3JvbGxcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbEVuZFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsZW5kXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgKGRvbUVsZW1lbnQub25jbGljayA9IG5vb3AkMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCI6XG4gICAgY2FzZSBcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiOlxuICAgIGNhc2UgXCJpbm5lckhUTUxcIjpcbiAgICBjYXNlIFwicmVmXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5uZXJUZXh0XCI6XG4gICAgY2FzZSBcInRleHRDb250ZW50XCI6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKCFyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgIGE6IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBcIm9cIiA9PT0ga2V5WzBdICYmXG4gICAgICAgICAgICBcIm5cIiA9PT0ga2V5WzFdICYmXG4gICAgICAgICAgICAoKHByb3BzID0ga2V5LmVuZHNXaXRoKFwiQ2FwdHVyZVwiKSksXG4gICAgICAgICAgICAodGFnID0ga2V5LnNsaWNlKDIsIHByb3BzID8ga2V5Lmxlbmd0aCAtIDcgOiB2b2lkIDApKSxcbiAgICAgICAgICAgIChwcmV2VmFsdWUgPSBkb21FbGVtZW50W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpLFxuICAgICAgICAgICAgKHByZXZWYWx1ZSA9IG51bGwgIT0gcHJldlZhbHVlID8gcHJldlZhbHVlW2tleV0gOiBudWxsKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZWYWx1ZSAmJlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGFnLCBwcmV2VmFsdWUsIHByb3BzKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IHByZXZWYWx1ZSAmJlxuICAgICAgICAgICAgICAoa2V5IGluIGRvbUVsZW1lbnRcbiAgICAgICAgICAgICAgICA/IChkb21FbGVtZW50W2tleV0gPSBudWxsKVxuICAgICAgICAgICAgICAgIDogZG9tRWxlbWVudC5oYXNBdHRyaWJ1dGUoa2V5KSAmJlxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KSk7XG4gICAgICAgICAgICBkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGFnLCB2YWx1ZSwgcHJvcHMpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5IGluIGRvbUVsZW1lbnRcbiAgICAgICAgICAgID8gKGRvbUVsZW1lbnRba2V5XSA9IHZhbHVlKVxuICAgICAgICAgICAgOiAhMCA9PT0gdmFsdWVcbiAgICAgICAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgICAgICAgIDogc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2V0SW5pdGlhbFByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBwcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImltZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgICB2YXIgaGFzU3JjID0gITEsXG4gICAgICAgIGhhc1NyY1NldCA9ICExLFxuICAgICAgICBwcm9wS2V5O1xuICAgICAgZm9yIChwcm9wS2V5IGluIHByb3BzKVxuICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcEtleV07XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcFZhbHVlKVxuICAgICAgICAgICAgc3dpdGNoIChwcm9wS2V5KSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJzcmNcIjpcbiAgICAgICAgICAgICAgICBoYXNTcmMgPSAhMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNyY1NldFwiOlxuICAgICAgICAgICAgICAgIGhhc1NyY1NldCA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBwcm9wS2V5LCBwcm9wVmFsdWUsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgaGFzU3JjU2V0ICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcInNyY1NldFwiLCBwcm9wcy5zcmNTZXQsIHByb3BzLCBudWxsKTtcbiAgICAgIGhhc1NyYyAmJiBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJzcmNcIiwgcHJvcHMuc3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSAocHJvcEtleSA9IHByb3BWYWx1ZSA9IGhhc1NyY1NldCA9IG51bGwpLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChoYXNTcmMgaW4gcHJvcHMpXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShoYXNTcmMpKSB7XG4gICAgICAgICAgdmFyIHByb3BWYWx1ZSQxODYgPSBwcm9wc1toYXNTcmNdO1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BWYWx1ZSQxODYpXG4gICAgICAgICAgICBzd2l0Y2ggKGhhc1NyYykge1xuICAgICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICAgICAgICAgIGhhc1NyY1NldCA9IHByb3BWYWx1ZSQxODY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNoZWNrZWRcIjpcbiAgICAgICAgICAgICAgICBjaGVja2VkID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgICBwcm9wS2V5ID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BWYWx1ZSQxODY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wVmFsdWUkMTg2KVxuICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBoYXNTcmMsIHByb3BWYWx1ZSQxODYsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgaW5pdElucHV0KFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBwcm9wS2V5LFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGNoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRDaGVja2VkLFxuICAgICAgICBwcm9wVmFsdWUsXG4gICAgICAgIGhhc1NyY1NldCxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgICB0cmFjayhkb21FbGVtZW50KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGhhc1NyYyA9IHByb3BWYWx1ZSA9IHByb3BLZXkgPSBudWxsO1xuICAgICAgZm9yIChoYXNTcmNTZXQgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShoYXNTcmNTZXQpICYmXG4gICAgICAgICAgKChkZWZhdWx0VmFsdWUgPSBwcm9wc1toYXNTcmNTZXRdKSwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGhhc1NyY1NldCkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIGhhc1NyYyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBoYXNTcmNTZXQsIGRlZmF1bHRWYWx1ZSwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgIHRhZyA9IHByb3BLZXk7XG4gICAgICBwcm9wcyA9IHByb3BWYWx1ZTtcbiAgICAgIGRvbUVsZW1lbnQubXVsdGlwbGUgPSAhIWhhc1NyYztcbiAgICAgIG51bGwgIT0gdGFnXG4gICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWhhc1NyYywgdGFnLCAhMSlcbiAgICAgICAgOiBudWxsICE9IHByb3BzICYmIHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFoYXNTcmMsIHByb3BzLCAhMCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BLZXkgPSBoYXNTcmNTZXQgPSBoYXNTcmMgPSBudWxsO1xuICAgICAgZm9yIChwcm9wVmFsdWUgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wVmFsdWUpICYmXG4gICAgICAgICAgKChkZWZhdWx0VmFsdWUgPSBwcm9wc1twcm9wVmFsdWVdKSwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGhhc1NyYyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGhhc1NyY1NldCA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZGVmYXVsdFZhbHVlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BWYWx1ZSwgZGVmYXVsdFZhbHVlLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgaW5pdFRleHRhcmVhKGRvbUVsZW1lbnQsIGhhc1NyYywgaGFzU3JjU2V0LCBwcm9wS2V5KTtcbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgIGZvciAoY2hlY2tlZCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGNoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tjaGVja2VkXSksIG51bGwgIT0gaGFzU3JjKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgaGFzU3JjICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgaGFzU3JjICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGhhc1NyYztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgY2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJkaWFsb2dcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjYW5jZWxcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2xvc2VcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaWZyYW1lXCI6XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidmlkZW9cIjpcbiAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgIGZvciAoaGFzU3JjID0gMDsgaGFzU3JjIDwgbWVkaWFFdmVudFR5cGVzLmxlbmd0aDsgaGFzU3JjKyspXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQobWVkaWFFdmVudFR5cGVzW2hhc1NyY10sIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImltYWdlXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiZXJyb3JcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkZXRhaWxzXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImVtYmVkXCI6XG4gICAgY2FzZSBcInNvdXJjZVwiOlxuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiZXJyb3JcIiwgZG9tRWxlbWVudCksXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGRvbUVsZW1lbnQpO1xuICAgIGNhc2UgXCJhcmVhXCI6XG4gICAgY2FzZSBcImJhc2VcIjpcbiAgICBjYXNlIFwiYnJcIjpcbiAgICBjYXNlIFwiY29sXCI6XG4gICAgY2FzZSBcImhyXCI6XG4gICAgY2FzZSBcImtleWdlblwiOlxuICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgY2FzZSBcInBhcmFtXCI6XG4gICAgY2FzZSBcInRyYWNrXCI6XG4gICAgY2FzZSBcIndiclwiOlxuICAgIGNhc2UgXCJtZW51aXRlbVwiOlxuICAgICAgZm9yIChkZWZhdWx0Q2hlY2tlZCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRDaGVja2VkKSAmJlxuICAgICAgICAgICgoaGFzU3JjID0gcHJvcHNbZGVmYXVsdENoZWNrZWRdKSwgbnVsbCAhPSBoYXNTcmMpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGRlZmF1bHRDaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgZGVmYXVsdENoZWNrZWQsIGhhc1NyYywgcHJvcHMsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGlzQ3VzdG9tRWxlbWVudCh0YWcpKSB7XG4gICAgICAgIGZvciAocHJvcFZhbHVlJDE4NiBpbiBwcm9wcylcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wVmFsdWUkMTg2KSAmJlxuICAgICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1twcm9wVmFsdWUkMTg2XSksXG4gICAgICAgICAgICB2b2lkIDAgIT09IGhhc1NyYyAmJlxuICAgICAgICAgICAgICBzZXRQcm9wT25DdXN0b21FbGVtZW50KFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIHByb3BWYWx1ZSQxODYsXG4gICAgICAgICAgICAgICAgaGFzU3JjLFxuICAgICAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgICAgIHZvaWQgMFxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIGZvciAoZGVmYXVsdFZhbHVlIGluIHByb3BzKVxuICAgIHByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkgJiZcbiAgICAgICgoaGFzU3JjID0gcHJvcHNbZGVmYXVsdFZhbHVlXSksXG4gICAgICBudWxsICE9IGhhc1NyYyAmJlxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgZGVmYXVsdFZhbHVlLCBoYXNTcmMsIHByb3BzLCBudWxsKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVQcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHRhZywgbGFzdFByb3BzLCBuZXh0UHJvcHMpIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIFwiZGl2XCI6XG4gICAgY2FzZSBcInNwYW5cIjpcbiAgICBjYXNlIFwic3ZnXCI6XG4gICAgY2FzZSBcInBhdGhcIjpcbiAgICBjYXNlIFwiYVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwibGlcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgdmFyIG5hbWUgPSBudWxsLFxuICAgICAgICB0eXBlID0gbnVsbCxcbiAgICAgICAgdmFsdWUgPSBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBudWxsLFxuICAgICAgICBsYXN0RGVmYXVsdFZhbHVlID0gbnVsbCxcbiAgICAgICAgY2hlY2tlZCA9IG51bGwsXG4gICAgICAgIGRlZmF1bHRDaGVja2VkID0gbnVsbDtcbiAgICAgIGZvciAocHJvcEtleSBpbiBsYXN0UHJvcHMpIHtcbiAgICAgICAgdmFyIGxhc3RQcm9wID0gbGFzdFByb3BzW3Byb3BLZXldO1xuICAgICAgICBpZiAobGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpICYmIG51bGwgIT0gbGFzdFByb3ApXG4gICAgICAgICAgc3dpdGNoIChwcm9wS2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXksIG51bGwsIG5leHRQcm9wcywgbGFzdFByb3ApO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIHByb3BLZXkkMjAzIGluIG5leHRQcm9wcykge1xuICAgICAgICB2YXIgcHJvcEtleSA9IG5leHRQcm9wc1twcm9wS2V5JDIwM107XG4gICAgICAgIGxhc3RQcm9wID0gbGFzdFByb3BzW3Byb3BLZXkkMjAzXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIwMykgJiZcbiAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5IHx8IG51bGwgIT0gbGFzdFByb3ApXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkkMjAzKSB7XG4gICAgICAgICAgICBjYXNlIFwidHlwZVwiOlxuICAgICAgICAgICAgICB0eXBlID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICAgICAgICBuYW1lID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgICAgICAgICBjaGVja2VkID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdENoZWNrZWRcIjpcbiAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IHByb3BLZXkpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHByb3BLZXkgIT09IGxhc3RQcm9wICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyxcbiAgICAgICAgICAgICAgICAgIHByb3BLZXksXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBsYXN0UHJvcFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXBkYXRlSW5wdXQoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGxhc3REZWZhdWx0VmFsdWUsXG4gICAgICAgIGNoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRDaGVja2VkLFxuICAgICAgICB0eXBlLFxuICAgICAgICBuYW1lXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIHByb3BLZXkgPSB2YWx1ZSA9IGRlZmF1bHRWYWx1ZSA9IHByb3BLZXkkMjAzID0gbnVsbDtcbiAgICAgIGZvciAodHlwZSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKGxhc3REZWZhdWx0VmFsdWUgPSBsYXN0UHJvcHNbdHlwZV0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSAmJiBudWxsICE9IGxhc3REZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgICAgICAgICBwcm9wS2V5ID0gbGFzdERlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSB8fFxuICAgICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKG5hbWUgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKCh0eXBlID0gbmV4dFByb3BzW25hbWVdKSxcbiAgICAgICAgICAobGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wc1tuYW1lXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgICAgICAobnVsbCAhPSB0eXBlIHx8IG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBwcm9wS2V5JDIwMyA9IHR5cGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSB0eXBlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgICAgICAgICB2YWx1ZSA9IHR5cGU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0eXBlICE9PSBsYXN0RGVmYXVsdFZhbHVlICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHRhZyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgIGxhc3RQcm9wcyA9IHZhbHVlO1xuICAgICAgbmV4dFByb3BzID0gcHJvcEtleTtcbiAgICAgIG51bGwgIT0gcHJvcEtleSQyMDNcbiAgICAgICAgPyB1cGRhdGVPcHRpb25zKGRvbUVsZW1lbnQsICEhbGFzdFByb3BzLCBwcm9wS2V5JDIwMywgITEpXG4gICAgICAgIDogISFuZXh0UHJvcHMgIT09ICEhbGFzdFByb3BzICYmXG4gICAgICAgICAgKG51bGwgIT0gdGFnXG4gICAgICAgICAgICA/IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIHRhZywgITApXG4gICAgICAgICAgICA6IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIGxhc3RQcm9wcyA/IFtdIDogXCJcIiwgITEpKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgIHByb3BLZXkgPSBwcm9wS2V5JDIwMyA9IG51bGw7XG4gICAgICBmb3IgKGRlZmF1bHRWYWx1ZSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKG5hbWUgPSBsYXN0UHJvcHNbZGVmYXVsdFZhbHVlXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkgJiZcbiAgICAgICAgICAgIG51bGwgIT0gbmFtZSAmJlxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShkZWZhdWx0VmFsdWUpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0VmFsdWUsIG51bGwsIG5leHRQcm9wcywgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgZm9yICh2YWx1ZSBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKG5hbWUgPSBuZXh0UHJvcHNbdmFsdWVdKSxcbiAgICAgICAgICAodHlwZSA9IGxhc3RQcm9wc1t2YWx1ZV0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgKG51bGwgIT0gbmFtZSB8fCBudWxsICE9IHR5cGUpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkkMjAzID0gbmFtZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBuYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBuYW1lKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmFtZSAhPT0gdHlwZSAmJlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCB2YWx1ZSwgbmFtZSwgbmV4dFByb3BzLCB0eXBlKTtcbiAgICAgICAgICB9XG4gICAgICB1cGRhdGVUZXh0YXJlYShkb21FbGVtZW50LCBwcm9wS2V5JDIwMywgcHJvcEtleSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMTkgaW4gbGFzdFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChwcm9wS2V5JDIwMyA9IGxhc3RQcm9wc1twcm9wS2V5JDIxOV0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIxOSkgJiZcbiAgICAgICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDMgJiZcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMTkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChwcm9wS2V5JDIxOSkge1xuICAgICAgICAgICAgY2FzZSBcInNlbGVjdGVkXCI6XG4gICAgICAgICAgICAgIGRvbUVsZW1lbnQuc2VsZWN0ZWQgPSAhMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjE5LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgZm9yIChsYXN0RGVmYXVsdFZhbHVlIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbbGFzdERlZmF1bHRWYWx1ZV0pLFxuICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2xhc3REZWZhdWx0VmFsdWVdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkobGFzdERlZmF1bHRWYWx1ZSkgJiZcbiAgICAgICAgICAgIHByb3BLZXkkMjAzICE9PSBwcm9wS2V5ICYmXG4gICAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5JDIwMyB8fCBudWxsICE9IHByb3BLZXkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChsYXN0RGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDMgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBwcm9wS2V5JDIwMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDMsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImltZ1wiOlxuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgY2FzZSBcImFyZWFcIjpcbiAgICBjYXNlIFwiYmFzZVwiOlxuICAgIGNhc2UgXCJiclwiOlxuICAgIGNhc2UgXCJjb2xcIjpcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICBjYXNlIFwiaHJcIjpcbiAgICBjYXNlIFwia2V5Z2VuXCI6XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwicGFyYW1cIjpcbiAgICBjYXNlIFwic291cmNlXCI6XG4gICAgY2FzZSBcInRyYWNrXCI6XG4gICAgY2FzZSBcIndiclwiOlxuICAgIGNhc2UgXCJtZW51aXRlbVwiOlxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMjQgaW4gbGFzdFByb3BzKVxuICAgICAgICAocHJvcEtleSQyMDMgPSBsYXN0UHJvcHNbcHJvcEtleSQyMjRdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjQpICYmXG4gICAgICAgICAgICBudWxsICE9IHByb3BLZXkkMjAzICYmXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjI0KSAmJlxuICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXkkMjI0LCBudWxsLCBuZXh0UHJvcHMsIHByb3BLZXkkMjAzKTtcbiAgICAgIGZvciAoY2hlY2tlZCBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHByb3BLZXkkMjAzID0gbmV4dFByb3BzW2NoZWNrZWRdKSxcbiAgICAgICAgICAocHJvcEtleSA9IGxhc3RQcm9wc1tjaGVja2VkXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KGNoZWNrZWQpICYmXG4gICAgICAgICAgICBwcm9wS2V5JDIwMyAhPT0gcHJvcEtleSAmJlxuICAgICAgICAgICAgKG51bGwgIT0gcHJvcEtleSQyMDMgfHwgbnVsbCAhPSBwcm9wS2V5KSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoY2hlY2tlZCkge1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gcHJvcEtleSQyMDMpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGlzQ3VzdG9tRWxlbWVudCh0YWcpKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BLZXkkMjI5IGluIGxhc3RQcm9wcylcbiAgICAgICAgICAocHJvcEtleSQyMDMgPSBsYXN0UHJvcHNbcHJvcEtleSQyMjldKSxcbiAgICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyOSkgJiZcbiAgICAgICAgICAgICAgdm9pZCAwICE9PSBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjI5KSAmJlxuICAgICAgICAgICAgICBzZXRQcm9wT25DdXN0b21FbGVtZW50KFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjI5LFxuICAgICAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgZm9yIChkZWZhdWx0Q2hlY2tlZCBpbiBuZXh0UHJvcHMpXG4gICAgICAgICAgKHByb3BLZXkkMjAzID0gbmV4dFByb3BzW2RlZmF1bHRDaGVja2VkXSksXG4gICAgICAgICAgICAocHJvcEtleSA9IGxhc3RQcm9wc1tkZWZhdWx0Q2hlY2tlZF0pLFxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShkZWZhdWx0Q2hlY2tlZCkgfHxcbiAgICAgICAgICAgICAgcHJvcEtleSQyMDMgPT09IHByb3BLZXkgfHxcbiAgICAgICAgICAgICAgKHZvaWQgMCA9PT0gcHJvcEtleSQyMDMgJiYgdm9pZCAwID09PSBwcm9wS2V5KSB8fFxuICAgICAgICAgICAgICBzZXRQcm9wT25DdXN0b21FbGVtZW50KFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRDaGVja2VkLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5XG4gICAgICAgICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgfVxuICBmb3IgKHZhciBwcm9wS2V5JDIzNCBpbiBsYXN0UHJvcHMpXG4gICAgKHByb3BLZXkkMjAzID0gbGFzdFByb3BzW3Byb3BLZXkkMjM0XSksXG4gICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMzQpICYmXG4gICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDMgJiZcbiAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIzNCkgJiZcbiAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXkkMjM0LCBudWxsLCBuZXh0UHJvcHMsIHByb3BLZXkkMjAzKTtcbiAgZm9yIChsYXN0UHJvcCBpbiBuZXh0UHJvcHMpXG4gICAgKHByb3BLZXkkMjAzID0gbmV4dFByb3BzW2xhc3RQcm9wXSksXG4gICAgICAocHJvcEtleSA9IGxhc3RQcm9wc1tsYXN0UHJvcF0pLFxuICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShsYXN0UHJvcCkgfHxcbiAgICAgICAgcHJvcEtleSQyMDMgPT09IHByb3BLZXkgfHxcbiAgICAgICAgKG51bGwgPT0gcHJvcEtleSQyMDMgJiYgbnVsbCA9PSBwcm9wS2V5KSB8fFxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgbGFzdFByb3AsIHByb3BLZXkkMjAzLCBuZXh0UHJvcHMsIHByb3BLZXkpO1xufVxudmFyIGV2ZW50c0VuYWJsZWQgPSBudWxsLFxuICBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IG51bGw7XG5mdW5jdGlvbiBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgcmV0dXJuIDkgPT09IHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlXG4gICAgPyByb290Q29udGFpbmVyRWxlbWVudFxuICAgIDogcm9vdENvbnRhaW5lckVsZW1lbnQub3duZXJEb2N1bWVudDtcbn1cbmZ1bmN0aW9uIGdldE93bkhvc3RDb250ZXh0KG5hbWVzcGFjZVVSSSkge1xuICBzd2l0Y2ggKG5hbWVzcGFjZVVSSSkge1xuICAgIGNhc2UgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjpcbiAgICAgIHJldHVybiAyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QocGFyZW50TmFtZXNwYWNlLCB0eXBlKSB7XG4gIGlmICgwID09PSBwYXJlbnROYW1lc3BhY2UpXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwic3ZnXCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gIHJldHVybiAxID09PSBwYXJlbnROYW1lc3BhY2UgJiYgXCJmb3JlaWduT2JqZWN0XCIgPT09IHR5cGVcbiAgICA/IDBcbiAgICA6IHBhcmVudE5hbWVzcGFjZTtcbn1cbmZ1bmN0aW9uIHNob3VsZFNldFRleHRDb250ZW50KHR5cGUsIHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgXCJ0ZXh0YXJlYVwiID09PSB0eXBlIHx8XG4gICAgXCJub3NjcmlwdFwiID09PSB0eXBlIHx8XG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByb3BzLmNoaWxkcmVuIHx8XG4gICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIHByb3BzLmNoaWxkcmVuIHx8XG4gICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIHByb3BzLmNoaWxkcmVuIHx8XG4gICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbnVsbCAhPT0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiZcbiAgICAgIG51bGwgIT0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sKVxuICApO1xufVxudmFyIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IG51bGw7XG5mdW5jdGlvbiBzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uKCkge1xuICB2YXIgZXZlbnQgPSB3aW5kb3cuZXZlbnQ7XG4gIGlmIChldmVudCAmJiBcInBvcHN0YXRlXCIgPT09IGV2ZW50LnR5cGUpIHtcbiAgICBpZiAoZXZlbnQgPT09IGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCkgcmV0dXJuICExO1xuICAgIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IGV2ZW50O1xuICAgIHJldHVybiAhMDtcbiAgfVxuICBjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQgPSBudWxsO1xuICByZXR1cm4gITE7XG59XG52YXIgc2NoZWR1bGVUaW1lb3V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc2V0VGltZW91dCA/IHNldFRpbWVvdXQgOiB2b2lkIDAsXG4gIGNhbmNlbFRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjbGVhclRpbWVvdXQgPyBjbGVhclRpbWVvdXQgOiB2b2lkIDAsXG4gIGxvY2FsUHJvbWlzZSA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFByb21pc2UgPyBQcm9taXNlIDogdm9pZCAwLFxuICBzY2hlZHVsZU1pY3JvdGFzayA9XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcXVldWVNaWNyb3Rhc2tcbiAgICAgID8gcXVldWVNaWNyb3Rhc2tcbiAgICAgIDogXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGxvY2FsUHJvbWlzZVxuICAgICAgICA/IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsUHJvbWlzZVxuICAgICAgICAgICAgICAucmVzb2x2ZShudWxsKVxuICAgICAgICAgICAgICAudGhlbihjYWxsYmFjaylcbiAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9ySW5OZXh0VGljayk7XG4gICAgICAgICAgfVxuICAgICAgICA6IHNjaGVkdWxlVGltZW91dDtcbmZ1bmN0aW9uIGhhbmRsZUVycm9ySW5OZXh0VGljayhlcnJvcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG59XG5mdW5jdGlvbiBjbGVhclN1c3BlbnNlQm91bmRhcnkocGFyZW50SW5zdGFuY2UsIHN1c3BlbnNlSW5zdGFuY2UpIHtcbiAgdmFyIG5vZGUgPSBzdXNwZW5zZUluc3RhbmNlLFxuICAgIGRlcHRoID0gMDtcbiAgZG8ge1xuICAgIHZhciBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgaWYgKG5leHROb2RlICYmIDggPT09IG5leHROb2RlLm5vZGVUeXBlKVxuICAgICAgaWYgKCgobm9kZSA9IG5leHROb2RlLmRhdGEpLCBcIi8kXCIgPT09IG5vZGUpKSB7XG4gICAgICAgIGlmICgwID09PSBkZXB0aCkge1xuICAgICAgICAgIHBhcmVudEluc3RhbmNlLnJlbW92ZUNoaWxkKG5leHROb2RlKTtcbiAgICAgICAgICByZXRyeUlmQmxvY2tlZE9uKHN1c3BlbnNlSW5zdGFuY2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZXB0aC0tO1xuICAgICAgfSBlbHNlIChcIiRcIiAhPT0gbm9kZSAmJiBcIiQ/XCIgIT09IG5vZGUgJiYgXCIkIVwiICE9PSBub2RlKSB8fCBkZXB0aCsrO1xuICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgfSB3aGlsZSAobm9kZSk7XG4gIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBjbGVhckNvbnRhaW5lclNwYXJpbmdseShjb250YWluZXIpIHtcbiAgdmFyIG5leHROb2RlID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIG5leHROb2RlICYmIDEwID09PSBuZXh0Tm9kZS5ub2RlVHlwZSAmJiAobmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZyk7XG4gIGZvciAoOyBuZXh0Tm9kZTsgKSB7XG4gICAgdmFyIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xuICAgIHN3aXRjaCAobm9kZS5ub2RlTmFtZSkge1xuICAgICAgY2FzZSBcIkhUTUxcIjpcbiAgICAgIGNhc2UgXCJIRUFEXCI6XG4gICAgICBjYXNlIFwiQk9EWVwiOlxuICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShub2RlKTtcbiAgICAgICAgZGV0YWNoRGVsZXRlZEluc3RhbmNlKG5vZGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgXCJTQ1JJUFRcIjpcbiAgICAgIGNhc2UgXCJTVFlMRVwiOlxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgXCJMSU5LXCI6XG4gICAgICAgIGlmIChcInN0eWxlc2hlZXRcIiA9PT0gbm9kZS5yZWwudG9Mb3dlckNhc2UoKSkgY29udGludWU7XG4gICAgfVxuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gY2FuSHlkcmF0ZUluc3RhbmNlKGluc3RhbmNlLCB0eXBlLCBwcm9wcywgaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgZm9yICg7IDEgPT09IGluc3RhbmNlLm5vZGVUeXBlOyApIHtcbiAgICB2YXIgYW55UHJvcHMgPSBwcm9wcztcbiAgICBpZiAoaW5zdGFuY2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gdHlwZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBpZiAoXG4gICAgICAgICFpblJvb3RPclNpbmdsZXRvbiAmJlxuICAgICAgICAoXCJJTlBVVFwiICE9PSBpbnN0YW5jZS5ub2RlTmFtZSB8fCBcImhpZGRlblwiICE9PSBpbnN0YW5jZS50eXBlKVxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKCFpblJvb3RPclNpbmdsZXRvbilcbiAgICAgIGlmIChcImlucHV0XCIgPT09IHR5cGUgJiYgXCJoaWRkZW5cIiA9PT0gaW5zdGFuY2UudHlwZSkge1xuICAgICAgICB2YXIgbmFtZSA9IG51bGwgPT0gYW55UHJvcHMubmFtZSA/IG51bGwgOiBcIlwiICsgYW55UHJvcHMubmFtZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwiaGlkZGVuXCIgPT09IGFueVByb3BzLnR5cGUgJiZcbiAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PSBuYW1lXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9IGVsc2UgcmV0dXJuIGluc3RhbmNlO1xuICAgIGVsc2UgaWYgKCFpbnN0YW5jZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0pXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgICAgICBpZiAoIWluc3RhbmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpKSBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgbmFtZSA9IGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICBpZiAoXCJzdHlsZXNoZWV0XCIgPT09IG5hbWUgJiYgaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiZGF0YS1wcmVjZWRlbmNlXCIpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICBuYW1lICE9PSBhbnlQcm9wcy5yZWwgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmhyZWYgPyBudWxsIDogYW55UHJvcHMuaHJlZikgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpICE9PVxuICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy5jcm9zc09yaWdpbiA/IG51bGwgOiBhbnlQcm9wcy5jcm9zc09yaWdpbikgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInRpdGxlXCIpICE9PVxuICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy50aXRsZSA/IG51bGwgOiBhbnlQcm9wcy50aXRsZSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICAgIGlmIChpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIikpIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgIG5hbWUgPSBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKG5hbWUgIT09IChudWxsID09IGFueVByb3BzLnNyYyA/IG51bGwgOiBhbnlQcm9wcy5zcmMpIHx8XG4gICAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInR5cGVcIikgIT09XG4gICAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMudHlwZSA/IG51bGwgOiBhbnlQcm9wcy50eXBlKSB8fFxuICAgICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJjcm9zc29yaWdpblwiKSAhPT1cbiAgICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy5jcm9zc09yaWdpbiA/IG51bGwgOiBhbnlQcm9wcy5jcm9zc09yaWdpbikpICYmXG4gICAgICAgICAgICBuYW1lICYmXG4gICAgICAgICAgICBpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJhc3luY1wiKSAmJlxuICAgICAgICAgICAgIWluc3RhbmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH1cbiAgICBpbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGluc3RhbmNlLm5leHRTaWJsaW5nKTtcbiAgICBpZiAobnVsbCA9PT0gaW5zdGFuY2UpIGJyZWFrO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShpbnN0YW5jZSwgdGV4dCwgaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgaWYgKFwiXCIgPT09IHRleHQpIHJldHVybiBudWxsO1xuICBmb3IgKDsgMyAhPT0gaW5zdGFuY2Uubm9kZVR5cGU7ICkge1xuICAgIGlmIChcbiAgICAgICgxICE9PSBpbnN0YW5jZS5ub2RlVHlwZSB8fFxuICAgICAgICBcIklOUFVUXCIgIT09IGluc3RhbmNlLm5vZGVOYW1lIHx8XG4gICAgICAgIFwiaGlkZGVuXCIgIT09IGluc3RhbmNlLnR5cGUpICYmXG4gICAgICAhaW5Sb290T3JTaW5nbGV0b25cbiAgICApXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGluc3RhbmNlLm5leHRTaWJsaW5nKTtcbiAgICBpZiAobnVsbCA9PT0gaW5zdGFuY2UpIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGdldE5leHRIeWRyYXRhYmxlKG5vZGUpIHtcbiAgZm9yICg7IG51bGwgIT0gbm9kZTsgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgIGlmICgxID09PSBub2RlVHlwZSB8fCAzID09PSBub2RlVHlwZSkgYnJlYWs7XG4gICAgaWYgKDggPT09IG5vZGVUeXBlKSB7XG4gICAgICBub2RlVHlwZSA9IG5vZGUuZGF0YTtcbiAgICAgIGlmIChcbiAgICAgICAgXCIkXCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiJCFcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCIkP1wiID09PSBub2RlVHlwZSB8fFxuICAgICAgICBcIkYhXCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiRlwiID09PSBub2RlVHlwZVxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIGlmIChcIi8kXCIgPT09IG5vZGVUeXBlKSByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldEluc3RhbmNlKSB7XG4gIHRhcmdldEluc3RhbmNlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nO1xuICBmb3IgKHZhciBkZXB0aCA9IDA7IHRhcmdldEluc3RhbmNlOyApIHtcbiAgICBpZiAoOCA9PT0gdGFyZ2V0SW5zdGFuY2Uubm9kZVR5cGUpIHtcbiAgICAgIHZhciBkYXRhID0gdGFyZ2V0SW5zdGFuY2UuZGF0YTtcbiAgICAgIGlmIChcIiRcIiA9PT0gZGF0YSB8fCBcIiQhXCIgPT09IGRhdGEgfHwgXCIkP1wiID09PSBkYXRhKSB7XG4gICAgICAgIGlmICgwID09PSBkZXB0aCkgcmV0dXJuIHRhcmdldEluc3RhbmNlO1xuICAgICAgICBkZXB0aC0tO1xuICAgICAgfSBlbHNlIFwiLyRcIiA9PT0gZGF0YSAmJiBkZXB0aCsrO1xuICAgIH1cbiAgICB0YXJnZXRJbnN0YW5jZSA9IHRhcmdldEluc3RhbmNlLnByZXZpb3VzU2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gIHByb3BzID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICB0eXBlID0gcHJvcHMuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1MikpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgY2FzZSBcImhlYWRcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5oZWFkO1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1MykpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5ib2R5O1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1NCkpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUxKSk7XG4gIH1cbn1cbnZhciBwcmVsb2FkUHJvcHNNYXAgPSBuZXcgTWFwKCksXG4gIHByZWNvbm5lY3RzU2V0ID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gZ2V0SG9pc3RhYmxlUm9vdChjb250YWluZXIpIHtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRhaW5lci5nZXRSb290Tm9kZVxuICAgID8gY29udGFpbmVyLmdldFJvb3ROb2RlKClcbiAgICA6IGNvbnRhaW5lci5vd25lckRvY3VtZW50O1xufVxudmFyIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLmQ7XG5SZWFjdERPTVNoYXJlZEludGVybmFscy5kID0ge1xuICBmOiBmbHVzaFN5bmNXb3JrLFxuICByOiByZXF1ZXN0Rm9ybVJlc2V0LFxuICBEOiBwcmVmZXRjaEROUyxcbiAgQzogcHJlY29ubmVjdCxcbiAgTDogcHJlbG9hZCxcbiAgbTogcHJlbG9hZE1vZHVsZSxcbiAgWDogcHJlaW5pdFNjcmlwdCxcbiAgUzogcHJlaW5pdFN0eWxlLFxuICBNOiBwcmVpbml0TW9kdWxlU2NyaXB0XG59O1xuZnVuY3Rpb24gZmx1c2hTeW5jV29yaygpIHtcbiAgdmFyIHByZXZpb3VzV2FzUmVuZGVyaW5nID0gcHJldmlvdXNEaXNwYXRjaGVyLmYoKSxcbiAgICB3YXNSZW5kZXJpbmcgPSBmbHVzaFN5bmNXb3JrJDEoKTtcbiAgcmV0dXJuIHByZXZpb3VzV2FzUmVuZGVyaW5nIHx8IHdhc1JlbmRlcmluZztcbn1cbmZ1bmN0aW9uIHJlcXVlc3RGb3JtUmVzZXQoZm9ybSkge1xuICB2YXIgZm9ybUluc3QgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGZvcm0pO1xuICBudWxsICE9PSBmb3JtSW5zdCAmJiA1ID09PSBmb3JtSW5zdC50YWcgJiYgXCJmb3JtXCIgPT09IGZvcm1JbnN0LnR5cGVcbiAgICA/IHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtSW5zdClcbiAgICA6IHByZXZpb3VzRGlzcGF0Y2hlci5yKGZvcm0pO1xufVxudmFyIGdsb2JhbERvY3VtZW50ID0gXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIGRvY3VtZW50ID8gbnVsbCA6IGRvY3VtZW50O1xuZnVuY3Rpb24gcHJlY29ubmVjdEFzKHJlbCwgaHJlZiwgY3Jvc3NPcmlnaW4pIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgaHJlZikge1xuICAgIHZhciBsaW1pdGVkRXNjYXBlZEhyZWYgPVxuICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKTtcbiAgICBsaW1pdGVkRXNjYXBlZEhyZWYgPVxuICAgICAgJ2xpbmtbcmVsPVwiJyArIHJlbCArICdcIl1baHJlZj1cIicgKyBsaW1pdGVkRXNjYXBlZEhyZWYgKyAnXCJdJztcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgY3Jvc3NPcmlnaW4gJiZcbiAgICAgIChsaW1pdGVkRXNjYXBlZEhyZWYgKz0gJ1tjcm9zc29yaWdpbj1cIicgKyBjcm9zc09yaWdpbiArICdcIl0nKTtcbiAgICBwcmVjb25uZWN0c1NldC5oYXMobGltaXRlZEVzY2FwZWRIcmVmKSB8fFxuICAgICAgKHByZWNvbm5lY3RzU2V0LmFkZChsaW1pdGVkRXNjYXBlZEhyZWYpLFxuICAgICAgKHJlbCA9IHsgcmVsOiByZWwsIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbiwgaHJlZjogaHJlZiB9KSxcbiAgICAgIG51bGwgPT09IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihsaW1pdGVkRXNjYXBlZEhyZWYpICYmXG4gICAgICAgICgoaHJlZiA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhocmVmLCBcImxpbmtcIiwgcmVsKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShocmVmKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGhyZWYpKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWZldGNoRE5TKGhyZWYpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkQoaHJlZik7XG4gIHByZWNvbm5lY3RBcyhcImRucy1wcmVmZXRjaFwiLCBocmVmLCBudWxsKTtcbn1cbmZ1bmN0aW9uIHByZWNvbm5lY3QoaHJlZiwgY3Jvc3NPcmlnaW4pIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkMoaHJlZiwgY3Jvc3NPcmlnaW4pO1xuICBwcmVjb25uZWN0QXMoXCJwcmVjb25uZWN0XCIsIGhyZWYsIGNyb3NzT3JpZ2luKTtcbn1cbmZ1bmN0aW9uIHByZWxvYWQoaHJlZiwgYXMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkwoaHJlZiwgYXMsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBocmVmICYmIGFzKSB7XG4gICAgdmFyIHByZWxvYWRTZWxlY3RvciA9XG4gICAgICAnbGlua1tyZWw9XCJwcmVsb2FkXCJdW2FzPVwiJyArXG4gICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGFzKSArXG4gICAgICAnXCJdJztcbiAgICBcImltYWdlXCIgPT09IGFzXG4gICAgICA/IG9wdGlvbnMgJiYgb3B0aW9ucy5pbWFnZVNyY1NldFxuICAgICAgICA/ICgocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgICAnW2ltYWdlc3Jjc2V0PVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICBvcHRpb25zLmltYWdlU3JjU2V0XG4gICAgICAgICAgICApICtcbiAgICAgICAgICAgICdcIl0nKSxcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbWFnZVNpemVzICYmXG4gICAgICAgICAgICAocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgICAgICdbaW1hZ2VzaXplcz1cIicgK1xuICAgICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaW1hZ2VTaXplc1xuICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgJ1wiXScpKVxuICAgICAgICA6IChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICdbaHJlZj1cIicgK1xuICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICAgICAnXCJdJylcbiAgICAgIDogKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICdbaHJlZj1cIicgK1xuICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgK1xuICAgICAgICAgICdcIl0nKTtcbiAgICB2YXIga2V5ID0gcHJlbG9hZFNlbGVjdG9yO1xuICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICBrZXkgPSBnZXRTdHlsZUtleShocmVmKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGtleSA9IGdldFNjcmlwdEtleShocmVmKTtcbiAgICB9XG4gICAgcHJlbG9hZFByb3BzTWFwLmhhcyhrZXkpIHx8XG4gICAgICAoKGhyZWYgPSBhc3NpZ24oXG4gICAgICAgIHtcbiAgICAgICAgICByZWw6IFwicHJlbG9hZFwiLFxuICAgICAgICAgIGhyZWY6XG4gICAgICAgICAgICBcImltYWdlXCIgPT09IGFzICYmIG9wdGlvbnMgJiYgb3B0aW9ucy5pbWFnZVNyY1NldCA/IHZvaWQgMCA6IGhyZWYsXG4gICAgICAgICAgYXM6IGFzXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICkpLFxuICAgICAgcHJlbG9hZFByb3BzTWFwLnNldChrZXksIGhyZWYpLFxuICAgICAgbnVsbCAhPT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByZWxvYWRTZWxlY3RvcikgfHxcbiAgICAgICAgKFwic3R5bGVcIiA9PT0gYXMgJiZcbiAgICAgICAgICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpKSkgfHxcbiAgICAgICAgKFwic2NyaXB0XCIgPT09IGFzICYmXG4gICAgICAgICAgb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSkgfHxcbiAgICAgICAgKChhcyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhhcywgXCJsaW5rXCIsIGhyZWYpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGFzKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGFzKSkpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVsb2FkTW9kdWxlKGhyZWYsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLm0oaHJlZiwgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYpIHtcbiAgICB2YXIgYXMgPSBvcHRpb25zICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzID8gb3B0aW9ucy5hcyA6IFwic2NyaXB0XCIsXG4gICAgICBwcmVsb2FkU2VsZWN0b3IgPVxuICAgICAgICAnbGlua1tyZWw9XCJtb2R1bGVwcmVsb2FkXCJdW2FzPVwiJyArXG4gICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoYXMpICtcbiAgICAgICAgJ1wiXVtocmVmPVwiJyArXG4gICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgK1xuICAgICAgICAnXCJdJyxcbiAgICAgIGtleSA9IHByZWxvYWRTZWxlY3RvcjtcbiAgICBzd2l0Y2ggKGFzKSB7XG4gICAgICBjYXNlIFwiYXVkaW93b3JrbGV0XCI6XG4gICAgICBjYXNlIFwicGFpbnR3b3JrbGV0XCI6XG4gICAgICBjYXNlIFwic2VydmljZXdvcmtlclwiOlxuICAgICAgY2FzZSBcInNoYXJlZHdvcmtlclwiOlxuICAgICAgY2FzZSBcIndvcmtlclwiOlxuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoaHJlZik7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICFwcmVsb2FkUHJvcHNNYXAuaGFzKGtleSkgJiZcbiAgICAgICgoaHJlZiA9IGFzc2lnbih7IHJlbDogXCJtb2R1bGVwcmVsb2FkXCIsIGhyZWY6IGhyZWYgfSwgb3B0aW9ucykpLFxuICAgICAgcHJlbG9hZFByb3BzTWFwLnNldChrZXksIGhyZWYpLFxuICAgICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByZWxvYWRTZWxlY3RvcikpXG4gICAgKSB7XG4gICAgICBzd2l0Y2ggKGFzKSB7XG4gICAgICAgIGNhc2UgXCJhdWRpb3dvcmtsZXRcIjpcbiAgICAgICAgY2FzZSBcInBhaW50d29ya2xldFwiOlxuICAgICAgICBjYXNlIFwic2VydmljZXdvcmtlclwiOlxuICAgICAgICBjYXNlIFwic2hhcmVkd29ya2VyXCI6XG4gICAgICAgIGNhc2UgXCJ3b3JrZXJcIjpcbiAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgIGlmIChvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXMgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoYXMsIFwibGlua1wiLCBocmVmKTtcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoYXMpO1xuICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGFzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWluaXRTdHlsZShocmVmLCBwcmVjZWRlbmNlLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5TKGhyZWYsIHByZWNlZGVuY2UsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBocmVmKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFJlc291cmNlc0Zyb21Sb290KG93bmVyRG9jdW1lbnQpLmhvaXN0YWJsZVN0eWxlcyxcbiAgICAgIGtleSA9IGdldFN0eWxlS2V5KGhyZWYpO1xuICAgIHByZWNlZGVuY2UgPSBwcmVjZWRlbmNlIHx8IFwiZGVmYXVsdFwiO1xuICAgIHZhciByZXNvdXJjZSA9IHN0eWxlcy5nZXQoa2V5KTtcbiAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICB2YXIgc3RhdGUgPSB7IGxvYWRpbmc6IDAsIHByZWxvYWQ6IG51bGwgfTtcbiAgICAgIGlmIChcbiAgICAgICAgKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KVxuICAgICAgICApKVxuICAgICAgKVxuICAgICAgICBzdGF0ZS5sb2FkaW5nID0gNTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBocmVmID0gYXNzaWduKFxuICAgICAgICAgIHsgcmVsOiBcInN0eWxlc2hlZXRcIiwgaHJlZjogaHJlZiwgXCJkYXRhLXByZWNlZGVuY2VcIjogcHJlY2VkZW5jZSB9LFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgKG9wdGlvbnMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KGhyZWYsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgbGluayA9IChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGxpbmspO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhsaW5rLCBcImxpbmtcIiwgaHJlZik7XG4gICAgICAgIGxpbmsuX3AgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgbGluay5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgIGxpbmsub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS5sb2FkaW5nIHw9IDI7XG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQocmVzb3VyY2UsIHByZWNlZGVuY2UsIG93bmVyRG9jdW1lbnQpO1xuICAgICAgfVxuICAgICAgcmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6IFwic3R5bGVzaGVldFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgIH07XG4gICAgICBzdHlsZXMuc2V0KGtleSwgcmVzb3VyY2UpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdFNjcmlwdChzcmMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLlgoc3JjLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgc3JjKSB7XG4gICAgdmFyIHNjcmlwdHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChvd25lckRvY3VtZW50KS5ob2lzdGFibGVTY3JpcHRzLFxuICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KHNyYyksXG4gICAgICByZXNvdXJjZSA9IHNjcmlwdHMuZ2V0KGtleSk7XG4gICAgcmVzb3VyY2UgfHxcbiAgICAgICgocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSxcbiAgICAgIHJlc291cmNlIHx8XG4gICAgICAgICgoc3JjID0gYXNzaWduKHsgc3JjOiBzcmMsIGFzeW5jOiAhMCB9LCBvcHRpb25zKSksXG4gICAgICAgIChvcHRpb25zID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KHNyYywgb3B0aW9ucyksXG4gICAgICAgIChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUocmVzb3VyY2UpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhyZXNvdXJjZSwgXCJsaW5rXCIsIHNyYyksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChyZXNvdXJjZSkpLFxuICAgICAgKHJlc291cmNlID0ge1xuICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgfSksXG4gICAgICBzY3JpcHRzLnNldChrZXksIHJlc291cmNlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWluaXRNb2R1bGVTY3JpcHQoc3JjLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5NKHNyYywgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIHNyYykge1xuICAgIHZhciBzY3JpcHRzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qob3duZXJEb2N1bWVudCkuaG9pc3RhYmxlU2NyaXB0cyxcbiAgICAgIGtleSA9IGdldFNjcmlwdEtleShzcmMpLFxuICAgICAgcmVzb3VyY2UgPSBzY3JpcHRzLmdldChrZXkpO1xuICAgIHJlc291cmNlIHx8XG4gICAgICAoKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSksXG4gICAgICByZXNvdXJjZSB8fFxuICAgICAgICAoKHNyYyA9IGFzc2lnbih7IHNyYzogc3JjLCBhc3luYzogITAsIHR5cGU6IFwibW9kdWxlXCIgfSwgb3B0aW9ucykpLFxuICAgICAgICAob3B0aW9ucyA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChzcmMsIG9wdGlvbnMpLFxuICAgICAgICAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHJlc291cmNlKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMocmVzb3VyY2UsIFwibGlua1wiLCBzcmMpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocmVzb3VyY2UpKSxcbiAgICAgIChyZXNvdXJjZSA9IHtcbiAgICAgICAgdHlwZTogXCJzY3JpcHRcIixcbiAgICAgICAgaW5zdGFuY2U6IHJlc291cmNlLFxuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgIH0pLFxuICAgICAgc2NyaXB0cy5zZXQoa2V5LCByZXNvdXJjZSkpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRSZXNvdXJjZSh0eXBlLCBjdXJyZW50UHJvcHMsIHBlbmRpbmdQcm9wcywgY3VycmVudFJlc291cmNlKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KVxuICAgID8gZ2V0SG9pc3RhYmxlUm9vdChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpXG4gICAgOiBudWxsO1xuICBpZiAoIUpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NDYpKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMucHJlY2VkZW5jZSAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLmhyZWZcbiAgICAgICAgPyAoKGN1cnJlbnRQcm9wcyA9IGdldFN0eWxlS2V5KHBlbmRpbmdQcm9wcy5ocmVmKSksXG4gICAgICAgICAgKHBlbmRpbmdQcm9wcyA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgKS5ob2lzdGFibGVTdHlsZXMpLFxuICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBwZW5kaW5nUHJvcHMuZ2V0KGN1cnJlbnRQcm9wcykpLFxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgKChjdXJyZW50UmVzb3VyY2UgPSB7XG4gICAgICAgICAgICAgIHR5cGU6IFwic3R5bGVcIixcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwZW5kaW5nUHJvcHMuc2V0KGN1cnJlbnRQcm9wcywgY3VycmVudFJlc291cmNlKSksXG4gICAgICAgICAgY3VycmVudFJlc291cmNlKVxuICAgICAgICA6IHsgdHlwZTogXCJ2b2lkXCIsIGluc3RhbmNlOiBudWxsLCBjb3VudDogMCwgc3RhdGU6IG51bGwgfTtcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgaWYgKFxuICAgICAgICBcInN0eWxlc2hlZXRcIiA9PT0gcGVuZGluZ1Byb3BzLnJlbCAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLmhyZWYgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5wcmVjZWRlbmNlXG4gICAgICApIHtcbiAgICAgICAgdHlwZSA9IGdldFN0eWxlS2V5KHBlbmRpbmdQcm9wcy5ocmVmKTtcbiAgICAgICAgdmFyIHN0eWxlcyQyNDIgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICkuaG9pc3RhYmxlU3R5bGVzLFxuICAgICAgICAgIHJlc291cmNlJDI0MyA9IHN0eWxlcyQyNDIuZ2V0KHR5cGUpO1xuICAgICAgICByZXNvdXJjZSQyNDMgfHxcbiAgICAgICAgICAoKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQub3duZXJEb2N1bWVudCB8fCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpLFxuICAgICAgICAgIChyZXNvdXJjZSQyNDMgPSB7XG4gICAgICAgICAgICB0eXBlOiBcInN0eWxlc2hlZXRcIixcbiAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBzdGF0ZTogeyBsb2FkaW5nOiAwLCBwcmVsb2FkOiBudWxsIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdHlsZXMkMjQyLnNldCh0eXBlLCByZXNvdXJjZSQyNDMpLFxuICAgICAgICAgIChzdHlsZXMkMjQyID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KHR5cGUpXG4gICAgICAgICAgKSkgJiZcbiAgICAgICAgICAgICFzdHlsZXMkMjQyLl9wICYmXG4gICAgICAgICAgICAoKHJlc291cmNlJDI0My5pbnN0YW5jZSA9IHN0eWxlcyQyNDIpLFxuICAgICAgICAgICAgKHJlc291cmNlJDI0My5zdGF0ZS5sb2FkaW5nID0gNSkpLFxuICAgICAgICAgIHByZWxvYWRQcm9wc01hcC5oYXModHlwZSkgfHxcbiAgICAgICAgICAgICgocGVuZGluZ1Byb3BzID0ge1xuICAgICAgICAgICAgICByZWw6IFwicHJlbG9hZFwiLFxuICAgICAgICAgICAgICBhczogXCJzdHlsZVwiLFxuICAgICAgICAgICAgICBocmVmOiBwZW5kaW5nUHJvcHMuaHJlZixcbiAgICAgICAgICAgICAgY3Jvc3NPcmlnaW46IHBlbmRpbmdQcm9wcy5jcm9zc09yaWdpbixcbiAgICAgICAgICAgICAgaW50ZWdyaXR5OiBwZW5kaW5nUHJvcHMuaW50ZWdyaXR5LFxuICAgICAgICAgICAgICBtZWRpYTogcGVuZGluZ1Byb3BzLm1lZGlhLFxuICAgICAgICAgICAgICBocmVmTGFuZzogcGVuZGluZ1Byb3BzLmhyZWZMYW5nLFxuICAgICAgICAgICAgICByZWZlcnJlclBvbGljeTogcGVuZGluZ1Byb3BzLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHByZWxvYWRQcm9wc01hcC5zZXQodHlwZSwgcGVuZGluZ1Byb3BzKSxcbiAgICAgICAgICAgIHN0eWxlcyQyNDIgfHxcbiAgICAgICAgICAgICAgcHJlbG9hZFN0eWxlc2hlZXQoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LFxuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgcGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICAgIHJlc291cmNlJDI0My5zdGF0ZVxuICAgICAgICAgICAgICApKSk7XG4gICAgICAgIGlmIChjdXJyZW50UHJvcHMgJiYgbnVsbCA9PT0gY3VycmVudFJlc291cmNlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTI4LCBcIlwiKSk7XG4gICAgICAgIHJldHVybiByZXNvdXJjZSQyNDM7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFByb3BzICYmIG51bGwgIT09IGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjksIFwiXCIpKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50UHJvcHMgPSBwZW5kaW5nUHJvcHMuYXN5bmMpLFxuICAgICAgICAocGVuZGluZ1Byb3BzID0gcGVuZGluZ1Byb3BzLnNyYyksXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMgJiZcbiAgICAgICAgY3VycmVudFByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGN1cnJlbnRQcm9wcyAmJlxuICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgY3VycmVudFByb3BzXG4gICAgICAgICAgPyAoKGN1cnJlbnRQcm9wcyA9IGdldFNjcmlwdEtleShwZW5kaW5nUHJvcHMpKSxcbiAgICAgICAgICAgIChwZW5kaW5nUHJvcHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICApLmhvaXN0YWJsZVNjcmlwdHMpLFxuICAgICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IHBlbmRpbmdQcm9wcy5nZXQoY3VycmVudFByb3BzKSksXG4gICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgfHxcbiAgICAgICAgICAgICAgKChjdXJyZW50UmVzb3VyY2UgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzY3JpcHRcIixcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgcGVuZGluZ1Byb3BzLnNldChjdXJyZW50UHJvcHMsIGN1cnJlbnRSZXNvdXJjZSkpLFxuICAgICAgICAgICAgY3VycmVudFJlc291cmNlKVxuICAgICAgICAgIDogeyB0eXBlOiBcInZvaWRcIiwgaW5zdGFuY2U6IG51bGwsIGNvdW50OiAwLCBzdGF0ZTogbnVsbCB9XG4gICAgICApO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0NCwgdHlwZSkpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdHlsZUtleShocmVmKSB7XG4gIHJldHVybiAnaHJlZj1cIicgKyBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICsgJ1wiJztcbn1cbmZ1bmN0aW9uIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KSB7XG4gIHJldHVybiAnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdWycgKyBrZXkgKyBcIl1cIjtcbn1cbmZ1bmN0aW9uIHN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyhyYXdQcm9wcykge1xuICByZXR1cm4gYXNzaWduKHt9LCByYXdQcm9wcywge1xuICAgIFwiZGF0YS1wcmVjZWRlbmNlXCI6IHJhd1Byb3BzLnByZWNlZGVuY2UsXG4gICAgcHJlY2VkZW5jZTogbnVsbFxuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWxvYWRTdHlsZXNoZWV0KG93bmVyRG9jdW1lbnQsIGtleSwgcHJlbG9hZFByb3BzLCBzdGF0ZSkge1xuICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xpbmtbcmVsPVwicHJlbG9hZFwiXVthcz1cInN0eWxlXCJdWycgKyBrZXkgKyBcIl1cIilcbiAgICA/IChzdGF0ZS5sb2FkaW5nID0gMSlcbiAgICA6ICgoa2V5ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAoc3RhdGUucHJlbG9hZCA9IGtleSksXG4gICAgICBrZXkuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHN0YXRlLmxvYWRpbmcgfD0gMSk7XG4gICAgICB9KSxcbiAgICAgIGtleS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHN0YXRlLmxvYWRpbmcgfD0gMik7XG4gICAgICB9KSxcbiAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGtleSwgXCJsaW5rXCIsIHByZWxvYWRQcm9wcyksXG4gICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGtleSksXG4gICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoa2V5KSk7XG59XG5mdW5jdGlvbiBnZXRTY3JpcHRLZXkoc3JjKSB7XG4gIHJldHVybiAnW3NyYz1cIicgKyBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKHNyYykgKyAnXCJdJztcbn1cbmZ1bmN0aW9uIGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpIHtcbiAgcmV0dXJuIFwic2NyaXB0W2FzeW5jXVwiICsga2V5O1xufVxuZnVuY3Rpb24gYWNxdWlyZVJlc291cmNlKGhvaXN0YWJsZVJvb3QsIHJlc291cmNlLCBwcm9wcykge1xuICByZXNvdXJjZS5jb3VudCsrO1xuICBpZiAobnVsbCA9PT0gcmVzb3VyY2UuaW5zdGFuY2UpXG4gICAgc3dpdGNoIChyZXNvdXJjZS50eXBlKSB7XG4gICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAgdmFyIGluc3RhbmNlID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICdzdHlsZVtkYXRhLWhyZWZ+PVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKHByb3BzLmhyZWYpICtcbiAgICAgICAgICAgICdcIl0nXG4gICAgICAgICk7XG4gICAgICAgIGlmIChpbnN0YW5jZSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UpLFxuICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSksXG4gICAgICAgICAgICBpbnN0YW5jZVxuICAgICAgICAgICk7XG4gICAgICAgIHZhciBzdHlsZVByb3BzID0gYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIFwiZGF0YS1ocmVmXCI6IHByb3BzLmhyZWYsXG4gICAgICAgICAgXCJkYXRhLXByZWNlZGVuY2VcIjogcHJvcHMucHJlY2VkZW5jZSxcbiAgICAgICAgICBocmVmOiBudWxsLFxuICAgICAgICAgIHByZWNlZGVuY2U6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIGluc3RhbmNlID0gKGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290KS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3R5bGVcIlxuICAgICAgICApO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaW5zdGFuY2UsIFwic3R5bGVcIiwgc3R5bGVQcm9wcyk7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UpO1xuICAgICAgY2FzZSBcInN0eWxlc2hlZXRcIjpcbiAgICAgICAgc3R5bGVQcm9wcyA9IGdldFN0eWxlS2V5KHByb3BzLmhyZWYpO1xuICAgICAgICB2YXIgaW5zdGFuY2UkMjQ4ID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoc3R5bGVQcm9wcylcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGluc3RhbmNlJDI0OClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNCksXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSQyNDgpLFxuICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSQyNDgpLFxuICAgICAgICAgICAgaW5zdGFuY2UkMjQ4XG4gICAgICAgICAgKTtcbiAgICAgICAgaW5zdGFuY2UgPSBzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMocHJvcHMpO1xuICAgICAgICAoc3R5bGVQcm9wcyA9IHByZWxvYWRQcm9wc01hcC5nZXQoc3R5bGVQcm9wcykpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KGluc3RhbmNlLCBzdHlsZVByb3BzKTtcbiAgICAgICAgaW5zdGFuY2UkMjQ4ID0gKFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290XG4gICAgICAgICkuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UkMjQ4KTtcbiAgICAgICAgdmFyIGxpbmtJbnN0YW5jZSA9IGluc3RhbmNlJDI0ODtcbiAgICAgICAgbGlua0luc3RhbmNlLl9wID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGxpbmtJbnN0YW5jZS5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgIGxpbmtJbnN0YW5jZS5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaW5zdGFuY2UkMjQ4LCBcImxpbmtcIiwgaW5zdGFuY2UpO1xuICAgICAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UkMjQ4LCBwcm9wcy5wcmVjZWRlbmNlLCBob2lzdGFibGVSb290KTtcbiAgICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlJDI0OCk7XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGluc3RhbmNlJDI0OCA9IGdldFNjcmlwdEtleShwcm9wcy5zcmMpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHN0eWxlUHJvcHMgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoaW5zdGFuY2UkMjQ4KVxuICAgICAgICAgICkpXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLmluc3RhbmNlID0gc3R5bGVQcm9wcyksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHN0eWxlUHJvcHMpLFxuICAgICAgICAgICAgc3R5bGVQcm9wc1xuICAgICAgICAgICk7XG4gICAgICAgIGluc3RhbmNlID0gcHJvcHM7XG4gICAgICAgIGlmICgoc3R5bGVQcm9wcyA9IHByZWxvYWRQcm9wc01hcC5nZXQoaW5zdGFuY2UkMjQ4KSkpXG4gICAgICAgICAgKGluc3RhbmNlID0gYXNzaWduKHt9LCBwcm9wcykpLFxuICAgICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoaW5zdGFuY2UsIHN0eWxlUHJvcHMpO1xuICAgICAgICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICAgIHN0eWxlUHJvcHMgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoc3R5bGVQcm9wcyk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHN0eWxlUHJvcHMsIFwibGlua1wiLCBpbnN0YW5jZSk7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5hcHBlbmRDaGlsZChzdHlsZVByb3BzKTtcbiAgICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbnN0YW5jZSA9IHN0eWxlUHJvcHMpO1xuICAgICAgY2FzZSBcInZvaWRcIjpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0MywgcmVzb3VyY2UudHlwZSkpO1xuICAgIH1cbiAgZWxzZVxuICAgIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmXG4gICAgICAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpICYmXG4gICAgICAoKGluc3RhbmNlID0gcmVzb3VyY2UuaW5zdGFuY2UpLFxuICAgICAgKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNCksXG4gICAgICBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlLCBwcm9wcy5wcmVjZWRlbmNlLCBob2lzdGFibGVSb290KSk7XG4gIHJldHVybiByZXNvdXJjZS5pbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByZWNlZGVuY2UsIHJvb3QpIHtcbiAgZm9yIChcbiAgICB2YXIgbm9kZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICdsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl1bZGF0YS1wcmVjZWRlbmNlXSxzdHlsZVtkYXRhLXByZWNlZGVuY2VdJ1xuICAgICAgKSxcbiAgICAgIGxhc3QgPSBub2Rlcy5sZW5ndGggPyBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXSA6IG51bGwsXG4gICAgICBwcmlvciA9IGxhc3QsXG4gICAgICBpID0gMDtcbiAgICBpIDwgbm9kZXMubGVuZ3RoO1xuICAgIGkrK1xuICApIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmIChub2RlLmRhdGFzZXQucHJlY2VkZW5jZSA9PT0gcHJlY2VkZW5jZSkgcHJpb3IgPSBub2RlO1xuICAgIGVsc2UgaWYgKHByaW9yICE9PSBsYXN0KSBicmVhaztcbiAgfVxuICBwcmlvclxuICAgID8gcHJpb3IucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaW5zdGFuY2UsIHByaW9yLm5leHRTaWJsaW5nKVxuICAgIDogKChwcmVjZWRlbmNlID0gOSA9PT0gcm9vdC5ub2RlVHlwZSA/IHJvb3QuaGVhZCA6IHJvb3QpLFxuICAgICAgcHJlY2VkZW5jZS5pbnNlcnRCZWZvcmUoaW5zdGFuY2UsIHByZWNlZGVuY2UuZmlyc3RDaGlsZCkpO1xufVxuZnVuY3Rpb24gYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KHN0eWxlc2hlZXRQcm9wcywgcHJlbG9hZFByb3BzKSB7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLmNyb3NzT3JpZ2luICYmXG4gICAgKHN0eWxlc2hlZXRQcm9wcy5jcm9zc09yaWdpbiA9IHByZWxvYWRQcm9wcy5jcm9zc09yaWdpbik7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLnJlZmVycmVyUG9saWN5ICYmXG4gICAgKHN0eWxlc2hlZXRQcm9wcy5yZWZlcnJlclBvbGljeSA9IHByZWxvYWRQcm9wcy5yZWZlcnJlclBvbGljeSk7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLnRpdGxlICYmIChzdHlsZXNoZWV0UHJvcHMudGl0bGUgPSBwcmVsb2FkUHJvcHMudGl0bGUpO1xufVxuZnVuY3Rpb24gYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoc2NyaXB0UHJvcHMsIHByZWxvYWRQcm9wcykge1xuICBudWxsID09IHNjcmlwdFByb3BzLmNyb3NzT3JpZ2luICYmXG4gICAgKHNjcmlwdFByb3BzLmNyb3NzT3JpZ2luID0gcHJlbG9hZFByb3BzLmNyb3NzT3JpZ2luKTtcbiAgbnVsbCA9PSBzY3JpcHRQcm9wcy5yZWZlcnJlclBvbGljeSAmJlxuICAgIChzY3JpcHRQcm9wcy5yZWZlcnJlclBvbGljeSA9IHByZWxvYWRQcm9wcy5yZWZlcnJlclBvbGljeSk7XG4gIG51bGwgPT0gc2NyaXB0UHJvcHMuaW50ZWdyaXR5ICYmXG4gICAgKHNjcmlwdFByb3BzLmludGVncml0eSA9IHByZWxvYWRQcm9wcy5pbnRlZ3JpdHkpO1xufVxudmFyIHRhZ0NhY2hlcyA9IG51bGw7XG5mdW5jdGlvbiBnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUodHlwZSwga2V5QXR0cmlidXRlLCBvd25lckRvY3VtZW50KSB7XG4gIGlmIChudWxsID09PSB0YWdDYWNoZXMpIHtcbiAgICB2YXIgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgdmFyIGNhY2hlcyA9ICh0YWdDYWNoZXMgPSBuZXcgTWFwKCkpO1xuICAgIGNhY2hlcy5zZXQob3duZXJEb2N1bWVudCwgY2FjaGUpO1xuICB9IGVsc2VcbiAgICAoY2FjaGVzID0gdGFnQ2FjaGVzKSxcbiAgICAgIChjYWNoZSA9IGNhY2hlcy5nZXQob3duZXJEb2N1bWVudCkpLFxuICAgICAgY2FjaGUgfHwgKChjYWNoZSA9IG5ldyBNYXAoKSksIGNhY2hlcy5zZXQob3duZXJEb2N1bWVudCwgY2FjaGUpKTtcbiAgaWYgKGNhY2hlLmhhcyh0eXBlKSkgcmV0dXJuIGNhY2hlO1xuICBjYWNoZS5zZXQodHlwZSwgbnVsbCk7XG4gIG93bmVyRG9jdW1lbnQgPSBvd25lckRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHR5cGUpO1xuICBmb3IgKGNhY2hlcyA9IDA7IGNhY2hlcyA8IG93bmVyRG9jdW1lbnQubGVuZ3RoOyBjYWNoZXMrKykge1xuICAgIHZhciBub2RlID0gb3duZXJEb2N1bWVudFtjYWNoZXNdO1xuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgIG5vZGVbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdIHx8XG4gICAgICAgIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgKFwibGlua1wiID09PSB0eXBlICYmIFwic3R5bGVzaGVldFwiID09PSBub2RlLmdldEF0dHJpYnV0ZShcInJlbFwiKSlcbiAgICAgICkgJiZcbiAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiAhPT0gbm9kZS5uYW1lc3BhY2VVUklcbiAgICApIHtcbiAgICAgIHZhciBub2RlS2V5ID0gbm9kZS5nZXRBdHRyaWJ1dGUoa2V5QXR0cmlidXRlKSB8fCBcIlwiO1xuICAgICAgbm9kZUtleSA9IHR5cGUgKyBub2RlS2V5O1xuICAgICAgdmFyIGV4aXN0aW5nID0gY2FjaGUuZ2V0KG5vZGVLZXkpO1xuICAgICAgZXhpc3RpbmcgPyBleGlzdGluZy5wdXNoKG5vZGUpIDogY2FjaGUuc2V0KG5vZGVLZXksIFtub2RlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjYWNoZTtcbn1cbmZ1bmN0aW9uIG1vdW50SG9pc3RhYmxlKGhvaXN0YWJsZVJvb3QsIHR5cGUsIGluc3RhbmNlKSB7XG4gIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgaG9pc3RhYmxlUm9vdC5oZWFkLmluc2VydEJlZm9yZShcbiAgICBpbnN0YW5jZSxcbiAgICBcInRpdGxlXCIgPT09IHR5cGUgPyBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkID4gdGl0bGVcIikgOiBudWxsXG4gICk7XG59XG5mdW5jdGlvbiBpc0hvc3RIb2lzdGFibGVUeXBlKHR5cGUsIHByb3BzLCBob3N0Q29udGV4dCkge1xuICBpZiAoMSA9PT0gaG9zdENvbnRleHQgfHwgbnVsbCAhPSBwcm9wcy5pdGVtUHJvcCkgcmV0dXJuICExO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgaWYgKFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMucHJlY2VkZW5jZSB8fFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMuaHJlZiB8fFxuICAgICAgICBcIlwiID09PSBwcm9wcy5ocmVmXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5yZWwgfHxcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLmhyZWYgfHxcbiAgICAgICAgXCJcIiA9PT0gcHJvcHMuaHJlZiB8fFxuICAgICAgICBwcm9wcy5vbkxvYWQgfHxcbiAgICAgICAgcHJvcHMub25FcnJvclxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIHN3aXRjaCAocHJvcHMucmVsKSB7XG4gICAgICAgIGNhc2UgXCJzdHlsZXNoZWV0XCI6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlID0gcHJvcHMuZGlzYWJsZWQpLFxuICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByb3BzLnByZWNlZGVuY2UgJiYgbnVsbCA9PSB0eXBlXG4gICAgICAgICAgKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gITA7XG4gICAgICB9XG4gICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgaWYgKFxuICAgICAgICBwcm9wcy5hc3luYyAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcm9wcy5hc3luYyAmJlxuICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgcHJvcHMuYXN5bmMgJiZcbiAgICAgICAgIXByb3BzLm9uTG9hZCAmJlxuICAgICAgICAhcHJvcHMub25FcnJvciAmJlxuICAgICAgICBwcm9wcy5zcmMgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByb3BzLnNyY1xuICAgICAgKVxuICAgICAgICByZXR1cm4gITA7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSB7XG4gIHJldHVybiBcInN0eWxlc2hlZXRcIiA9PT0gcmVzb3VyY2UudHlwZSAmJiAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDMpXG4gICAgPyAhMVxuICAgIDogITA7XG59XG52YXIgc3VzcGVuZGVkU3RhdGUgPSBudWxsO1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBzdXNwZW5kUmVzb3VyY2UoaG9pc3RhYmxlUm9vdCwgcmVzb3VyY2UsIHByb3BzKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRTdGF0ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzUpKTtcbiAgdmFyIHN0YXRlID0gc3VzcGVuZGVkU3RhdGU7XG4gIGlmIChcbiAgICBcInN0eWxlc2hlZXRcIiA9PT0gcmVzb3VyY2UudHlwZSAmJlxuICAgIChcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMubWVkaWEgfHxcbiAgICAgICExICE9PSBtYXRjaE1lZGlhKHByb3BzLm1lZGlhKS5tYXRjaGVzKSAmJlxuICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNClcbiAgKSB7XG4gICAgaWYgKG51bGwgPT09IHJlc291cmNlLmluc3RhbmNlKSB7XG4gICAgICB2YXIga2V5ID0gZ2V0U3R5bGVLZXkocHJvcHMuaHJlZiksXG4gICAgICAgIGluc3RhbmNlID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KVxuICAgICAgICApO1xuICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QgPSBpbnN0YW5jZS5fcDtcbiAgICAgICAgbnVsbCAhPT0gaG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBob2lzdGFibGVSb290ICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaG9pc3RhYmxlUm9vdC50aGVuICYmXG4gICAgICAgICAgKHN0YXRlLmNvdW50KyssXG4gICAgICAgICAgKHN0YXRlID0gb25VbnN1c3BlbmQuYmluZChzdGF0ZSkpLFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3QudGhlbihzdGF0ZSwgc3RhdGUpKTtcbiAgICAgICAgcmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0O1xuICAgICAgICByZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2UgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgIHByb3BzID0gc3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzKHByb3BzKTtcbiAgICAgIChrZXkgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChwcm9wcywga2V5KTtcbiAgICAgIGluc3RhbmNlID0gaW5zdGFuY2UuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgIHZhciBsaW5rSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgIGxpbmtJbnN0YW5jZS5fcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbGlua0luc3RhbmNlLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgIGxpbmtJbnN0YW5jZS5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgfSk7XG4gICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSwgXCJsaW5rXCIsIHByb3BzKTtcbiAgICAgIHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgfVxuICAgIG51bGwgPT09IHN0YXRlLnN0eWxlc2hlZXRzICYmIChzdGF0ZS5zdHlsZXNoZWV0cyA9IG5ldyBNYXAoKSk7XG4gICAgc3RhdGUuc3R5bGVzaGVldHMuc2V0KHJlc291cmNlLCBob2lzdGFibGVSb290KTtcbiAgICAoaG9pc3RhYmxlUm9vdCA9IHJlc291cmNlLnN0YXRlLnByZWxvYWQpICYmXG4gICAgICAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDMpICYmXG4gICAgICAoc3RhdGUuY291bnQrKyxcbiAgICAgIChyZXNvdXJjZSA9IG9uVW5zdXNwZW5kLmJpbmQoc3RhdGUpKSxcbiAgICAgIGhvaXN0YWJsZVJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcmVzb3VyY2UpLFxuICAgICAgaG9pc3RhYmxlUm9vdC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgcmVzb3VyY2UpKTtcbiAgfVxufVxuZnVuY3Rpb24gd2FpdEZvckNvbW1pdFRvQmVSZWFkeSgpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFN0YXRlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NSkpO1xuICB2YXIgc3RhdGUgPSBzdXNwZW5kZWRTdGF0ZTtcbiAgc3RhdGUuc3R5bGVzaGVldHMgJiZcbiAgICAwID09PSBzdGF0ZS5jb3VudCAmJlxuICAgIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCBzdGF0ZS5zdHlsZXNoZWV0cyk7XG4gIHJldHVybiAwIDwgc3RhdGUuY291bnRcbiAgICA/IGZ1bmN0aW9uIChjb21taXQpIHtcbiAgICAgICAgdmFyIHN0eWxlc2hlZXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLnN0eWxlc2hlZXRzICYmXG4gICAgICAgICAgICBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyhzdGF0ZSwgc3RhdGUuc3R5bGVzaGVldHMpO1xuICAgICAgICAgIGlmIChzdGF0ZS51bnN1c3BlbmQpIHtcbiAgICAgICAgICAgIHZhciB1bnN1c3BlbmQgPSBzdGF0ZS51bnN1c3BlbmQ7XG4gICAgICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgICAgICAgdW5zdXNwZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCA2ZTQpO1xuICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBjb21taXQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUudW5zdXNwZW5kID0gbnVsbDtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc3R5bGVzaGVldFRpbWVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBvblVuc3VzcGVuZCgpIHtcbiAgdGhpcy5jb3VudC0tO1xuICBpZiAoMCA9PT0gdGhpcy5jb3VudClcbiAgICBpZiAodGhpcy5zdHlsZXNoZWV0cykgaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHModGhpcywgdGhpcy5zdHlsZXNoZWV0cyk7XG4gICAgZWxzZSBpZiAodGhpcy51bnN1c3BlbmQpIHtcbiAgICAgIHZhciB1bnN1c3BlbmQgPSB0aGlzLnVuc3VzcGVuZDtcbiAgICAgIHRoaXMudW5zdXNwZW5kID0gbnVsbDtcbiAgICAgIHVuc3VzcGVuZCgpO1xuICAgIH1cbn1cbnZhciBwcmVjZWRlbmNlc0J5Um9vdCA9IG51bGw7XG5mdW5jdGlvbiBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyhzdGF0ZSwgcmVzb3VyY2VzKSB7XG4gIHN0YXRlLnN0eWxlc2hlZXRzID0gbnVsbDtcbiAgbnVsbCAhPT0gc3RhdGUudW5zdXNwZW5kICYmXG4gICAgKHN0YXRlLmNvdW50KyssXG4gICAgKHByZWNlZGVuY2VzQnlSb290ID0gbmV3IE1hcCgpKSxcbiAgICByZXNvdXJjZXMuZm9yRWFjaChpbnNlcnRTdHlsZXNoZWV0SW50b1Jvb3QsIHN0YXRlKSxcbiAgICAocHJlY2VkZW5jZXNCeVJvb3QgPSBudWxsKSxcbiAgICBvblVuc3VzcGVuZC5jYWxsKHN0YXRlKSk7XG59XG5mdW5jdGlvbiBpbnNlcnRTdHlsZXNoZWV0SW50b1Jvb3Qocm9vdCwgcmVzb3VyY2UpIHtcbiAgaWYgKCEocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpKSB7XG4gICAgdmFyIHByZWNlZGVuY2VzID0gcHJlY2VkZW5jZXNCeVJvb3QuZ2V0KHJvb3QpO1xuICAgIGlmIChwcmVjZWRlbmNlcykgdmFyIGxhc3QgPSBwcmVjZWRlbmNlcy5nZXQobnVsbCk7XG4gICAgZWxzZSB7XG4gICAgICBwcmVjZWRlbmNlcyA9IG5ldyBNYXAoKTtcbiAgICAgIHByZWNlZGVuY2VzQnlSb290LnNldChyb290LCBwcmVjZWRlbmNlcyk7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgbm9kZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICBcImxpbmtbZGF0YS1wcmVjZWRlbmNlXSxzdHlsZVtkYXRhLXByZWNlZGVuY2VdXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIGkgPSAwO1xuICAgICAgICBpIDwgbm9kZXMubGVuZ3RoO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJMSU5LXCIgPT09IG5vZGUubm9kZU5hbWUgfHxcbiAgICAgICAgICBcIm5vdCBhbGxcIiAhPT0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJtZWRpYVwiKVxuICAgICAgICApXG4gICAgICAgICAgcHJlY2VkZW5jZXMuc2V0KG5vZGUuZGF0YXNldC5wcmVjZWRlbmNlLCBub2RlKSwgKGxhc3QgPSBub2RlKTtcbiAgICAgIH1cbiAgICAgIGxhc3QgJiYgcHJlY2VkZW5jZXMuc2V0KG51bGwsIGxhc3QpO1xuICAgIH1cbiAgICBub2RlcyA9IHJlc291cmNlLmluc3RhbmNlO1xuICAgIG5vZGUgPSBub2Rlcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIik7XG4gICAgaSA9IHByZWNlZGVuY2VzLmdldChub2RlKSB8fCBsYXN0O1xuICAgIGkgPT09IGxhc3QgJiYgcHJlY2VkZW5jZXMuc2V0KG51bGwsIG5vZGVzKTtcbiAgICBwcmVjZWRlbmNlcy5zZXQobm9kZSwgbm9kZXMpO1xuICAgIHRoaXMuY291bnQrKztcbiAgICBsYXN0ID0gb25VbnN1c3BlbmQuYmluZCh0aGlzKTtcbiAgICBub2Rlcy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBsYXN0KTtcbiAgICBub2Rlcy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgbGFzdCk7XG4gICAgaVxuICAgICAgPyBpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGVzLCBpLm5leHRTaWJsaW5nKVxuICAgICAgOiAoKHJvb3QgPSA5ID09PSByb290Lm5vZGVUeXBlID8gcm9vdC5oZWFkIDogcm9vdCksXG4gICAgICAgIHJvb3QuaW5zZXJ0QmVmb3JlKG5vZGVzLCByb290LmZpcnN0Q2hpbGQpKTtcbiAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gIH1cbn1cbnZhciBIb3N0VHJhbnNpdGlvbkNvbnRleHQgPSB7XG4gICQkdHlwZW9mOiBSRUFDVF9DT05URVhUX1RZUEUsXG4gIFByb3ZpZGVyOiBudWxsLFxuICBDb25zdW1lcjogbnVsbCxcbiAgX2N1cnJlbnRWYWx1ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgX2N1cnJlbnRWYWx1ZTI6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gIF90aHJlYWRDb3VudDogMFxufTtcbmZ1bmN0aW9uIEZpYmVyUm9vdE5vZGUoXG4gIGNvbnRhaW5lckluZm8sXG4gIHRhZyxcbiAgaHlkcmF0ZSxcbiAgaWRlbnRpZmllclByZWZpeCxcbiAgb25VbmNhdWdodEVycm9yLFxuICBvbkNhdWdodEVycm9yLFxuICBvblJlY292ZXJhYmxlRXJyb3IsXG4gIGZvcm1TdGF0ZVxuKSB7XG4gIHRoaXMudGFnID0gMTtcbiAgdGhpcy5jb250YWluZXJJbmZvID0gY29udGFpbmVySW5mbztcbiAgdGhpcy5maW5pc2hlZFdvcmsgPVxuICAgIHRoaXMucGluZ0NhY2hlID1cbiAgICB0aGlzLmN1cnJlbnQgPVxuICAgIHRoaXMucGVuZGluZ0NoaWxkcmVuID1cbiAgICAgIG51bGw7XG4gIHRoaXMudGltZW91dEhhbmRsZSA9IC0xO1xuICB0aGlzLmNhbGxiYWNrTm9kZSA9XG4gICAgdGhpcy5uZXh0ID1cbiAgICB0aGlzLnBlbmRpbmdDb250ZXh0ID1cbiAgICB0aGlzLmNvbnRleHQgPVxuICAgIHRoaXMuY2FuY2VsUGVuZGluZ0NvbW1pdCA9XG4gICAgICBudWxsO1xuICB0aGlzLmNhbGxiYWNrUHJpb3JpdHkgPSAwO1xuICB0aGlzLmV4cGlyYXRpb25UaW1lcyA9IGNyZWF0ZUxhbmVNYXAoLTEpO1xuICB0aGlzLmVudGFuZ2xlZExhbmVzID1cbiAgICB0aGlzLnNoZWxsU3VzcGVuZENvdW50ZXIgPVxuICAgIHRoaXMuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgPVxuICAgIHRoaXMuZmluaXNoZWRMYW5lcyA9XG4gICAgdGhpcy5leHBpcmVkTGFuZXMgPVxuICAgIHRoaXMud2FybUxhbmVzID1cbiAgICB0aGlzLnBpbmdlZExhbmVzID1cbiAgICB0aGlzLnN1c3BlbmRlZExhbmVzID1cbiAgICB0aGlzLnBlbmRpbmdMYW5lcyA9XG4gICAgICAwO1xuICB0aGlzLmVudGFuZ2xlbWVudHMgPSBjcmVhdGVMYW5lTWFwKDApO1xuICB0aGlzLmhpZGRlblVwZGF0ZXMgPSBjcmVhdGVMYW5lTWFwKG51bGwpO1xuICB0aGlzLmlkZW50aWZpZXJQcmVmaXggPSBpZGVudGlmaWVyUHJlZml4O1xuICB0aGlzLm9uVW5jYXVnaHRFcnJvciA9IG9uVW5jYXVnaHRFcnJvcjtcbiAgdGhpcy5vbkNhdWdodEVycm9yID0gb25DYXVnaHRFcnJvcjtcbiAgdGhpcy5vblJlY292ZXJhYmxlRXJyb3IgPSBvblJlY292ZXJhYmxlRXJyb3I7XG4gIHRoaXMucG9vbGVkQ2FjaGUgPSBudWxsO1xuICB0aGlzLnBvb2xlZENhY2hlTGFuZXMgPSAwO1xuICB0aGlzLmZvcm1TdGF0ZSA9IGZvcm1TdGF0ZTtcbiAgdGhpcy5pbmNvbXBsZXRlVHJhbnNpdGlvbnMgPSBuZXcgTWFwKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlclJvb3QoXG4gIGNvbnRhaW5lckluZm8sXG4gIHRhZyxcbiAgaHlkcmF0ZSxcbiAgaW5pdGlhbENoaWxkcmVuLFxuICBoeWRyYXRpb25DYWxsYmFja3MsXG4gIGlzU3RyaWN0TW9kZSxcbiAgaWRlbnRpZmllclByZWZpeCxcbiAgb25VbmNhdWdodEVycm9yLFxuICBvbkNhdWdodEVycm9yLFxuICBvblJlY292ZXJhYmxlRXJyb3IsXG4gIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gIGZvcm1TdGF0ZVxuKSB7XG4gIGNvbnRhaW5lckluZm8gPSBuZXcgRmliZXJSb290Tm9kZShcbiAgICBjb250YWluZXJJbmZvLFxuICAgIHRhZyxcbiAgICBoeWRyYXRlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIGZvcm1TdGF0ZVxuICApO1xuICB0YWcgPSAxO1xuICAhMCA9PT0gaXNTdHJpY3RNb2RlICYmICh0YWcgfD0gMjQpO1xuICBpc1N0cmljdE1vZGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygzLCBudWxsLCBudWxsLCB0YWcpO1xuICBjb250YWluZXJJbmZvLmN1cnJlbnQgPSBpc1N0cmljdE1vZGU7XG4gIGlzU3RyaWN0TW9kZS5zdGF0ZU5vZGUgPSBjb250YWluZXJJbmZvO1xuICB0YWcgPSBjcmVhdGVDYWNoZSgpO1xuICB0YWcucmVmQ291bnQrKztcbiAgY29udGFpbmVySW5mby5wb29sZWRDYWNoZSA9IHRhZztcbiAgdGFnLnJlZkNvdW50Kys7XG4gIGlzU3RyaWN0TW9kZS5tZW1vaXplZFN0YXRlID0ge1xuICAgIGVsZW1lbnQ6IGluaXRpYWxDaGlsZHJlbixcbiAgICBpc0RlaHlkcmF0ZWQ6IGh5ZHJhdGUsXG4gICAgY2FjaGU6IHRhZ1xuICB9O1xuICBpbml0aWFsaXplVXBkYXRlUXVldWUoaXNTdHJpY3RNb2RlKTtcbiAgcmV0dXJuIGNvbnRhaW5lckluZm87XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpIHtcbiAgaWYgKCFwYXJlbnRDb21wb25lbnQpIHJldHVybiBlbXB0eUNvbnRleHRPYmplY3Q7XG4gIHBhcmVudENvbXBvbmVudCA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgcmV0dXJuIHBhcmVudENvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbnRhaW5lckltcGwoXG4gIHJvb3RGaWJlcixcbiAgbGFuZSxcbiAgZWxlbWVudCxcbiAgY29udGFpbmVyLFxuICBwYXJlbnRDb21wb25lbnQsXG4gIGNhbGxiYWNrXG4pIHtcbiAgcGFyZW50Q29tcG9uZW50ID0gZ2V0Q29udGV4dEZvclN1YnRyZWUocGFyZW50Q29tcG9uZW50KTtcbiAgbnVsbCA9PT0gY29udGFpbmVyLmNvbnRleHRcbiAgICA/IChjb250YWluZXIuY29udGV4dCA9IHBhcmVudENvbXBvbmVudClcbiAgICA6IChjb250YWluZXIucGVuZGluZ0NvbnRleHQgPSBwYXJlbnRDb21wb25lbnQpO1xuICBjb250YWluZXIgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gIGNvbnRhaW5lci5wYXlsb2FkID0geyBlbGVtZW50OiBlbGVtZW50IH07XG4gIGNhbGxiYWNrID0gdm9pZCAwID09PSBjYWxsYmFjayA/IG51bGwgOiBjYWxsYmFjaztcbiAgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKGNvbnRhaW5lci5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgZWxlbWVudCA9IGVucXVldWVVcGRhdGUocm9vdEZpYmVyLCBjb250YWluZXIsIGxhbmUpO1xuICBudWxsICE9PSBlbGVtZW50ICYmXG4gICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihlbGVtZW50LCByb290RmliZXIsIGxhbmUpLFxuICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMoZWxlbWVudCwgcm9vdEZpYmVyLCBsYW5lKSk7XG59XG5mdW5jdGlvbiBtYXJrUmV0cnlMYW5lSW1wbChmaWJlciwgcmV0cnlMYW5lKSB7XG4gIGZpYmVyID0gZmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKG51bGwgIT09IGZpYmVyICYmIG51bGwgIT09IGZpYmVyLmRlaHlkcmF0ZWQpIHtcbiAgICB2YXIgYSA9IGZpYmVyLnJldHJ5TGFuZTtcbiAgICBmaWJlci5yZXRyeUxhbmUgPSAwICE9PSBhICYmIGEgPCByZXRyeUxhbmUgPyBhIDogcmV0cnlMYW5lO1xuICB9XG59XG5mdW5jdGlvbiBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgcmV0cnlMYW5lKSB7XG4gIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpO1xuICAoZmliZXIgPSBmaWJlci5hbHRlcm5hdGUpICYmIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oZmliZXIpIHtcbiAgaWYgKDEzID09PSBmaWJlci50YWcpIHtcbiAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgNjcxMDg4NjQpO1xuICAgIG51bGwgIT09IHJvb3QgJiYgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCA2NzEwODg2NCk7XG4gICAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIDY3MTA4ODY0KTtcbiAgfVxufVxudmFyIF9lbmFibGVkID0gITA7XG5mdW5jdGlvbiBkaXNwYXRjaERpc2NyZXRlRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgY29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQ7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyKSxcbiAgICAgIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBjb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoQ29udGludW91c0V2ZW50KFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIGNvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5UO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbDtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gOCksXG4gICAgICBkaXNwYXRjaEV2ZW50KGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgY29udGFpbmVyLCBuYXRpdmVFdmVudCk7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb24pO1xuICB9XG59XG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIHRhcmdldENvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICBpZiAoX2VuYWJsZWQpIHtcbiAgICB2YXIgYmxvY2tlZE9uID0gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCk7XG4gICAgaWYgKG51bGwgPT09IGJsb2NrZWRPbilcbiAgICAgIGRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbShcbiAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgcmV0dXJuX3RhcmdldEluc3QsXG4gICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgKSxcbiAgICAgICAgY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KTtcbiAgICBlbHNlIGlmIChcbiAgICAgIHF1ZXVlSWZDb250aW51b3VzRXZlbnQoXG4gICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApXG4gICAgKVxuICAgICAgbmF0aXZlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSxcbiAgICAgIGV2ZW50U3lzdGVtRmxhZ3MgJiA0ICYmXG4gICAgICAgIC0xIDwgZGlzY3JldGVSZXBsYXlhYmxlRXZlbnRzLmluZGV4T2YoZG9tRXZlbnROYW1lKSlcbiAgICApIHtcbiAgICAgIGZvciAoOyBudWxsICE9PSBibG9ja2VkT247ICkge1xuICAgICAgICB2YXIgZmliZXIgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGJsb2NrZWRPbik7XG4gICAgICAgIGlmIChudWxsICE9PSBmaWJlcilcbiAgICAgICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICBmaWJlciA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgaWYgKGZpYmVyLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhmaWJlci5wZW5kaW5nTGFuZXMpO1xuICAgICAgICAgICAgICAgIGlmICgwICE9PSBsYW5lcykge1xuICAgICAgICAgICAgICAgICAgdmFyIHJvb3QgPSBmaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJvb3QucGVuZGluZ0xhbmVzIHw9IDI7XG4gICAgICAgICAgICAgICAgICBmb3IgKHJvb3QuZW50YW5nbGVkTGFuZXMgfD0gMjsgbGFuZXM7ICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IDEgPDwgKDMxIC0gY2x6MzIobGFuZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5lbnRhbmdsZW1lbnRzWzFdIHw9IGxhbmU7XG4gICAgICAgICAgICAgICAgICAgIGxhbmVzICY9IH5sYW5lO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGZpYmVyKTtcbiAgICAgICAgICAgICAgICAgIDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgNikgJiZcbiAgICAgICAgICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lID0gbm93KCkgKyA1MDApLFxuICAgICAgICAgICAgICAgICAgICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgIChyb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCAyKSksXG4gICAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDIpLFxuICAgICAgICAgICAgICAgIGZsdXNoU3luY1dvcmskMSgpLFxuICAgICAgICAgICAgICAgIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCAyKTtcbiAgICAgICAgICB9XG4gICAgICAgIGZpYmVyID0gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCk7XG4gICAgICAgIG51bGwgPT09IGZpYmVyICYmXG4gICAgICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgcmV0dXJuX3RhcmdldEluc3QsXG4gICAgICAgICAgICB0YXJnZXRDb250YWluZXJcbiAgICAgICAgICApO1xuICAgICAgICBpZiAoZmliZXIgPT09IGJsb2NrZWRPbikgYnJlYWs7XG4gICAgICAgIGJsb2NrZWRPbiA9IGZpYmVyO1xuICAgICAgfVxuICAgICAgbnVsbCAhPT0gYmxvY2tlZE9uICYmIG5hdGl2ZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0gZWxzZVxuICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICBudWxsLFxuICAgICAgICB0YXJnZXRDb250YWluZXJcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCk7XG4gIHJldHVybiBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChuYXRpdmVFdmVudCk7XG59XG52YXIgcmV0dXJuX3RhcmdldEluc3QgPSBudWxsO1xuZnVuY3Rpb24gZmluZEluc3RhbmNlQmxvY2tpbmdUYXJnZXQodGFyZ2V0Tm9kZSkge1xuICByZXR1cm5fdGFyZ2V0SW5zdCA9IG51bGw7XG4gIHRhcmdldE5vZGUgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXROb2RlKTtcbiAgaWYgKG51bGwgIT09IHRhcmdldE5vZGUpIHtcbiAgICB2YXIgbmVhcmVzdE1vdW50ZWQgPSBnZXROZWFyZXN0TW91bnRlZEZpYmVyKHRhcmdldE5vZGUpO1xuICAgIGlmIChudWxsID09PSBuZWFyZXN0TW91bnRlZCkgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgdGFnID0gbmVhcmVzdE1vdW50ZWQudGFnO1xuICAgICAgaWYgKDEzID09PSB0YWcpIHtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIobmVhcmVzdE1vdW50ZWQpO1xuICAgICAgICBpZiAobnVsbCAhPT0gdGFyZ2V0Tm9kZSkgcmV0dXJuIHRhcmdldE5vZGU7XG4gICAgICAgIHRhcmdldE5vZGUgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICgzID09PSB0YWcpIHtcbiAgICAgICAgaWYgKG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKVxuICAgICAgICAgIHJldHVybiAzID09PSBuZWFyZXN0TW91bnRlZC50YWdcbiAgICAgICAgICAgID8gbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgbmVhcmVzdE1vdW50ZWQgIT09IHRhcmdldE5vZGUgJiYgKHRhcmdldE5vZGUgPSBudWxsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuX3RhcmdldEluc3QgPSB0YXJnZXROb2RlO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50UHJpb3JpdHkoZG9tRXZlbnROYW1lKSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImJlZm9yZXRvZ2dsZVwiOlxuICAgIGNhc2UgXCJjYW5jZWxcIjpcbiAgICBjYXNlIFwiY2xpY2tcIjpcbiAgICBjYXNlIFwiY2xvc2VcIjpcbiAgICBjYXNlIFwiY29udGV4dG1lbnVcIjpcbiAgICBjYXNlIFwiY29weVwiOlxuICAgIGNhc2UgXCJjdXRcIjpcbiAgICBjYXNlIFwiYXV4Y2xpY2tcIjpcbiAgICBjYXNlIFwiZGJsY2xpY2tcIjpcbiAgICBjYXNlIFwiZHJhZ2VuZFwiOlxuICAgIGNhc2UgXCJkcmFnc3RhcnRcIjpcbiAgICBjYXNlIFwiZHJvcFwiOlxuICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgY2FzZSBcImludmFsaWRcIjpcbiAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgIGNhc2UgXCJrZXl1cFwiOlxuICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgIGNhc2UgXCJwYXVzZVwiOlxuICAgIGNhc2UgXCJwbGF5XCI6XG4gICAgY2FzZSBcInBvaW50ZXJjYW5jZWxcIjpcbiAgICBjYXNlIFwicG9pbnRlcmRvd25cIjpcbiAgICBjYXNlIFwicG9pbnRlcnVwXCI6XG4gICAgY2FzZSBcInJhdGVjaGFuZ2VcIjpcbiAgICBjYXNlIFwicmVzZXRcIjpcbiAgICBjYXNlIFwicmVzaXplXCI6XG4gICAgY2FzZSBcInNlZWtlZFwiOlxuICAgIGNhc2UgXCJzdWJtaXRcIjpcbiAgICBjYXNlIFwidG9nZ2xlXCI6XG4gICAgY2FzZSBcInRvdWNoY2FuY2VsXCI6XG4gICAgY2FzZSBcInRvdWNoZW5kXCI6XG4gICAgY2FzZSBcInRvdWNoc3RhcnRcIjpcbiAgICBjYXNlIFwidm9sdW1lY2hhbmdlXCI6XG4gICAgY2FzZSBcImNoYW5nZVwiOlxuICAgIGNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpcbiAgICBjYXNlIFwidGV4dElucHV0XCI6XG4gICAgY2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpcbiAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICBjYXNlIFwiYmVmb3JlaW5wdXRcIjpcbiAgICBjYXNlIFwiYmx1clwiOlxuICAgIGNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6XG4gICAgY2FzZSBcImZvY3VzXCI6XG4gICAgY2FzZSBcImhhc2hjaGFuZ2VcIjpcbiAgICBjYXNlIFwicG9wc3RhdGVcIjpcbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgY2FzZSBcInNlbGVjdHN0YXJ0XCI6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlIFwiZHJhZ1wiOlxuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICBjYXNlIFwiZHJhZ2V4aXRcIjpcbiAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgY2FzZSBcImRyYWdvdmVyXCI6XG4gICAgY2FzZSBcIm1vdXNlbW92ZVwiOlxuICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICBjYXNlIFwicG9pbnRlcm1vdmVcIjpcbiAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgIGNhc2UgXCJzY3JvbGxcIjpcbiAgICBjYXNlIFwidG91Y2htb3ZlXCI6XG4gICAgY2FzZSBcIndoZWVsXCI6XG4gICAgY2FzZSBcIm1vdXNlZW50ZXJcIjpcbiAgICBjYXNlIFwibW91c2VsZWF2ZVwiOlxuICAgIGNhc2UgXCJwb2ludGVyZW50ZXJcIjpcbiAgICBjYXNlIFwicG9pbnRlcmxlYXZlXCI6XG4gICAgICByZXR1cm4gODtcbiAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgc3dpdGNoIChnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpKSB7XG4gICAgICAgIGNhc2UgSW1tZWRpYXRlUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIGNhc2UgVXNlckJsb2NraW5nUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDg7XG4gICAgICAgIGNhc2UgTm9ybWFsUHJpb3JpdHkkMTpcbiAgICAgICAgY2FzZSBMb3dQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICAgIGNhc2UgSWRsZVByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiAyNjg0MzU0NTY7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIDMyO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMzI7XG4gIH1cbn1cbnZhciBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITEsXG4gIHF1ZXVlZEZvY3VzID0gbnVsbCxcbiAgcXVldWVkRHJhZyA9IG51bGwsXG4gIHF1ZXVlZE1vdXNlID0gbnVsbCxcbiAgcXVldWVkUG9pbnRlcnMgPSBuZXcgTWFwKCksXG4gIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcyA9IG5ldyBNYXAoKSxcbiAgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzID0gW10sXG4gIGRpc2NyZXRlUmVwbGF5YWJsZUV2ZW50cyA9XG4gICAgXCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXRcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKTtcbmZ1bmN0aW9uIGNsZWFySWZDb250aW51b3VzRXZlbnQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICBxdWV1ZWRGb2N1cyA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgY2FzZSBcImRyYWdsZWF2ZVwiOlxuICAgICAgcXVldWVkRHJhZyA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgY2FzZSBcIm1vdXNlb3V0XCI6XG4gICAgICBxdWV1ZWRNb3VzZSA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicG9pbnRlcm92ZXJcIjpcbiAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgICAgcXVldWVkUG9pbnRlcnMuZGVsZXRlKG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICBjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZGVsZXRlKG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gIGV4aXN0aW5nUXVldWVkRXZlbnQsXG4gIGJsb2NrZWRPbixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICB0YXJnZXRDb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgaWYgKFxuICAgIG51bGwgPT09IGV4aXN0aW5nUXVldWVkRXZlbnQgfHxcbiAgICBleGlzdGluZ1F1ZXVlZEV2ZW50Lm5hdGl2ZUV2ZW50ICE9PSBuYXRpdmVFdmVudFxuICApXG4gICAgcmV0dXJuIChcbiAgICAgIChleGlzdGluZ1F1ZXVlZEV2ZW50ID0ge1xuICAgICAgICBibG9ja2VkT246IGJsb2NrZWRPbixcbiAgICAgICAgZG9tRXZlbnROYW1lOiBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3M6IGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudCxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyczogW3RhcmdldENvbnRhaW5lcl1cbiAgICAgIH0pLFxuICAgICAgbnVsbCAhPT0gYmxvY2tlZE9uICYmXG4gICAgICAgICgoYmxvY2tlZE9uID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShibG9ja2VkT24pKSxcbiAgICAgICAgbnVsbCAhPT0gYmxvY2tlZE9uICYmIGF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uKGJsb2NrZWRPbikpLFxuICAgICAgZXhpc3RpbmdRdWV1ZWRFdmVudFxuICAgICk7XG4gIGV4aXN0aW5nUXVldWVkRXZlbnQuZXZlbnRTeXN0ZW1GbGFncyB8PSBldmVudFN5c3RlbUZsYWdzO1xuICBibG9ja2VkT24gPSBleGlzdGluZ1F1ZXVlZEV2ZW50LnRhcmdldENvbnRhaW5lcnM7XG4gIG51bGwgIT09IHRhcmdldENvbnRhaW5lciAmJlxuICAgIC0xID09PSBibG9ja2VkT24uaW5kZXhPZih0YXJnZXRDb250YWluZXIpICYmXG4gICAgYmxvY2tlZE9uLnB1c2godGFyZ2V0Q29udGFpbmVyKTtcbiAgcmV0dXJuIGV4aXN0aW5nUXVldWVkRXZlbnQ7XG59XG5mdW5jdGlvbiBxdWV1ZUlmQ29udGludW91c0V2ZW50KFxuICBibG9ja2VkT24sXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChxdWV1ZWRGb2N1cyA9IGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkRm9jdXMsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZERyYWcgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZERyYWcsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZE1vdXNlID0gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRNb3VzZSxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwicG9pbnRlcm92ZXJcIjpcbiAgICAgIHZhciBwb2ludGVySWQgPSBuYXRpdmVFdmVudC5wb2ludGVySWQ7XG4gICAgICBxdWV1ZWRQb2ludGVycy5zZXQoXG4gICAgICAgIHBvaW50ZXJJZCxcbiAgICAgICAgYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRQb2ludGVycy5nZXQocG9pbnRlcklkKSB8fCBudWxsLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIHJldHVybiAhMDtcbiAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChwb2ludGVySWQgPSBuYXRpdmVFdmVudC5wb2ludGVySWQpLFxuICAgICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuc2V0KFxuICAgICAgICAgIHBvaW50ZXJJZCxcbiAgICAgICAgICBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgICAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmdldChwb2ludGVySWQpIHx8IG51bGwsXG4gICAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgICEwXG4gICAgICApO1xuICB9XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldChxdWV1ZWRUYXJnZXQpIHtcbiAgdmFyIHRhcmdldEluc3QgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShxdWV1ZWRUYXJnZXQudGFyZ2V0KTtcbiAgaWYgKG51bGwgIT09IHRhcmdldEluc3QpIHtcbiAgICB2YXIgbmVhcmVzdE1vdW50ZWQgPSBnZXROZWFyZXN0TW91bnRlZEZpYmVyKHRhcmdldEluc3QpO1xuICAgIGlmIChudWxsICE9PSBuZWFyZXN0TW91bnRlZClcbiAgICAgIGlmICgoKHRhcmdldEluc3QgPSBuZWFyZXN0TW91bnRlZC50YWcpLCAxMyA9PT0gdGFyZ2V0SW5zdCkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgodGFyZ2V0SW5zdCA9IGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIobmVhcmVzdE1vdW50ZWQpKSxcbiAgICAgICAgICBudWxsICE9PSB0YXJnZXRJbnN0KVxuICAgICAgICApIHtcbiAgICAgICAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID0gdGFyZ2V0SW5zdDtcbiAgICAgICAgICBydW5XaXRoUHJpb3JpdHkocXVldWVkVGFyZ2V0LnByaW9yaXR5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoMTMgPT09IG5lYXJlc3RNb3VudGVkLnRhZykge1xuICAgICAgICAgICAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICAgICAgICAgICAgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICAgIG51bGwgIT09IHJvb3QgJiZcbiAgICAgICAgICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgbmVhcmVzdE1vdW50ZWQsIGxhbmUpO1xuICAgICAgICAgICAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAzID09PSB0YXJnZXRJbnN0ICYmXG4gICAgICAgIG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkXG4gICAgICApIHtcbiAgICAgICAgcXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9XG4gICAgICAgICAgMyA9PT0gbmVhcmVzdE1vdW50ZWQudGFnXG4gICAgICAgICAgICA/IG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgfVxuICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRXZlbnQpIHtcbiAgaWYgKG51bGwgIT09IHF1ZXVlZEV2ZW50LmJsb2NrZWRPbikgcmV0dXJuICExO1xuICBmb3IgKFxuICAgIHZhciB0YXJnZXRDb250YWluZXJzID0gcXVldWVkRXZlbnQudGFyZ2V0Q29udGFpbmVycztcbiAgICAwIDwgdGFyZ2V0Q29udGFpbmVycy5sZW5ndGg7XG5cbiAgKSB7XG4gICAgdmFyIG5leHRCbG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KHF1ZXVlZEV2ZW50Lm5hdGl2ZUV2ZW50KTtcbiAgICBpZiAobnVsbCA9PT0gbmV4dEJsb2NrZWRPbikge1xuICAgICAgbmV4dEJsb2NrZWRPbiA9IHF1ZXVlZEV2ZW50Lm5hdGl2ZUV2ZW50O1xuICAgICAgdmFyIG5hdGl2ZUV2ZW50Q2xvbmUgPSBuZXcgbmV4dEJsb2NrZWRPbi5jb25zdHJ1Y3RvcihcbiAgICAgICAgbmV4dEJsb2NrZWRPbi50eXBlLFxuICAgICAgICBuZXh0QmxvY2tlZE9uXG4gICAgICApO1xuICAgICAgY3VycmVudFJlcGxheWluZ0V2ZW50ID0gbmF0aXZlRXZlbnRDbG9uZTtcbiAgICAgIG5leHRCbG9ja2VkT24udGFyZ2V0LmRpc3BhdGNoRXZlbnQobmF0aXZlRXZlbnRDbG9uZSk7XG4gICAgICBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBudWxsO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHRhcmdldENvbnRhaW5lcnMgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKG5leHRCbG9ja2VkT24pKSxcbiAgICAgICAgbnVsbCAhPT0gdGFyZ2V0Q29udGFpbmVycyAmJlxuICAgICAgICAgIGF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uKHRhcmdldENvbnRhaW5lcnMpLFxuICAgICAgICAocXVldWVkRXZlbnQuYmxvY2tlZE9uID0gbmV4dEJsb2NrZWRPbiksXG4gICAgICAgICExXG4gICAgICApO1xuICAgIHRhcmdldENvbnRhaW5lcnMuc2hpZnQoKTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50SW5NYXAocXVldWVkRXZlbnQsIGtleSwgbWFwKSB7XG4gIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRXZlbnQpICYmIG1hcC5kZWxldGUoa2V5KTtcbn1cbmZ1bmN0aW9uIHJlcGxheVVuYmxvY2tlZEV2ZW50cygpIHtcbiAgaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCA9ICExO1xuICBudWxsICE9PSBxdWV1ZWRGb2N1cyAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRm9jdXMpICYmXG4gICAgKHF1ZXVlZEZvY3VzID0gbnVsbCk7XG4gIG51bGwgIT09IHF1ZXVlZERyYWcgJiZcbiAgICBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50KHF1ZXVlZERyYWcpICYmXG4gICAgKHF1ZXVlZERyYWcgPSBudWxsKTtcbiAgbnVsbCAhPT0gcXVldWVkTW91c2UgJiZcbiAgICBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50KHF1ZXVlZE1vdXNlKSAmJlxuICAgIChxdWV1ZWRNb3VzZSA9IG51bGwpO1xuICBxdWV1ZWRQb2ludGVycy5mb3JFYWNoKGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcCk7XG4gIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5mb3JFYWNoKGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcCk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRXZlbnQsIHVuYmxvY2tlZCkge1xuICBxdWV1ZWRFdmVudC5ibG9ja2VkT24gPT09IHVuYmxvY2tlZCAmJlxuICAgICgocXVldWVkRXZlbnQuYmxvY2tlZE9uID0gbnVsbCksXG4gICAgaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCB8fFxuICAgICAgKChoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITApLFxuICAgICAgU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soXG4gICAgICAgIFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxcbiAgICAgICAgcmVwbGF5VW5ibG9ja2VkRXZlbnRzXG4gICAgICApKSk7XG59XG52YXIgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gbnVsbDtcbmZ1bmN0aW9uIHNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZChmb3JtUmVwbGF5aW5nUXVldWUpIHtcbiAgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlICE9PSBmb3JtUmVwbGF5aW5nUXVldWUgJiZcbiAgICAoKGxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSA9IGZvcm1SZXBsYXlpbmdRdWV1ZSksXG4gICAgU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soXG4gICAgICBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSA9PT0gZm9ybVJlcGxheWluZ1F1ZXVlICYmXG4gICAgICAgICAgKGxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSA9IG51bGwpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcm1SZXBsYXlpbmdRdWV1ZS5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgIHZhciBmb3JtID0gZm9ybVJlcGxheWluZ1F1ZXVlW2ldLFxuICAgICAgICAgICAgc3VibWl0dGVyT3JBY3Rpb24gPSBmb3JtUmVwbGF5aW5nUXVldWVbaSArIDFdLFxuICAgICAgICAgICAgZm9ybURhdGEgPSBmb3JtUmVwbGF5aW5nUXVldWVbaSArIDJdO1xuICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBzdWJtaXR0ZXJPckFjdGlvbilcbiAgICAgICAgICAgIGlmIChudWxsID09PSBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChzdWJtaXR0ZXJPckFjdGlvbiB8fCBmb3JtKSlcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBlbHNlIGJyZWFrO1xuICAgICAgICAgIHZhciBmb3JtSW5zdCA9IGdldEluc3RhbmNlRnJvbU5vZGUoZm9ybSk7XG4gICAgICAgICAgbnVsbCAhPT0gZm9ybUluc3QgJiZcbiAgICAgICAgICAgIChmb3JtUmVwbGF5aW5nUXVldWUuc3BsaWNlKGksIDMpLFxuICAgICAgICAgICAgKGkgLT0gMyksXG4gICAgICAgICAgICBzdGFydEhvc3RUcmFuc2l0aW9uKFxuICAgICAgICAgICAgICBmb3JtSW5zdCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBlbmRpbmc6ICEwLFxuICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogZm9ybS5tZXRob2QsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzdWJtaXR0ZXJPckFjdGlvblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdWJtaXR0ZXJPckFjdGlvbixcbiAgICAgICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKSk7XG59XG5mdW5jdGlvbiByZXRyeUlmQmxvY2tlZE9uKHVuYmxvY2tlZCkge1xuICBmdW5jdGlvbiB1bmJsb2NrKHF1ZXVlZEV2ZW50KSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRFdmVudCwgdW5ibG9ja2VkKTtcbiAgfVxuICBudWxsICE9PSBxdWV1ZWRGb2N1cyAmJiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRm9jdXMsIHVuYmxvY2tlZCk7XG4gIG51bGwgIT09IHF1ZXVlZERyYWcgJiYgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZERyYWcsIHVuYmxvY2tlZCk7XG4gIG51bGwgIT09IHF1ZXVlZE1vdXNlICYmIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRNb3VzZSwgdW5ibG9ja2VkKTtcbiAgcXVldWVkUG9pbnRlcnMuZm9yRWFjaCh1bmJsb2NrKTtcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmZvckVhY2godW5ibG9jayk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHF1ZXVlZFRhcmdldCA9IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0c1tpXTtcbiAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID09PSB1bmJsb2NrZWQgJiYgKHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSBudWxsKTtcbiAgfVxuICBmb3IgKFxuICAgIDtcbiAgICAwIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aCAmJlxuICAgICgoaSA9IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0c1swXSksIG51bGwgPT09IGkuYmxvY2tlZE9uKTtcblxuICApXG4gICAgYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KGkpLFxuICAgICAgbnVsbCA9PT0gaS5ibG9ja2VkT24gJiYgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLnNoaWZ0KCk7XG4gIGkgPSAodW5ibG9ja2VkLm93bmVyRG9jdW1lbnQgfHwgdW5ibG9ja2VkKS4kJHJlYWN0Rm9ybVJlcGxheTtcbiAgaWYgKG51bGwgIT0gaSlcbiAgICBmb3IgKHF1ZXVlZFRhcmdldCA9IDA7IHF1ZXVlZFRhcmdldCA8IGkubGVuZ3RoOyBxdWV1ZWRUYXJnZXQgKz0gMykge1xuICAgICAgdmFyIGZvcm0gPSBpW3F1ZXVlZFRhcmdldF0sXG4gICAgICAgIHN1Ym1pdHRlck9yQWN0aW9uID0gaVtxdWV1ZWRUYXJnZXQgKyAxXSxcbiAgICAgICAgZm9ybVByb3BzID0gZm9ybVtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHN1Ym1pdHRlck9yQWN0aW9uKVxuICAgICAgICBmb3JtUHJvcHMgfHwgc2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkKGkpO1xuICAgICAgZWxzZSBpZiAoZm9ybVByb3BzKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBudWxsO1xuICAgICAgICBpZiAoc3VibWl0dGVyT3JBY3Rpb24gJiYgc3VibWl0dGVyT3JBY3Rpb24uaGFzQXR0cmlidXRlKFwiZm9ybUFjdGlvblwiKSlcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoKGZvcm0gPSBzdWJtaXR0ZXJPckFjdGlvbiksXG4gICAgICAgICAgICAoZm9ybVByb3BzID0gc3VibWl0dGVyT3JBY3Rpb25baW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbCkpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgYWN0aW9uID0gZm9ybVByb3BzLmZvcm1BY3Rpb247XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gZmluZEluc3RhbmNlQmxvY2tpbmdUYXJnZXQoZm9ybSkpIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZSBhY3Rpb24gPSBmb3JtUHJvcHMuYWN0aW9uO1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb25cbiAgICAgICAgICA/IChpW3F1ZXVlZFRhcmdldCArIDFdID0gYWN0aW9uKVxuICAgICAgICAgIDogKGkuc3BsaWNlKHF1ZXVlZFRhcmdldCwgMyksIChxdWV1ZWRUYXJnZXQgLT0gMykpO1xuICAgICAgICBzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQoaSk7XG4gICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gUmVhY3RET01Sb290KGludGVybmFsUm9vdCkge1xuICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBpbnRlcm5hbFJvb3Q7XG59XG5SZWFjdERPTUh5ZHJhdGlvblJvb3QucHJvdG90eXBlLnJlbmRlciA9IFJlYWN0RE9NUm9vdC5wcm90b3R5cGUucmVuZGVyID1cbiAgZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLl9pbnRlcm5hbFJvb3Q7XG4gICAgaWYgKG51bGwgPT09IHJvb3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA5KSk7XG4gICAgdmFyIGN1cnJlbnQgPSByb290LmN1cnJlbnQsXG4gICAgICBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgICB1cGRhdGVDb250YWluZXJJbXBsKGN1cnJlbnQsIGxhbmUsIGNoaWxkcmVuLCByb290LCBudWxsLCBudWxsKTtcbiAgfTtcblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUudW5tb3VudCA9IFJlYWN0RE9NUm9vdC5wcm90b3R5cGUudW5tb3VudCA9XG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgICBpZiAobnVsbCAhPT0gcm9vdCkge1xuICAgICAgdGhpcy5faW50ZXJuYWxSb290ID0gbnVsbDtcbiAgICAgIHZhciBjb250YWluZXIgPSByb290LmNvbnRhaW5lckluZm87XG4gICAgICAwID09PSByb290LnRhZyAmJiBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gICAgICB1cGRhdGVDb250YWluZXJJbXBsKHJvb3QuY3VycmVudCwgMiwgbnVsbCwgcm9vdCwgbnVsbCwgbnVsbCk7XG4gICAgICBmbHVzaFN5bmNXb3JrJDEoKTtcbiAgICAgIGNvbnRhaW5lcltpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSA9IG51bGw7XG4gICAgfVxuICB9O1xuZnVuY3Rpb24gUmVhY3RET01IeWRyYXRpb25Sb290KGludGVybmFsUm9vdCkge1xuICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBpbnRlcm5hbFJvb3Q7XG59XG5SZWFjdERPTUh5ZHJhdGlvblJvb3QucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICBpZiAodGFyZ2V0KSB7XG4gICAgdmFyIHVwZGF0ZVByaW9yaXR5ID0gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCk7XG4gICAgdGFyZ2V0ID0geyBibG9ja2VkT246IG51bGwsIHRhcmdldDogdGFyZ2V0LCBwcmlvcml0eTogdXBkYXRlUHJpb3JpdHkgfTtcbiAgICBmb3IgKFxuICAgICAgdmFyIGkgPSAwO1xuICAgICAgaSA8IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5sZW5ndGggJiZcbiAgICAgIDAgIT09IHVwZGF0ZVByaW9yaXR5ICYmXG4gICAgICB1cGRhdGVQcmlvcml0eSA8IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0c1tpXS5wcmlvcml0eTtcbiAgICAgIGkrK1xuICAgICk7XG4gICAgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLnNwbGljZShpLCAwLCB0YXJnZXQpO1xuICAgIDAgPT09IGkgJiYgYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHRhcmdldCk7XG4gIH1cbn07XG52YXIgaXNvbW9ycGhpY1JlYWN0UGFja2FnZVZlcnNpb24kanNjb21wJGlubGluZV8xNjg2ID0gUmVhY3QudmVyc2lvbjtcbmlmIChcbiAgXCIxOS4wLjBcIiAhPT1cbiAgaXNvbW9ycGhpY1JlYWN0UGFja2FnZVZlcnNpb24kanNjb21wJGlubGluZV8xNjg2XG4pXG4gIHRocm93IEVycm9yKFxuICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoXG4gICAgICA1MjcsXG4gICAgICBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODYsXG4gICAgICBcIjE5LjAuMFwiXG4gICAgKVxuICApO1xuUmVhY3RET01TaGFyZWRJbnRlcm5hbHMuZmluZERPTU5vZGUgPSBmdW5jdGlvbiAoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gIHZhciBmaWJlciA9IGNvbXBvbmVudE9yRWxlbWVudC5fcmVhY3RJbnRlcm5hbHM7XG4gIGlmICh2b2lkIDAgPT09IGZpYmVyKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIpXG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICAgIGNvbXBvbmVudE9yRWxlbWVudCA9IE9iamVjdC5rZXlzKGNvbXBvbmVudE9yRWxlbWVudCkuam9pbihcIixcIik7XG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyNjgsIGNvbXBvbmVudE9yRWxlbWVudCkpO1xuICB9XG4gIGNvbXBvbmVudE9yRWxlbWVudCA9IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKGZpYmVyKTtcbiAgY29tcG9uZW50T3JFbGVtZW50ID1cbiAgICBudWxsICE9PSBjb21wb25lbnRPckVsZW1lbnRcbiAgICAgID8gZmluZEN1cnJlbnRIb3N0RmliZXJJbXBsKGNvbXBvbmVudE9yRWxlbWVudClcbiAgICAgIDogbnVsbDtcbiAgY29tcG9uZW50T3JFbGVtZW50ID1cbiAgICBudWxsID09PSBjb21wb25lbnRPckVsZW1lbnQgPyBudWxsIDogY29tcG9uZW50T3JFbGVtZW50LnN0YXRlTm9kZTtcbiAgcmV0dXJuIGNvbXBvbmVudE9yRWxlbWVudDtcbn07XG52YXIgaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjE2NSA9IHtcbiAgYnVuZGxlVHlwZTogMCxcbiAgdmVyc2lvbjogXCIxOS4wLjBcIixcbiAgcmVuZGVyZXJQYWNrYWdlTmFtZTogXCJyZWFjdC1kb21cIixcbiAgY3VycmVudERpc3BhdGNoZXJSZWY6IFJlYWN0U2hhcmVkSW50ZXJuYWxzLFxuICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gIHJlY29uY2lsZXJWZXJzaW9uOiBcIjE5LjAuMFwiXG59O1xuaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pIHtcbiAgdmFyIGhvb2skanNjb21wJGlubGluZV8yMTY2ID0gX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuICBpZiAoXG4gICAgIWhvb2skanNjb21wJGlubGluZV8yMTY2LmlzRGlzYWJsZWQgJiZcbiAgICBob29rJGpzY29tcCRpbmxpbmVfMjE2Ni5zdXBwb3J0c0ZpYmVyXG4gIClcbiAgICB0cnkge1xuICAgICAgKHJlbmRlcmVySUQgPSBob29rJGpzY29tcCRpbmxpbmVfMjE2Ni5pbmplY3QoXG4gICAgICAgIGludGVybmFscyRqc2NvbXAkaW5saW5lXzIxNjVcbiAgICAgICkpLFxuICAgICAgICAoaW5qZWN0ZWRIb29rID0gaG9vayRqc2NvbXAkaW5saW5lXzIxNjYpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbn1cbmV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHZhciBpc1N0cmljdE1vZGUgPSAhMSxcbiAgICBpZGVudGlmaWVyUHJlZml4ID0gXCJcIixcbiAgICBvblVuY2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IgPSBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MgPSBudWxsO1xuICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgdm9pZCAwICE9PSBvcHRpb25zICYmXG4gICAgKCEwID09PSBvcHRpb25zLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgKGlzU3RyaWN0TW9kZSA9ICEwKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCAmJlxuICAgICAgKGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXgpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblVuY2F1Z2h0RXJyb3IgJiZcbiAgICAgIChvblVuY2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IgJiYgKG9uQ2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblJlY292ZXJhYmxlRXJyb3IgJiZcbiAgICAgIChvblJlY292ZXJhYmxlRXJyb3IgPSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MgJiZcbiAgICAgICh0cmFuc2l0aW9uQ2FsbGJhY2tzID0gb3B0aW9ucy51bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzKSk7XG4gIG9wdGlvbnMgPSBjcmVhdGVGaWJlclJvb3QoXG4gICAgY29udGFpbmVyLFxuICAgIDEsXG4gICAgITEsXG4gICAgbnVsbCxcbiAgICBudWxsLFxuICAgIGlzU3RyaWN0TW9kZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICAgIG51bGxcbiAgKTtcbiAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gb3B0aW9ucy5jdXJyZW50O1xuICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhcbiAgICA4ID09PSBjb250YWluZXIubm9kZVR5cGUgPyBjb250YWluZXIucGFyZW50Tm9kZSA6IGNvbnRhaW5lclxuICApO1xuICByZXR1cm4gbmV3IFJlYWN0RE9NUm9vdChvcHRpb25zKTtcbn07XG5leHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgaW5pdGlhbENoaWxkcmVuLCBvcHRpb25zKSB7XG4gIGlmICghaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI5OSkpO1xuICB2YXIgaXNTdHJpY3RNb2RlID0gITEsXG4gICAgaWRlbnRpZmllclByZWZpeCA9IFwiXCIsXG4gICAgb25VbmNhdWdodEVycm9yID0gZGVmYXVsdE9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yID0gZGVmYXVsdE9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yID0gZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzID0gbnVsbCxcbiAgICBmb3JtU3RhdGUgPSBudWxsO1xuICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgdm9pZCAwICE9PSBvcHRpb25zICYmXG4gICAgKCEwID09PSBvcHRpb25zLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgKGlzU3RyaWN0TW9kZSA9ICEwKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCAmJlxuICAgICAgKGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXgpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblVuY2F1Z2h0RXJyb3IgJiZcbiAgICAgIChvblVuY2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IgJiYgKG9uQ2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblJlY292ZXJhYmxlRXJyb3IgJiZcbiAgICAgIChvblJlY292ZXJhYmxlRXJyb3IgPSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MgJiZcbiAgICAgICh0cmFuc2l0aW9uQ2FsbGJhY2tzID0gb3B0aW9ucy51bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuZm9ybVN0YXRlICYmIChmb3JtU3RhdGUgPSBvcHRpb25zLmZvcm1TdGF0ZSkpO1xuICBpbml0aWFsQ2hpbGRyZW4gPSBjcmVhdGVGaWJlclJvb3QoXG4gICAgY29udGFpbmVyLFxuICAgIDEsXG4gICAgITAsXG4gICAgaW5pdGlhbENoaWxkcmVuLFxuICAgIG51bGwgIT0gb3B0aW9ucyA/IG9wdGlvbnMgOiBudWxsLFxuICAgIGlzU3RyaWN0TW9kZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICAgIGZvcm1TdGF0ZVxuICApO1xuICBpbml0aWFsQ2hpbGRyZW4uY29udGV4dCA9IGdldENvbnRleHRGb3JTdWJ0cmVlKG51bGwpO1xuICBvcHRpb25zID0gaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQ7XG4gIGlzU3RyaWN0TW9kZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGlkZW50aWZpZXJQcmVmaXggPSBjcmVhdGVVcGRhdGUoaXNTdHJpY3RNb2RlKTtcbiAgaWRlbnRpZmllclByZWZpeC5jYWxsYmFjayA9IG51bGw7XG4gIGVucXVldWVVcGRhdGUob3B0aW9ucywgaWRlbnRpZmllclByZWZpeCwgaXNTdHJpY3RNb2RlKTtcbiAgaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQubGFuZXMgPSBpc1N0cmljdE1vZGU7XG4gIG1hcmtSb290VXBkYXRlZCQxKGluaXRpYWxDaGlsZHJlbiwgaXNTdHJpY3RNb2RlKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGluaXRpYWxDaGlsZHJlbik7XG4gIGNvbnRhaW5lcltpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSA9IGluaXRpYWxDaGlsZHJlbi5jdXJyZW50O1xuICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhjb250YWluZXIpO1xuICByZXR1cm4gbmV3IFJlYWN0RE9NSHlkcmF0aW9uUm9vdChpbml0aWFsQ2hpbGRyZW4pO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMC4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tY2xpZW50LnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLWNsaWVudC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi93aW5kb3ctdXRpbHMnO1xuXG5jb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbmV4cG9ydCBjb25zdCBTREtfSU5JVElBTElaRUQgPSB3aW5kb3cuU0RLX0lOSVRJQUxJWkVEO1xuZXhwb3J0IGNvbnN0IGdldFdtZVNkayA9IHdpbmRvdy5nZXRXbWVTZGs7XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0V2luZG93KCk6IFdpbmRvdyB7XG4gIGlmICgndW5zYWZlV2luZG93JyBpbiB3aW5kb3cpIHJldHVybiB3aW5kb3cudW5zYWZlV2luZG93IGFzIFdpbmRvdztcbiAgcmV0dXJuIHdpbmRvdztcbn1cbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIFJlYWN0Tm9kZSwgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFdtZVNESyB9IGZyb20gJ3dtZS1zZGstdHlwaW5ncyc7XG5pbXBvcnQgeyBnZXRXbWVTZGsgfSBmcm9tICcuLi91dGlscy9zZGstdXRpbHMnO1xuaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnLi4vdXRpbHMvd2luZG93LXV0aWxzJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnR5cGUgRXh0cmFjdEZ1bmN0aW9uVHlwZTxUPiA9IFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueSA/IFQgOiBuZXZlcjtcbnR5cGUgV21lU2RrUmVzb2x2ZXJGdW5jdGlvbiA9IEV4dHJhY3RGdW5jdGlvblR5cGU8dHlwZW9mIHdpbmRvdy5nZXRXbWVTZGs+O1xuXG5kZWNsYXJlIGNvbnN0IF9fU0NSSVBUX0lEX186IHN0cmluZztcbmRlY2xhcmUgY29uc3QgX19TQ1JJUFRfTkFNRV9fOiBzdHJpbmc7XG5jb25zdCBkZWZhdWx0V21lU2RrID0gKCgpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ2V0V21lU2RrPy4oe1xuICAgICAgc2NyaXB0SWQ6IF9fU0NSSVBUX0lEX18sXG4gICAgICBzY3JpcHROYW1lOiBfX1NDUklQVF9OQU1FX18sXG4gICAgfSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn0pKCk7XG5jb25zdCBXbWVTZGtDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxXbWVTREs+KGRlZmF1bHRXbWVTZGspO1xuXG5pbnRlcmZhY2UgU3RhdGljU2RrUHJvcHMge1xuICB3bWVTZGs6IFdtZVNESztcbn1cbnR5cGUgUmVzb2x2YWJsZVNka09wdGlvbnMgPSBQYXJhbWV0ZXJzPFdtZVNka1Jlc29sdmVyRnVuY3Rpb24+WzBdO1xuXG50eXBlIFdtZVNka1Byb3BzID0gKFN0YXRpY1Nka1Byb3BzIHwgUmVzb2x2YWJsZVNka09wdGlvbnMpICYge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBXbWVTZGtQcm92aWRlcih7IGNoaWxkcmVuLCAuLi5wcm9wcyB9OiBXbWVTZGtQcm9wcykge1xuICBjb25zdCB3bWVTZGsgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoJ3dtZVNkaycgaW4gcHJvcHMpIHJldHVybiBwcm9wcy53bWVTZGs7XG5cbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXdpbmRvdy5nZXRXbWVTZGspIHJldHVybiBudWxsO1xuICAgIHJldHVybiB3aW5kb3cuZ2V0V21lU2RrKHByb3BzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzIC0tIG9wdGlvbnMgaXMgYW4gb2JqZWN0XG4gIH0sIFsuLi5PYmplY3QudmFsdWVzKHByb3BzKV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFdtZVNka0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3dtZVNka30+e2NoaWxkcmVufTwvV21lU2RrQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVdtZVNkaygpIHtcbiAgY29uc3Qgd21lU2RrID0gdXNlQ29udGV4dChXbWVTZGtDb250ZXh0KTtcbiAgaWYgKHdtZVNkayA9PT0gdW5kZWZpbmVkKVxuICAgIHRocm93IG5ldyBFcnJvcigndXNlV21lU2RrIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBXbWVTZGtQcm92aWRlcicpO1xuXG4gIHJldHVybiB3bWVTZGs7XG59XG4iLCJpbXBvcnQgeyBSZWFjdE5vZGUsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVQb3J0YWwgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgdXNlV21lU2RrIH0gZnJvbSAnLi4vY29udGV4dHMvV21lU2RrQ29udGV4dCc7XG5cbmludGVyZmFjZSBTY3JpcHRUYWJQcm9wcyB7XG4gIHRhYklkPzogc3RyaW5nO1xuICB0YWJMYWJlbDogUmVhY3ROb2RlO1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIFNjcmlwdFRhYih7IHRhYklkLCB0YWJMYWJlbCwgY2hpbGRyZW4gfTogU2NyaXB0VGFiUHJvcHMpIHtcbiAgY29uc3QgdGFiRWxlbWVudHMgPSB1c2VTY3JpcHRUYWJFbGVtZW50cyh0YWJJZCk7XG5cbiAgaWYgKCF0YWJFbGVtZW50cykgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge2NyZWF0ZVBvcnRhbCh0YWJMYWJlbCwgdGFiRWxlbWVudHMudGFiTGFiZWwpfVxuICAgICAge2NyZWF0ZVBvcnRhbChjaGlsZHJlbiwgdGFiRWxlbWVudHMudGFiUGFuZSl9XG4gICAgPC8+XG4gICk7XG59XG5cbmZ1bmN0aW9uIHVzZVNka1NpZGViYXJNb2R1bGUodGFiSWQ/OiBzdHJpbmcpIHtcbiAgY29uc3Qgd21lU2RrID0gdXNlV21lU2RrKCk7XG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoIXRhYklkKSByZXR1cm4gd21lU2RrLlNpZGViYXI7XG4gICAgLy8gaWYgd2UgaGF2ZSBhIHRhYklkLCB0aGVuIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBTaWRlYmFyXG4gICAgLy8gYnV0IHdpdGggdGhlIGlkIG9mIHNjcmlwdElkLnRhYklkXG4gICAgLy8gdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBTaWRlYmFyLCB3ZSBuZWVkIHRvIGNhbGwgdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBTaWRlYmFyIHR5cGUgKFNpZGViYXIgaXMgYWxyZWFkeSBhbiBpbnN0YW5jZSlcbiAgICAvLyBhbmQgcGFzcyB0aGUgaWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgY29uc3Qgc2NyaXB0SWQgPSAod21lU2RrLlNpZGViYXIgYXMgdW5rbm93biBhcyB7IHNjcmlwdElkOiBzdHJpbmcgfSlcbiAgICAgIC5zY3JpcHRJZDtcblxuICAgIGNvbnN0IG5hbWVzcGFjZWRUYWJJZCA9IGAke3NjcmlwdElkfS4ke3RhYklkfWA7XG4gICAgY29uc3QgU2lkZWJhck1vZHVsZSA9IHdtZVNkay5TaWRlYmFyLmNvbnN0cnVjdG9yIGFzIHtcbiAgICAgIG5ldyAoc2NyaXB0SWQ6IHN0cmluZywgc2NyaXB0TmFtZT86IHN0cmluZyk6IHR5cGVvZiB3bWVTZGsuU2lkZWJhcjtcbiAgICB9O1xuICAgIHJldHVybiBuZXcgU2lkZWJhck1vZHVsZShuYW1lc3BhY2VkVGFiSWQpO1xuICB9LCBbdGFiSWQsIHdtZVNka10pO1xufVxuXG5mdW5jdGlvbiB1c2VTY3JpcHRUYWJFbGVtZW50cyh0YWJJZD86IHN0cmluZykge1xuICBjb25zdCBzaWRlYmFyTW9kdWxlID0gdXNlU2RrU2lkZWJhck1vZHVsZSh0YWJJZCk7XG4gIGNvbnN0IFt0YWJSZXN1bHQsIHNldFRhYlJlc3VsdF0gPSB1c2VTdGF0ZTxBd2FpdGVkPFxuICAgIFJldHVyblR5cGU8dHlwZW9mIHNpZGViYXJNb2R1bGUucmVnaXN0ZXJTY3JpcHRUYWI+XG4gID4gfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNpZGViYXJNb2R1bGUucmVnaXN0ZXJTY3JpcHRUYWIoKS50aGVuKHNldFRhYlJlc3VsdCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2lkZWJhck1vZHVsZS5yZW1vdmVTY3JpcHRUYWIoKTtcbiAgICAgIHNldFRhYlJlc3VsdChudWxsKTtcbiAgICB9O1xuICB9LCBbc2lkZWJhck1vZHVsZV0pO1xuXG4gIHJldHVybiB0YWJSZXN1bHQgP1xuICAgICAge1xuICAgICAgICB0YWJMYWJlbDogdGFiUmVzdWx0LnRhYkxhYmVsLFxuICAgICAgICB0YWJQYW5lOiB0YWJSZXN1bHQudGFiUGFuZSxcbiAgICAgIH1cbiAgICA6IG51bGw7XG59XG4iLCJpbXBvcnQgeyBhc1NjcmlwdFRhYiB9IGZyb20gJy4vdXRpbHMvYXMtc2NyaXB0LXRhYic7XG5cbmZ1bmN0aW9uIEFwcENvbXBvbmVudCgpIHtcbiAgcmV0dXJuIDw+SGVsbG8gV29ybGQhPC8+O1xufVxuQXBwQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ0FwcCc7XG5cbmV4cG9ydCBjb25zdCBBcHAgPSBhc1NjcmlwdFRhYihBcHBDb21wb25lbnQsICdNeSBVc2Vyc2NyaXB0Jyk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50VHlwZSwgRnVuY3Rpb25Db21wb25lbnQsIFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjcmlwdFRhYiB9IGZyb20gJy4uL2NvbXBvbmVudHMvU2NyaXB0VGFiJztcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnLi9nZXQtZGlzcGxheS1uYW1lJztcblxudHlwZSBEaXJlY3RSZWFjdENoaWxkcmVuID0gUmVhY3RFbGVtZW50IHwgc3RyaW5nIHwgbnVtYmVyO1xuXG5leHBvcnQgZnVuY3Rpb24gYXNTY3JpcHRUYWI8QyBleHRlbmRzIENvbXBvbmVudFR5cGU8UD4sIFAgZXh0ZW5kcyBvYmplY3Q+KFxuICBDb21wb25lbnQ6IEMsXG4gIHRhYkxhYmVsOiBEaXJlY3RSZWFjdENoaWxkcmVuLFxuICB0YWJJZD86IHN0cmluZyxcbik6IEZ1bmN0aW9uQ29tcG9uZW50PFA+IHtcbiAgY29uc3QgdGFiYmVkQ29tcG9uZW50ID0gKHByb3BzOiBQKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTY3JpcHRUYWIgdGFiSWQ9e3RhYklkfSB0YWJMYWJlbD17dGFiTGFiZWx9PlxuICAgICAgICB7LyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudCAqL31cbiAgICAgICAgey8qLy8gQHRzLWV4cGVjdC1lcnJvciAqL31cbiAgICAgICAgPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+XG4gICAgICA8L1NjcmlwdFRhYj5cbiAgICApO1xuICB9O1xuICB0YWJiZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgU2NyaXB0VGFiKCR7Z2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KX0pYDtcblxuICByZXR1cm4gdGFiYmVkQ29tcG9uZW50O1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ3JlYWN0JztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShjb21wb25lbnQ6IENvbXBvbmVudFR5cGU8YW55Pikge1xuICByZXR1cm4gY29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudC5uYW1lIHx8ICdVbmtub3duJztcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCc7XG5pbXBvcnQgeyBBcHAgfSBmcm9tICcuL0FwcCc7XG5pbXBvcnQgeyBTREtfSU5JVElBTElaRUQgfSBmcm9tICcuL3V0aWxzL3Nkay11dGlscyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGJvb3RzdHJhcCgpIHtcbiAgYXdhaXQgU0RLX0lOSVRJQUxJWkVEO1xuXG4gIGNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSk7XG4gIHJvb3QucmVuZGVyKDxBcHAgLz4pO1xufVxuXG5ib290c3RyYXAoKTtcbiJdLCJuYW1lcyI6WyJSRUFDVF9FTEVNRU5UX1RZUEUiLCJTeW1ib2wiLCJmb3IiLCJSRUFDVF9QT1JUQUxfVFlQRSIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIiwiUkVBQ1RfUFJPRklMRVJfVFlQRSIsIlJFQUNUX0NPTlNVTUVSX1RZUEUiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsIlJFQUNUX01FTU9fVFlQRSIsIlJFQUNUX0xBWllfVFlQRSIsIk1BWUJFX0lURVJBVE9SX1NZTUJPTCIsIml0ZXJhdG9yIiwiUmVhY3ROb29wVXBkYXRlUXVldWUiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiYXNzaWduIiwiT2JqZWN0IiwiZW1wdHlPYmplY3QiLCJDb21wb25lbnQiLCJwcm9wcyIsImNvbnRleHQiLCJ1cGRhdGVyIiwidGhpcyIsInJlZnMiLCJDb21wb25lbnREdW1teSIsIlB1cmVDb21wb25lbnQiLCJwcm90b3R5cGUiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJwYXJ0aWFsU3RhdGUiLCJjYWxsYmFjayIsIkVycm9yIiwiZm9yY2VVcGRhdGUiLCJwdXJlQ29tcG9uZW50UHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImlzQXJyYXlJbXBsIiwiQXJyYXkiLCJpc0FycmF5IiwiUmVhY3RTaGFyZWRJbnRlcm5hbHMiLCJIIiwiQSIsIlQiLCJTIiwiaGFzT3duUHJvcGVydHkiLCJSZWFjdEVsZW1lbnQiLCJ0eXBlIiwia2V5Iiwic2VsZiIsInNvdXJjZSIsIm93bmVyIiwicmVmIiwiJCR0eXBlb2YiLCJpc1ZhbGlkRWxlbWVudCIsIm9iamVjdCIsInVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4IiwiZ2V0RWxlbWVudEtleSIsImVsZW1lbnQiLCJpbmRleCIsImVzY2FwZXJMb29rdXAiLCJyZXBsYWNlIiwibWF0Y2giLCJ0b1N0cmluZyIsIm5vb3AkMSIsIm1hcEludG9BcnJheSIsImNoaWxkcmVuIiwiYXJyYXkiLCJlc2NhcGVkUHJlZml4IiwibmFtZVNvRmFyIiwib2xkRWxlbWVudCIsIm5ld0tleSIsImludm9rZUNhbGxiYWNrIiwiX2luaXQiLCJfcGF5bG9hZCIsImMiLCJwdXNoIiwibWF5YmVJdGVyYWJsZSIsIm5leHROYW1lUHJlZml4IiwiaSIsImxlbmd0aCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwidGhlbiIsInRoZW5hYmxlIiwic3RhdHVzIiwicmVhc29uIiwiZnVsZmlsbGVkVmFsdWUiLCJlcnJvciIsInJlc29sdmVUaGVuYWJsZSIsIlN0cmluZyIsImtleXMiLCJqb2luIiwibWFwQ2hpbGRyZW4iLCJmdW5jIiwicmVzdWx0IiwiY291bnQiLCJjaGlsZCIsImxhenlJbml0aWFsaXplciIsInBheWxvYWQiLCJfc3RhdHVzIiwiY3RvciIsIl9yZXN1bHQiLCJtb2R1bGVPYmplY3QiLCJkZWZhdWx0IiwicmVwb3J0R2xvYmFsRXJyb3IiLCJyZXBvcnRFcnJvciIsIndpbmRvdyIsIkVycm9yRXZlbnQiLCJldmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwibWVzc2FnZSIsImRpc3BhdGNoRXZlbnQiLCJwcm9jZXNzIiwiZW1pdCIsImNvbnNvbGUiLCJub29wIiwicmVhY3RfcHJvZHVjdGlvbiIsIkNoaWxkcmVuIiwibWFwIiwiZm9yRWFjaCIsImZvckVhY2hGdW5jIiwiZm9yRWFjaENvbnRleHQiLCJhcHBseSIsImFyZ3VtZW50cyIsIm4iLCJ0b0FycmF5Iiwib25seSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUiLCJhY3QiLCJjYWNoZSIsImZuIiwiY2xvbmVFbGVtZW50IiwiY29uZmlnIiwicHJvcE5hbWUiLCJjaGlsZEFycmF5IiwiY3JlYXRlQ29udGV4dCIsImRlZmF1bHRWYWx1ZSIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJjaGlsZHJlbkxlbmd0aCIsImRlZmF1bHRQcm9wcyIsImNyZWF0ZVJlZiIsImN1cnJlbnQiLCJmb3J3YXJkUmVmIiwicmVuZGVyIiwibGF6eSIsIm1lbW8iLCJjb21wYXJlIiwic3RhcnRUcmFuc2l0aW9uIiwic2NvcGUiLCJwcmV2VHJhbnNpdGlvbiIsImN1cnJlbnRUcmFuc2l0aW9uIiwicmV0dXJuVmFsdWUiLCJvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCIsInVuc3RhYmxlX3VzZUNhY2hlUmVmcmVzaCIsInVzZUNhY2hlUmVmcmVzaCIsInVzZSIsInVzYWJsZSIsInVzZUFjdGlvblN0YXRlIiwiYWN0aW9uIiwiaW5pdGlhbFN0YXRlIiwicGVybWFsaW5rIiwidXNlQ2FsbGJhY2siLCJkZXBzIiwidXNlQ29udGV4dCIsIkNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsImluaXRpYWxWYWx1ZSIsInVzZUVmZmVjdCIsImNyZWF0ZSIsInVzZUlkIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VPcHRpbWlzdGljIiwicGFzc3Rocm91Z2giLCJyZWR1Y2VyIiwidXNlUmVkdWNlciIsImluaXRpYWxBcmciLCJpbml0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInN1YnNjcmliZSIsImdldFNuYXBzaG90IiwiZ2V0U2VydmVyU25hcHNob3QiLCJ1c2VUcmFuc2l0aW9uIiwidmVyc2lvbiIsInJlYWN0TW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUkJDAiLCJqc3hSdW50aW1lTW9kdWxlIiwianN4UHJvZCIsIm1heWJlS2V5IiwicmVhY3RKc3hSdW50aW1lX3Byb2R1Y3Rpb24iLCJqc3giLCJqc3hzIiwic2NoZWR1bGVyTW9kdWxlIiwiaGVhcCIsIm5vZGUiLCJhIiwicGFyZW50SW5kZXgiLCJwYXJlbnQiLCJwZWVrIiwicG9wIiwiZmlyc3QiLCJsYXN0IiwiaGFsZkxlbmd0aCIsImxlZnRJbmRleCIsImxlZnQiLCJyaWdodEluZGV4IiwicmlnaHQiLCJiIiwiZGlmZiIsInNvcnRJbmRleCIsImlkIiwidW5zdGFibGVfbm93IiwicGVyZm9ybWFuY2UiLCJub3ciLCJsb2NhbFBlcmZvcm1hbmNlIiwibG9jYWxEYXRlIiwiRGF0ZSIsImluaXRpYWxUaW1lIiwidGFza1F1ZXVlIiwidGltZXJRdWV1ZSIsInRhc2tJZENvdW50ZXIiLCJjdXJyZW50VGFzayIsImN1cnJlbnRQcmlvcml0eUxldmVsIiwiaXNQZXJmb3JtaW5nV29yayIsImlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIiwiaXNIb3N0VGltZW91dFNjaGVkdWxlZCIsImxvY2FsU2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJsb2NhbENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImxvY2FsU2V0SW1tZWRpYXRlIiwic2V0SW1tZWRpYXRlIiwiYWR2YW5jZVRpbWVycyIsImN1cnJlbnRUaW1lIiwidGltZXIiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsImhhbmRsZVRpbWVvdXQiLCJyZXF1ZXN0SG9zdENhbGxiYWNrIiwiZmlyc3RUaW1lciIsInJlcXVlc3RIb3N0VGltZW91dCIsInNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lIiwiaXNNZXNzYWdlTG9vcFJ1bm5pbmciLCJ0YXNrVGltZW91dElEIiwiZnJhbWVJbnRlcnZhbCIsInNob3VsZFlpZWxkVG9Ib3N0IiwicGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lIiwiaGFzTW9yZVdvcmsiLCJwcmV2aW91c1ByaW9yaXR5TGV2ZWwiLCJwcmlvcml0eUxldmVsIiwiY29udGludWF0aW9uQ2FsbGJhY2siLCJNZXNzYWdlQ2hhbm5lbCIsImNoYW5uZWwiLCJwb3J0IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwibXMiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwidGFzayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmcHMiLCJNYXRoIiwiZmxvb3IiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsImV2ZW50SGFuZGxlciIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIm9wdGlvbnMiLCJkZWxheSIsInRpbWVvdXQiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInBhcmVudFByaW9yaXR5TGV2ZWwiLCJSZWFjdCIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJjb2RlIiwidXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSW50ZXJuYWxzIiwiZCIsImYiLCJyIiwiRCIsIkMiLCJMIiwibSIsIlgiLCJNIiwicCIsImZpbmRET01Ob2RlIiwiZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyIsImFzIiwiaW5wdXQiLCJyZWFjdERvbV9wcm9kdWN0aW9uIiwiX19ET01fSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFIiwiY3JlYXRlUG9ydGFsIiwiY29udGFpbmVyIiwibm9kZVR5cGUiLCJjb250YWluZXJJbmZvIiwiaW1wbGVtZW50YXRpb24iLCJjcmVhdGVQb3J0YWwkMSIsImZsdXNoU3luYyIsInByZXZpb3VzVHJhbnNpdGlvbiIsInByZXZpb3VzVXBkYXRlUHJpb3JpdHkiLCJwcmVjb25uZWN0IiwiaHJlZiIsImNyb3NzT3JpZ2luIiwicHJlZmV0Y2hETlMiLCJwcmVpbml0IiwiaW50ZWdyaXR5IiwiZmV0Y2hQcmlvcml0eSIsInByZWNlZGVuY2UiLCJub25jZSIsInByZWluaXRNb2R1bGUiLCJwcmVsb2FkIiwicmVmZXJyZXJQb2xpY3kiLCJpbWFnZVNyY1NldCIsImltYWdlU2l6ZXMiLCJtZWRpYSIsInByZWxvYWRNb2R1bGUiLCJyZXF1ZXN0Rm9ybVJlc2V0IiwiZm9ybSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidXNlRm9ybVN0YXRlIiwidXNlRm9ybVN0YXR1cyIsInVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJyZWFjdERvbU1vZHVsZSIsIlNjaGVkdWxlciIsInJlcXVpcmUkJDEiLCJSZWFjdERPTSIsInJlcXVpcmUkJDIiLCJpc1ZhbGlkQ29udGFpbmVyIiwiUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSIsIlJFQUNUX1BST1ZJREVSX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCJSRUFDVF9PRkZTQ1JFRU5fVFlQRSIsIlJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUwiLCJnZXRJdGVyYXRvckZuIiwiUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSIsImdldENvbXBvbmVudE5hbWVGcm9tVHlwZSIsImRpc3BsYXlOYW1lIiwibmFtZSIsImlubmVyVHlwZSIsIngiLCJwcmVmaXgiLCJzdWZmaXgiLCJkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSIsInN0YWNrIiwidHJpbSIsImluZGV4T2YiLCJyZWVudHJ5IiwiZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSIsImNvbnN0cnVjdCIsInByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJ1bkluUm9vdEZyYW1lIiwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290IiwiRmFrZSIsImRlZmluZVByb3BlcnR5Iiwic2V0IiwiUmVmbGVjdCIsImNvbnRyb2wiLCJ4JDAiLCJ4JDEiLCJjYXRjaCIsInNhbXBsZSIsIm5hbWVQcm9wRGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIl9SdW5JblJvb3RGcmFtZSREZXRlciIsInNhbXBsZVN0YWNrIiwiY29udHJvbFN0YWNrIiwic2FtcGxlTGluZXMiLCJzcGxpdCIsImNvbnRyb2xMaW5lcyIsImluY2x1ZGVzIiwiZnJhbWUiLCJkZXNjcmliZUZpYmVyIiwiZmliZXIiLCJ0YWciLCJnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2QiLCJ3b3JrSW5Qcm9ncmVzcyIsImluZm8iLCJyZXR1cm4iLCJnZXROZWFyZXN0TW91bnRlZEZpYmVyIiwibmVhcmVzdE1vdW50ZWQiLCJhbHRlcm5hdGUiLCJmbGFncyIsImdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIiLCJzdXNwZW5zZVN0YXRlIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhc3NlcnRJc01vdW50ZWQiLCJmaW5kQ3VycmVudEhvc3RGaWJlckltcGwiLCJzaWJsaW5nIiwiUmVhY3RET01TaGFyZWRJbnRlcm5hbHMiLCJzaGFyZWROb3RQZW5kaW5nT2JqZWN0IiwicGVuZGluZyIsImRhdGEiLCJtZXRob2QiLCJ2YWx1ZVN0YWNrIiwiY3JlYXRlQ3Vyc29yIiwiY3Vyc29yIiwiY29udGV4dFN0YWNrQ3Vyc29yIiwiY29udGV4dEZpYmVyU3RhY2tDdXJzb3IiLCJyb290SW5zdGFuY2VTdGFja0N1cnNvciIsImhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IiLCJwdXNoSG9zdENvbnRhaW5lciIsIm5leHRSb290SW5zdGFuY2UiLCJkb2N1bWVudEVsZW1lbnQiLCJuYW1lc3BhY2VVUkkiLCJnZXRPd25Ib3N0Q29udGV4dCIsInBhcmVudE5vZGUiLCJ0YWdOYW1lIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QiLCJwb3BIb3N0Q29udGFpbmVyIiwicHVzaEhvc3RDb250ZXh0IiwiSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IiwicG9wSG9zdENvbnRleHQiLCJIb3N0VHJhbnNpdGlvbkNvbnRleHQiLCJzY2hlZHVsZUNhbGxiYWNrJDMiLCJjYW5jZWxDYWxsYmFjayQxIiwic2hvdWxkWWllbGQiLCJyZXF1ZXN0UGFpbnQiLCJnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIkltbWVkaWF0ZVByaW9yaXR5IiwiVXNlckJsb2NraW5nUHJpb3JpdHkiLCJOb3JtYWxQcmlvcml0eSQxIiwiTG93UHJpb3JpdHkiLCJJZGxlUHJpb3JpdHkiLCJsb2ckMSIsImxvZyIsInVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlIiwicmVuZGVyZXJJRCIsImluamVjdGVkSG9vayIsInNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzIiwibmV3SXNTdHJpY3RNb2RlIiwic2V0U3RyaWN0TW9kZSIsImNsejMyIiwiTE4yIiwibmV4dFRyYW5zaXRpb25MYW5lIiwibmV4dFJldHJ5TGFuZSIsImdldEhpZ2hlc3RQcmlvcml0eUxhbmVzIiwibGFuZXMiLCJwZW5kaW5nU3luY0xhbmVzIiwiZ2V0TmV4dExhbmVzIiwicm9vdCIsIndpcExhbmVzIiwicGVuZGluZ0xhbmVzIiwibmV4dExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIndhcm1MYW5lcyIsImZpbmlzaGVkTGFuZXMiLCJub25JZGxlUGVuZGluZ0xhbmVzIiwiY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyIsInJlbmRlckxhbmVzIiwiY29tcHV0ZUV4cGlyYXRpb25UaW1lIiwibGFuZSIsImNsYWltTmV4dFRyYW5zaXRpb25MYW5lIiwiY2xhaW1OZXh0UmV0cnlMYW5lIiwiY3JlYXRlTGFuZU1hcCIsImluaXRpYWwiLCJsYW5lTWFwIiwibWFya1Jvb3RVcGRhdGVkJDEiLCJ1cGRhdGVMYW5lIiwibWFya1NwYXduZWREZWZlcnJlZExhbmUiLCJzcGF3bmVkTGFuZSIsImVudGFuZ2xlZExhbmVzIiwic3Bhd25lZExhbmVJbmRleCIsImVudGFuZ2xlbWVudHMiLCJtYXJrUm9vdEVudGFuZ2xlZCIsInJvb3RFbnRhbmdsZWRMYW5lcyIsImluZGV4JDgiLCJsYW5lc1RvRXZlbnRQcmlvcml0eSIsInJlc29sdmVVcGRhdGVQcmlvcml0eSIsInVwZGF0ZVByaW9yaXR5IiwiZ2V0RXZlbnRQcmlvcml0eSIsInJhbmRvbUtleSIsInJhbmRvbSIsInNsaWNlIiwiaW50ZXJuYWxJbnN0YW5jZUtleSIsImludGVybmFsUHJvcHNLZXkiLCJpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXJMaXN0ZW5lcnNLZXkiLCJpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleSIsImludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXkiLCJpbnRlcm5hbEhvaXN0YWJsZU1hcmtlciIsImRldGFjaERlbGV0ZWRJbnN0YW5jZSIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwidGFyZ2V0Tm9kZSIsInRhcmdldEluc3QiLCJnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJpbnN0Iiwic3RhdGVOb2RlIiwiZ2V0UmVzb3VyY2VzRnJvbVJvb3QiLCJyZXNvdXJjZXMiLCJob2lzdGFibGVTdHlsZXMiLCJNYXAiLCJob2lzdGFibGVTY3JpcHRzIiwibWFya05vZGVBc0hvaXN0YWJsZSIsImFsbE5hdGl2ZUV2ZW50cyIsIlNldCIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJyZWdpc3RlclR3b1BoYXNlRXZlbnQiLCJyZWdpc3RyYXRpb25OYW1lIiwiZGVwZW5kZW5jaWVzIiwicmVnaXN0ZXJEaXJlY3RFdmVudCIsImFkZCIsImNhblVzZURPTSIsImRvY3VtZW50IiwiVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgiLCJSZWdFeHAiLCJpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlIiwidmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlIiwic2V0VmFsdWVGb3JBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwidGVzdCIsInJlbW92ZUF0dHJpYnV0ZSIsInByZWZpeCQxMCIsInRvTG93ZXJDYXNlIiwic2V0QXR0cmlidXRlIiwic2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZSIsInNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZSIsIm5hbWVzcGFjZSIsInNldEF0dHJpYnV0ZU5TIiwiZ2V0VG9TdHJpbmdWYWx1ZSIsImlzQ2hlY2thYmxlIiwiZWxlbSIsIm5vZGVOYW1lIiwidHJhY2siLCJfdmFsdWVUcmFja2VyIiwidmFsdWVGaWVsZCIsImRlc2NyaXB0b3IiLCJjdXJyZW50VmFsdWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRyYWNrVmFsdWVPbk5vZGUiLCJ1cGRhdGVWYWx1ZUlmQ2hhbmdlZCIsInRyYWNrZXIiLCJsYXN0VmFsdWUiLCJjaGVja2VkIiwiZ2V0QWN0aXZlRWxlbWVudCIsImRvYyIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiZSIsImVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXNSZWdleCIsImVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMiLCJjaCIsImNoYXJDb2RlQXQiLCJ1cGRhdGVJbnB1dCIsImxhc3REZWZhdWx0VmFsdWUiLCJkZWZhdWx0Q2hlY2tlZCIsInNldERlZmF1bHRWYWx1ZSIsImluaXRJbnB1dCIsImlzSHlkcmF0aW5nIiwib3duZXJEb2N1bWVudCIsInVwZGF0ZU9wdGlvbnMiLCJtdWx0aXBsZSIsInByb3BWYWx1ZSIsInNldERlZmF1bHRTZWxlY3RlZCIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJ1cGRhdGVUZXh0YXJlYSIsImluaXRUZXh0YXJlYSIsInRleHRDb250ZW50Iiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0IiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInVuaXRsZXNzTnVtYmVycyIsInNldFZhbHVlRm9yU3R5bGUiLCJzdHlsZSIsInN0eWxlTmFtZSIsImlzQ3VzdG9tUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImNzc0Zsb2F0IiwiaGFzIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJzdHlsZXMiLCJwcmV2U3R5bGVzIiwic3R5bGVOYW1lJDE2Iiwic3R5bGVOYW1lJDE3IiwiaXNDdXN0b21FbGVtZW50IiwiYWxpYXNlcyIsImlzSmF2YVNjcmlwdFByb3RvY29sIiwic2FuaXRpemVVUkwiLCJjdXJyZW50UmVwbGF5aW5nRXZlbnQiLCJnZXRFdmVudFRhcmdldCIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicmVzdG9yZVRhcmdldCIsInJlc3RvcmVRdWV1ZSIsInJlc3RvcmVTdGF0ZU9mVGFyZ2V0IiwiaW50ZXJuYWxJbnN0YW5jZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvdGhlck5vZGUiLCJvdGhlclByb3BzIiwiaXNJbnNpZGVFdmVudEhhbmRsZXIiLCJiYXRjaGVkVXBkYXRlcyQxIiwiZmx1c2hTeW5jV29yayQxIiwiZ2V0TGlzdGVuZXIiLCJwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3RhcnRUZXh0IiwiZmFsbGJhY2tUZXh0IiwiZ2V0RGF0YSIsInN0YXJ0IiwiZW5kIiwic3RhcnRWYWx1ZSIsInN0YXJ0TGVuZ3RoIiwiZW5kVmFsdWUiLCJlbmRMZW5ndGgiLCJtaW5FbmQiLCJnZXRFdmVudENoYXJDb2RlIiwia2V5Q29kZSIsImNoYXJDb2RlIiwiZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUiLCJmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UiLCJjcmVhdGVTeW50aGV0aWNFdmVudCIsIkludGVyZmFjZSIsIlN5bnRoZXRpY0Jhc2VFdmVudCIsInJlYWN0TmFtZSIsInJlYWN0RXZlbnRUeXBlIiwibmF0aXZlRXZlbnRUYXJnZXQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50IiwibGFzdE1vdmVtZW50WCIsImxhc3RNb3ZlbWVudFkiLCJsYXN0TW91c2VFdmVudCIsIkV2ZW50SW50ZXJmYWNlIiwiZXZlbnRQaGFzZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsIlN5bnRoZXRpY0V2ZW50IiwiVUlFdmVudEludGVyZmFjZSIsInZpZXciLCJkZXRhaWwiLCJTeW50aGV0aWNVSUV2ZW50IiwiTW91c2VFdmVudEludGVyZmFjZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJnZXRFdmVudE1vZGlmaWVyU3RhdGUiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiU3ludGhldGljTW91c2VFdmVudCIsIlN5bnRoZXRpY0RyYWdFdmVudCIsImRhdGFUcmFuc2ZlciIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJTeW50aGV0aWNBbmltYXRpb25FdmVudCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsImNsaXBib2FyZERhdGEiLCJTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50Iiwibm9ybWFsaXplS2V5IiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInRyYW5zbGF0ZVRvS2V5IiwibW9kaWZpZXJLZXlUb1Byb3AiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwibW9kaWZpZXJTdGF0ZUdldHRlciIsImtleUFyZyIsIlN5bnRoZXRpY0tleWJvYXJkRXZlbnQiLCJmcm9tQ2hhckNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiU3ludGhldGljUG9pbnRlckV2ZW50IiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiU3ludGhldGljVG91Y2hFdmVudCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCJwcm9wZXJ0eU5hbWUiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJTeW50aGV0aWNUb2dnbGVFdmVudCIsIm5ld1N0YXRlIiwib2xkU3RhdGUiLCJFTkRfS0VZQ09ERVMiLCJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwiZG9jdW1lbnRNb2RlIiwiY2FuVXNlVGV4dElucHV0RXZlbnQiLCJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsIlNQQUNFQkFSX0NIQVIiLCJoYXNTcGFjZUtleXByZXNzIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kIiwiZG9tRXZlbnROYW1lIiwiZ2V0RGF0YUZyb21DdXN0b21FdmVudCIsImlzQ29tcG9zaW5nIiwic3VwcG9ydGVkSW5wdXRUeXBlcyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0aW1lIiwid2VlayIsImlzVGV4dElucHV0RWxlbWVudCIsImNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudCIsImRpc3BhdGNoUXVldWUiLCJhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJhY3RpdmVFbGVtZW50JDEiLCJhY3RpdmVFbGVtZW50SW5zdCQxIiwicnVuRXZlbnRJbkJhdGNoIiwicHJvY2Vzc0Rpc3BhdGNoUXVldWUiLCJnZXRJbnN0SWZWYWx1ZUNoYW5nZWQiLCJnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MyIsImlzU3VwcG9ydGVkJGpzY29tcCRpbmxpbmVfNDE4IiwiZWxlbWVudCRqc2NvbXAkaW5saW5lXzQxOSIsIm9uaW5wdXQiLCJzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsImRldGFjaEV2ZW50IiwiaGFuZGxlUHJvcGVydHlDaGFuZ2UiLCJoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCJhdHRhY2hFdmVudCIsImdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCJnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCIsImdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQiLCJvYmplY3RJcyIsImlzIiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImN1cnJlbnRLZXkiLCJnZXRMZWFmTm9kZSIsImdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLCJvZmZzZXQiLCJub2RlRW5kIiwibmV4dFNpYmxpbmciLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZ2V0QWN0aXZlRWxlbWVudERlZXAiLCJkZWZhdWx0VmlldyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImNvbnRlbnRFZGl0YWJsZSIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJmb2N1c2VkRWxlbSIsInByaW9yU2VsZWN0aW9uUmFuZ2UiLCJzZWxlY3Rpb25SYW5nZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZ2V0U2VsZWN0aW9uIiwiZXh0ZW5kIiwiZW5kTWFya2VyIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsInNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCIsImFjdGl2ZUVsZW1lbnRJbnN0IiwibGFzdFNlbGVjdGlvbiIsIm1vdXNlRG93biIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwibWFrZVByZWZpeE1hcCIsInN0eWxlUHJvcCIsImV2ZW50TmFtZSIsInByZWZpeGVzIiwidmVuZG9yUHJlZml4ZXMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25ydW4iLCJ0cmFuc2l0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uY2FuY2VsIiwidHJhbnNpdGlvbmVuZCIsInByZWZpeGVkRXZlbnROYW1lcyIsImdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lIiwicHJlZml4TWFwIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIkFOSU1BVElPTl9FTkQiLCJBTklNQVRJT05fSVRFUkFUSU9OIiwiQU5JTUFUSU9OX1NUQVJUIiwiVFJBTlNJVElPTl9SVU4iLCJUUkFOU0lUSU9OX1NUQVJUIiwiVFJBTlNJVElPTl9DQU5DRUwiLCJUUkFOU0lUSU9OX0VORCIsInRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzIiwic2ltcGxlRXZlbnRQbHVnaW5FdmVudHMiLCJyZWdpc3RlclNpbXBsZUV2ZW50IiwiY29uY3VycmVudFF1ZXVlcyIsImNvbmN1cnJlbnRRdWV1ZXNJbmRleCIsImNvbmN1cnJlbnRseVVwZGF0ZWRMYW5lcyIsImZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMiLCJlbmRJbmRleCIsInF1ZXVlIiwidXBkYXRlIiwibWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QiLCJlbnF1ZXVlVXBkYXRlJDEiLCJlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUiLCJnZXRSb290Rm9yVXBkYXRlZEZpYmVyIiwiZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lIiwic291cmNlRmliZXIiLCJpc0hpZGRlbiIsImNoaWxkTGFuZXMiLCJfdmlzaWJpbGl0eSIsImhpZGRlblVwZGF0ZXMiLCJuZXN0ZWRVcGRhdGVDb3VudCIsInJvb3RXaXRoTmVzdGVkVXBkYXRlcyIsImVtcHR5Q29udGV4dE9iamVjdCIsIkNhcHR1cmVkU3RhY2tzIiwiV2Vha01hcCIsImNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyIiwiZXhpc3RpbmciLCJmb3JrU3RhY2siLCJmb3JrU3RhY2tJbmRleCIsInRyZWVGb3JrUHJvdmlkZXIiLCJ0cmVlRm9ya0NvdW50IiwiaWRTdGFjayIsImlkU3RhY2tJbmRleCIsInRyZWVDb250ZXh0UHJvdmlkZXIiLCJ0cmVlQ29udGV4dElkIiwidHJlZUNvbnRleHRPdmVyZmxvdyIsInB1c2hUcmVlRm9yayIsInRvdGFsQ2hpbGRyZW4iLCJwdXNoVHJlZUlkIiwiYmFzZUlkV2l0aExlYWRpbmdCaXQiLCJiYXNlTGVuZ3RoIiwibnVtYmVyT2ZPdmVyZmxvd0JpdHMiLCJwdXNoTWF0ZXJpYWxpemVkVHJlZUlkIiwicG9wVHJlZUNvbnRleHQiLCJoeWRyYXRpb25QYXJlbnRGaWJlciIsIm5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJoeWRyYXRpb25FcnJvcnMiLCJyb290T3JTaW5nbGV0b25Db250ZXh0IiwiSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24iLCJ0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2giLCJxdWV1ZUh5ZHJhdGlvbkVycm9yIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsImluc3RhbmNlIiwibWVtb2l6ZWRQcm9wcyIsImxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQiLCJtZWRpYUV2ZW50VHlwZXMiLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJjaGVja0ZvclVubWF0Y2hlZFRleHQiLCJwb3BvdmVyIiwib25TY3JvbGwiLCJvblNjcm9sbEVuZCIsIm9uQ2xpY2siLCJvbmNsaWNrIiwicG9wVG9OZXh0SG9zdFBhcmVudCIsInBvcEh5ZHJhdGlvblN0YXRlIiwiSlNDb21waWxlcl90ZW1wIiwic2hvdWxkQ2xlYXIiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsImdldE5leHRIeWRyYXRhYmxlIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsIlN1c3BlbnNlRXhjZXB0aW9uIiwiU3VzcGVuc2V5Q29tbWl0RXhjZXB0aW9uIiwibm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlIiwiaXNUaGVuYWJsZVJlc29sdmVkIiwibm9vcCQzIiwidHJhY2tVc2VkVGhlbmFibGUiLCJ0aGVuYWJsZVN0YXRlIiwid29ya0luUHJvZ3Jlc3NSb290Iiwic2hlbGxTdXNwZW5kQ291bnRlciIsImZ1bGZpbGxlZFRoZW5hYmxlIiwicmVqZWN0ZWRUaGVuYWJsZSIsInN1c3BlbmRlZFRoZW5hYmxlIiwiZ2V0U3VzcGVuZGVkVGhlbmFibGUiLCJ0aGVuYWJsZVN0YXRlJDEiLCJ0aGVuYWJsZUluZGV4Q291bnRlciQxIiwidW53cmFwVGhlbmFibGUiLCJjb2VyY2VSZWYiLCJ0aHJvd09uSW52YWxpZE9iamVjdFR5cGUiLCJyZXR1cm5GaWJlciIsIm5ld0NoaWxkIiwicmVzb2x2ZUxhenkiLCJsYXp5VHlwZSIsImNyZWF0ZUNoaWxkUmVjb25jaWxlciIsInNob3VsZFRyYWNrU2lkZUVmZmVjdHMiLCJkZWxldGVDaGlsZCIsImNoaWxkVG9EZWxldGUiLCJkZWxldGlvbnMiLCJkZWxldGVSZW1haW5pbmdDaGlsZHJlbiIsImN1cnJlbnRGaXJzdENoaWxkIiwibWFwUmVtYWluaW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkcmVuIiwidXNlRmliZXIiLCJwZW5kaW5nUHJvcHMiLCJjcmVhdGVXb3JrSW5Qcm9ncmVzcyIsInBsYWNlQ2hpbGQiLCJuZXdGaWJlciIsImxhc3RQbGFjZWRJbmRleCIsIm5ld0luZGV4IiwicGxhY2VTaW5nbGVDaGlsZCIsInVwZGF0ZVRleHROb2RlIiwiY3JlYXRlRmliZXJGcm9tVGV4dCIsIm1vZGUiLCJ1cGRhdGVFbGVtZW50IiwiZWxlbWVudFR5cGUiLCJ1cGRhdGVGcmFnbWVudCIsImNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyIsInVwZGF0ZVBvcnRhbCIsInBvcnRhbCIsImNyZWF0ZUZpYmVyRnJvbVBvcnRhbCIsImZyYWdtZW50IiwiY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQiLCJjcmVhdGVDaGlsZCIsInJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24iLCJ1cGRhdGVTbG90Iiwib2xkRmliZXIiLCJ1cGRhdGVGcm9tTWFwIiwibmV3SWR4IiwicmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsIiwibmV3Q2hpbGRyZW4iLCJyZXN1bHRpbmdGaXJzdENoaWxkIiwicHJldmlvdXNOZXdGaWJlciIsIm5leHRPbGRGaWJlciIsImRlbGV0ZSIsInJlY29uY2lsZUNoaWxkcmVuQXJyYXkiLCJzdGVwIiwicmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvciIsImZpcnN0Q2hpbGRGaWJlciIsImNyZWF0ZUZpYmVySW1wbENsYXNzIiwicmVjb25jaWxlQ2hpbGRGaWJlcnMiLCJtb3VudENoaWxkRmliZXJzIiwiY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciIsInByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciIsInB1c2hIaWRkZW5Db250ZXh0IiwiZW50YW5nbGVkUmVuZGVyTGFuZXMiLCJiYXNlTGFuZXMiLCJyZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrIiwicG9wSGlkZGVuQ29udGV4dCIsInN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yIiwic2hlbGxCb3VuZGFyeSIsInB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlciIsImhhbmRsZXIiLCJzdXNwZW5zZVN0YWNrQ3Vyc29yIiwicHVzaE9mZnNjcmVlblN1c3BlbnNlSGFuZGxlciIsInJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayIsInBvcFN1c3BlbnNlSGFuZGxlciIsImZpbmRGaXJzdFN1c3BlbmRlZCIsInJvdyIsInN0YXRlIiwicmV2ZWFsT3JkZXIiLCJBYm9ydENvbnRyb2xsZXJMb2NhbCIsIkFib3J0Q29udHJvbGxlciIsInNpZ25hbCIsImFib3J0ZWQiLCJsaXN0ZW5lciIsImFib3J0Iiwic2NoZWR1bGVDYWxsYmFjayQyIiwiTm9ybWFsUHJpb3JpdHkiLCJDYWNoZUNvbnRleHQiLCJjcmVhdGVDYWNoZSIsImNvbnRyb2xsZXIiLCJyZWZDb3VudCIsInJlbGVhc2VDYWNoZSIsImN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMiLCJjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50IiwiY3VycmVudEVudGFuZ2xlZExhbmUiLCJjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUiLCJwaW5nRW5ndGFuZ2xlZEFjdGlvblNjb3BlIiwicHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoIiwiZW50YW5nbGVkTGlzdGVuZXJzIiwicmVxdWVzdFRyYW5zaXRpb25MYW5lIiwicmVzb2x2ZSIsImVudGFuZ2xlQXN5bmNBY3Rpb24iLCJyZXN1bWVkQ2FjaGUiLCJwZWVrQ2FjaGVGcm9tUG9vbCIsImNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlciIsInBvb2xlZENhY2hlIiwicHVzaFRyYW5zaXRpb24iLCJvZmZzY3JlZW5Xb3JrSW5Qcm9ncmVzcyIsInByZXZDYWNoZVBvb2wiLCJwb29sIiwiZ2V0U3VzcGVuZGVkQ2FjaGUiLCJjYWNoZUZyb21Qb29sIiwiY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSIsImN1cnJlbnRIb29rIiwid29ya0luUHJvZ3Jlc3NIb29rIiwiZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSIsImRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyIsInNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWIiwibG9jYWxJZENvdW50ZXIiLCJ0aGVuYWJsZUluZGV4Q291bnRlciIsImdsb2JhbENsaWVudElkQ291bnRlciIsInRocm93SW52YWxpZEhvb2tFcnJvciIsImFyZUhvb2tJbnB1dHNFcXVhbCIsIm5leHREZXBzIiwicHJldkRlcHMiLCJyZW5kZXJXaXRoSG9va3MiLCJzZWNvbmRBcmciLCJuZXh0UmVuZGVyTGFuZXMiLCJ1cGRhdGVRdWV1ZSIsIkhvb2tzRGlzcGF0Y2hlck9uTW91bnQiLCJIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZSIsInJlbmRlcldpdGhIb29rc0FnYWluIiwiZmluaXNoUmVuZGVyaW5nSG9va3MiLCJDb250ZXh0T25seURpc3BhdGNoZXIiLCJkaWRSZW5kZXJUb29GZXdIb29rcyIsImRpZFJlY2VpdmVVcGRhdGUiLCJjaGVja0lmQ29udGV4dENoYW5nZWQiLCJudW1iZXJPZlJlUmVuZGVycyIsImxhc3RFZmZlY3QiLCJldmVudHMiLCJzdG9yZXMiLCJtZW1vQ2FjaGUiLCJIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyIiwiVHJhbnNpdGlvbkF3YXJlSG9zdENvbXBvbmVudCIsImRpc3BhdGNoZXIiLCJtYXliZVRoZW5hYmxlIiwidXNlVGhlbmFibGUiLCJjaGVja0RpZFJlbmRlcklkSG9vayIsImRpZFJlbmRlcklkSG9vayIsImJhaWxvdXRIb29rcyIsInJlc2V0SG9va3NPblVud2luZCIsIm1vdW50V29ya0luUHJvZ3Jlc3NIb29rIiwiaG9vayIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInVwZGF0ZVdvcmtJblByb2dyZXNzSG9vayIsIm5leHRDdXJyZW50SG9vayIsIm5leHRXb3JrSW5Qcm9ncmVzc0hvb2siLCJyZWFkQ29udGV4dCIsInVzZU1lbW9DYWNoZSIsInNpemUiLCJiYXNpY1N0YXRlUmVkdWNlciIsInVwZGF0ZVJlZHVjZXIiLCJ1cGRhdGVSZWR1Y2VySW1wbCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJwZW5kaW5nUXVldWUiLCJiYXNlRmlyc3QiLCJuZXdCYXNlUXVldWVGaXJzdCIsIm5ld0Jhc2VRdWV1ZUxhc3QiLCJkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0Iiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMiLCJyZXZlcnRMYW5lIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwicmVyZW5kZXJSZWR1Y2VyIiwibGFzdFJlbmRlclBoYXNlVXBkYXRlIiwidXBkYXRlU3luY0V4dGVybmFsU3RvcmUiLCJpc0h5ZHJhdGluZyRqc2NvbXAkMCIsInNuYXBzaG90Q2hhbmdlZCIsInVwZGF0ZUVmZmVjdCIsInN1YnNjcmliZVRvU3RvcmUiLCJiaW5kIiwicHVzaEVmZmVjdCIsInVwZGF0ZVN0b3JlSW5zdGFuY2UiLCJkZXN0cm95IiwicHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayIsInJlbmRlcmVkU25hcHNob3QiLCJuZXh0U25hcHNob3QiLCJjaGVja0lmU25hcHNob3RDaGFuZ2VkIiwiZm9yY2VTdG9yZVJlcmVuZGVyIiwibGF0ZXN0R2V0U25hcHNob3QiLCJuZXh0VmFsdWUiLCJzY2hlZHVsZVVwZGF0ZU9uRmliZXIiLCJtb3VudFN0YXRlSW1wbCIsImluaXRpYWxTdGF0ZUluaXRpYWxpemVyIiwidXBkYXRlT3B0aW1pc3RpY0ltcGwiLCJkaXNwYXRjaEFjdGlvblN0YXRlIiwiYWN0aW9uUXVldWUiLCJzZXRQZW5kaW5nU3RhdGUiLCJpc1JlbmRlclBoYXNlVXBkYXRlIiwiYWN0aW9uTm9kZSIsImlzVHJhbnNpdGlvbiIsInJ1bkFjdGlvblN0YXRlQWN0aW9uIiwicHJldlN0YXRlIiwiaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUiLCJvbkFjdGlvbkVycm9yIiwiZXJyb3IkNjAiLCJuZXh0U3RhdGUiLCJvbkFjdGlvblN1Y2Nlc3MiLCJub3RpZnlBY3Rpb25MaXN0ZW5lcnMiLCJhY3Rpb25TdGF0ZVJlZHVjZXIiLCJtb3VudEFjdGlvblN0YXRlIiwiaW5pdGlhbFN0YXRlUHJvcCIsInNzckZvcm1TdGF0ZSIsImZvcm1TdGF0ZSIsIkpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCIsImluUm9vdE9yU2luZ2xldG9uIiwiZGlzcGF0Y2hTZXRTdGF0ZSIsImRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlIiwidXBkYXRlQWN0aW9uU3RhdGUiLCJ1cGRhdGVBY3Rpb25TdGF0ZUltcGwiLCJzdGF0ZUhvb2siLCJjdXJyZW50U3RhdGVIb29rIiwiYWN0aW9uUXVldWVIb29rIiwiYWN0aW9uU3RhdGVBY3Rpb25FZmZlY3QiLCJyZXJlbmRlckFjdGlvblN0YXRlIiwidXBkYXRlUmVmIiwibW91bnRFZmZlY3RJbXBsIiwiZmliZXJGbGFncyIsImhvb2tGbGFncyIsInVwZGF0ZUVmZmVjdEltcGwiLCJtb3VudEVmZmVjdCIsInVwZGF0ZUluc2VydGlvbkVmZmVjdCIsInVwZGF0ZUxheW91dEVmZmVjdCIsImltcGVyYXRpdmVIYW5kbGVFZmZlY3QiLCJyZWZDbGVhbnVwIiwidXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSIsImNvbmNhdCIsIm1vdW50RGVidWdWYWx1ZSIsInVwZGF0ZUNhbGxiYWNrIiwidXBkYXRlTWVtbyIsIm5leHRDcmVhdGUiLCJtb3VudERlZmVycmVkVmFsdWVJbXBsIiwicmVxdWVzdERlZmVycmVkTGFuZSIsInVwZGF0ZURlZmVycmVkVmFsdWVJbXBsIiwicHJldlZhbHVlIiwicGVuZGluZ1N0YXRlIiwiZmluaXNoZWRTdGF0ZSIsInByZXZpb3VzUHJpb3JpdHkiLCJ0aGVuYWJsZVdpdGhPdmVycmlkZSIsImRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbCIsInJlcXVlc3RVcGRhdGVMYW5lIiwibm9vcCQyIiwic3RhcnRIb3N0VHJhbnNpdGlvbiIsImZvcm1GaWJlciIsImZvcm1EYXRhIiwiZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwiLCJyZXF1ZXN0Rm9ybVJlc2V0JDEiLCJleGlzdGluZ1N0YXRlSG9vayIsImluaXRpYWxSZXNldFN0YXRlIiwidXBkYXRlSWQiLCJ1cGRhdGVSZWZyZXNoIiwicmVmcmVzaENhY2hlIiwicHJvdmlkZXIiLCJyb290JDYzIiwiZW5xdWV1ZVVwZGF0ZSIsImNyZWF0ZVVwZGF0ZSIsImVudGFuZ2xlVHJhbnNpdGlvbnMiLCJkaXNwYXRjaFJlZHVjZXJBY3Rpb24iLCJlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUiLCJlbnRhbmdsZVRyYW5zaXRpb25VcGRhdGUiLCJjdXJyZW50U3RhdGUiLCJ0aHJvd0lmRHVyaW5nUmVuZGVyIiwicXVldWVMYW5lcyIsImlkZW50aWZpZXJQcmVmaXgiLCJib29sZWFuT3JUaGVuYWJsZSIsImFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibmV4dFByb3BzIiwiY2xhc3NDb21wb25lbnRVcGRhdGVyIiwiY29tcG9uZW50IiwiX3JlYWN0SW50ZXJuYWxzIiwiY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwibmV4dENvbnRleHQiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzIiwiYmFzZVByb3BzIiwicHJvcE5hbWUkNjciLCJkZWZhdWx0T25VbmNhdWdodEVycm9yIiwiZGVmYXVsdE9uQ2F1Z2h0RXJyb3IiLCJkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yIiwibG9nVW5jYXVnaHRFcnJvciIsImVycm9ySW5mbyIsIm9uVW5jYXVnaHRFcnJvciIsImNvbXBvbmVudFN0YWNrIiwiZSQ2OCIsImxvZ0NhdWdodEVycm9yIiwiYm91bmRhcnkiLCJvbkNhdWdodEVycm9yIiwiZXJyb3JCb3VuZGFyeSIsImUkNjkiLCJjcmVhdGVSb290RXJyb3JVcGRhdGUiLCJjcmVhdGVDbGFzc0Vycm9yVXBkYXRlIiwiaW5pdGlhbGl6ZUNsYXNzRXJyb3JVcGRhdGUiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsImxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIiwiU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uIiwicmVjb25jaWxlQ2hpbGRyZW4iLCJuZXh0Q2hpbGRyZW4iLCJ1cGRhdGVGb3J3YXJkUmVmIiwicHJvcHNXaXRob3V0UmVmIiwicHJlcGFyZVRvUmVhZENvbnRleHQiLCJiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrIiwidXBkYXRlTWVtb0NvbXBvbmVudCIsInNob3VsZENvbnN0cnVjdCIsInVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQiLCJjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dCIsInByZXZQcm9wcyIsInVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50IiwidXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50IiwibmV4dElzRGV0YWNoZWQiLCJfcGVuZGluZ1Zpc2liaWxpdHkiLCJtYXJrUmVmIiwiZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQiLCJjYWNoZVBvb2wiLCJuZXh0QmFzZUxhbmVzIiwicHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMiLCJyZXBsYXlGdW5jdGlvbkNvbXBvbmVudCIsInVwZGF0ZUNsYXNzQ29tcG9uZW50IiwiY29udGV4dFR5cGUiLCJpbml0aWFsaXplVXBkYXRlUXVldWUiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJwcm9jZXNzVXBkYXRlUXVldWUiLCJzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uIiwiY29tcG9uZW50RGlkTW91bnQiLCJ1bnJlc29sdmVkT2xkUHJvcHMiLCJvbGRDb250ZXh0IiwiY29udGV4dFR5cGUkanNjb21wJDAiLCJoYXNGb3JjZVVwZGF0ZSIsImNsb25lVXBkYXRlUXVldWUiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyIsIlNVU1BFTkRFRF9NQVJLRVIiLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIm1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZSIsImdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlIiwicHJpbWFyeVRyZWVEaWREZWZlciIsIndvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lIiwidXBkYXRlU3VzcGVuc2VDb21wb25lbnQiLCJzaG93RmFsbGJhY2siLCJkaWRTdXNwZW5kIiwiSlNDb21waWxlcl90ZW1wJGpzY29tcCQwIiwibmV4dEluc3RhbmNlIiwib3ZlcmZsb3ciLCJmYWxsYmFjayIsIm1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlciIsIm1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4iLCJyZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyIsImRhdGFzZXQiLCJkaWdlc3QiLCJkZ3N0IiwicmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSIsInJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkiLCJfcmVhY3RSZXRyeSIsInN1YnRyZWVGbGFncyIsInByaW1hcnlDaGlsZHJlbiIsIm9mZnNjcmVlblByb3BzIiwiY3JlYXRlRmliZXJGcm9tT2Zmc2NyZWVuIiwic2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyIiwicHJvcGFnYXRpb25Sb290Iiwic2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aCIsImluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSIsImlzQmFja3dhcmRzIiwidGFpbCIsImxhc3RDb250ZW50Um93IiwidGFpbE1vZGUiLCJyZW5kZXJTdGF0ZSIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudCIsImJlZ2luV29yayIsInB1c2hQcm92aWRlciIsImRpZFN1c3BlbmRCZWZvcmUiLCJhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZSIsImxhenlDb21wb25lbnQiLCJwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyIsImlzRGVoeWRyYXRlZCIsImdldFJlc291cmNlIiwiZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJyZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UiLCJhbnlQcm9wcyIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInJlbCIsInRpdGxlIiwic3JjIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsInBvb2xlZENhY2hlTGFuZXMiLCJ2YWx1ZUN1cnNvciIsImN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyIiwibGFzdENvbnRleHREZXBlbmRlbmN5IiwicHJvdmlkZXJGaWJlciIsInBvcFByb3ZpZGVyIiwiY29udGV4dHMiLCJmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUiLCJsaXN0IiwibmV4dEZpYmVyIiwiZmlyc3RDb250ZXh0IiwiZGVwZW5kZW5jeSIsImlzSW5zaWRlUHJvcGFnYXRpb25CYWlsb3V0IiwiY3VycmVudFBhcmVudCIsImN1cnJlbnREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFZhbHVlIiwicmVhZENvbnRleHRGb3JDb25zdW1lciIsImNvbnN1bWVyIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJoaWRkZW5DYWxsYmFja3MiLCJjYWxsYmFja3MiLCJleGVjdXRpb25Db250ZXh0IiwiZW5xdWV1ZUNhcHR1cmVkVXBkYXRlIiwiY2FwdHVyZWRVcGRhdGUiLCJuZXdGaXJzdCIsIm5ld0xhc3QiLCJjbG9uZSIsImRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24iLCJ3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCIsImluc3RhbmNlJGpzY29tcCQwIiwibGFzdFBlbmRpbmdVcGRhdGUiLCJmaXJzdFBlbmRpbmdVcGRhdGUiLCJpc0hpZGRlblVwZGF0ZSIsImNhbGxDYWxsYmFjayIsImNvbW1pdENhbGxiYWNrcyIsImNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQiLCJmaW5pc2hlZFdvcmsiLCJmaXJzdEVmZmVjdCIsImNhcHR1cmVDb21taXRQaGFzZUVycm9yIiwiY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50IiwibmVhcmVzdE1vdW50ZWRBbmNlc3RvciRqc2NvbXAkMCIsIm5lYXJlc3RNb3VudGVkQW5jZXN0b3IiLCJjb21taXRDbGFzc0NhbGxiYWNrcyIsInNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic2FmZWx5QXR0YWNoUmVmIiwiaW5zdGFuY2VUb1VzZSIsInNhZmVseURldGFjaFJlZiIsImVycm9yJDExMiIsImNvbW1pdEhvc3RNb3VudCIsImF1dG9Gb2N1cyIsInNyY1NldCIsInNyY3NldCIsImNvbW1pdEhvc3RVcGRhdGUiLCJkb21FbGVtZW50IiwibGFzdFByb3BzIiwicHJvcEtleSIsImxhc3RQcm9wIiwic2V0UHJvcCIsInByb3BLZXkkMjAzIiwicHJvcEtleSQyMTkiLCJwcm9wS2V5JDIyNCIsInByb3BLZXkkMjI5Iiwic2V0UHJvcE9uQ3VzdG9tRWxlbWVudCIsInByb3BLZXkkMjM0IiwidXBkYXRlUHJvcGVydGllcyIsImlzSG9zdFBhcmVudCIsImdldEhvc3RTaWJsaW5nIiwiaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lciIsImJlZm9yZSIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZSIsIm9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiIsIm9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4iLCJuZWVkc0Zvcm1SZXNldCIsIlBvc3NpYmx5V2Vha1NldCIsIldlYWtTZXQiLCJuZXh0RWZmZWN0Iiwic2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyIiwiY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlciIsImZpbmlzaGVkUm9vdCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJlcnJvciQxMTEiLCJjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyIsInByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4iLCJwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMiLCJkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyIsImhvc3RQYXJlbnQiLCJob3N0UGFyZW50SXNDb250YWluZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzIiwiY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlciIsImRlbGV0ZWRGaWJlciIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwicmVtb3ZlQ2hpbGQiLCJwcmV2SG9zdFBhcmVudCIsInByZXZIb3N0UGFyZW50SXNDb250YWluZXIiLCJhdHRyaWJ1dGVzIiwicmVtb3ZlQXR0cmlidXRlTm9kZSIsInByZXZIb3N0UGFyZW50SXNDb250YWluZXIkMTE5IiwiY2xlYXJTdXNwZW5zZUJvdW5kYXJ5IiwicmV0cnlJZkJsb2NrZWRPbiIsImF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMiLCJ3YWtlYWJsZXMiLCJyZXRyeUNhY2hlIiwiX3JldHJ5Q2FjaGUiLCJnZXRSZXRyeUNhY2hlIiwid2FrZWFibGUiLCJyZXRyeSIsInJlc29sdmVSZXRyeVdha2VhYmxlIiwicmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyIsInJvb3QkanNjb21wJDAiLCJwYXJlbnRGaWJlciIsImNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIiLCJjdXJyZW50SG9pc3RhYmxlUm9vdCIsImNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyIsImhvaXN0YWJsZVJvb3QiLCJjdXJyZW50UmVzb3VyY2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhlYWQiLCJxdWVyeVNlbGVjdG9yIiwibWF5YmVOb2RlcyIsImdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZSIsInNwbGljZSIsImNvbnRlbnQiLCJwcm9wZXJ0eSIsImh0dHBFcXVpdiIsImNoYXJTZXQiLCJtb3VudEhvaXN0YWJsZSIsImFjcXVpcmVSZXNvdXJjZSIsIm5leHROb2RlIiwidGFnQ2FjaGVzIiwiZ2V0SG9pc3RhYmxlUm9vdCIsInJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyIsImdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUiLCJfY3VycmVudCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzIiwiZGlzcGxheSIsInJldHJ5UXVldWUiLCJwYXJlbnQkanNjb21wJDAiLCJwYXJlbnQkMTEzIiwicGFyZW50JDExNSIsInJlc2V0IiwiZmluaXNoZWRSb290JGpzY29tcCQwIiwiaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyIsImNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMiLCJwcmV2aW91c0NhY2hlIiwiY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QiLCJyZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyIsImNvbW1pdHRlZExhbmVzIiwiY29tbWl0dGVkVHJhbnNpdGlvbnMiLCJjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyIiwiX2ZpbmlzaGVkV29yayRtZW1vaXplMiIsIm9uUG9zdENvbW1pdCIsInBhc3NpdmVFZmZlY3REdXJhdGlvbiIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyIsImNvbW1pdHRlZExhbmVzJGpzY29tcCQwIiwiY29tbWl0dGVkVHJhbnNpdGlvbnMkanNjb21wJDAiLCJzdXNwZW5zZXlDb21taXRGbGFnIiwicmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0IiwiYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIiLCJyZXNvdXJjZSIsInN1c3BlbmRlZFN0YXRlIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJsb2FkaW5nIiwiZ2V0U3R5bGVLZXkiLCJnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5IiwiX3AiLCJvblVuc3VzcGVuZCIsInN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyIsInByZWxvYWRQcm9wc01hcCIsImFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldCIsImxpbmtJbnN0YW5jZSIsIlByb21pc2UiLCJyZWplY3QiLCJvbmxvYWQiLCJvbmVycm9yIiwic3R5bGVzaGVldHMiLCJzdXNwZW5kUmVzb3VyY2UiLCJwcmV2aW91c0hvaXN0YWJsZVJvb3QiLCJkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyIsInByZXZpb3VzRmliZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzIiwiY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbiIsImNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlciIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMiLCJkZWxldGVkU3VidHJlZVJvb3QiLCJGaWJlck5vZGUiLCJyZXNldFdvcmtJblByb2dyZXNzIiwiZmliZXJUYWciLCJob3N0Q29udGV4dCIsIml0ZW1Qcm9wIiwib25Mb2FkIiwib25FcnJvciIsImFzeW5jIiwiaXNIb3N0SG9pc3RhYmxlVHlwZSIsImVsZW1lbnRzIiwicHJpbWFyeUNoaWxkSW5zdGFuY2UiLCJfcGVuZGluZ01hcmtlcnMiLCJfdHJhbnNpdGlvbnMiLCJkZXRhY2giLCJhdHRhY2giLCJwZW5kaW5nQ2hpbGRyZW4iLCJtYXJrVXBkYXRlIiwicHJlbG9hZFJlc291cmNlQW5kU3VzcGVuZElmTmVlZGVkIiwicHJlbG9hZFJlc291cmNlIiwic2NoZWR1bGVSZXRyeUVmZmVjdCIsIndvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyIsImN1dE9mZlRhaWxJZk5lZWRlZCIsImhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayIsImxhc3RUYWlsTm9kZSIsImxhc3RUYWlsTm9kZSQxMzEiLCJidWJibGVQcm9wZXJ0aWVzIiwiY29tcGxldGVkV29yayIsImRpZEJhaWxvdXQiLCJuZXdDaGlsZExhbmVzIiwiY2hpbGQkMTMyIiwiY29tcGxldGVXb3JrIiwicGVuZGluZ0NvbnRleHQiLCJxdWV1ZVJlY292ZXJhYmxlRXJyb3JzIiwiY3JlYXRlRWxlbWVudE5TIiwiaW5uZXJIVE1MIiwiY3JlYXRlVGV4dE5vZGUiLCJjYWNoZSQxNDQiLCJsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyIsIndvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lIiwidW53aW5kV29yayIsInVud2luZEludGVycnVwdGVkV29yayIsImludGVycnVwdGVkV29yayIsIkRlZmF1bHRBc3luY0Rpc3BhdGNoZXIiLCJnZXRDYWNoZUZvclR5cGUiLCJyZXNvdXJjZVR5cGUiLCJjYWNoZUZvclR5cGUiLCJQb3NzaWJseVdlYWtNYXAiLCJ3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiIsIndvcmtJblByb2dyZXNzVGhyb3duVmFsdWUiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyIsIndvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciIsIndvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIiwid29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzIiwid29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlIiwiSW5maW5pdHkiLCJ3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zIiwicm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMiLCJyb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyIsInBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzIiwicGVuZGluZ1Bhc3NpdmVFZmZlY3RzUmVtYWluaW5nTGFuZXMiLCJwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zIiwic3VzcGVuc2VIYW5kbGVyIiwiY2FuY2VsUGVuZGluZ0NvbW1pdCIsInByZXBhcmVGcmVzaFN0YWNrIiwibWFya1Jvb3RTdXNwZW5kZWQiLCJlbnN1cmVSb290SXNTY2hlZHVsZWQiLCJwZXJmb3JtV29ya09uUm9vdCIsImZvcmNlU3luYyIsInNob3VsZFRpbWVTbGljZSIsImV4cGlyZWRMYW5lcyIsImV4aXRTdGF0dXMiLCJwcmV2RXhlY3V0aW9uQ29udGV4dCIsInByZXZEaXNwYXRjaGVyIiwicHVzaERpc3BhdGNoZXIiLCJwcmV2QXN5bmNEaXNwYXRjaGVyIiwicHVzaEFzeW5jRGlzcGF0Y2hlciIsInRocm93blZhbHVlIiwidGhyb3dBbmRVbndpbmRXb3JrTG9vcCIsInJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsiLCJob3N0RmliZXIiLCJjb21wbGV0ZVVuaXRPZldvcmsiLCJyZXNldFdvcmtJblByb2dyZXNzU3RhY2siLCJ3b3JrTG9vcENvbmN1cnJlbnQiLCJ0aHJvd25WYWx1ZSQxNjYiLCJoYW5kbGVUaHJvdyIsInJlbmRlclJvb3RDb25jdXJyZW50IiwicmVuZGVyUm9vdFN5bmMiLCJyZW5kZXJXYXNDb25jdXJyZW50IiwiaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzIiwiZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMiLCJ3YXNSb290RGVoeWRyYXRlZCIsInRpbWVvdXRIYW5kbGUiLCJzY2hlZHVsZVRpbWVvdXQiLCJjb21taXRSb290V2hlblJlYWR5IiwiZXJyb3JzIiwicmVjb3ZlcmFibGVFcnJvcnMiLCJ0cmFuc2l0aW9ucyIsImRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSIsInVwZGF0ZWRMYW5lcyIsInN1c3BlbmRlZFJldHJ5TGFuZXMiLCJkaWRTa2lwU3VzcGVuZGVkU2libGluZ3MiLCJzdXNwZW5kZWRDb21taXRSZWFzb24iLCJjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUiLCJjb21wbGV0ZWRSZW5kZXJFbmRUaW1lIiwidW5zdXNwZW5kIiwiaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMiLCJjb21taXQiLCJzdHlsZXNoZWV0VGltZXIiLCJ3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5IiwiY29tbWl0Um9vdCIsImNoZWNrIiwiZGlkQXR0ZW1wdEVudGlyZVRyZWUiLCJleHBpcmF0aW9uVGltZXMiLCJpbmRleCQ2IiwiZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwiLCJjYW5jZWxUaW1lb3V0IiwiYWxsRW50YW5nbGVkTGFuZXMiLCJpbmRleCQ0Iiwic2hvdWxkWWllbGRGb3JQcmVyZW5kZXJpbmciLCJ1bml0T2ZXb3JrIiwid29ya0xvb3BTeW5jIiwidGhyb3duVmFsdWUkMTY0IiwicGVyZm9ybVVuaXRPZldvcmsiLCJzdXNwZW5kZWRSZWFzb24iLCJyb290UmVuZGVyTGFuZXMiLCJhdHRhY2hQaW5nTGlzdGVuZXIiLCJtYXJrZXJJbnN0YW5jZXMiLCJjYXVzZSIsIndyYXBwZXJFcnJvciIsInRocm93RXhjZXB0aW9uIiwidW53aW5kVW5pdE9mV29yayIsInNraXBTaWJsaW5ncyIsInByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5IiwicmVuZGVyUHJpb3JpdHlMZXZlbCIsImZsdXNoUGFzc2l2ZUVmZmVjdHMiLCJjYWxsYmFja05vZGUiLCJjYWxsYmFja1ByaW9yaXR5IiwicmVtYWluaW5nTGFuZXMiLCJwcmV2aW91c2x5UGVuZGluZ0xhbmVzIiwiaW5kZXgkNyIsImhpZGRlblVwZGF0ZXNGb3JMYW5lIiwibWFya1Jvb3RGaW5pc2hlZCIsInNjaGVkdWxlQ2FsbGJhY2skMSIsImV2ZW50c0VuYWJsZWQiLCJfZW5hYmxlZCIsInNlbGVjdGlvbiIsImUkMjAiLCJpbmRleFdpdGhpbkFuY2hvciIsImluZGV4V2l0aGluRm9jdXMiLCJzZWxlY3Rpb25JbmZvcm1hdGlvbiIsInJlc29sdmVkUHJldlByb3BzIiwiY2xlYXJDb250YWluZXJTcGFyaW5nbHkiLCJjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMiLCJyZWxlYXNlUm9vdFBvb2xlZENhY2hlIiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdFJvb3QiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJjb21taXRSb290SW1wbCIsInJvb3QkMTcwIiwicmVuZGVyUHJpb3JpdHkiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdCIsInJvb3RGaWJlciIsInBpbmdDYWNoZSIsInRocmVhZElEcyIsInBpbmdTdXNwZW5kZWRSb290IiwicmV0cnlUaW1lZE91dEJvdW5kYXJ5IiwiYm91bmRhcnlGaWJlciIsImZpcnN0U2NoZWR1bGVkUm9vdCIsImxhc3RTY2hlZHVsZWRSb290IiwiZGlkU2NoZWR1bGVNaWNyb3Rhc2siLCJtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsiLCJpc0ZsdXNoaW5nV29yayIsImN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lIiwiY2IiLCJwcm9jZXNzUm9vdFNjaGVkdWxlSW5NaWNyb3Rhc2siLCJzY2hlZHVsZU1pY3JvdGFzayIsInN5bmNUcmFuc2l0aW9uTGFuZXMiLCJvbmx5TGVnYWN5IiwiZGlkUGVyZm9ybVNvbWVXb3JrIiwicm9vdCQxNzIiLCJwZXJmb3JtU3luY1dvcmtPblJvb3QiLCJjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQiLCJzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uIiwicHJldiIsInNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2siLCJpbmRleCQ1IiwicGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrIiwiZGlkVGltZW91dCIsIm9yaWdpbmFsQ2FsbGJhY2tOb2RlIiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAiLCJjb2VyY2VGb3JtQWN0aW9uUHJvcCIsImFjdGlvblByb3AiLCJjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIiLCJzdWJtaXR0ZXIiLCJ0ZW1wIiwiRm9ybURhdGEiLCJpJGpzY29tcCRpbmxpbmVfMTQzOSIsImV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDAiLCJ0b1VwcGVyQ2FzZSIsIm5vbkRlbGVnYXRlZEV2ZW50cyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJfZGlzcGF0Y2hRdWV1ZSRpIiwicHJldmlvdXNJbnN0YW5jZSIsImkkanNjb21wJDAiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMkaSIsInRhcmdldEVsZW1lbnQiLCJsaXN0ZW5lclNldEtleSIsImFkZFRyYXBwZWRFdmVudExpc3RlbmVyIiwibGlzdGVuVG9OYXRpdmVFdmVudCIsImlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIiLCJsaXN0ZW5pbmdNYXJrZXIiLCJyb290Q29udGFpbmVyRWxlbWVudCIsInRhcmdldENvbnRhaW5lciIsImxpc3RlbmVyV3JhcHBlciIsImRpc3BhdGNoRGlzY3JldGVFdmVudCIsImRpc3BhdGNoQ29udGludW91c0V2ZW50IiwiY2FwdHVyZSIsInBhc3NpdmUiLCJkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0iLCJ0YXJnZXRJbnN0JGpzY29tcCQwIiwiYW5jZXN0b3JJbnN0Iiwibm9kZVRhZyIsImdyYW5kVGFnIiwiU3ludGhldGljRXZlbnRDdG9yIiwiaW5DYXB0dXJlUGhhc2UiLCJhY2N1bXVsYXRlVGFyZ2V0T25seSIsInJlYWN0RXZlbnROYW1lIiwibGFzdEhvc3RDb21wb25lbnQiLCJfaW5zdGFuY2UiLCJjcmVhdGVEaXNwYXRjaExpc3RlbmVyIiwicGFyZW50V2luZG93IiwiZ2V0UGFyZW50IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudCIsImdldFRhcmdldEluc3RGdW5jIiwiaGFuZGxlRXZlbnRGdW5jIiwiZmFsbGJhY2tEYXRhIiwiZXZlbnRUeXBlIiwiZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyIsImNoYXIiLCJnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMiLCJtYXliZVRhcmdldEluc3QiLCJmb3JtQWN0aW9uIiwiZXh0cmFjdEV2ZW50cyQxIiwidGFyZ2V0RmliZXIiLCJjYXB0dXJlTmFtZSIsIl9pbnN0YW5jZTIiLCJ1bnNoaWZ0IiwiY29tbW9uIiwiX2luc3RhbmNlMyIsIk5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCIsIk5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCIsIm5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZSIsIm1hcmt1cCIsInNlcnZlclRleHQiLCJjbGllbnRUZXh0IiwiZm9ybUVuY1R5cGUiLCJmb3JtTWV0aG9kIiwiZm9ybVRhcmdldCIsImVuY1R5cGUiLCJfX2h0bWwiLCJtdXRlZCIsImlzTmFOIiwiZW5kc1dpdGgiLCJoYXNTcmMiLCJoYXNTcmNTZXQiLCJwcm9wVmFsdWUkMTg2IiwicGFyZW50TmFtZXNwYWNlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJsb2NhbFByb21pc2UiLCJxdWV1ZU1pY3JvdGFzayIsImhhbmRsZUVycm9ySW5OZXh0VGljayIsInBhcmVudEluc3RhbmNlIiwic3VzcGVuc2VJbnN0YW5jZSIsImRlcHRoIiwidGFyZ2V0SW5zdGFuY2UiLCJwcmV2aW91c1NpYmxpbmciLCJyb290Q29udGFpbmVySW5zdGFuY2UiLCJwcmVjb25uZWN0c1NldCIsImdldFJvb3ROb2RlIiwicHJldmlvdXNEaXNwYXRjaGVyIiwicHJldmlvdXNXYXNSZW5kZXJpbmciLCJ3YXNSZW5kZXJpbmciLCJmb3JtSW5zdCIsInByZWNvbm5lY3RBcyIsImdsb2JhbERvY3VtZW50IiwicHJlbG9hZFNlbGVjdG9yIiwiZ2V0U2NyaXB0S2V5IiwiZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5Iiwic2NyaXB0cyIsImFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0IiwibGluayIsImluc2VydFN0eWxlc2hlZXQiLCJsaW1pdGVkRXNjYXBlZEhyZWYiLCJjdXJyZW50UHJvcHMiLCJwcmVsb2FkUHJvcHMiLCJzdHlsZXMkMjQyIiwicmVzb3VyY2UkMjQzIiwiaHJlZkxhbmciLCJyYXdQcm9wcyIsInN0eWxlUHJvcHMiLCJpbnN0YW5jZSQyNDgiLCJub2RlcyIsInByaW9yIiwic3R5bGVzaGVldFByb3BzIiwic2NyaXB0UHJvcHMiLCJrZXlBdHRyaWJ1dGUiLCJjYWNoZXMiLCJub2RlS2V5IiwicHJlY2VkZW5jZXNCeVJvb3QiLCJpbnNlcnRTdHlsZXNoZWV0SW50b1Jvb3QiLCJwcmVjZWRlbmNlcyIsIkZpYmVyUm9vdE5vZGUiLCJoeWRyYXRlIiwiaW5jb21wbGV0ZVRyYW5zaXRpb25zIiwiY3JlYXRlRmliZXJSb290IiwiaW5pdGlhbENoaWxkcmVuIiwiaHlkcmF0aW9uQ2FsbGJhY2tzIiwiaXNTdHJpY3RNb2RlIiwidHJhbnNpdGlvbkNhbGxiYWNrcyIsImdldENvbnRleHRGb3JTdWJ0cmVlIiwicGFyZW50Q29tcG9uZW50IiwidXBkYXRlQ29udGFpbmVySW1wbCIsIm1hcmtSZXRyeUxhbmVJbXBsIiwibWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQiLCJhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbiIsImJsb2NrZWRPbiIsImZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQiLCJyZXR1cm5fdGFyZ2V0SW5zdCIsImNsZWFySWZDb250aW51b3VzRXZlbnQiLCJxdWV1ZWRGb2N1cyIsImFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQiLCJxdWV1ZWREcmFnIiwicXVldWVkTW91c2UiLCJxdWV1ZWRQb2ludGVycyIsInF1ZXVlZFBvaW50ZXJDYXB0dXJlcyIsInF1ZXVlSWZDb250aW51b3VzRXZlbnQiLCJkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMiLCJmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCIsImhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQiLCJxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMiLCJleGlzdGluZ1F1ZXVlZEV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsImF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldCIsInF1ZXVlZFRhcmdldCIsInByaW9yaXR5IiwicnVuV2l0aFByaW9yaXR5IiwiYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudCIsInF1ZXVlZEV2ZW50IiwibmV4dEJsb2NrZWRPbiIsIm5hdGl2ZUV2ZW50Q2xvbmUiLCJzaGlmdCIsImF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcCIsInJlcGxheVVuYmxvY2tlZEV2ZW50cyIsInNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZCIsInVuYmxvY2tlZCIsImxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSIsInNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZCIsImZvcm1SZXBsYXlpbmdRdWV1ZSIsInN1Ym1pdHRlck9yQWN0aW9uIiwidW5ibG9jayIsIiQkcmVhY3RGb3JtUmVwbGF5IiwiZm9ybVByb3BzIiwiUmVhY3RET01Sb290IiwiaW50ZXJuYWxSb290IiwiX2ludGVybmFsUm9vdCIsIlJlYWN0RE9NSHlkcmF0aW9uUm9vdCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsImlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTY4NiIsImNvbXBvbmVudE9yRWxlbWVudCIsInBhcmVudEEiLCJwYXJlbnRCIiwiZGlkRmluZENoaWxkIiwiY2hpbGQkMiIsImZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoIiwiaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjE2NSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsInJlY29uY2lsZXJWZXJzaW9uIiwiaG9vayRqc2NvbXAkaW5saW5lXzIxNjYiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsInJlYWN0RG9tQ2xpZW50X3Byb2R1Y3Rpb24iLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsInVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MiLCJoeWRyYXRlUm9vdCIsImNsaWVudE1vZHVsZSIsInVuc2FmZVdpbmRvdyIsIlNES19JTklUSUFMSVpFRCIsImdldFdtZVNkayIsImRlZmF1bHRXbWVTZGsiLCJzY3JpcHRJZCIsInNjcmlwdE5hbWUiLCJXbWVTZGtDb250ZXh0IiwiU2NyaXB0VGFiIiwidGFiSWQiLCJ0YWJMYWJlbCIsInRhYkVsZW1lbnRzIiwic2lkZWJhck1vZHVsZSIsIndtZVNkayIsInVuZGVmaW5lZCIsInVzZVdtZVNkayIsIlNpZGViYXIiLCJuYW1lc3BhY2VkVGFiSWQiLCJTaWRlYmFyTW9kdWxlIiwidXNlU2RrU2lkZWJhck1vZHVsZSIsInRhYlJlc3VsdCIsInNldFRhYlJlc3VsdCIsInJlZ2lzdGVyU2NyaXB0VGFiIiwicmVtb3ZlU2NyaXB0VGFiIiwidGFiUGFuZSIsInVzZVNjcmlwdFRhYkVsZW1lbnRzIiwiX2pzeHMiLCJBcHBDb21wb25lbnQiLCJfanN4IiwiQXBwIiwidGFiYmVkQ29tcG9uZW50IiwiYXNTY3JpcHRUYWIiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYm9vdHN0cmFwIl0sIm1hcHBpbmdzIjoiK1ZBV0EsSUFBSUEs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
